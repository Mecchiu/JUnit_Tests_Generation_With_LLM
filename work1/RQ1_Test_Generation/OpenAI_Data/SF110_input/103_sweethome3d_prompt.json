[
  {
    "numberTests": "ten",
    "original_code": "// URLContent.java\n/*\n * URLContent.java 25 avr. 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport com.eteks.sweethome3d.model.Content;\n\n/**\n * URL content for files, images...\n * @author Emmanuel Puybaret\n */\npublic class URLContent implements Content {\n\n    private static final long serialVersionUID \u003d 1L;\n\n    private URL url;\n\n    public URLContent(URL url) {\n        this.url \u003d url;\n    }\n\n    /**\n     * Returns the URL of this content.\n     */\n    public URL getURL() {\n        return this.url;\n    }\n\n    /**\n     * Returns an InputStream on the URL content.\n     * @throws IOException if URL stream can\u0027t be opened.\n     */\n    public InputStream openStream() throws IOException {\n        return this.url.openStream();\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the URL stored by this content\n     * references an entry in a JAR.\n     */\n    public boolean isJAREntry() {\n        return \"jar\".equals(this.url.getProtocol());\n    }\n\n    /**\n     * Returns the URL base of a JAR entry.\n     * @throws IllegalStateException if the URL of this content\n     *                    doesn\u0027t reference an entry in a JAR.\n     */\n    public URL getJAREntryURL() {\n        if (!isJAREntry()) {\n            throw new IllegalStateException(\"Content isn\u0027t a JAR entry\");\n        }\n        try {\n            String file \u003d this.url.getFile();\n            return new URL(file.substring(0, file.indexOf(\u0027!\u0027)));\n        } catch (MalformedURLException ex) {\n            throw new IllegalStateException(\"Invalid URL base for JAR entry\", ex);\n        }\n    }\n\n    /**\n     * Returns the name of a JAR entry.\n     * If the JAR entry in the URL given at creation time was encoded in application/x-www-form-urlencoded format,\n     * this method will return it unchanged and not decoded.\n     * @throws IllegalStateException if the URL of this content\n     *                    doesn\u0027t reference an entry in a JAR URL.\n     */\n    public String getJAREntryName() {\n        if (!isJAREntry()) {\n            throw new IllegalStateException(\"Content isn\u0027t a JAR entry\");\n        }\n        String file \u003d this.url.getFile();\n        return file.substring(file.indexOf(\u0027!\u0027) + 2);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the object in parameter is an URL content\n     * that references the same URL as this object.\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (obj \u003d\u003d this) {\n            return true;\n        } else if (obj instanceof URLContent) {\n            URLContent urlContent \u003d (URLContent) obj;\n            return urlContent.url \u003d\u003d this.url || urlContent.url.equals(this.url);\n        } else {\n            return false;\n        }\n    }\n\n    @Override\n    public int hashCode() {\n        return this.url.hashCode();\n    }\n}\n",
    "package": "com.eteks.sweethome3d.tools",
    "classname": "URLContent",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/URLContent.java",
    "test_prompt": "// URLContentTest.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport com.eteks.sweethome3d.model.Content;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link URLContent}.\n* It contains ten unit test cases for the {@link URLContent#openStream()} method.\n*/\nclass URLContentTest {",
    "method_signature": "openStream()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// OperatingSystem.java\n/*\n * OperatingSystem.java 1 nov. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\n\n/**\n * Tools used to test current user operating system.\n * @author Emmanuel Puybaret\n */\npublic class OperatingSystem {\n\n    private static final String EDITOR_SUB_FOLDER;\n\n    private static final String APPLICATION_SUB_FOLDER;\n\n    private static final String TEMPORARY_SUB_FOLDER;\n\n    private static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n    static {\n        // Retrieve sub folders where is stored application data\n        ResourceBundle resource \u003d ResourceBundle.getBundle(OperatingSystem.class.getName());\n        if (OperatingSystem.isMacOSX()) {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder.Mac OS X\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder.Mac OS X\");\n        } else if (OperatingSystem.isWindows()) {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder.Windows\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder.Windows\");\n        } else {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder\");\n        }\n        String temporarySubFolder;\n        try {\n            temporarySubFolder \u003d resource.getString(\"temporarySubFolder\");\n            if (temporarySubFolder.trim().length() \u003d\u003d 0) {\n                temporarySubFolder \u003d null;\n            }\n        } catch (MissingResourceException ex) {\n            temporarySubFolder \u003d \"work\";\n        }\n        try {\n            temporarySubFolder \u003d System.getProperty(\"com.eteks.sweethome3d.tools.temporarySubFolder\", temporarySubFolder);\n        } catch (AccessControlException ex) {\n            // Don\u0027t change temporarySubFolder value\n        }\n        TEMPORARY_SUB_FOLDER \u003d temporarySubFolder;\n        TEMPORARY_SESSION_SUB_FOLDER \u003d UUID.randomUUID().toString();\n    }\n\n    // This class contains only static methods\n    private OperatingSystem() {\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Linux.\n     */\n    public static boolean isLinux() {\n        return System.getProperty(\"os.name\").startsWith(\"Linux\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Windows.\n     */\n    public static boolean isWindows() {\n        return System.getProperty(\"os.name\").startsWith(\"Windows\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Mac OS X.\n     */\n    public static boolean isMacOSX() {\n        return System.getProperty(\"os.name\").startsWith(\"Mac OS X\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Mac OS X 10.5\n     * or superior.\n     */\n    public static boolean isMacOSXLeopardOrSuperior() {\n        // Just need to test is OS version is different of 10.4 because Sweet Home 3D\n        // isn\u0027t supported under Mac OS X versions previous to 10.4\n        return isMacOSX() \u0026\u0026 !System.getProperty(\"os.version\").startsWith(\"10.4\");\n    }\n\n    /**\n     * Returns a temporary file that will be deleted when JVM will exit.\n     * @throws IOException if the file couldn\u0027t be created\n     */\n    public static File createTemporaryFile(String prefix, String suffix) throws IOException {\n        File temporaryFolder;\n        try {\n            temporaryFolder \u003d getDefaultTemporaryFolder(true);\n        } catch (IOException ex) {\n            // In case creating default temporary folder failed, use default temporary files folder\n            temporaryFolder \u003d null;\n        }\n        File temporaryFile \u003d File.createTempFile(prefix, suffix, temporaryFolder);\n        temporaryFile.deleteOnExit();\n        return temporaryFile;\n    }\n\n    /**\n     * Deletes all the temporary files created with {@link #createTemporaryFile(String, String) createTemporaryFile}.\n     */\n    public static void deleteTemporaryFiles() {\n        try {\n            File temporaryFolder \u003d getDefaultTemporaryFolder(false);\n            if (temporaryFolder !\u003d null) {\n                for (File temporaryFile : temporaryFolder.listFiles()) {\n                    temporaryFile.delete();\n                }\n                temporaryFolder.delete();\n            }\n        } catch (IOException ex) {\n            // Ignore temporary folder that can\u0027t be found\n        } catch (AccessControlException ex) {\n        }\n    }\n\n    /**\n     * Returns the default folder used to store temporary files created in the program.\n     */\n    private synchronized static File getDefaultTemporaryFolder(boolean create) throws IOException {\n        if (TEMPORARY_SUB_FOLDER !\u003d null) {\n            File temporaryFolder \u003d new File(getDefaultApplicationFolder(), TEMPORARY_SUB_FOLDER);\n            final String versionPrefix \u003d Home.CURRENT_VERSION + \"-\";\n            final File sessionTemporaryFolder \u003d new File(temporaryFolder, versionPrefix + TEMPORARY_SESSION_SUB_FOLDER);\n            if (!sessionTemporaryFolder.exists()) {\n                // Retrieve existing folders working with same Sweet Home 3D version in temporary folder\n                final File[] siblingTemporaryFolders \u003d temporaryFolder.listFiles(new FileFilter() {\n\n                    public boolean accept(File file) {\n                        return file.isDirectory() \u0026\u0026 file.getName().startsWith(versionPrefix);\n                    }\n                });\n                // Create temporary folder\n                if (!sessionTemporaryFolder.mkdirs()) {\n                    throw new IOException(\"Can\u0027t create temporary folder \" + sessionTemporaryFolder);\n                } else {\n                    sessionTemporaryFolder.deleteOnExit();\n                }\n                // Launch a timer that updates modification date of the temporary folder each minute\n                final long updateDelay \u003d 60000;\n                new Timer(true).schedule(new TimerTask() {\n\n                    @Override\n                    public void run() {\n                        // Ensure modification date is always growing in case system time was adjusted\n                        sessionTemporaryFolder.setLastModified(Math.max(System.currentTimeMillis(), sessionTemporaryFolder.lastModified() + updateDelay));\n                    }\n                }, updateDelay, updateDelay);\n                if (siblingTemporaryFolders !\u003d null \u0026\u0026 siblingTemporaryFolders.length \u003e 0) {\n                    // Launch a timer that will delete in 10 min temporary folders older than a week\n                    final long deleteDelay \u003d 10 * 60000;\n                    final long age \u003d 7 * 24 * 3600000;\n                    new Timer(true).schedule(new TimerTask() {\n\n                        @Override\n                        public void run() {\n                            long now \u003d System.currentTimeMillis();\n                            for (File siblingTemporaryFolder : siblingTemporaryFolders) {\n                                if (siblingTemporaryFolder.exists() \u0026\u0026 now - siblingTemporaryFolder.lastModified() \u003e age) {\n                                    File[] temporaryFiles \u003d siblingTemporaryFolder.listFiles();\n                                    for (File temporaryFile : temporaryFiles) {\n                                        temporaryFile.delete();\n                                    }\n                                    siblingTemporaryFolder.delete();\n                                }\n                            }\n                        }\n                    }, deleteDelay);\n                }\n            }\n            return sessionTemporaryFolder;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns default application folder.\n     */\n    public static File getDefaultApplicationFolder() throws IOException {\n        File userApplicationFolder;\n        if (isMacOSX()) {\n            userApplicationFolder \u003d new File(MacOSXFileManager.getApplicationSupportFolder());\n        } else if (isWindows()) {\n            userApplicationFolder \u003d new File(System.getProperty(\"user.home\"), \"Application Data\");\n            // If user Application Data directory doesn\u0027t exist, use user home\n            if (!userApplicationFolder.exists()) {\n                userApplicationFolder \u003d new File(System.getProperty(\"user.home\"));\n            }\n        } else {\n            // Unix\n            userApplicationFolder \u003d new File(System.getProperty(\"user.home\"));\n        }\n        return new File(userApplicationFolder, EDITOR_SUB_FOLDER + File.separator + APPLICATION_SUB_FOLDER);\n    }\n\n    /**\n     * File manager class that accesses to Mac OS X specifics.\n     * Do not invoke methods of this class without checking first if\n     * \u003ccode\u003eos.name\u003c/code\u003e System property is \u003ccode\u003eMac OS X\u003c/code\u003e.\n     * This class requires some classes of \u003ccode\u003ecom.apple.eio\u003c/code\u003e package\n     * to compile.\n     */\n    private static class MacOSXFileManager {\n\n        public static String getApplicationSupportFolder() throws IOException {\n            // Find application support folder (0x61737570) for user domain (-32763)\n            return FileManager.findFolder((short) -32763, 0x61737570);\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.tools",
    "classname": "OperatingSystem",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem_0Test.java",
    "test_prompt": "// OperatingSystem_0Test.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains ten unit test cases for the {@link OperatingSystem#isLinux()} method.\n*/\nclass OperatingSystem_0Test {",
    "method_signature": "isLinux()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// OperatingSystem.java\n/*\n * OperatingSystem.java 1 nov. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\n\n/**\n * Tools used to test current user operating system.\n * @author Emmanuel Puybaret\n */\npublic class OperatingSystem {\n\n    private static final String EDITOR_SUB_FOLDER;\n\n    private static final String APPLICATION_SUB_FOLDER;\n\n    private static final String TEMPORARY_SUB_FOLDER;\n\n    private static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n    static {\n        // Retrieve sub folders where is stored application data\n        ResourceBundle resource \u003d ResourceBundle.getBundle(OperatingSystem.class.getName());\n        if (OperatingSystem.isMacOSX()) {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder.Mac OS X\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder.Mac OS X\");\n        } else if (OperatingSystem.isWindows()) {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder.Windows\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder.Windows\");\n        } else {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder\");\n        }\n        String temporarySubFolder;\n        try {\n            temporarySubFolder \u003d resource.getString(\"temporarySubFolder\");\n            if (temporarySubFolder.trim().length() \u003d\u003d 0) {\n                temporarySubFolder \u003d null;\n            }\n        } catch (MissingResourceException ex) {\n            temporarySubFolder \u003d \"work\";\n        }\n        try {\n            temporarySubFolder \u003d System.getProperty(\"com.eteks.sweethome3d.tools.temporarySubFolder\", temporarySubFolder);\n        } catch (AccessControlException ex) {\n            // Don\u0027t change temporarySubFolder value\n        }\n        TEMPORARY_SUB_FOLDER \u003d temporarySubFolder;\n        TEMPORARY_SESSION_SUB_FOLDER \u003d UUID.randomUUID().toString();\n    }\n\n    // This class contains only static methods\n    private OperatingSystem() {\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Linux.\n     */\n    public static boolean isLinux() {\n        return System.getProperty(\"os.name\").startsWith(\"Linux\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Windows.\n     */\n    public static boolean isWindows() {\n        return System.getProperty(\"os.name\").startsWith(\"Windows\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Mac OS X.\n     */\n    public static boolean isMacOSX() {\n        return System.getProperty(\"os.name\").startsWith(\"Mac OS X\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Mac OS X 10.5\n     * or superior.\n     */\n    public static boolean isMacOSXLeopardOrSuperior() {\n        // Just need to test is OS version is different of 10.4 because Sweet Home 3D\n        // isn\u0027t supported under Mac OS X versions previous to 10.4\n        return isMacOSX() \u0026\u0026 !System.getProperty(\"os.version\").startsWith(\"10.4\");\n    }\n\n    /**\n     * Returns a temporary file that will be deleted when JVM will exit.\n     * @throws IOException if the file couldn\u0027t be created\n     */\n    public static File createTemporaryFile(String prefix, String suffix) throws IOException {\n        File temporaryFolder;\n        try {\n            temporaryFolder \u003d getDefaultTemporaryFolder(true);\n        } catch (IOException ex) {\n            // In case creating default temporary folder failed, use default temporary files folder\n            temporaryFolder \u003d null;\n        }\n        File temporaryFile \u003d File.createTempFile(prefix, suffix, temporaryFolder);\n        temporaryFile.deleteOnExit();\n        return temporaryFile;\n    }\n\n    /**\n     * Deletes all the temporary files created with {@link #createTemporaryFile(String, String) createTemporaryFile}.\n     */\n    public static void deleteTemporaryFiles() {\n        try {\n            File temporaryFolder \u003d getDefaultTemporaryFolder(false);\n            if (temporaryFolder !\u003d null) {\n                for (File temporaryFile : temporaryFolder.listFiles()) {\n                    temporaryFile.delete();\n                }\n                temporaryFolder.delete();\n            }\n        } catch (IOException ex) {\n            // Ignore temporary folder that can\u0027t be found\n        } catch (AccessControlException ex) {\n        }\n    }\n\n    /**\n     * Returns the default folder used to store temporary files created in the program.\n     */\n    private synchronized static File getDefaultTemporaryFolder(boolean create) throws IOException {\n        if (TEMPORARY_SUB_FOLDER !\u003d null) {\n            File temporaryFolder \u003d new File(getDefaultApplicationFolder(), TEMPORARY_SUB_FOLDER);\n            final String versionPrefix \u003d Home.CURRENT_VERSION + \"-\";\n            final File sessionTemporaryFolder \u003d new File(temporaryFolder, versionPrefix + TEMPORARY_SESSION_SUB_FOLDER);\n            if (!sessionTemporaryFolder.exists()) {\n                // Retrieve existing folders working with same Sweet Home 3D version in temporary folder\n                final File[] siblingTemporaryFolders \u003d temporaryFolder.listFiles(new FileFilter() {\n\n                    public boolean accept(File file) {\n                        return file.isDirectory() \u0026\u0026 file.getName().startsWith(versionPrefix);\n                    }\n                });\n                // Create temporary folder\n                if (!sessionTemporaryFolder.mkdirs()) {\n                    throw new IOException(\"Can\u0027t create temporary folder \" + sessionTemporaryFolder);\n                } else {\n                    sessionTemporaryFolder.deleteOnExit();\n                }\n                // Launch a timer that updates modification date of the temporary folder each minute\n                final long updateDelay \u003d 60000;\n                new Timer(true).schedule(new TimerTask() {\n\n                    @Override\n                    public void run() {\n                        // Ensure modification date is always growing in case system time was adjusted\n                        sessionTemporaryFolder.setLastModified(Math.max(System.currentTimeMillis(), sessionTemporaryFolder.lastModified() + updateDelay));\n                    }\n                }, updateDelay, updateDelay);\n                if (siblingTemporaryFolders !\u003d null \u0026\u0026 siblingTemporaryFolders.length \u003e 0) {\n                    // Launch a timer that will delete in 10 min temporary folders older than a week\n                    final long deleteDelay \u003d 10 * 60000;\n                    final long age \u003d 7 * 24 * 3600000;\n                    new Timer(true).schedule(new TimerTask() {\n\n                        @Override\n                        public void run() {\n                            long now \u003d System.currentTimeMillis();\n                            for (File siblingTemporaryFolder : siblingTemporaryFolders) {\n                                if (siblingTemporaryFolder.exists() \u0026\u0026 now - siblingTemporaryFolder.lastModified() \u003e age) {\n                                    File[] temporaryFiles \u003d siblingTemporaryFolder.listFiles();\n                                    for (File temporaryFile : temporaryFiles) {\n                                        temporaryFile.delete();\n                                    }\n                                    siblingTemporaryFolder.delete();\n                                }\n                            }\n                        }\n                    }, deleteDelay);\n                }\n            }\n            return sessionTemporaryFolder;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns default application folder.\n     */\n    public static File getDefaultApplicationFolder() throws IOException {\n        File userApplicationFolder;\n        if (isMacOSX()) {\n            userApplicationFolder \u003d new File(MacOSXFileManager.getApplicationSupportFolder());\n        } else if (isWindows()) {\n            userApplicationFolder \u003d new File(System.getProperty(\"user.home\"), \"Application Data\");\n            // If user Application Data directory doesn\u0027t exist, use user home\n            if (!userApplicationFolder.exists()) {\n                userApplicationFolder \u003d new File(System.getProperty(\"user.home\"));\n            }\n        } else {\n            // Unix\n            userApplicationFolder \u003d new File(System.getProperty(\"user.home\"));\n        }\n        return new File(userApplicationFolder, EDITOR_SUB_FOLDER + File.separator + APPLICATION_SUB_FOLDER);\n    }\n\n    /**\n     * File manager class that accesses to Mac OS X specifics.\n     * Do not invoke methods of this class without checking first if\n     * \u003ccode\u003eos.name\u003c/code\u003e System property is \u003ccode\u003eMac OS X\u003c/code\u003e.\n     * This class requires some classes of \u003ccode\u003ecom.apple.eio\u003c/code\u003e package\n     * to compile.\n     */\n    private static class MacOSXFileManager {\n\n        public static String getApplicationSupportFolder() throws IOException {\n            // Find application support folder (0x61737570) for user domain (-32763)\n            return FileManager.findFolder((short) -32763, 0x61737570);\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.tools",
    "classname": "OperatingSystem",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem_1Test.java",
    "test_prompt": "// OperatingSystem_1Test.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains ten unit test cases for the {@link OperatingSystem#isWindows()} method.\n*/\nclass OperatingSystem_1Test {",
    "method_signature": "isWindows()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// OperatingSystem.java\n/*\n * OperatingSystem.java 1 nov. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\n\n/**\n * Tools used to test current user operating system.\n * @author Emmanuel Puybaret\n */\npublic class OperatingSystem {\n\n    private static final String EDITOR_SUB_FOLDER;\n\n    private static final String APPLICATION_SUB_FOLDER;\n\n    private static final String TEMPORARY_SUB_FOLDER;\n\n    private static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n    static {\n        // Retrieve sub folders where is stored application data\n        ResourceBundle resource \u003d ResourceBundle.getBundle(OperatingSystem.class.getName());\n        if (OperatingSystem.isMacOSX()) {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder.Mac OS X\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder.Mac OS X\");\n        } else if (OperatingSystem.isWindows()) {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder.Windows\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder.Windows\");\n        } else {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder\");\n        }\n        String temporarySubFolder;\n        try {\n            temporarySubFolder \u003d resource.getString(\"temporarySubFolder\");\n            if (temporarySubFolder.trim().length() \u003d\u003d 0) {\n                temporarySubFolder \u003d null;\n            }\n        } catch (MissingResourceException ex) {\n            temporarySubFolder \u003d \"work\";\n        }\n        try {\n            temporarySubFolder \u003d System.getProperty(\"com.eteks.sweethome3d.tools.temporarySubFolder\", temporarySubFolder);\n        } catch (AccessControlException ex) {\n            // Don\u0027t change temporarySubFolder value\n        }\n        TEMPORARY_SUB_FOLDER \u003d temporarySubFolder;\n        TEMPORARY_SESSION_SUB_FOLDER \u003d UUID.randomUUID().toString();\n    }\n\n    // This class contains only static methods\n    private OperatingSystem() {\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Linux.\n     */\n    public static boolean isLinux() {\n        return System.getProperty(\"os.name\").startsWith(\"Linux\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Windows.\n     */\n    public static boolean isWindows() {\n        return System.getProperty(\"os.name\").startsWith(\"Windows\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Mac OS X.\n     */\n    public static boolean isMacOSX() {\n        return System.getProperty(\"os.name\").startsWith(\"Mac OS X\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Mac OS X 10.5\n     * or superior.\n     */\n    public static boolean isMacOSXLeopardOrSuperior() {\n        // Just need to test is OS version is different of 10.4 because Sweet Home 3D\n        // isn\u0027t supported under Mac OS X versions previous to 10.4\n        return isMacOSX() \u0026\u0026 !System.getProperty(\"os.version\").startsWith(\"10.4\");\n    }\n\n    /**\n     * Returns a temporary file that will be deleted when JVM will exit.\n     * @throws IOException if the file couldn\u0027t be created\n     */\n    public static File createTemporaryFile(String prefix, String suffix) throws IOException {\n        File temporaryFolder;\n        try {\n            temporaryFolder \u003d getDefaultTemporaryFolder(true);\n        } catch (IOException ex) {\n            // In case creating default temporary folder failed, use default temporary files folder\n            temporaryFolder \u003d null;\n        }\n        File temporaryFile \u003d File.createTempFile(prefix, suffix, temporaryFolder);\n        temporaryFile.deleteOnExit();\n        return temporaryFile;\n    }\n\n    /**\n     * Deletes all the temporary files created with {@link #createTemporaryFile(String, String) createTemporaryFile}.\n     */\n    public static void deleteTemporaryFiles() {\n        try {\n            File temporaryFolder \u003d getDefaultTemporaryFolder(false);\n            if (temporaryFolder !\u003d null) {\n                for (File temporaryFile : temporaryFolder.listFiles()) {\n                    temporaryFile.delete();\n                }\n                temporaryFolder.delete();\n            }\n        } catch (IOException ex) {\n            // Ignore temporary folder that can\u0027t be found\n        } catch (AccessControlException ex) {\n        }\n    }\n\n    /**\n     * Returns the default folder used to store temporary files created in the program.\n     */\n    private synchronized static File getDefaultTemporaryFolder(boolean create) throws IOException {\n        if (TEMPORARY_SUB_FOLDER !\u003d null) {\n            File temporaryFolder \u003d new File(getDefaultApplicationFolder(), TEMPORARY_SUB_FOLDER);\n            final String versionPrefix \u003d Home.CURRENT_VERSION + \"-\";\n            final File sessionTemporaryFolder \u003d new File(temporaryFolder, versionPrefix + TEMPORARY_SESSION_SUB_FOLDER);\n            if (!sessionTemporaryFolder.exists()) {\n                // Retrieve existing folders working with same Sweet Home 3D version in temporary folder\n                final File[] siblingTemporaryFolders \u003d temporaryFolder.listFiles(new FileFilter() {\n\n                    public boolean accept(File file) {\n                        return file.isDirectory() \u0026\u0026 file.getName().startsWith(versionPrefix);\n                    }\n                });\n                // Create temporary folder\n                if (!sessionTemporaryFolder.mkdirs()) {\n                    throw new IOException(\"Can\u0027t create temporary folder \" + sessionTemporaryFolder);\n                } else {\n                    sessionTemporaryFolder.deleteOnExit();\n                }\n                // Launch a timer that updates modification date of the temporary folder each minute\n                final long updateDelay \u003d 60000;\n                new Timer(true).schedule(new TimerTask() {\n\n                    @Override\n                    public void run() {\n                        // Ensure modification date is always growing in case system time was adjusted\n                        sessionTemporaryFolder.setLastModified(Math.max(System.currentTimeMillis(), sessionTemporaryFolder.lastModified() + updateDelay));\n                    }\n                }, updateDelay, updateDelay);\n                if (siblingTemporaryFolders !\u003d null \u0026\u0026 siblingTemporaryFolders.length \u003e 0) {\n                    // Launch a timer that will delete in 10 min temporary folders older than a week\n                    final long deleteDelay \u003d 10 * 60000;\n                    final long age \u003d 7 * 24 * 3600000;\n                    new Timer(true).schedule(new TimerTask() {\n\n                        @Override\n                        public void run() {\n                            long now \u003d System.currentTimeMillis();\n                            for (File siblingTemporaryFolder : siblingTemporaryFolders) {\n                                if (siblingTemporaryFolder.exists() \u0026\u0026 now - siblingTemporaryFolder.lastModified() \u003e age) {\n                                    File[] temporaryFiles \u003d siblingTemporaryFolder.listFiles();\n                                    for (File temporaryFile : temporaryFiles) {\n                                        temporaryFile.delete();\n                                    }\n                                    siblingTemporaryFolder.delete();\n                                }\n                            }\n                        }\n                    }, deleteDelay);\n                }\n            }\n            return sessionTemporaryFolder;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns default application folder.\n     */\n    public static File getDefaultApplicationFolder() throws IOException {\n        File userApplicationFolder;\n        if (isMacOSX()) {\n            userApplicationFolder \u003d new File(MacOSXFileManager.getApplicationSupportFolder());\n        } else if (isWindows()) {\n            userApplicationFolder \u003d new File(System.getProperty(\"user.home\"), \"Application Data\");\n            // If user Application Data directory doesn\u0027t exist, use user home\n            if (!userApplicationFolder.exists()) {\n                userApplicationFolder \u003d new File(System.getProperty(\"user.home\"));\n            }\n        } else {\n            // Unix\n            userApplicationFolder \u003d new File(System.getProperty(\"user.home\"));\n        }\n        return new File(userApplicationFolder, EDITOR_SUB_FOLDER + File.separator + APPLICATION_SUB_FOLDER);\n    }\n\n    /**\n     * File manager class that accesses to Mac OS X specifics.\n     * Do not invoke methods of this class without checking first if\n     * \u003ccode\u003eos.name\u003c/code\u003e System property is \u003ccode\u003eMac OS X\u003c/code\u003e.\n     * This class requires some classes of \u003ccode\u003ecom.apple.eio\u003c/code\u003e package\n     * to compile.\n     */\n    private static class MacOSXFileManager {\n\n        public static String getApplicationSupportFolder() throws IOException {\n            // Find application support folder (0x61737570) for user domain (-32763)\n            return FileManager.findFolder((short) -32763, 0x61737570);\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.tools",
    "classname": "OperatingSystem",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem_2Test.java",
    "test_prompt": "// OperatingSystem_2Test.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains ten unit test cases for the {@link OperatingSystem#isMacOSX()} method.\n*/\nclass OperatingSystem_2Test {",
    "method_signature": "isMacOSX()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// OperatingSystem.java\n/*\n * OperatingSystem.java 1 nov. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\n\n/**\n * Tools used to test current user operating system.\n * @author Emmanuel Puybaret\n */\npublic class OperatingSystem {\n\n    private static final String EDITOR_SUB_FOLDER;\n\n    private static final String APPLICATION_SUB_FOLDER;\n\n    private static final String TEMPORARY_SUB_FOLDER;\n\n    private static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n    static {\n        // Retrieve sub folders where is stored application data\n        ResourceBundle resource \u003d ResourceBundle.getBundle(OperatingSystem.class.getName());\n        if (OperatingSystem.isMacOSX()) {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder.Mac OS X\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder.Mac OS X\");\n        } else if (OperatingSystem.isWindows()) {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder.Windows\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder.Windows\");\n        } else {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder\");\n        }\n        String temporarySubFolder;\n        try {\n            temporarySubFolder \u003d resource.getString(\"temporarySubFolder\");\n            if (temporarySubFolder.trim().length() \u003d\u003d 0) {\n                temporarySubFolder \u003d null;\n            }\n        } catch (MissingResourceException ex) {\n            temporarySubFolder \u003d \"work\";\n        }\n        try {\n            temporarySubFolder \u003d System.getProperty(\"com.eteks.sweethome3d.tools.temporarySubFolder\", temporarySubFolder);\n        } catch (AccessControlException ex) {\n            // Don\u0027t change temporarySubFolder value\n        }\n        TEMPORARY_SUB_FOLDER \u003d temporarySubFolder;\n        TEMPORARY_SESSION_SUB_FOLDER \u003d UUID.randomUUID().toString();\n    }\n\n    // This class contains only static methods\n    private OperatingSystem() {\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Linux.\n     */\n    public static boolean isLinux() {\n        return System.getProperty(\"os.name\").startsWith(\"Linux\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Windows.\n     */\n    public static boolean isWindows() {\n        return System.getProperty(\"os.name\").startsWith(\"Windows\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Mac OS X.\n     */\n    public static boolean isMacOSX() {\n        return System.getProperty(\"os.name\").startsWith(\"Mac OS X\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Mac OS X 10.5\n     * or superior.\n     */\n    public static boolean isMacOSXLeopardOrSuperior() {\n        // Just need to test is OS version is different of 10.4 because Sweet Home 3D\n        // isn\u0027t supported under Mac OS X versions previous to 10.4\n        return isMacOSX() \u0026\u0026 !System.getProperty(\"os.version\").startsWith(\"10.4\");\n    }\n\n    /**\n     * Returns a temporary file that will be deleted when JVM will exit.\n     * @throws IOException if the file couldn\u0027t be created\n     */\n    public static File createTemporaryFile(String prefix, String suffix) throws IOException {\n        File temporaryFolder;\n        try {\n            temporaryFolder \u003d getDefaultTemporaryFolder(true);\n        } catch (IOException ex) {\n            // In case creating default temporary folder failed, use default temporary files folder\n            temporaryFolder \u003d null;\n        }\n        File temporaryFile \u003d File.createTempFile(prefix, suffix, temporaryFolder);\n        temporaryFile.deleteOnExit();\n        return temporaryFile;\n    }\n\n    /**\n     * Deletes all the temporary files created with {@link #createTemporaryFile(String, String) createTemporaryFile}.\n     */\n    public static void deleteTemporaryFiles() {\n        try {\n            File temporaryFolder \u003d getDefaultTemporaryFolder(false);\n            if (temporaryFolder !\u003d null) {\n                for (File temporaryFile : temporaryFolder.listFiles()) {\n                    temporaryFile.delete();\n                }\n                temporaryFolder.delete();\n            }\n        } catch (IOException ex) {\n            // Ignore temporary folder that can\u0027t be found\n        } catch (AccessControlException ex) {\n        }\n    }\n\n    /**\n     * Returns the default folder used to store temporary files created in the program.\n     */\n    private synchronized static File getDefaultTemporaryFolder(boolean create) throws IOException {\n        if (TEMPORARY_SUB_FOLDER !\u003d null) {\n            File temporaryFolder \u003d new File(getDefaultApplicationFolder(), TEMPORARY_SUB_FOLDER);\n            final String versionPrefix \u003d Home.CURRENT_VERSION + \"-\";\n            final File sessionTemporaryFolder \u003d new File(temporaryFolder, versionPrefix + TEMPORARY_SESSION_SUB_FOLDER);\n            if (!sessionTemporaryFolder.exists()) {\n                // Retrieve existing folders working with same Sweet Home 3D version in temporary folder\n                final File[] siblingTemporaryFolders \u003d temporaryFolder.listFiles(new FileFilter() {\n\n                    public boolean accept(File file) {\n                        return file.isDirectory() \u0026\u0026 file.getName().startsWith(versionPrefix);\n                    }\n                });\n                // Create temporary folder\n                if (!sessionTemporaryFolder.mkdirs()) {\n                    throw new IOException(\"Can\u0027t create temporary folder \" + sessionTemporaryFolder);\n                } else {\n                    sessionTemporaryFolder.deleteOnExit();\n                }\n                // Launch a timer that updates modification date of the temporary folder each minute\n                final long updateDelay \u003d 60000;\n                new Timer(true).schedule(new TimerTask() {\n\n                    @Override\n                    public void run() {\n                        // Ensure modification date is always growing in case system time was adjusted\n                        sessionTemporaryFolder.setLastModified(Math.max(System.currentTimeMillis(), sessionTemporaryFolder.lastModified() + updateDelay));\n                    }\n                }, updateDelay, updateDelay);\n                if (siblingTemporaryFolders !\u003d null \u0026\u0026 siblingTemporaryFolders.length \u003e 0) {\n                    // Launch a timer that will delete in 10 min temporary folders older than a week\n                    final long deleteDelay \u003d 10 * 60000;\n                    final long age \u003d 7 * 24 * 3600000;\n                    new Timer(true).schedule(new TimerTask() {\n\n                        @Override\n                        public void run() {\n                            long now \u003d System.currentTimeMillis();\n                            for (File siblingTemporaryFolder : siblingTemporaryFolders) {\n                                if (siblingTemporaryFolder.exists() \u0026\u0026 now - siblingTemporaryFolder.lastModified() \u003e age) {\n                                    File[] temporaryFiles \u003d siblingTemporaryFolder.listFiles();\n                                    for (File temporaryFile : temporaryFiles) {\n                                        temporaryFile.delete();\n                                    }\n                                    siblingTemporaryFolder.delete();\n                                }\n                            }\n                        }\n                    }, deleteDelay);\n                }\n            }\n            return sessionTemporaryFolder;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns default application folder.\n     */\n    public static File getDefaultApplicationFolder() throws IOException {\n        File userApplicationFolder;\n        if (isMacOSX()) {\n            userApplicationFolder \u003d new File(MacOSXFileManager.getApplicationSupportFolder());\n        } else if (isWindows()) {\n            userApplicationFolder \u003d new File(System.getProperty(\"user.home\"), \"Application Data\");\n            // If user Application Data directory doesn\u0027t exist, use user home\n            if (!userApplicationFolder.exists()) {\n                userApplicationFolder \u003d new File(System.getProperty(\"user.home\"));\n            }\n        } else {\n            // Unix\n            userApplicationFolder \u003d new File(System.getProperty(\"user.home\"));\n        }\n        return new File(userApplicationFolder, EDITOR_SUB_FOLDER + File.separator + APPLICATION_SUB_FOLDER);\n    }\n\n    /**\n     * File manager class that accesses to Mac OS X specifics.\n     * Do not invoke methods of this class without checking first if\n     * \u003ccode\u003eos.name\u003c/code\u003e System property is \u003ccode\u003eMac OS X\u003c/code\u003e.\n     * This class requires some classes of \u003ccode\u003ecom.apple.eio\u003c/code\u003e package\n     * to compile.\n     */\n    private static class MacOSXFileManager {\n\n        public static String getApplicationSupportFolder() throws IOException {\n            // Find application support folder (0x61737570) for user domain (-32763)\n            return FileManager.findFolder((short) -32763, 0x61737570);\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.tools",
    "classname": "OperatingSystem",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem_3Test.java",
    "test_prompt": "// OperatingSystem_3Test.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains ten unit test cases for the {@link OperatingSystem#isMacOSXLeopardOrSuperior()} method.\n*/\nclass OperatingSystem_3Test {",
    "method_signature": "isMacOSXLeopardOrSuperior()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// OperatingSystem.java\n/*\n * OperatingSystem.java 1 nov. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\n\n/**\n * Tools used to test current user operating system.\n * @author Emmanuel Puybaret\n */\npublic class OperatingSystem {\n\n    private static final String EDITOR_SUB_FOLDER;\n\n    private static final String APPLICATION_SUB_FOLDER;\n\n    private static final String TEMPORARY_SUB_FOLDER;\n\n    private static final String TEMPORARY_SESSION_SUB_FOLDER;\n\n    static {\n        // Retrieve sub folders where is stored application data\n        ResourceBundle resource \u003d ResourceBundle.getBundle(OperatingSystem.class.getName());\n        if (OperatingSystem.isMacOSX()) {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder.Mac OS X\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder.Mac OS X\");\n        } else if (OperatingSystem.isWindows()) {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder.Windows\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder.Windows\");\n        } else {\n            EDITOR_SUB_FOLDER \u003d resource.getString(\"editorSubFolder\");\n            APPLICATION_SUB_FOLDER \u003d resource.getString(\"applicationSubFolder\");\n        }\n        String temporarySubFolder;\n        try {\n            temporarySubFolder \u003d resource.getString(\"temporarySubFolder\");\n            if (temporarySubFolder.trim().length() \u003d\u003d 0) {\n                temporarySubFolder \u003d null;\n            }\n        } catch (MissingResourceException ex) {\n            temporarySubFolder \u003d \"work\";\n        }\n        try {\n            temporarySubFolder \u003d System.getProperty(\"com.eteks.sweethome3d.tools.temporarySubFolder\", temporarySubFolder);\n        } catch (AccessControlException ex) {\n            // Don\u0027t change temporarySubFolder value\n        }\n        TEMPORARY_SUB_FOLDER \u003d temporarySubFolder;\n        TEMPORARY_SESSION_SUB_FOLDER \u003d UUID.randomUUID().toString();\n    }\n\n    // This class contains only static methods\n    private OperatingSystem() {\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Linux.\n     */\n    public static boolean isLinux() {\n        return System.getProperty(\"os.name\").startsWith(\"Linux\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Windows.\n     */\n    public static boolean isWindows() {\n        return System.getProperty(\"os.name\").startsWith(\"Windows\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Mac OS X.\n     */\n    public static boolean isMacOSX() {\n        return System.getProperty(\"os.name\").startsWith(\"Mac OS X\");\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if current operating is Mac OS X 10.5\n     * or superior.\n     */\n    public static boolean isMacOSXLeopardOrSuperior() {\n        // Just need to test is OS version is different of 10.4 because Sweet Home 3D\n        // isn\u0027t supported under Mac OS X versions previous to 10.4\n        return isMacOSX() \u0026\u0026 !System.getProperty(\"os.version\").startsWith(\"10.4\");\n    }\n\n    /**\n     * Returns a temporary file that will be deleted when JVM will exit.\n     * @throws IOException if the file couldn\u0027t be created\n     */\n    public static File createTemporaryFile(String prefix, String suffix) throws IOException {\n        File temporaryFolder;\n        try {\n            temporaryFolder \u003d getDefaultTemporaryFolder(true);\n        } catch (IOException ex) {\n            // In case creating default temporary folder failed, use default temporary files folder\n            temporaryFolder \u003d null;\n        }\n        File temporaryFile \u003d File.createTempFile(prefix, suffix, temporaryFolder);\n        temporaryFile.deleteOnExit();\n        return temporaryFile;\n    }\n\n    /**\n     * Deletes all the temporary files created with {@link #createTemporaryFile(String, String) createTemporaryFile}.\n     */\n    public static void deleteTemporaryFiles() {\n        try {\n            File temporaryFolder \u003d getDefaultTemporaryFolder(false);\n            if (temporaryFolder !\u003d null) {\n                for (File temporaryFile : temporaryFolder.listFiles()) {\n                    temporaryFile.delete();\n                }\n                temporaryFolder.delete();\n            }\n        } catch (IOException ex) {\n            // Ignore temporary folder that can\u0027t be found\n        } catch (AccessControlException ex) {\n        }\n    }\n\n    /**\n     * Returns the default folder used to store temporary files created in the program.\n     */\n    private synchronized static File getDefaultTemporaryFolder(boolean create) throws IOException {\n        if (TEMPORARY_SUB_FOLDER !\u003d null) {\n            File temporaryFolder \u003d new File(getDefaultApplicationFolder(), TEMPORARY_SUB_FOLDER);\n            final String versionPrefix \u003d Home.CURRENT_VERSION + \"-\";\n            final File sessionTemporaryFolder \u003d new File(temporaryFolder, versionPrefix + TEMPORARY_SESSION_SUB_FOLDER);\n            if (!sessionTemporaryFolder.exists()) {\n                // Retrieve existing folders working with same Sweet Home 3D version in temporary folder\n                final File[] siblingTemporaryFolders \u003d temporaryFolder.listFiles(new FileFilter() {\n\n                    public boolean accept(File file) {\n                        return file.isDirectory() \u0026\u0026 file.getName().startsWith(versionPrefix);\n                    }\n                });\n                // Create temporary folder\n                if (!sessionTemporaryFolder.mkdirs()) {\n                    throw new IOException(\"Can\u0027t create temporary folder \" + sessionTemporaryFolder);\n                } else {\n                    sessionTemporaryFolder.deleteOnExit();\n                }\n                // Launch a timer that updates modification date of the temporary folder each minute\n                final long updateDelay \u003d 60000;\n                new Timer(true).schedule(new TimerTask() {\n\n                    @Override\n                    public void run() {\n                        // Ensure modification date is always growing in case system time was adjusted\n                        sessionTemporaryFolder.setLastModified(Math.max(System.currentTimeMillis(), sessionTemporaryFolder.lastModified() + updateDelay));\n                    }\n                }, updateDelay, updateDelay);\n                if (siblingTemporaryFolders !\u003d null \u0026\u0026 siblingTemporaryFolders.length \u003e 0) {\n                    // Launch a timer that will delete in 10 min temporary folders older than a week\n                    final long deleteDelay \u003d 10 * 60000;\n                    final long age \u003d 7 * 24 * 3600000;\n                    new Timer(true).schedule(new TimerTask() {\n\n                        @Override\n                        public void run() {\n                            long now \u003d System.currentTimeMillis();\n                            for (File siblingTemporaryFolder : siblingTemporaryFolders) {\n                                if (siblingTemporaryFolder.exists() \u0026\u0026 now - siblingTemporaryFolder.lastModified() \u003e age) {\n                                    File[] temporaryFiles \u003d siblingTemporaryFolder.listFiles();\n                                    for (File temporaryFile : temporaryFiles) {\n                                        temporaryFile.delete();\n                                    }\n                                    siblingTemporaryFolder.delete();\n                                }\n                            }\n                        }\n                    }, deleteDelay);\n                }\n            }\n            return sessionTemporaryFolder;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns default application folder.\n     */\n    public static File getDefaultApplicationFolder() throws IOException {\n        File userApplicationFolder;\n        if (isMacOSX()) {\n            userApplicationFolder \u003d new File(MacOSXFileManager.getApplicationSupportFolder());\n        } else if (isWindows()) {\n            userApplicationFolder \u003d new File(System.getProperty(\"user.home\"), \"Application Data\");\n            // If user Application Data directory doesn\u0027t exist, use user home\n            if (!userApplicationFolder.exists()) {\n                userApplicationFolder \u003d new File(System.getProperty(\"user.home\"));\n            }\n        } else {\n            // Unix\n            userApplicationFolder \u003d new File(System.getProperty(\"user.home\"));\n        }\n        return new File(userApplicationFolder, EDITOR_SUB_FOLDER + File.separator + APPLICATION_SUB_FOLDER);\n    }\n\n    /**\n     * File manager class that accesses to Mac OS X specifics.\n     * Do not invoke methods of this class without checking first if\n     * \u003ccode\u003eos.name\u003c/code\u003e System property is \u003ccode\u003eMac OS X\u003c/code\u003e.\n     * This class requires some classes of \u003ccode\u003ecom.apple.eio\u003c/code\u003e package\n     * to compile.\n     */\n    private static class MacOSXFileManager {\n\n        public static String getApplicationSupportFolder() throws IOException {\n            // Find application support folder (0x61737570) for user domain (-32763)\n            return FileManager.findFolder((short) -32763, 0x61737570);\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.tools",
    "classname": "OperatingSystem",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem_5Test.java",
    "test_prompt": "// OperatingSystem_5Test.java\npackage com.eteks.sweethome3d.tools;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.security.AccessControlException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.UUID;\nimport com.apple.eio.FileManager;\nimport com.eteks.sweethome3d.model.Home;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OperatingSystem}.\n* It contains ten unit test cases for the {@link OperatingSystem#getDefaultApplicationFolder()} method.\n*/\nclass OperatingSystem_5Test {",
    "method_signature": "getDefaultApplicationFolder()",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// TextureChoiceComponent.java\n/*\n * TextureButton.java 05 oct. 2007\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.AffineTransform;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport javax.swing.AbstractListModel;\nimport javax.swing.BorderFactory;\nimport javax.swing.DefaultListCellRenderer;\nimport javax.swing.Icon;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.TransferHandler;\nimport javax.swing.border.EtchedBorder;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.HomeTexture;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.TextureChoiceController;\nimport com.eteks.sweethome3d.viewcontroller.TextureChoiceView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * Button displaying a texture as an icon. When the user clicks\n * on this button a dialog appears to let him choose an other texture.\n */\npublic class TextureChoiceComponent extends JButton implements TextureChoiceView {\n\n    private final UserPreferences preferences;\n\n    /**\n     * Creates a texture button.\n     */\n    public TextureChoiceComponent(final UserPreferences preferences, final TextureChoiceController controller) {\n        this.preferences \u003d preferences;\n        JLabel dummyLabel \u003d new JLabel(\"Text\");\n        Dimension iconDimension \u003d dummyLabel.getPreferredSize();\n        final int iconHeight \u003d iconDimension.height;\n        controller.addPropertyChangeListener(TextureChoiceController.Property.TEXTURE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                repaint();\n            }\n        });\n        setIcon(new Icon() {\n\n            public int getIconWidth() {\n                return iconHeight;\n            }\n\n            public int getIconHeight() {\n                return iconHeight;\n            }\n\n            public void paintIcon(Component c, Graphics g, int x, int y) {\n                g.setColor(Color.BLACK);\n                g.drawRect(x + 2, y + 2, iconHeight - 5, iconHeight - 5);\n                HomeTexture texture \u003d controller.getTexture();\n                if (texture !\u003d null) {\n                    Icon icon \u003d IconManager.getInstance().getIcon(texture.getImage(), iconHeight - 6, TextureChoiceComponent.this);\n                    if (icon.getIconWidth() !\u003d icon.getIconHeight()) {\n                        Graphics2D g2D \u003d (Graphics2D) g;\n                        AffineTransform previousTransform \u003d g2D.getTransform();\n                        g2D.translate(x + 3, y + 3);\n                        g2D.scale((float) icon.getIconHeight() / icon.getIconWidth(), 1);\n                        icon.paintIcon(c, g2D, 0, 0);\n                        g2D.setTransform(previousTransform);\n                    } else {\n                        icon.paintIcon(c, g, x + 3, y + 3);\n                    }\n                }\n            }\n        });\n        // Add a listener to update texture\n        addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ev) {\n                final TexturePanel texturePanel \u003d new TexturePanel(preferences, controller);\n                texturePanel.displayView(TextureChoiceComponent.this);\n            }\n        });\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected texture from catalog or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to delete.\n     */\n    public boolean confirmDeleteSelectedCatalogTexture() {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(TextureChoiceComponent.class, \"confirmDeleteSelectedCatalogTexture.message\");\n        String title \u003d this.preferences.getLocalizedString(TextureChoiceComponent.class, \"confirmDeleteSelectedCatalogTexture.title\");\n        String delete \u003d this.preferences.getLocalizedString(TextureChoiceComponent.class, \"confirmDeleteSelectedCatalogTexture.delete\");\n        String cancel \u003d this.preferences.getLocalizedString(TextureChoiceComponent.class, \"confirmDeleteSelectedCatalogTexture.cancel\");\n        return JOptionPane.showOptionDialog(KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(), message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { delete, cancel }, cancel) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * A panel that displays available textures in a list to let user make choose one.\n     */\n    private static class TexturePanel extends JPanel {\n\n        private static final int PREVIEW_ICON_HEIGHT \u003d 64;\n\n        private TextureChoiceController controller;\n\n        private TextureImage previewTexture;\n\n        private JLabel chosenTextureLabel;\n\n        private JLabel texturePreviewLabel;\n\n        private JLabel availableTexturesLabel;\n\n        private JList availableTexturesList;\n\n        private JButton importTextureButton;\n\n        private JButton modifyTextureButton;\n\n        private JButton deleteTextureButton;\n\n        public TexturePanel(UserPreferences preferences, TextureChoiceController controller) {\n            super(new GridBagLayout());\n            this.controller \u003d controller;\n            createComponents(preferences, controller);\n            setMnemonics(preferences);\n            layoutComponents();\n        }\n\n        /**\n         * Creates and initializes components.\n         */\n        private void createComponents(final UserPreferences preferences, final TextureChoiceController controller) {\n            this.availableTexturesLabel \u003d new JLabel(SwingTools.getLocalizedLabelText(preferences, TextureChoiceComponent.class, \"availableTexturesLabel.text\"));\n            this.availableTexturesList \u003d new JList(createListModel(preferences.getTexturesCatalog()));\n            this.availableTexturesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n            this.availableTexturesList.setCellRenderer(new TextureListCellRenderer());\n            this.availableTexturesList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n\n                public void valueChanged(ListSelectionEvent ev) {\n                    CatalogTexture selectedTexture \u003d (CatalogTexture) availableTexturesList.getSelectedValue();\n                    setPreviewTexture(selectedTexture);\n                    if (modifyTextureButton !\u003d null) {\n                        modifyTextureButton.setEnabled(selectedTexture !\u003d null \u0026\u0026 selectedTexture.isModifiable());\n                    }\n                    if (deleteTextureButton !\u003d null) {\n                        deleteTextureButton.setEnabled(selectedTexture !\u003d null \u0026\u0026 selectedTexture.isModifiable());\n                    }\n                }\n            });\n            this.chosenTextureLabel \u003d new JLabel(preferences.getLocalizedString(TextureChoiceComponent.class, \"chosenTextureLabel.text\"));\n            this.texturePreviewLabel \u003d new JLabel() {\n\n                private int lastIconWidth;\n\n                @Override\n                protected void paintComponent(Graphics g) {\n                    // If icon width changed after its loading\n                    Icon icon \u003d getIcon();\n                    if (icon !\u003d null \u0026\u0026 icon.getIconWidth() !\u003d this.lastIconWidth) {\n                        // Revalidate label to layout again texture panel\n                        this.lastIconWidth \u003d icon.getIconWidth();\n                        revalidate();\n                    } else {\n                        super.paintComponent(g);\n                    }\n                }\n\n                @Override\n                public void setIcon(Icon icon) {\n                    if (icon !\u003d null) {\n                        this.lastIconWidth \u003d icon.getIconWidth();\n                    }\n                    super.setIcon(icon);\n                }\n            };\n            // Update edited texture in texture panel\n            setPreviewTexture(controller.getTexture());\n            try {\n                String importTextureButtonText \u003d SwingTools.getLocalizedLabelText(preferences, TextureChoiceComponent.class, \"importTextureButton.text\");\n                this.texturePreviewLabel.setBorder(SwingTools.getDropableComponentBorder());\n                // Add to label a transfer handler to let user drag and drop a file on it\n                this.texturePreviewLabel.setTransferHandler(new TransferHandler() {\n\n                    @Override\n                    public boolean canImport(JComponent comp, DataFlavor[] flavors) {\n                        return Arrays.asList(flavors).contains(DataFlavor.javaFileListFlavor);\n                    }\n\n                    @Override\n                    public boolean importData(JComponent comp, Transferable transferedFiles) {\n                        try {\n                            List\u003cFile\u003e files \u003d (List\u003cFile\u003e) transferedFiles.getTransferData(DataFlavor.javaFileListFlavor);\n                            final String textureName \u003d files.get(0).getAbsolutePath();\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    controller.importTexture(textureName);\n                                }\n                            });\n                            return true;\n                        } catch (UnsupportedFlavorException ex) {\n                            return false;\n                        } catch (IOException ex) {\n                            return false;\n                        }\n                    }\n                });\n                this.importTextureButton \u003d new JButton(importTextureButtonText);\n                this.importTextureButton.addActionListener(new ActionListener() {\n\n                    public void actionPerformed(ActionEvent ev) {\n                        controller.importTexture();\n                    }\n                });\n                this.modifyTextureButton \u003d new JButton(SwingTools.getLocalizedLabelText(preferences, TextureChoiceComponent.class, \"modifyTextureButton.text\"));\n                this.modifyTextureButton.setEnabled(false);\n                this.modifyTextureButton.addActionListener(new ActionListener() {\n\n                    public void actionPerformed(ActionEvent ev) {\n                        controller.modifyTexture((CatalogTexture) availableTexturesList.getSelectedValue());\n                    }\n                });\n                this.deleteTextureButton \u003d new JButton(SwingTools.getLocalizedLabelText(preferences, TextureChoiceComponent.class, \"deleteTextureButton.text\"));\n                this.deleteTextureButton.setEnabled(false);\n                this.deleteTextureButton.addActionListener(new ActionListener() {\n\n                    public void actionPerformed(ActionEvent ev) {\n                        controller.deleteTexture((CatalogTexture) availableTexturesList.getSelectedValue());\n                    }\n                });\n                preferences.getTexturesCatalog().addTexturesListener(new TexturesCatalogListener(this));\n            } catch (IllegalArgumentException ex) {\n                // Do not support import texture if importTextureText isn\u0027t defined\n                this.texturePreviewLabel.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));\n            }\n        }\n\n        /**\n         * Renderer used to display the textures in list.\n         */\n        private static class TextureListCellRenderer extends DefaultListCellRenderer {\n\n            private Font defaultFont;\n\n            private Font modifiablePieceFont;\n\n            @Override\n            public Component getListCellRendererComponent(final JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n                // Initialize fonts if not done\n                if (this.defaultFont \u003d\u003d null) {\n                    this.defaultFont \u003d getFont();\n                    this.modifiablePieceFont \u003d new Font(this.defaultFont.getFontName(), Font.ITALIC, this.defaultFont.getSize());\n                }\n                final CatalogTexture texture \u003d (CatalogTexture) value;\n                value \u003d texture.getName();\n                value \u003d texture.getCategory().getName() + \" - \" + value;\n                Component component \u003d super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);\n                setIcon(new Icon() {\n\n                    public int getIconWidth() {\n                        return 16;\n                    }\n\n                    public int getIconHeight() {\n                        return 16;\n                    }\n\n                    public void paintIcon(Component c, Graphics g, int x, int y) {\n                        Icon icon \u003d IconManager.getInstance().getIcon(texture.getImage(), getIconHeight(), list);\n                        if (icon.getIconWidth() !\u003d icon.getIconHeight()) {\n                            Graphics2D g2D \u003d (Graphics2D) g;\n                            AffineTransform previousTransform \u003d g2D.getTransform();\n                            g2D.translate(x, y);\n                            g2D.scale((float) icon.getIconHeight() / icon.getIconWidth(), 1);\n                            icon.paintIcon(c, g2D, 0, 0);\n                            g2D.setTransform(previousTransform);\n                        } else {\n                            icon.paintIcon(c, g, x, y);\n                        }\n                    }\n                });\n                setFont(texture.isModifiable() ? this.modifiablePieceFont : this.defaultFont);\n                return component;\n            }\n        }\n\n        /**\n         * Catalog listener that updates textures list each time a texture\n         * is deleted or added in textures catalog. This listener is bound to this component\n         * with a weak reference to avoid strong link between catalog and this component.\n         */\n        private static class TexturesCatalogListener implements CollectionListener\u003cCatalogTexture\u003e {\n\n            private WeakReference\u003cTexturePanel\u003e texturePanel;\n\n            public TexturesCatalogListener(TexturePanel texturePanel) {\n                this.texturePanel \u003d new WeakReference\u003cTexturePanel\u003e(texturePanel);\n            }\n\n            public void collectionChanged(CollectionEvent\u003cCatalogTexture\u003e ev) {\n                // If controller was garbage collected, remove this listener from catalog\n                final TexturePanel texturePanel \u003d this.texturePanel.get();\n                if (texturePanel \u003d\u003d null) {\n                    ((TexturesCatalog) ev.getSource()).removeTexturesListener(this);\n                } else {\n                    texturePanel.availableTexturesList.setModel(texturePanel.createListModel((TexturesCatalog) ev.getSource()));\n                    switch(ev.getType()) {\n                        case ADD:\n                            texturePanel.availableTexturesList.setSelectedValue(ev.getItem(), true);\n                            break;\n                        case DELETE:\n                            texturePanel.availableTexturesList.clearSelection();\n                            break;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Sets components mnemonics and label / component associations.\n         */\n        private void setMnemonics(UserPreferences preferences) {\n            if (!OperatingSystem.isMacOSX()) {\n                this.availableTexturesLabel.setDisplayedMnemonic(KeyStroke.getKeyStroke(preferences.getLocalizedString(TextureChoiceComponent.class, \"availableTexturesLabel.mnemonic\")).getKeyCode());\n                this.availableTexturesLabel.setLabelFor(this.availableTexturesList);\n                if (this.importTextureButton !\u003d null) {\n                    this.importTextureButton.setMnemonic(KeyStroke.getKeyStroke(preferences.getLocalizedString(TextureChoiceComponent.class, \"importTextureButton.mnemonic\")).getKeyCode());\n                    this.modifyTextureButton.setMnemonic(KeyStroke.getKeyStroke(preferences.getLocalizedString(TextureChoiceComponent.class, \"modifyTextureButton.mnemonic\")).getKeyCode());\n                    this.deleteTextureButton.setMnemonic(KeyStroke.getKeyStroke(preferences.getLocalizedString(TextureChoiceComponent.class, \"deleteTextureButton.mnemonic\")).getKeyCode());\n                }\n            }\n        }\n\n        /**\n         * Layouts components in panel with their labels.\n         */\n        private void layoutComponents() {\n            // First row\n            add(this.availableTexturesLabel, new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0, 0, 5, 15), 0, 0));\n            add(this.chosenTextureLabel, new GridBagConstraints(1, 0, 1, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));\n            // Second row\n            add(new JScrollPane(this.availableTexturesList), new GridBagConstraints(0, 1, 1, 2, 1, 1, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 5, 15), 50, 0));\n            SwingTools.installFocusBorder(this.availableTexturesList);\n            add(this.texturePreviewLabel, new GridBagConstraints(1, 1, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            if (this.importTextureButton !\u003d null) {\n                // Third row\n                JPanel buttonsPanel \u003d new JPanel(new GridLayout(3, 1, 2, 2));\n                buttonsPanel.add(this.importTextureButton);\n                buttonsPanel.add(this.modifyTextureButton);\n                buttonsPanel.add(this.deleteTextureButton);\n                add(buttonsPanel, new GridBagConstraints(1, 2, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            }\n        }\n\n        /**\n         * Returns the chosen texture.\n         */\n        public TextureImage getPreviewTexture() {\n            return this.previewTexture;\n        }\n\n        /**\n         * Sets the chosen texture.\n         */\n        public void setPreviewTexture(TextureImage previewTexture) {\n            this.previewTexture \u003d previewTexture;\n            if (previewTexture !\u003d null) {\n                this.texturePreviewLabel.setIcon(IconManager.getInstance().getIcon(previewTexture.getImage(), PREVIEW_ICON_HEIGHT, this.texturePreviewLabel));\n            } else {\n                // Preview a dummy empty icon\n                this.texturePreviewLabel.setIcon(new Icon() {\n\n                    public int getIconHeight() {\n                        return PREVIEW_ICON_HEIGHT;\n                    }\n\n                    public int getIconWidth() {\n                        return PREVIEW_ICON_HEIGHT;\n                    }\n\n                    public void paintIcon(Component c, Graphics g, int x, int y) {\n                    }\n                });\n            }\n            // Update selection in texture list\n            this.availableTexturesList.setSelectedValue(previewTexture, true);\n            if (this.availableTexturesList.getSelectedValue() !\u003d previewTexture) {\n                int selectedIndex \u003d this.availableTexturesList.getSelectedIndex();\n                this.availableTexturesList.removeSelectionInterval(selectedIndex, selectedIndex);\n            }\n        }\n\n        /**\n         * Returns a list model from textures catalog.\n         */\n        private AbstractListModel createListModel(TexturesCatalog texturesCatalog) {\n            final CatalogTexture[] textures \u003d getTextures(texturesCatalog);\n            return new AbstractListModel() {\n\n                public Object getElementAt(int index) {\n                    return textures[index];\n                }\n\n                public int getSize() {\n                    return textures.length;\n                }\n            };\n        }\n\n        /**\n         * Returns the array of textures in catalog.\n         */\n        private CatalogTexture[] getTextures(TexturesCatalog texturesCatalog) {\n            List\u003cCatalogTexture\u003e textures \u003d new ArrayList\u003cCatalogTexture\u003e();\n            for (TexturesCategory category : texturesCatalog.getCategories()) {\n                for (CatalogTexture texture : category.getTextures()) {\n                    textures.add(texture);\n                }\n            }\n            return textures.toArray(new CatalogTexture[textures.size()]);\n        }\n\n        public void displayView(View textureChoiceComponent) {\n            // Show panel in a resizable modal dialog\n            final JOptionPane optionPane \u003d new JOptionPane(this, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);\n            JComponent parentComponent \u003d SwingUtilities.getRootPane((JComponent) textureChoiceComponent);\n            if (parentComponent !\u003d null) {\n                optionPane.setComponentOrientation(parentComponent.getComponentOrientation());\n            }\n            final JDialog dialog \u003d optionPane.createDialog(parentComponent, controller.getDialogTitle());\n            dialog.applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));\n            dialog.setResizable(true);\n            // Pack again because resize decorations may have changed dialog preferred size\n            dialog.pack();\n            dialog.setMinimumSize(getPreferredSize());\n            // Add a listener that transfer focus to focusable field of texture panel when dialog is shown\n            dialog.addComponentListener(new ComponentAdapter() {\n\n                @Override\n                public void componentShown(ComponentEvent ev) {\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().focusNextComponent(TexturePanel.this);\n                    dialog.removeComponentListener(this);\n                }\n            });\n            this.availableTexturesList.addMouseListener(new MouseAdapter() {\n\n                @Override\n                public void mouseClicked(MouseEvent ev) {\n                    // Close on double clicks in texture list\n                    if (ev.getClickCount() \u003d\u003d 2) {\n                        optionPane.setValue(JOptionPane.OK_OPTION);\n                        availableTexturesList.removeMouseListener(this);\n                    }\n                }\n            });\n            dialog.setVisible(true);\n            dialog.dispose();\n            if (Integer.valueOf(JOptionPane.OK_OPTION).equals(optionPane.getValue())) {\n                TextureImage selectedTexture \u003d getPreviewTexture();\n                if (selectedTexture instanceof HomeTexture || selectedTexture \u003d\u003d null) {\n                    this.controller.setTexture((HomeTexture) selectedTexture);\n                } else {\n                    this.controller.setTexture(new HomeTexture(selectedTexture));\n                }\n            }\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "TextureChoiceComponent",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/TextureChoiceComponent.java",
    "test_prompt": "// TextureChoiceComponentTest.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.AffineTransform;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport javax.swing.AbstractListModel;\nimport javax.swing.BorderFactory;\nimport javax.swing.DefaultListCellRenderer;\nimport javax.swing.Icon;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.TransferHandler;\nimport javax.swing.border.EtchedBorder;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.HomeTexture;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.TextureChoiceController;\nimport com.eteks.sweethome3d.viewcontroller.TextureChoiceView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TextureChoiceComponent}.\n* It contains ten unit test cases for the {@link TextureChoiceComponent#confirmDeleteSelectedCatalogTexture()} method.\n*/\nclass TextureChoiceComponentTest {",
    "method_signature": "confirmDeleteSelectedCatalogTexture()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SwingTools.java\n/*\n * SwingTools.java 21 oct. 2008\n *\n * Sweet Home 3D, Copyright (c) 2008 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Frame;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.Rectangle;\nimport java.awt.Toolkit;\nimport java.awt.Window;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.Area;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.FilteredImageSource;\nimport java.awt.image.RGBImageFilter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.jnlp.BasicService;\nimport javax.jnlp.ServiceManager;\nimport javax.jnlp.UnavailableServiceException;\nimport javax.swing.BorderFactory;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JToggleButton;\nimport javax.swing.JViewport;\nimport javax.swing.SwingUtilities;\nimport javax.swing.UIManager;\nimport javax.swing.border.AbstractBorder;\nimport javax.swing.border.Border;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\n\n/**\n * Gathers some useful tools for Swing.\n * @author Emmanuel Puybaret\n */\npublic class SwingTools {\n\n    // Borders for focused views\n    private static Border unfocusedViewBorder;\n\n    private static Border focusedViewBorder;\n\n    private SwingTools() {\n        // This class contains only tools\n    }\n\n    /**\n     * Updates the border of \u003ccode\u003ecomponent\u003c/code\u003e with an empty border\n     * changed to a colored border when it will gain focus.\n     * If the \u003ccode\u003ecomponent\u003c/code\u003e component is the child of a \u003ccode\u003eJViewPort\u003c/code\u003e\n     * instance this border will be installed on its scroll pane parent.\n     */\n    public static void installFocusBorder(JComponent component) {\n        if (unfocusedViewBorder \u003d\u003d null) {\n            Border unfocusedViewInteriorBorder \u003d new AbstractBorder() {\n\n                private Color topLeftColor;\n\n                private Color botomRightColor;\n\n                private Insets insets \u003d new Insets(1, 1, 1, 1);\n\n                {\n                    if (OperatingSystem.isMacOSX()) {\n                        this.topLeftColor \u003d Color.GRAY;\n                        this.botomRightColor \u003d Color.LIGHT_GRAY;\n                    } else {\n                        this.topLeftColor \u003d UIManager.getColor(\"TextField.darkShadow\");\n                        this.botomRightColor \u003d UIManager.getColor(\"TextField.shadow\");\n                    }\n                }\n\n                public Insets getBorderInsets(Component c) {\n                    return this.insets;\n                }\n\n                public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n                    Color previousColor \u003d g.getColor();\n                    Rectangle rect \u003d getInteriorRectangle(c, x, y, width, height);\n                    g.setColor(topLeftColor);\n                    g.drawLine(rect.x - 1, rect.y - 1, rect.x + rect.width, rect.y - 1);\n                    g.drawLine(rect.x - 1, rect.y - 1, rect.x - 1, rect.y + rect.height);\n                    g.setColor(botomRightColor);\n                    g.drawLine(rect.x, rect.y + rect.height, rect.x + rect.width, rect.y + rect.height);\n                    g.drawLine(rect.x + rect.width, rect.y, rect.x + rect.width, rect.y + rect.height);\n                    g.setColor(previousColor);\n                }\n            };\n            if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n                unfocusedViewBorder \u003d BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(UIManager.getColor(\"Panel.background\"), 2), unfocusedViewInteriorBorder);\n                focusedViewBorder \u003d new AbstractBorder() {\n\n                    private Insets insets \u003d new Insets(3, 3, 3, 3);\n\n                    public Insets getBorderInsets(Component c) {\n                        return this.insets;\n                    }\n\n                    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n                        Color previousColor \u003d g.getColor();\n                        // Paint a gradient paint around component\n                        Rectangle rect \u003d getInteriorRectangle(c, x, y, width, height);\n                        g.setColor(Color.GRAY);\n                        g.drawLine(rect.x - 1, rect.y - 1, rect.x + rect.width, rect.y - 1);\n                        g.drawLine(rect.x - 1, rect.y - 1, rect.x - 1, rect.y + rect.height);\n                        g.setColor(Color.LIGHT_GRAY);\n                        g.drawLine(rect.x, rect.y + rect.height, rect.x + rect.width, rect.y + rect.height);\n                        g.drawLine(rect.x + rect.width, rect.y, rect.x + rect.width, rect.y + rect.height);\n                        Color focusColor \u003d UIManager.getColor(\"Focus.color\");\n                        int transparencyOutline \u003d 128;\n                        int transparencyInline \u003d 180;\n                        if (focusColor \u003d\u003d null) {\n                            focusColor \u003d UIManager.getColor(\"textHighlight\");\n                            transparencyOutline \u003d 128;\n                            transparencyInline \u003d 255;\n                        }\n                        g.setColor(new Color(focusColor.getRed(), focusColor.getGreen(), focusColor.getBlue(), transparencyOutline));\n                        g.drawRoundRect(rect.x - 3, rect.y - 3, rect.width + 5, rect.height + 5, 6, 6);\n                        g.drawRect(rect.x - 1, rect.y - 1, rect.width + 1, rect.height + 1);\n                        g.setColor(new Color(focusColor.getRed(), focusColor.getGreen(), focusColor.getBlue(), transparencyInline));\n                        g.drawRoundRect(rect.x - 2, rect.y - 2, rect.width + 3, rect.height + 3, 4, 4);\n                        // Draw corners\n                        g.setColor(UIManager.getColor(\"Panel.background\"));\n                        g.drawLine(rect.x - 3, rect.y - 3, rect.x - 2, rect.y - 3);\n                        g.drawLine(rect.x - 3, rect.y - 2, rect.x - 3, rect.y - 2);\n                        g.drawLine(rect.x + rect.width + 1, rect.y - 3, rect.x + rect.width + 2, rect.y - 3);\n                        g.drawLine(rect.x + rect.width + 2, rect.y - 2, rect.x + rect.width + 2, rect.y - 2);\n                        g.drawLine(rect.x - 3, rect.y + rect.height + 2, rect.x - 2, rect.y + rect.height + 2);\n                        g.drawLine(rect.x - 3, rect.y + rect.height + 1, rect.x - 3, rect.y + rect.height + 1);\n                        g.drawLine(rect.x + rect.width + 1, rect.y + rect.height + 2, rect.x + rect.width + 2, rect.y + rect.height + 2);\n                        g.drawLine(rect.x + rect.width + 2, rect.y + rect.height + 1, rect.x + rect.width + 2, rect.y + rect.height + 1);\n                        g.setColor(previousColor);\n                    }\n                };\n            } else {\n                if (OperatingSystem.isMacOSX()) {\n                    unfocusedViewBorder \u003d BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(UIManager.getColor(\"Panel.background\"), 1), unfocusedViewInteriorBorder);\n                } else {\n                    unfocusedViewBorder \u003d BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1), unfocusedViewInteriorBorder);\n                }\n                focusedViewBorder \u003d BorderFactory.createLineBorder(UIManager.getColor(\"textHighlight\"), 2);\n            }\n        }\n        final JComponent feedbackComponent;\n        if (component.getParent() instanceof JViewport \u0026\u0026 component.getParent().getParent() instanceof JScrollPane) {\n            feedbackComponent \u003d (JComponent) component.getParent().getParent();\n        } else {\n            feedbackComponent \u003d component;\n        }\n        feedbackComponent.setBorder(unfocusedViewBorder);\n        component.addFocusListener(new FocusListener() {\n\n            public void focusLost(FocusEvent ev) {\n                if (feedbackComponent.getBorder() \u003d\u003d focusedViewBorder) {\n                    feedbackComponent.setBorder(unfocusedViewBorder);\n                }\n            }\n\n            public void focusGained(FocusEvent ev) {\n                if (feedbackComponent.getBorder() \u003d\u003d unfocusedViewBorder) {\n                    feedbackComponent.setBorder(focusedViewBorder);\n                }\n            }\n        });\n    }\n\n    /**\n     * Updates the Swing resource bundles in use from the current Locale and class loader.\n     */\n    public static void updateSwingResourceLanguage() {\n        updateSwingResourceLanguage(Arrays.asList(new ClassLoader[] { SwingTools.class.getClassLoader() }));\n    }\n\n    /**\n     * Updates the Swing resource bundles in use from the current Locale and the class loaders of preferences.\n     */\n    public static void updateSwingResourceLanguage(UserPreferences preferences) {\n        updateSwingResourceLanguage(preferences.getResourceClassLoaders());\n    }\n\n    /**\n     * Updates the Swing resource bundles in use from the current Locale and class loaders.\n     */\n    private static void updateSwingResourceLanguage(List\u003cClassLoader\u003e classLoaders) {\n        // Read Swing localized properties because Swing doesn\u0027t update its internal strings automatically\n        // when default Locale is updated (see bug http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d4884480)\n        updateSwingResourceBundle(\"com.sun.swing.internal.plaf.metal.resources.metal\", classLoaders);\n        updateSwingResourceBundle(\"com.sun.swing.internal.plaf.basic.resources.basic\", classLoaders);\n        if (UIManager.getLookAndFeel().getClass().getName().equals(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\")) {\n            updateSwingResourceBundle(\"com.sun.java.swing.plaf.gtk.resources.gtk\", classLoaders);\n        } else if (UIManager.getLookAndFeel().getClass().getName().equals(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\")) {\n            updateSwingResourceBundle(\"com.sun.java.swing.plaf.motif.resources.motif\", classLoaders);\n        }\n    }\n\n    /**\n     * Updates a Swing resource bundle in use from the current Locale.\n     */\n    private static void updateSwingResourceBundle(String swingResource, List\u003cClassLoader\u003e classLoaders) {\n        ResourceBundle resource \u003d ResourceBundle.getBundle(swingResource, Locale.ENGLISH);\n        try {\n            Locale defaultLocale \u003d Locale.getDefault();\n            for (ClassLoader classLoader : classLoaders) {\n                ResourceBundle bundle \u003d ResourceBundle.getBundle(swingResource, defaultLocale, classLoader);\n                if (defaultLocale.equals(bundle.getLocale())) {\n                    resource \u003d bundle;\n                    break;\n                } else if (!resource.getLocale().getLanguage().equals(bundle.getLocale().getLanguage()) \u0026\u0026 defaultLocale.getLanguage().equals(bundle.getLocale().getLanguage())) {\n                    resource \u003d bundle;\n                    // Don\u0027t break in case a bundle with language + country is found with an other class loader\n                }\n            }\n        } catch (MissingResourceException ex) {\n        }\n        // Update UIManager properties\n        for (Enumeration\u003c?\u003e it \u003d resource.getKeys(); it.hasMoreElements(); ) {\n            String property \u003d (String) it.nextElement();\n            UIManager.put(property, resource.getString(property));\n        }\n    }\n\n    /**\n     * Returns a localized text for menus items and labels depending on the system.\n     */\n    public static String getLocalizedLabelText(UserPreferences preferences, Class\u003c?\u003e resourceClass, String resourceKey, Object... resourceParameters) {\n        String localizedString \u003d preferences.getLocalizedString(resourceClass, resourceKey, resourceParameters);\n        // Under Mac OS X, remove bracketed upper case roman letter used in oriental languages to indicate mnemonic\n        String language \u003d Locale.getDefault().getLanguage();\n        if (OperatingSystem.isMacOSX() \u0026\u0026 (language.equals(Locale.CHINESE.getLanguage()) || language.equals(Locale.JAPANESE.getLanguage()) || language.equals(Locale.KOREAN.getLanguage()))) {\n            int openingBracketIndex \u003d localizedString.indexOf(\u0027(\u0027);\n            if (openingBracketIndex !\u003d -1) {\n                int closingBracketIndex \u003d localizedString.indexOf(\u0027)\u0027);\n                if (openingBracketIndex \u003d\u003d closingBracketIndex - 2) {\n                    char c \u003d localizedString.charAt(openingBracketIndex + 1);\n                    if (c \u003e\u003d \u0027A\u0027 \u0026\u0026 c \u003c\u003d \u0027Z\u0027) {\n                        localizedString \u003d localizedString.substring(0, openingBracketIndex) + localizedString.substring(closingBracketIndex + 1);\n                    }\n                }\n            }\n        }\n        return localizedString;\n    }\n\n    /**\n     * Adds focus and mouse listeners to the given \u003ccode\u003etextComponent\u003c/code\u003e that will\n     * select all its text when it gains focus by transfer.\n     */\n    public static void addAutoSelectionOnFocusGain(final JTextComponent textComponent) {\n        // A focus and mouse listener able to select text field characters\n        // when it gains focus after a focus transfer\n        class SelectionOnFocusManager extends MouseAdapter implements FocusListener {\n\n            private boolean mousePressedInTextField \u003d false;\n\n            private int selectionStartBeforeFocusLost \u003d -1;\n\n            private int selectionEndBeforeFocusLost \u003d -1;\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                this.mousePressedInTextField \u003d true;\n                this.selectionStartBeforeFocusLost \u003d -1;\n            }\n\n            public void focusLost(FocusEvent ev) {\n                if (ev.getOppositeComponent() \u003d\u003d null || SwingUtilities.getWindowAncestor(ev.getOppositeComponent()) !\u003d SwingUtilities.getWindowAncestor(textComponent)) {\n                    // Keep selection indices when focus on text field is transfered\n                    // to an other window\n                    this.selectionStartBeforeFocusLost \u003d textComponent.getSelectionStart();\n                    this.selectionEndBeforeFocusLost \u003d textComponent.getSelectionEnd();\n                } else {\n                    this.selectionStartBeforeFocusLost \u003d -1;\n                }\n            }\n\n            public void focusGained(FocusEvent ev) {\n                if (this.selectionStartBeforeFocusLost !\u003d -1) {\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            // Reselect the same characters in text field\n                            textComponent.setSelectionStart(selectionStartBeforeFocusLost);\n                            textComponent.setSelectionEnd(selectionEndBeforeFocusLost);\n                        }\n                    });\n                } else if (!this.mousePressedInTextField \u0026\u0026 ev.getOppositeComponent() !\u003d null \u0026\u0026 SwingUtilities.getWindowAncestor(ev.getOppositeComponent()) \u003d\u003d SwingUtilities.getWindowAncestor(textComponent)) {\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            // Select all characters when text field got the focus because of a transfer\n                            textComponent.selectAll();\n                        }\n                    });\n                }\n                this.mousePressedInTextField \u003d false;\n            }\n        }\n        ;\n        SelectionOnFocusManager selectionOnFocusManager \u003d new SelectionOnFocusManager();\n        textComponent.addFocusListener(selectionOnFocusManager);\n        textComponent.addMouseListener(selectionOnFocusManager);\n    }\n\n    /**\n     * Forces radio buttons to be deselected even if they belong to a button group.\n     */\n    public static void deselectAllRadioButtons(JRadioButton... radioButtons) {\n        for (JRadioButton radioButton : radioButtons) {\n            ButtonGroup group \u003d ((JToggleButton.ToggleButtonModel) radioButton.getModel()).getGroup();\n            group.remove(radioButton);\n            radioButton.setSelected(false);\n            group.add(radioButton);\n        }\n    }\n\n    /**\n     * Displays \u003ccode\u003emessageComponent\u003c/code\u003e in a modal dialog box, giving focus to one of its components.\n     */\n    public static int showConfirmDialog(JComponent parentComponent, JComponent messageComponent, String title, final JComponent focusedComponent) {\n        JOptionPane optionPane \u003d new JOptionPane(messageComponent, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);\n        parentComponent \u003d SwingUtilities.getRootPane(parentComponent);\n        if (parentComponent !\u003d null) {\n            optionPane.setComponentOrientation(parentComponent.getComponentOrientation());\n        }\n        final JDialog dialog \u003d optionPane.createDialog(parentComponent, title);\n        if (focusedComponent !\u003d null) {\n            // Add a listener that transfer focus to focusedComponent when dialog is shown\n            dialog.addComponentListener(new ComponentAdapter() {\n\n                @Override\n                public void componentShown(ComponentEvent ev) {\n                    focusedComponent.requestFocusInWindow();\n                    dialog.removeComponentListener(this);\n                }\n            });\n        }\n        dialog.setVisible(true);\n        dialog.dispose();\n        Object value \u003d optionPane.getValue();\n        if (value instanceof Integer) {\n            return (Integer) value;\n        } else {\n            return JOptionPane.CLOSED_OPTION;\n        }\n    }\n\n    /**\n     * Displays \u003ccode\u003emessageComponent\u003c/code\u003e in a modal dialog box, giving focus to one of its components.\n     */\n    public static void showMessageDialog(JComponent parentComponent, JComponent messageComponent, String title, int messageType, final JComponent focusedComponent) {\n        JOptionPane optionPane \u003d new JOptionPane(messageComponent, messageType, JOptionPane.DEFAULT_OPTION);\n        parentComponent \u003d SwingUtilities.getRootPane(parentComponent);\n        if (parentComponent !\u003d null) {\n            optionPane.setComponentOrientation(parentComponent.getComponentOrientation());\n        }\n        final JDialog dialog \u003d optionPane.createDialog(parentComponent, title);\n        if (focusedComponent !\u003d null) {\n            // Add a listener that transfer focus to focusedComponent when dialog is shown\n            dialog.addComponentListener(new ComponentAdapter() {\n\n                @Override\n                public void componentShown(ComponentEvent ev) {\n                    focusedComponent.requestFocusInWindow();\n                    dialog.removeComponentListener(this);\n                }\n            });\n        }\n        dialog.setVisible(true);\n        dialog.dispose();\n    }\n\n    private static Map\u003cTextureImage, BufferedImage\u003e patternImages;\n\n    /**\n     * Returns the image matching a given pattern.\n     */\n    public static BufferedImage getPatternImage(TextureImage pattern, Color backgroundColor, Color foregroundColor) {\n        if (patternImages \u003d\u003d null) {\n            patternImages \u003d new HashMap\u003cTextureImage, BufferedImage\u003e();\n        }\n        BufferedImage image \u003d new BufferedImage((int) pattern.getWidth(), (int) pattern.getHeight(), BufferedImage.TYPE_INT_RGB);\n        Graphics2D imageGraphics \u003d (Graphics2D) image.getGraphics();\n        imageGraphics.setColor(backgroundColor);\n        imageGraphics.fillRect(0, 0, image.getWidth(), image.getHeight());\n        // Get pattern image from cache\n        BufferedImage patternImage \u003d patternImages.get(pattern);\n        if (patternImage \u003d\u003d null) {\n            try {\n                InputStream imageInput \u003d pattern.getImage().openStream();\n                patternImage \u003d ImageIO.read(imageInput);\n                imageInput.close();\n                patternImages.put(pattern, patternImage);\n            } catch (IOException ex) {\n                throw new IllegalArgumentException(\"Can\u0027t read pattern image \" + pattern.getName());\n            }\n        }\n        // Draw the pattern image with foreground color\n        final int foregroundColorRgb \u003d foregroundColor.getRGB() \u0026 0xFFFFFF;\n        imageGraphics.drawImage(Toolkit.getDefaultToolkit().createImage(new FilteredImageSource(patternImage.getSource(), new RGBImageFilter() {\n\n            {\n                this.canFilterIndexColorModel \u003d true;\n            }\n\n            @Override\n            public int filterRGB(int x, int y, int rgba) {\n                // Always use foreground color and alpha\n                return (rgba \u0026 0xFF000000) | foregroundColorRgb;\n            }\n        })), 0, 0, null);\n        imageGraphics.dispose();\n        return image;\n    }\n\n    /**\n     * Returns the border of a component where a user may drop objects.\n     */\n    public static Border getDropableComponentBorder() {\n        Border border \u003d null;\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            border \u003d UIManager.getBorder(\"InsetBorder.aquaVariant\");\n        }\n        if (border \u003d\u003d null) {\n            border \u003d BorderFactory.createLoweredBevelBorder();\n        }\n        return border;\n    }\n\n    /**\n     * Displays the image referenced by \u003ccode\u003eimageUrl\u003c/code\u003e in an AWT window\n     * disposed once an other AWT frame is created.\n     * If the \u003ccode\u003eimageUrl\u003c/code\u003e is incorrect, nothing happens.\n     */\n    public static void showSplashScreenWindow(URL imageUrl) {\n        try {\n            final BufferedImage image \u003d ImageIO.read(imageUrl);\n            final Window splashScreenWindow \u003d new Window(new Frame()) {\n\n                @Override\n                public void paint(Graphics g) {\n                    g.drawImage(image, 0, 0, this);\n                }\n            };\n            splashScreenWindow.setSize(image.getWidth(), image.getHeight());\n            splashScreenWindow.setLocationRelativeTo(null);\n            splashScreenWindow.setVisible(true);\n            Executors.newSingleThreadExecutor().execute(new Runnable() {\n\n                public void run() {\n                    try {\n                        Thread.sleep(500);\n                        while (splashScreenWindow.isVisible()) {\n                            // If an other frame is showing, dispose splash window\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    for (Frame frame : Frame.getFrames()) {\n                                        if (frame.isShowing()) {\n                                            splashScreenWindow.dispose();\n                                        }\n                                    }\n                                }\n                            });\n                            Thread.sleep(300);\n                        }\n                    } catch (InterruptedException ex) {\n                        EventQueue.invokeLater(new Runnable() {\n\n                            public void run() {\n                                splashScreenWindow.dispose();\n                            }\n                        });\n                    }\n                    ;\n                }\n            });\n        } catch (IOException ex) {\n            // Ignore splash screen\n        }\n    }\n\n    /**\n     * Returns a new panel with a border and the given \u003ccode\u003etitle\u003c/code\u003e\n     */\n    public static JPanel createTitledPanel(String title) {\n        JPanel titledPanel \u003d new JPanel(new GridBagLayout());\n        Border panelBorder \u003d BorderFactory.createTitledBorder(title);\n        // For systems different from Mac OS X 10.5, add an empty border\n        if (!OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            panelBorder \u003d BorderFactory.createCompoundBorder(panelBorder, BorderFactory.createEmptyBorder(0, 2, 2, 2));\n        }\n        titledPanel.setBorder(panelBorder);\n        return titledPanel;\n    }\n\n    /**\n     * Returns a scroll pane containing the given \u003ccode\u003ecomponent\u003c/code\u003e\n     * that always displays scroll bars under Mac OS X.\n     */\n    public static JScrollPane createScrollPane(JComponent component) {\n        JScrollPane scrollPane \u003d new JScrollPane(component);\n        if (OperatingSystem.isMacOSX()) {\n            scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        }\n        installFocusBorder(component);\n        scrollPane.setMinimumSize(new Dimension());\n        return scrollPane;\n    }\n\n    /**\n     * Adds a listener that will update the given popup menu to hide disabled menu items.\n     */\n    public static void hideDisabledMenuItems(JPopupMenu popupMenu) {\n        popupMenu.addPopupMenuListener(new MenuItemsVisibilityListener());\n    }\n\n    /**\n     * A popup menu listener that displays only enabled menu items.\n     */\n    private static class MenuItemsVisibilityListener implements PopupMenuListener {\n\n        public void popupMenuWillBecomeVisible(PopupMenuEvent ev) {\n            JPopupMenu popupMenu \u003d (JPopupMenu) ev.getSource();\n            hideDisabledMenuItems(popupMenu);\n            // Ensure at least one item is visible\n            boolean allItemsInvisible \u003d true;\n            for (int i \u003d 0; i \u003c popupMenu.getComponentCount(); i++) {\n                if (popupMenu.getComponent(i).isVisible()) {\n                    allItemsInvisible \u003d false;\n                    break;\n                }\n            }\n            if (allItemsInvisible) {\n                popupMenu.getComponent(0).setVisible(true);\n            }\n        }\n\n        /**\n         * Makes useless menu items invisible.\n         */\n        private void hideDisabledMenuItems(JPopupMenu popupMenu) {\n            for (int i \u003d 0; i \u003c popupMenu.getComponentCount(); i++) {\n                Component component \u003d popupMenu.getComponent(i);\n                if (component instanceof JMenu) {\n                    boolean containsEnabledItems \u003d containsEnabledItems((JMenu) component);\n                    component.setVisible(containsEnabledItems);\n                    if (containsEnabledItems) {\n                        hideDisabledMenuItems(((JMenu) component).getPopupMenu());\n                    }\n                } else if (component instanceof JMenuItem) {\n                    component.setVisible(component.isEnabled());\n                }\n            }\n            hideUselessSeparators(popupMenu);\n        }\n\n        /**\n         * Makes useless separators invisible.\n         */\n        private void hideUselessSeparators(JPopupMenu popupMenu) {\n            boolean allMenuItemsInvisible \u003d true;\n            int lastVisibleSeparatorIndex \u003d -1;\n            for (int i \u003d 0; i \u003c popupMenu.getComponentCount(); i++) {\n                Component component \u003d popupMenu.getComponent(i);\n                if (allMenuItemsInvisible \u0026\u0026 (component instanceof JMenuItem)) {\n                    if (component.isVisible()) {\n                        allMenuItemsInvisible \u003d false;\n                    }\n                } else if (component instanceof JSeparator) {\n                    component.setVisible(!allMenuItemsInvisible);\n                    if (!allMenuItemsInvisible) {\n                        lastVisibleSeparatorIndex \u003d i;\n                    }\n                    allMenuItemsInvisible \u003d true;\n                }\n            }\n            if (lastVisibleSeparatorIndex !\u003d -1 \u0026\u0026 allMenuItemsInvisible) {\n                // Check if last separator is the first visible component\n                boolean allComponentsBeforeLastVisibleSeparatorInvisible \u003d true;\n                for (int i \u003d lastVisibleSeparatorIndex - 1; i \u003e\u003d 0; i--) {\n                    if (popupMenu.getComponent(i).isVisible()) {\n                        allComponentsBeforeLastVisibleSeparatorInvisible \u003d false;\n                        break;\n                    }\n                }\n                boolean allComponentsAfterLastVisibleSeparatorInvisible \u003d true;\n                for (int i \u003d lastVisibleSeparatorIndex; i \u003c popupMenu.getComponentCount(); i++) {\n                    if (popupMenu.getComponent(i).isVisible()) {\n                        allComponentsBeforeLastVisibleSeparatorInvisible \u003d false;\n                        break;\n                    }\n                }\n                popupMenu.getComponent(lastVisibleSeparatorIndex).setVisible(!allComponentsBeforeLastVisibleSeparatorInvisible \u0026\u0026 !allComponentsAfterLastVisibleSeparatorInvisible);\n            }\n        }\n\n        /**\n         * Returns \u003ccode\u003etrue\u003c/code\u003e if the given \u003ccode\u003emenu\u003c/code\u003e contains\n         * at least one enabled menu item.\n         */\n        private boolean containsEnabledItems(JMenu menu) {\n            boolean menuContainsEnabledItems \u003d false;\n            for (int i \u003d 0; i \u003c menu.getMenuComponentCount() \u0026\u0026 !menuContainsEnabledItems; i++) {\n                Component component \u003d menu.getMenuComponent(i);\n                if (component instanceof JMenu) {\n                    menuContainsEnabledItems \u003d containsEnabledItems((JMenu) component);\n                } else if (component instanceof JMenuItem) {\n                    menuContainsEnabledItems \u003d component.isEnabled();\n                }\n            }\n            return menuContainsEnabledItems;\n        }\n\n        public void popupMenuCanceled(PopupMenuEvent ev) {\n        }\n\n        public void popupMenuWillBecomeInvisible(PopupMenuEvent ev) {\n        }\n    }\n\n    /**\n     * Attempts to display the given \u003ccode\u003eurl\u003c/code\u003e in a browser and returns \u003ccode\u003etrue\u003c/code\u003e\n     * if it was done successfully.\n     */\n    public static boolean showDocumentInBrowser(URL url) {\n        return BrowserSupport.showDocumentInBrowser(url);\n    }\n\n    /**\n     * Separated static class to be able to exclude JNLP library from classpath.\n     */\n    private static class BrowserSupport {\n\n        public static boolean showDocumentInBrowser(URL url) {\n            try {\n                // Lookup the javax.jnlp.BasicService object\n                BasicService basicService \u003d (BasicService) ServiceManager.lookup(\"javax.jnlp.BasicService\");\n                // Ignore the basic service, if it doesn\u0027t support web browser\n                if (basicService.isWebBrowserSupported()) {\n                    return basicService.showDocument(url);\n                }\n            } catch (UnavailableServiceException ex) {\n                // Too bad : service is unavailable\n            } catch (LinkageError ex) {\n                // JNLP classes not available in classpath\n                System.err.println(\"Can\u0027t show document in browser. JNLP classes not available in classpath.\");\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Returns the children of a component of the given class.\n     */\n    public static \u003cT extends JComponent\u003e List\u003cT\u003e findChildren(JComponent parent, Class\u003cT\u003e childrenClass) {\n        List\u003cT\u003e children \u003d new ArrayList\u003cT\u003e();\n        findChildren(parent, childrenClass, children);\n        return children;\n    }\n\n    private static \u003cT extends JComponent\u003e void findChildren(JComponent parent, Class\u003cT\u003e childrenClass, List\u003cT\u003e children) {\n        for (int i \u003d 0; i \u003c parent.getComponentCount(); i++) {\n            Component child \u003d parent.getComponent(i);\n            if (childrenClass.isInstance(child)) {\n                children.add((T) child);\n            } else if (child instanceof JComponent) {\n                findChildren((JComponent) child, childrenClass, children);\n            }\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given rectangle is fully visible at screen.\n     */\n    public static boolean isRectangleVisibleAtScreen(Rectangle rectangle) {\n        Area devicesArea \u003d new Area();\n        GraphicsEnvironment environment \u003d GraphicsEnvironment.getLocalGraphicsEnvironment();\n        for (GraphicsDevice device : environment.getScreenDevices()) {\n            devicesArea.add(new Area(device.getDefaultConfiguration().getBounds()));\n        }\n        return devicesArea.contains(rectangle);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "SwingTools",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/SwingTools_3Test.java",
    "test_prompt": "// SwingTools_3Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Frame;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.Rectangle;\nimport java.awt.Toolkit;\nimport java.awt.Window;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.Area;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.FilteredImageSource;\nimport java.awt.image.RGBImageFilter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.jnlp.BasicService;\nimport javax.jnlp.ServiceManager;\nimport javax.jnlp.UnavailableServiceException;\nimport javax.swing.BorderFactory;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JToggleButton;\nimport javax.swing.JViewport;\nimport javax.swing.SwingUtilities;\nimport javax.swing.UIManager;\nimport javax.swing.border.AbstractBorder;\nimport javax.swing.border.Border;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SwingTools}.\n* It contains ten unit test cases for the {@link SwingTools#getDropableComponentBorder()} method.\n*/\nclass SwingTools_3Test {",
    "method_signature": "getDropableComponentBorder()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// HomePane.java\n/*\n * HomePane.java 15 mai 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY \u003d \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY \u003d \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY \u003d \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY \u003d \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY \u003d \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT \u003d 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty \u003d true;\n\n    private ActionMap menuActionMap;\n\n    private List\u003cAction\u003e pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n        this.home \u003d home;\n        this.preferences \u003d preferences;\n        this.controller \u003d controller;\n        JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n        ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);\n        createActions(home, preferences, controller);\n        createMenuActions(preferences, controller);\n        createPluginActions(controller instanceof HomePluginController ? ((HomePluginController) controller).getPlugins() : null);\n        createTransferHandlers(home, controller);\n        addHomeListener(home);\n        addLevelVisibilityListener(home);\n        addLanguageListener(preferences);\n        addPlanControllerListener(controller.getPlanController());\n        addFocusListener();\n        updateFocusTraversalPolicy();\n        JMenuBar homeMenuBar \u003d createMenuBar(home, preferences, controller);\n        setJMenuBar(homeMenuBar);\n        Container contentPane \u003d getContentPane();\n        contentPane.add(createToolBar(home), BorderLayout.NORTH);\n        contentPane.add(createMainPane(home, preferences, controller));\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            // Under Mac OS X 10.5, add some dummy labels at left and right borders\n            // to avoid the tool bar to be attached on these borders\n            // (segmented buttons created on this system aren\u0027t properly rendered\n            // when they are aligned vertically)\n            contentPane.add(new JLabel(), BorderLayout.WEST);\n            contentPane.add(new JLabel(), BorderLayout.EAST);\n        }\n        disableMenuItemsDuringDragAndDrop(controller.getPlanController().getView(), homeMenuBar);\n        // Change component orientation\n        applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller) {\n        createAction(ActionType.NEW_HOME, preferences, controller, \"newHome\");\n        createAction(ActionType.OPEN, preferences, controller, \"open\");\n        createAction(ActionType.DELETE_RECENT_HOMES, preferences, controller, \"deleteRecentHomes\");\n        createAction(ActionType.CLOSE, preferences, controller, \"close\");\n        createAction(ActionType.SAVE, preferences, controller, \"save\");\n        createAction(ActionType.SAVE_AS, preferences, controller, \"saveAs\");\n        createAction(ActionType.SAVE_AND_COMPRESS, preferences, controller, \"saveAndCompress\");\n        createAction(ActionType.PAGE_SETUP, preferences, controller, \"setupPage\");\n        createAction(ActionType.PRINT_PREVIEW, preferences, controller, \"previewPrint\");\n        createAction(ActionType.PRINT, preferences, controller, \"print\");\n        createAction(ActionType.PRINT_TO_PDF, preferences, controller, \"printToPDF\");\n        createAction(ActionType.PREFERENCES, preferences, controller, \"editPreferences\");\n        createAction(ActionType.EXIT, preferences, controller, \"exit\");\n        createAction(ActionType.UNDO, preferences, controller, \"undo\");\n        createAction(ActionType.REDO, preferences, controller, \"redo\");\n        createClipboardAction(ActionType.CUT, preferences, TransferHandler.getCutAction(), true);\n        createClipboardAction(ActionType.COPY, preferences, TransferHandler.getCopyAction(), true);\n        createClipboardAction(ActionType.PASTE, preferences, TransferHandler.getPasteAction(), false);\n        createAction(ActionType.DELETE, preferences, controller, \"delete\");\n        createAction(ActionType.SELECT_ALL, preferences, controller, \"selectAll\");\n        createAction(ActionType.ADD_HOME_FURNITURE, preferences, controller, \"addHomeFurniture\");\n        FurnitureController furnitureController \u003d controller.getFurnitureController();\n        createAction(ActionType.DELETE_HOME_FURNITURE, preferences, furnitureController, \"deleteSelection\");\n        createAction(ActionType.MODIFY_FURNITURE, preferences, controller, \"modifySelectedFurniture\");\n        createAction(ActionType.GROUP_FURNITURE, preferences, furnitureController, \"groupSelectedFurniture\");\n        createAction(ActionType.UNGROUP_FURNITURE, preferences, furnitureController, \"ungroupSelectedFurniture\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_TOP, preferences, furnitureController, \"alignSelectedFurnitureOnTop\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BOTTOM, preferences, furnitureController, \"alignSelectedFurnitureOnBottom\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT, preferences, furnitureController, \"alignSelectedFurnitureOnLeft\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT, preferences, furnitureController, \"alignSelectedFurnitureOnRight\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnFrontSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnBackSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnLeftSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnRightSide\");\n        createAction(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, preferences, furnitureController, \"alignSelectedFurnitureSideBySide\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, preferences, furnitureController, \"distributeSelectedFurnitureHorizontally\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, preferences, furnitureController, \"distributeSelectedFurnitureVertically\");\n        final HomeController3D homeController3D \u003d controller.getHomeController3D();\n        if (homeController3D.getView() !\u003d null) {\n            createAction(ActionType.IMPORT_FURNITURE, preferences, controller, \"importFurniture\");\n        }\n        createAction(ActionType.IMPORT_FURNITURE_LIBRARY, preferences, controller, \"importFurnitureLibrary\");\n        createAction(ActionType.IMPORT_TEXTURES_LIBRARY, preferences, controller, \"importTexturesLibrary\");\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_NAME, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_X, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_Y, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_COLOR, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TYPE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER, preferences, furnitureController, \"toggleFurnitureSortOrder\");\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_NAME, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_X, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_Y, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_COLOR, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        PlanController planController \u003d controller.getPlanController();\n        if (planController.getView() !\u003d null) {\n            ButtonGroup modeGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.SELECT, planController.getMode() \u003d\u003d PlanController.Mode.SELECTION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.SELECTION);\n            createToggleAction(ActionType.PAN, planController.getMode() \u003d\u003d PlanController.Mode.PANNING, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.PANNING);\n            createToggleAction(ActionType.CREATE_WALLS, planController.getMode() \u003d\u003d PlanController.Mode.WALL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.WALL_CREATION);\n            createToggleAction(ActionType.CREATE_ROOMS, planController.getMode() \u003d\u003d PlanController.Mode.ROOM_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.ROOM_CREATION);\n            createToggleAction(ActionType.CREATE_DIMENSION_LINES, planController.getMode() \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.DIMENSION_LINE_CREATION);\n            createToggleAction(ActionType.CREATE_LABELS, planController.getMode() \u003d\u003d PlanController.Mode.LABEL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.LABEL_CREATION);\n            createAction(ActionType.DELETE_SELECTION, preferences, planController, \"deleteSelection\");\n            createAction(ActionType.LOCK_BASE_PLAN, preferences, planController, \"lockBasePlan\");\n            createAction(ActionType.UNLOCK_BASE_PLAN, preferences, planController, \"unlockBasePlan\");\n            createAction(ActionType.MODIFY_COMPASS, preferences, planController, \"modifyCompass\");\n            createAction(ActionType.MODIFY_WALL, preferences, planController, \"modifySelectedWalls\");\n            createAction(ActionType.MODIFY_ROOM, preferences, planController, \"modifySelectedRooms\");\n            createAction(ActionType.MODIFY_LABEL, preferences, planController, \"modifySelectedLabels\");\n            createAction(ActionType.INCREASE_TEXT_SIZE, preferences, planController, \"increaseTextSize\");\n            createAction(ActionType.DECREASE_TEXT_SIZE, preferences, planController, \"decreaseTextSize\");\n            // Use special toggle models for bold and italic check box menu items and tool bar buttons\n            // that are selected texts in home selected items are all bold or italic\n            Action toggleBoldAction \u003d createAction(ActionType.TOGGLE_BOLD_STYLE, preferences, planController, \"toggleBoldStyle\");\n            toggleBoldAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createBoldStyleToggleModel(home, preferences));\n            Action toggleItalicAction \u003d createAction(ActionType.TOGGLE_ITALIC_STYLE, preferences, planController, \"toggleItalicStyle\");\n            toggleItalicAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createItalicStyleToggleModel(home, preferences));\n            createAction(ActionType.REVERSE_WALL_DIRECTION, preferences, planController, \"reverseSelectedWallsDirection\");\n            createAction(ActionType.SPLIT_WALL, preferences, planController, \"splitSelectedWall\");\n            createAction(ActionType.IMPORT_BACKGROUND_IMAGE, preferences, controller, \"importBackgroundImage\");\n            createAction(ActionType.MODIFY_BACKGROUND_IMAGE, preferences, controller, \"modifyBackgroundImage\");\n            createAction(ActionType.HIDE_BACKGROUND_IMAGE, preferences, controller, \"hideBackgroundImage\");\n            createAction(ActionType.SHOW_BACKGROUND_IMAGE, preferences, controller, \"showBackgroundImage\");\n            createAction(ActionType.DELETE_BACKGROUND_IMAGE, preferences, controller, \"deleteBackgroundImage\");\n            createAction(ActionType.ADD_LEVEL, preferences, planController, \"addLevel\");\n            createAction(ActionType.MODIFY_LEVEL, preferences, planController, \"modifySelectedLevel\");\n            createAction(ActionType.DELETE_LEVEL, preferences, planController, \"deleteSelectedLevel\");\n            createAction(ActionType.ZOOM_IN, preferences, controller, \"zoomIn\");\n            createAction(ActionType.ZOOM_OUT, preferences, controller, \"zoomOut\");\n            createAction(ActionType.EXPORT_TO_SVG, preferences, controller, \"exportToSVG\");\n        }\n        if (homeController3D.getView() !\u003d null) {\n            ButtonGroup viewGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera(), viewGroup, preferences, homeController3D, \"viewFromTop\");\n            createToggleAction(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera(), viewGroup, preferences, homeController3D, \"viewFromObserver\");\n            createAction(ActionType.MODIFY_OBSERVER, preferences, planController, \"modifyObserverCamera\");\n            createAction(ActionType.STORE_POINT_OF_VIEW, preferences, controller, \"storeCamera\");\n            getActionMap().put(ActionType.DETACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.DETACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.detachView(homeController3D.getView());\n                }\n            });\n            getActionMap().put(ActionType.ATTACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.ATTACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.attachView(homeController3D.getView());\n                }\n            });\n            ButtonGroup displayLevelGroup \u003d new ButtonGroup();\n            boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n            createToggleAction(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displayAllLevels\");\n            createToggleAction(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displaySelectedLevel\");\n            createAction(ActionType.MODIFY_3D_ATTRIBUTES, preferences, homeController3D, \"modifyAttributes\");\n            createAction(ActionType.CREATE_PHOTO, preferences, controller, \"createPhoto\");\n            createAction(ActionType.CREATE_VIDEO, preferences, controller, \"createVideo\");\n            createAction(ActionType.EXPORT_TO_OBJ, preferences, controller, \"exportToOBJ\");\n        }\n        createAction(ActionType.HELP, preferences, controller, \"help\");\n        createAction(ActionType.ABOUT, preferences, controller, \"about\");\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object that calls on \u003ccode\u003econtroller\u003c/code\u003e a given\n     * \u003ccode\u003emethod\u003c/code\u003e with its \u003ccode\u003eparameters\u003c/code\u003e. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        try {\n            ControllerAction action \u003d new ControllerAction(preferences, HomePane.class, actionType.name(), controller, method, parameters);\n            getActionMap().put(actionType, action);\n            return action;\n        } catch (NoSuchMethodException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object associated with a \u003ccode\u003eToggleButtonModel\u003c/code\u003e instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        Action action \u003d createAction(actionType, preferences, controller, method, parameters);\n        JToggleButton.ToggleButtonModel toggleButtonModel \u003d new JToggleButton.ToggleButtonModel();\n        toggleButtonModel.setSelected(selected);\n        if (group !\u003d null) {\n            toggleButtonModel.setGroup(group);\n        }\n        action.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, toggleButtonModel);\n        return action;\n    }\n\n    /**\n     * Creates a \u003ccode\u003eReourceAction\u003c/code\u003e object that calls\n     * \u003ccode\u003eactionPerfomed\u003c/code\u003e method on a given\n     * existing \u003ccode\u003eclipboardAction\u003c/code\u003e with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction) {\n        getActionMap().put(actionType, new ResourceAction(preferences, HomePane.class, actionType.name()) {\n\n            public void actionPerformed(ActionEvent ev) {\n                if (copyAction) {\n                    clipboardEmpty \u003d false;\n                }\n                ev \u003d new ActionEvent(lastFocusedComponent, ActionEvent.ACTION_PERFORMED, null);\n                clipboardAction.actionPerformed(ev);\n            }\n        });\n    }\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller) {\n        this.menuActionMap \u003d new ActionMap();\n        createMenuAction(preferences, MenuActionType.FILE_MENU);\n        createMenuAction(preferences, MenuActionType.EDIT_MENU);\n        createMenuAction(preferences, MenuActionType.FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.PLAN_MENU);\n        createMenuAction(preferences, MenuActionType.VIEW_3D_MENU);\n        createMenuAction(preferences, MenuActionType.HELP_MENU);\n        createMenuAction(preferences, MenuActionType.OPEN_RECENT_HOME_MENU);\n        createMenuAction(preferences, MenuActionType.SORT_HOME_FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.ALIGN_OR_DISTRIBUTE_MENU);\n        createMenuAction(preferences, MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU);\n        createMenuAction(preferences, MenuActionType.MODIFY_TEXT_STYLE);\n        createMenuAction(preferences, MenuActionType.GO_TO_POINT_OF_VIEW);\n        createMenuAction(preferences, MenuActionType.SELECT_OBJECT_MENU);\n    }\n\n    /**\n     * Creates a \u003ccode\u003eResourceAction\u003c/code\u003e object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action) {\n        this.menuActionMap.put(action, new ResourceAction(preferences, HomePane.class, action.name(), true));\n    }\n\n    /**\n     * Creates the Swing actions matching each actions available in \u003ccode\u003eplugins\u003c/code\u003e.\n     */\n    private void createPluginActions(List\u003cPlugin\u003e plugins) {\n        this.pluginActions \u003d new ArrayList\u003cAction\u003e();\n        if (plugins !\u003d null) {\n            for (Plugin plugin : plugins) {\n                for (final PluginAction pluginAction : plugin.getActions()) {\n                    // Create a Swing action adapter to plug-in action\n                    this.pluginActions.add(new ActionAdapter(pluginAction));\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller) {\n        this.catalogTransferHandler \u003d new FurnitureCatalogTransferHandler(controller.getContentManager(), controller.getFurnitureCatalogController(), controller.getFurnitureController());\n        this.furnitureTransferHandler \u003d new FurnitureTransferHandler(home, controller.getContentManager(), controller);\n        this.planTransferHandler \u003d new PlanTransferHandler(home, controller.getContentManager(), controller);\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home) {\n        home.addPropertyChangeListener(Home.Property.CAMERA, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera());\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera());\n            }\n        });\n    }\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected) {\n        ((JToggleButton.ToggleButtonModel) getActionMap().get(actionType).getValue(ResourceAction.TOGGLE_BUTTON_MODEL)).setSelected(selected);\n    }\n\n    /**\n     * Adds listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home) {\n        home.getEnvironment().addPropertyChangeListener(HomeEnvironment.Property.ALL_LEVELS_VISIBLE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n                setToggleButtonModelSelected(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible);\n                setToggleButtonModelSelected(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible);\n            }\n        });\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003epreferences\u003c/code\u003e to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences) {\n        preferences.addPropertyChangeListener(UserPreferences.Property.LANGUAGE, new LanguageChangeListener(this));\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003eplanController\u003c/code\u003e to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController) {\n        planController.addPropertyChangeListener(PlanController.Property.MODE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                Mode mode \u003d planController.getMode();\n                setToggleButtonModelSelected(ActionType.SELECT, mode \u003d\u003d PlanController.Mode.SELECTION);\n                setToggleButtonModelSelected(ActionType.PAN, mode \u003d\u003d PlanController.Mode.PANNING);\n                setToggleButtonModelSelected(ActionType.CREATE_WALLS, mode \u003d\u003d PlanController.Mode.WALL_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_ROOMS, mode \u003d\u003d PlanController.Mode.ROOM_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_DIMENSION_LINES, mode \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_LABELS, mode \u003d\u003d PlanController.Mode.LABEL_CREATION);\n            }\n        });\n    }\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener() {\n        KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"currentFocusCycleRoot\", new FocusCycleRootChangeListener(this));\n    }\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener \u003d null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener \u003d new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent !\u003d null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent \u003d homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode !\u003d null \u0026\u0026 (lostFocusedComponent \u003d\u003d homePane.controller.getPlanController().getView() || ev.getNewValue() \u003d\u003d null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode \u003d null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() !\u003d null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent \u003d (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) \u0026\u0026 gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews \u003d { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view !\u003d null \u0026\u0026 SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent \u003d (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener \u003d new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController \u003d controller.getPlanController();\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 (ev.getModifiers() \u0026 (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) \u003d\u003d 0 \u0026\u0026 getActionMap().get(ActionType.PAN).getValue(Action.NAME) !\u003d null \u0026\u0026 planController.getMode() !\u003d PlanController.Mode.PANNING \u0026\u0026 !planController.isModificationState() \u0026\u0026 SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) \u0026\u0026 !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode \u003d planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 previousPlanControllerMode !\u003d null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode \u003d null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap \u003d getActionMap();\n            Action[] specialKeyActions \u003d { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask \u003d KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke \u003d (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() \u003d\u003d actionKeyStroke.getKeyChar() \u0026\u0026 (ev.getModifiers() \u0026 modifiersMask) \u003d\u003d (actionKeyStroke.getModifiers() \u0026 modifiersMask) \u0026\u0026 specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy() {\n        setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {\n\n            @Override\n            protected boolean accept(Component component) {\n                if (super.accept(component)) {\n                    for (JSplitPane splitPane; (splitPane \u003d (JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, component)) !\u003d null; component \u003d splitPane) {\n                        if (isChildComponentInvisible(splitPane, component)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n        setFocusTraversalPolicyProvider(true);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the top or the bottom component of the \u003ccode\u003esplitPane\u003c/code\u003e\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent) {\n        return (SwingUtilities.isDescendingFrom(childComponent, splitPane.getTopComponent()) \u0026\u0026 (splitPane.getTopComponent().getWidth() \u003d\u003d 0 || splitPane.getTopComponent().getHeight() \u003d\u003d 0)) || (SwingUtilities.isDescendingFrom(childComponent, splitPane.getBottomComponent()) \u0026\u0026 (splitPane.getBottomComponent().getWidth() \u003d\u003d 0 || splitPane.getBottomComponent().getHeight() \u003d\u003d 0));\n    }\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller) {\n        // Create File menu\n        JMenu fileMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FILE_MENU));\n        addActionToMenu(ActionType.NEW_HOME, fileMenu);\n        addActionToMenu(ActionType.OPEN, fileMenu);\n        final JMenu openRecentHomeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.OPEN_RECENT_HOME_MENU));\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n        openRecentHomeMenu.addMenuListener(new MenuListener() {\n\n            public void menuSelected(MenuEvent ev) {\n                updateOpenRecentHomeMenu(openRecentHomeMenu, controller);\n            }\n\n            public void menuCanceled(MenuEvent ev) {\n            }\n\n            public void menuDeselected(MenuEvent ev) {\n            }\n        });\n        fileMenu.add(openRecentHomeMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.CLOSE, fileMenu);\n        addActionToMenu(ActionType.SAVE, fileMenu);\n        addActionToMenu(ActionType.SAVE_AS, fileMenu);\n        addActionToMenu(ActionType.SAVE_AND_COMPRESS, fileMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.PAGE_SETUP, fileMenu);\n        addActionToMenu(ActionType.PRINT_PREVIEW, fileMenu);\n        addActionToMenu(ActionType.PRINT, fileMenu);\n        // Don\u0027t add PRINT_TO_PDF, PREFERENCES and EXIT menu items under Mac OS X,\n        // because PREFERENCES and EXIT items are displayed in application menu\n        // and PRINT_TO_PDF is available in standard Mac OS X Print dialog\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.PRINT_TO_PDF, fileMenu);\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.PREFERENCES, fileMenu);\n        }\n        // Create Edit menu\n        JMenu editMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.EDIT_MENU));\n        addActionToMenu(ActionType.UNDO, editMenu);\n        addActionToMenu(ActionType.REDO, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.CUT, editMenu);\n        addActionToMenu(ActionType.COPY, editMenu);\n        addActionToMenu(ActionType.PASTE, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.DELETE, editMenu);\n        addActionToMenu(ActionType.SELECT_ALL, editMenu);\n        // Create Furniture menu\n        JMenu furnitureMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FURNITURE_MENU));\n        addActionToMenu(ActionType.ADD_HOME_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.MODIFY_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.GROUP_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.UNGROUP_FURNITURE, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.IMPORT_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_FURNITURE_LIBRARY, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_TEXTURES_LIBRARY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        furnitureMenu.add(createFurnitureSortMenu(home, preferences));\n        furnitureMenu.add(createFurnitureDisplayPropertyMenu(home, preferences));\n        // Create Plan menu\n        JMenu planMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.PLAN_MENU));\n        addToggleActionToMenu(ActionType.SELECT, true, planMenu);\n        addToggleActionToMenu(ActionType.PAN, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_WALLS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_ROOMS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_DIMENSION_LINES, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_LABELS, true, planMenu);\n        planMenu.addSeparator();\n        JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, false);\n        if (lockUnlockBasePlanMenuItem !\u003d null) {\n            planMenu.add(lockUnlockBasePlanMenuItem);\n        }\n        addActionToMenu(ActionType.MODIFY_COMPASS, planMenu);\n        addActionToMenu(ActionType.MODIFY_WALL, planMenu);\n        addActionToMenu(ActionType.REVERSE_WALL_DIRECTION, planMenu);\n        addActionToMenu(ActionType.SPLIT_WALL, planMenu);\n        addActionToMenu(ActionType.MODIFY_ROOM, planMenu);\n        addActionToMenu(ActionType.MODIFY_LABEL, planMenu);\n        planMenu.add(createTextStyleMenu(home, preferences, false));\n        planMenu.addSeparator();\n        JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, false);\n        if (importModifyBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(importModifyBackgroundImageMenuItem);\n        }\n        JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, false);\n        if (hideShowBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(hideShowBackgroundImageMenuItem);\n        }\n        addActionToMenu(ActionType.DELETE_BACKGROUND_IMAGE, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ADD_LEVEL, planMenu);\n        addActionToMenu(ActionType.MODIFY_LEVEL, planMenu);\n        addActionToMenu(ActionType.DELETE_LEVEL, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ZOOM_IN, planMenu);\n        addActionToMenu(ActionType.ZOOM_OUT, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_SVG, planMenu);\n        // Create 3D Preview menu\n        JMenu preview3DMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.VIEW_3D_MENU));\n        addToggleActionToMenu(ActionType.VIEW_FROM_TOP, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.VIEW_FROM_OBSERVER, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_OBSERVER, preview3DMenu);\n        addActionToMenu(ActionType.STORE_POINT_OF_VIEW, preview3DMenu);\n        JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n        if (goToPointOfViewMenu !\u003d null) {\n            preview3DMenu.add(goToPointOfViewMenu);\n        }\n        preview3DMenu.addSeparator();\n        JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, false);\n        if (attachDetach3DViewMenuItem !\u003d null) {\n            preview3DMenu.add(attachDetach3DViewMenuItem);\n        }\n        addToggleActionToMenu(ActionType.DISPLAY_ALL_LEVELS, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_3D_ATTRIBUTES, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.CREATE_PHOTO, preview3DMenu);\n        addActionToMenu(ActionType.CREATE_VIDEO, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_OBJ, preview3DMenu);\n        // Create Help menu\n        JMenu helpMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.HELP_MENU));\n        addActionToMenu(ActionType.HELP, helpMenu);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.ABOUT, helpMenu);\n        }\n        // Add menus to menu bar\n        JMenuBar menuBar \u003d new JMenuBar();\n        menuBar.add(fileMenu);\n        menuBar.add(editMenu);\n        menuBar.add(furnitureMenu);\n        if (controller.getPlanController().getView() !\u003d null) {\n            menuBar.add(planMenu);\n        }\n        if (controller.getHomeController3D().getView() !\u003d null) {\n            menuBar.add(preview3DMenu);\n        }\n        menuBar.add(helpMenu);\n        // Add plugin actions menu items\n        for (Action pluginAction : this.pluginActions) {\n            String pluginMenu \u003d (String) pluginAction.getValue(PluginAction.Property.MENU.name());\n            if (pluginMenu !\u003d null) {\n                boolean pluginActionAdded \u003d false;\n                for (int i \u003d 0; i \u003c menuBar.getMenuCount(); i++) {\n                    JMenu menu \u003d menuBar.getMenu(i);\n                    if (menu.getText().equals(pluginMenu)) {\n                        // Add menu item to existing menu\n                        menu.addSeparator();\n                        menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                        pluginActionAdded \u003d true;\n                        break;\n                    }\n                }\n                if (!pluginActionAdded) {\n                    // Create missing menu before last menu\n                    JMenu menu \u003d new JMenu(pluginMenu);\n                    menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                    menuBar.add(menu, menuBar.getMenuCount() - 1);\n                }\n            }\n        }\n        // Add EXIT action at end to ensure it\u0027s the last item of file menu\n        if (!OperatingSystem.isMacOSX()) {\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.EXIT, fileMenu);\n        }\n        removeUselessSeparatorsAndEmptyMenus(menuBar);\n        return menuBar;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu) {\n        addActionToMenu(actionType, false, menu);\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu) {\n        addToggleActionToMenu(actionType, false, radioButton, menu);\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, popup, radioButton));\n        }\n    }\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton) {\n        JMenuItem menuItem;\n        if (radioButton) {\n            menuItem \u003d new JRadioButtonMenuItem();\n        } else {\n            menuItem \u003d new JCheckBoxMenuItem();\n        }\n        // Configure model\n        menuItem.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n        // Configure menu item action after setting its model to avoid losing its mnemonic\n        menuItem.setAction(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        return menuItem;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(new ResourceAction.PopupMenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, true, radioButton));\n        }\n    }\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component) {\n        for (int i \u003d component.getComponentCount() - 1; i \u003e\u003d 0; i--) {\n            Component child \u003d component.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d component.getComponentCount() - 1 || component.getComponent(i - 1) instanceof JSeparator)) {\n                component.remove(i);\n            } else if (child instanceof JMenu) {\n                removeUselessSeparatorsAndEmptyMenus(((JMenu) child).getPopupMenu());\n            }\n            if (child instanceof JMenu \u0026\u0026 (((JMenu) child).getMenuComponentCount() \u003d\u003d 0 || ((JMenu) child).getMenuComponentCount() \u003d\u003d 1 \u0026\u0026 ((JMenu) child).getMenuComponent(0) instanceof JSeparator)) {\n                component.remove(i);\n            }\n        }\n        // Don\u0027t let a menu start with a separator\n        if (component.getComponentCount() \u003e 0 \u0026\u0026 component.getComponent(0) instanceof JSeparator) {\n            component.remove(0);\n        }\n    }\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu alignOrDistributeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.ALIGN_OR_DISTRIBUTE_MENU));\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, popup, alignOrDistributeMenu);\n        return alignOrDistributeMenu;\n    }\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Sort submenu\n        JMenu sortMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.SORT_HOME_FURNITURE_MENU));\n        // Map sort furniture properties to sort actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e sortActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, sortActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_NAME, sortActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, sortActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, sortActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, sortActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_X, sortActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_Y, sortActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, sortActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, sortActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, sortActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_COLOR, sortActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, sortActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, sortActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TYPE, sortActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, sortActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE, sortActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, sortActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu and make them share the same radio button group\n        ButtonGroup sortButtonGroup \u003d new ButtonGroup();\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : sortActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action sortAction \u003d entry.getValue();\n            JRadioButtonMenuItem sortMenuItem \u003d new JRadioButtonMenuItem();\n            // Use a special model for sort radio button menu item that is selected if\n            // home is sorted on furnitureProperty criterion\n            sortMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return furnitureProperty \u003d\u003d home.getFurnitureSortedProperty();\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            sortMenuItem.setAction(new ResourceAction.MenuItemAction(sortAction));\n            sortMenu.add(sortMenuItem);\n            sortButtonGroup.add(sortMenuItem);\n        }\n        Action sortOrderAction \u003d getActionMap().get(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER);\n        if (sortOrderAction.getValue(Action.NAME) !\u003d null) {\n            sortMenu.addSeparator();\n            JCheckBoxMenuItem sortOrderCheckBoxMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for sort order check box menu item that is selected depending on\n            // home sort order property\n            sortOrderCheckBoxMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.isFurnitureDescendingSorted();\n                }\n            });\n            sortOrderCheckBoxMenuItem.setAction(new ResourceAction.MenuItemAction(sortOrderAction));\n            sortMenu.add(sortOrderCheckBoxMenuItem);\n        }\n        return sortMenu;\n    }\n\n    /**\n     * Adds to \u003ccode\u003eactions\u003c/code\u003e the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToMap(ActionType actionType, Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e actions, HomePieceOfFurniture.SortableProperty key) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            actions.put(key, action);\n        }\n    }\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Display property submenu\n        JMenu displayPropertyMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU));\n        // Map displayProperty furniture properties to displayProperty actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e displayPropertyActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, displayPropertyActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_NAME, displayPropertyActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, displayPropertyActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_X, displayPropertyActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_Y, displayPropertyActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, displayPropertyActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_COLOR, displayPropertyActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : displayPropertyActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action displayPropertyAction \u003d entry.getValue();\n            JCheckBoxMenuItem displayPropertyMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for displayProperty check box menu item that is selected if\n            // home furniture visible properties contains furnitureProperty\n            displayPropertyMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.getFurnitureVisibleProperties().contains(furnitureProperty);\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            displayPropertyMenuItem.setAction(displayPropertyAction);\n            displayPropertyMenu.add(displayPropertyMenuItem);\n        }\n        return displayPropertyMenu;\n    }\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem lockUnlockBasePlanMenuItem \u003d new JMenuItem(createLockUnlockBasePlanAction(home, popup));\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanMenuItem.setAction(createLockUnlockBasePlanAction(home, popup));\n                }\n            });\n            return lockUnlockBasePlanMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup) {\n        ActionType actionType \u003d home.isBasePlanLocked() ? ActionType.UNLOCK_BASE_PLAN : ActionType.LOCK_BASE_PLAN;\n        Action action \u003d getActionMap().get(actionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action);\n    }\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JButton lockUnlockBasePlanButton \u003d new JButton(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n            lockUnlockBasePlanButton.setBorderPainted(false);\n            lockUnlockBasePlanButton.setContentAreaFilled(false);\n            lockUnlockBasePlanButton.setFocusable(false);\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanButton.setAction(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n                }\n            });\n            return lockUnlockBasePlanButton;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu modifyTextStyleMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.MODIFY_TEXT_STYLE));\n        addActionToMenu(ActionType.INCREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        addActionToMenu(ActionType.DECREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        modifyTextStyleMenu.addSeparator();\n        addToggleActionToMenu(ActionType.TOGGLE_BOLD_STYLE, popup, false, modifyTextStyleMenu);\n        addToggleActionToMenu(ActionType.TOGGLE_ITALIC_STYLE, popup, false, modifyTextStyleMenu);\n        return modifyTextStyleMenu;\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all bold or not\n                Boolean selectionBoldStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean bold;\n                    if (item instanceof Label) {\n                        bold \u003d isItemTextBold(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        bold \u003d isItemTextBold(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        bold \u003d isItemTextBold(room, room.getNameStyle());\n                        if (bold !\u003d isItemTextBold(room, room.getAreaStyle())) {\n                            bold \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        bold \u003d isItemTextBold(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionBoldStyle \u003d\u003d null) {\n                        selectionBoldStyle \u003d bold;\n                    } else if (bold \u003d\u003d null || !selectionBoldStyle.equals(bold)) {\n                        selectionBoldStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionBoldStyle !\u003d null \u0026\u0026 selectionBoldStyle;\n            }\n\n            private boolean isItemTextBold(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isBold();\n            }\n        };\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all italic or not\n                Boolean selectionItalicStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean italic;\n                    if (item instanceof Label) {\n                        italic \u003d isItemTextItalic(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        italic \u003d isItemTextItalic(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        italic \u003d isItemTextItalic(room, room.getNameStyle());\n                        if (italic !\u003d isItemTextItalic(room, room.getAreaStyle())) {\n                            italic \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        italic \u003d isItemTextItalic(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionItalicStyle \u003d\u003d null) {\n                        selectionItalicStyle \u003d italic;\n                    } else if (italic \u003d\u003d null || !selectionItalicStyle.equals(italic)) {\n                        selectionItalicStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionItalicStyle !\u003d null \u0026\u0026 selectionItalicStyle;\n            }\n\n            private boolean isItemTextItalic(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isItalic();\n            }\n        };\n    }\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action importBackgroundImageAction \u003d actionMap.get(ActionType.IMPORT_BACKGROUND_IMAGE);\n        Action modifyBackgroundImageAction \u003d actionMap.get(ActionType.MODIFY_BACKGROUND_IMAGE);\n        if (importBackgroundImageAction !\u003d null \u0026\u0026 importBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 modifyBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem importModifyBackgroundImageMenuItem \u003d new JMenuItem(createImportModifyBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    importModifyBackgroundImageMenuItem.setAction(createImportModifyBackgroundImageAction(home, popup));\n                }\n            });\n            return importModifyBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener) {\n        home.addPropertyChangeListener(Home.Property.BACKGROUND_IMAGE, listener);\n        home.addPropertyChangeListener(Home.Property.SELECTED_LEVEL, listener);\n        final PropertyChangeListener levelChangeListener \u003d new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                if (Level.Property.BACKGROUND_IMAGE.name().equals(ev.getPropertyName())) {\n                    listener.propertyChange(ev);\n                }\n            }\n        };\n        for (Level level : this.home.getLevels()) {\n            level.addPropertyChangeListener(levelChangeListener);\n        }\n        this.home.addLevelsListener(new CollectionListener\u003cLevel\u003e() {\n\n            public void collectionChanged(CollectionEvent\u003cLevel\u003e ev) {\n                switch(ev.getType()) {\n                    case ADD:\n                        ev.getItem().addPropertyChangeListener(levelChangeListener);\n                        break;\n                    case DELETE:\n                        ev.getItem().removePropertyChangeListener(levelChangeListener);\n                        break;\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null ? ActionType.IMPORT_BACKGROUND_IMAGE : ActionType.MODIFY_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action hideBackgroundImageAction \u003d actionMap.get(ActionType.HIDE_BACKGROUND_IMAGE);\n        Action showBackgroundImageAction \u003d actionMap.get(ActionType.SHOW_BACKGROUND_IMAGE);\n        if (hideBackgroundImageAction !\u003d null \u0026\u0026 hideBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 showBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem hideShowBackgroundImageMenuItem \u003d new JMenuItem(createHideShowBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    hideShowBackgroundImageMenuItem.setAction(createHideShowBackgroundImageAction(home, popup));\n                }\n            });\n            return hideShowBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null || backgroundImage.isVisible() ? ActionType.HIDE_BACKGROUND_IMAGE : ActionType.SHOW_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller) {\n        Action goToPointOfViewAction \u003d this.menuActionMap.get(MenuActionType.GO_TO_POINT_OF_VIEW);\n        if (goToPointOfViewAction.getValue(Action.NAME) !\u003d null) {\n            final JMenu goToPointOfViewMenu \u003d new JMenu(goToPointOfViewAction);\n            updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n            home.addPropertyChangeListener(Home.Property.STORED_CAMERAS, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n                }\n            });\n            return goToPointOfViewMenu;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller) {\n        List\u003cCamera\u003e storedCameras \u003d home.getStoredCameras();\n        goToPointOfViewMenu.removeAll();\n        if (storedCameras.isEmpty()) {\n            goToPointOfViewMenu.setEnabled(false);\n            goToPointOfViewMenu.add(new ResourceAction(preferences, HomePane.class, \"NoStoredPointOfView\", false));\n        } else {\n            goToPointOfViewMenu.setEnabled(true);\n            for (final Camera camera : storedCameras) {\n                goToPointOfViewMenu.add(new AbstractAction(camera.getName()) {\n\n                    public void actionPerformed(ActionEvent e) {\n                        controller.getHomeController3D().goToCamera(camera);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action display3DViewInSeparateWindowAction \u003d actionMap.get(ActionType.DETACH_3D_VIEW);\n        Action display3DViewInMainWindowAction \u003d actionMap.get(ActionType.ATTACH_3D_VIEW);\n        if (display3DViewInSeparateWindowAction !\u003d null \u0026\u0026 display3DViewInSeparateWindowAction.getValue(Action.NAME) !\u003d null \u0026\u0026 display3DViewInMainWindowAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem attachDetach3DViewMenuItem \u003d new JMenuItem(createAttachDetach3DViewAction(controller, popup));\n            // Add a listener to 3D view to switch action when its parent changes\n            JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n            view3D.addAncestorListener(new AncestorListener() {\n\n                public void ancestorAdded(AncestorEvent ev) {\n                    attachDetach3DViewMenuItem.setAction(createAttachDetach3DViewAction(controller, popup));\n                }\n\n                public void ancestorRemoved(AncestorEvent ev) {\n                }\n\n                public void ancestorMoved(AncestorEvent ev) {\n                }\n            });\n            return attachDetach3DViewMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup) {\n        JRootPane view3DRootPane \u003d SwingUtilities.getRootPane((JComponent) controller.getHomeController3D().getView());\n        ActionType display3DViewActionType \u003d view3DRootPane \u003d\u003d this ? ActionType.DETACH_3D_VIEW : ActionType.ATTACH_3D_VIEW;\n        Action backgroundImageAction \u003d getActionMap().get(display3DViewActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Updates \u003ccode\u003eopenRecentHomeMenu\u003c/code\u003e from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller) {\n        openRecentHomeMenu.removeAll();\n        for (final String homeName : controller.getRecentHomes()) {\n            openRecentHomeMenu.add(new AbstractAction(controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D)) {\n\n                public void actionPerformed(ActionEvent e) {\n                    controller.open(homeName);\n                }\n            });\n        }\n        if (openRecentHomeMenu.getMenuComponentCount() \u003e 0) {\n            openRecentHomeMenu.addSeparator();\n        }\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n    }\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home) {\n        final JToolBar toolBar \u003d new UnfocusableToolBar();\n        addActionToToolBar(ActionType.NEW_HOME, toolBar);\n        addActionToToolBar(ActionType.OPEN, toolBar);\n        addActionToToolBar(ActionType.SAVE, toolBar);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToToolBar(ActionType.PREFERENCES, toolBar);\n        }\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.UNDO, toolBar);\n        addActionToToolBar(ActionType.REDO, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.CUT, toolBar);\n        addActionToToolBar(ActionType.COPY, toolBar);\n        addActionToToolBar(ActionType.PASTE, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.ADD_HOME_FURNITURE, toolBar);\n        toolBar.addSeparator();\n        addToggleActionToToolBar(ActionType.SELECT, toolBar);\n        addToggleActionToToolBar(ActionType.PAN, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_WALLS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_ROOMS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_DIMENSION_LINES, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_LABELS, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.INCREASE_TEXT_SIZE, toolBar);\n        addActionToToolBar(ActionType.DECREASE_TEXT_SIZE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_BOLD_STYLE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_ITALIC_STYLE, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.ZOOM_IN, toolBar);\n        addActionToToolBar(ActionType.ZOOM_OUT, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.CREATE_PHOTO, toolBar);\n        addActionToToolBar(ActionType.CREATE_VIDEO, toolBar);\n        toolBar.addSeparator();\n        // Add plugin actions buttons\n        boolean pluginActionsAdded \u003d false;\n        for (Action pluginAction : this.pluginActions) {\n            if (Boolean.TRUE.equals(pluginAction.getValue(PluginAction.Property.TOOL_BAR.name()))) {\n                toolBar.add(new ResourceAction.ToolBarAction(pluginAction));\n                pluginActionsAdded \u003d true;\n            }\n        }\n        if (pluginActionsAdded) {\n            toolBar.addSeparator();\n        }\n        addActionToToolBar(ActionType.HELP, toolBar);\n        // Remove useless separators\n        for (int i \u003d toolBar.getComponentCount() - 1; i \u003e 0; i--) {\n            Component child \u003d toolBar.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d toolBar.getComponentCount() - 1 || toolBar.getComponent(i - 1) instanceof JSeparator)) {\n                toolBar.remove(i);\n            }\n        }\n        return toolBar;\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            Action toolBarAction \u003d new ResourceAction.ToolBarAction(action);\n            JToggleButton toggleButton \u003d new JToggleButton(toolBarAction);\n            toggleButton.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n            toolBar.add(toggleButton);\n        }\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            toolBar.add(new ResourceAction.ToolBarAction(action));\n        }\n    }\n\n    /**\n     * Enables or disables the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            action.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText) {\n        setNameAndShortDescription(ActionType.UNDO, undoText);\n        setNameAndShortDescription(ActionType.REDO, redoText);\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * matching \u003ccode\u003eactionType\u003c/code\u003e. If \u003ccode\u003ename\u003c/code\u003e is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            if (name \u003d\u003d null) {\n                name \u003d (String) action.getValue(Action.DEFAULT);\n            }\n            action.putValue(Action.NAME, name);\n            action.putValue(Action.SHORT_DESCRIPTION, name);\n        }\n    }\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled) {\n        boolean dragAndDropWithTransferHandlerSupported;\n        try {\n            // Don\u0027t use transfer handlers for drag and drop with Plugin2 under Mac OS X or when in an unsigned applet\n            dragAndDropWithTransferHandlerSupported \u003d !Boolean.getBoolean(\"com.eteks.sweethome3d.dragAndDropWithoutTransferHandler\");\n        } catch (AccessControlException ex) {\n            dragAndDropWithTransferHandlerSupported \u003d false;\n        }\n        JComponent catalogView \u003d (JComponent) this.controller.getFurnitureCatalogController().getView();\n        JComponent furnitureView \u003d (JComponent) this.controller.getFurnitureController().getView();\n        JComponent planView \u003d (JComponent) this.controller.getPlanController().getView();\n        if (enabled) {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(this.catalogTransferHandler);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(this.furnitureTransferHandler);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(this.furnitureTransferHandler);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(this.planTransferHandler);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    // Check if furniture catalog is handled by a subcomponent\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    if (this.furnitureCatalogDragAndDropListener \u003d\u003d null) {\n                        this.furnitureCatalogDragAndDropListener \u003d createFurnitureCatalogMouseListener();\n                    }\n                    catalogComponent.addMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.addMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        } else {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(null);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(null);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(null);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(null);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    catalogComponent.removeMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.removeMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        }\n        this.transferHandlerEnabled \u003d enabled;\n    }\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener() {\n        return new MouseInputAdapter() {\n\n            private CatalogPieceOfFurniture selectedPiece;\n\n            private TransferHandler transferHandler;\n\n            private boolean autoscrolls;\n\n            private Cursor previousCursor;\n\n            private View previousView;\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev)) {\n                    List\u003cCatalogPieceOfFurniture\u003e selectedFurniture \u003d controller.getFurnitureCatalogController().getSelectedFurniture();\n                    if (selectedFurniture.size() \u003e 0) {\n                        JComponent source \u003d (JComponent) ev.getSource();\n                        this.transferHandler \u003d source.getTransferHandler();\n                        source.setTransferHandler(null);\n                        this.autoscrolls \u003d source.getAutoscrolls();\n                        source.setAutoscrolls(false);\n                        this.selectedPiece \u003d selectedFurniture.get(0);\n                        this.previousCursor \u003d null;\n                        this.previousView \u003d null;\n                    }\n                }\n            }\n\n            @Override\n            public void mouseDragged(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    // Force selection again\n                    List\u003cCatalogPieceOfFurniture\u003e emptyList \u003d Collections.emptyList();\n                    controller.getFurnitureCatalogController().setSelectedFurniture(emptyList);\n                    controller.getFurnitureCatalogController().setSelectedFurniture(Arrays.asList(new CatalogPieceOfFurniture[] { this.selectedPiece }));\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (this.previousView !\u003d view) {\n                        if (this.previousView !\u003d null) {\n                            if (this.previousView \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().stopDraggedItems();\n                            }\n                            ((JComponent) this.previousView).setCursor(this.previousCursor);\n                            this.previousCursor \u003d null;\n                            this.previousView \u003d null;\n                        }\n                        if (view !\u003d null) {\n                            JComponent component \u003d (JComponent) view;\n                            this.previousCursor \u003d component.getCursor();\n                            this.previousView \u003d view;\n                            component.setCursor(DragSource.DefaultCopyDrop);\n                            if (component.getParent() instanceof JViewport) {\n                                ((JViewport) component.getParent()).setCursor(DragSource.DefaultCopyDrop);\n                            }\n                            if (view \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().startDraggedItems(transferredFurniture, pointInView[0], pointInView[1]);\n                            }\n                        }\n                    } else if (pointInView !\u003d null) {\n                        controller.getPlanController().moveMouse(pointInView[0], pointInView[1]);\n                    }\n                }\n            }\n\n            private float[] getPointInPlanView(MouseEvent ev, List\u003cSelectable\u003e transferredFurniture) {\n                PlanView planView \u003d controller.getPlanController().getView();\n                if (planView !\u003d null) {\n                    JComponent planComponent \u003d (JComponent) planView;\n                    Point pointInPlanComponent \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent);\n                    if (planComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) planComponent.getParent()).contains(SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent.getParent())) || !(planComponent.getParent() instanceof JViewport) \u0026\u0026 planView.canImportDraggedItems(transferredFurniture, pointInPlanComponent.x, pointInPlanComponent.y)) {\n                        return new float[] { planView.convertXPixelToModel(pointInPlanComponent.x), planView.convertYPixelToModel(pointInPlanComponent.y) };\n                    }\n                }\n                return null;\n            }\n\n            private float[] getPointInFurnitureView(MouseEvent ev) {\n                View furnitureView \u003d controller.getFurnitureController().getView();\n                if (furnitureView !\u003d null) {\n                    JComponent furnitureComponent \u003d (JComponent) furnitureView;\n                    Point point \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getX(), ev.getY(), furnitureComponent.getParent() instanceof JViewport ? furnitureComponent.getParent() : furnitureComponent);\n                    if (furnitureComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) furnitureComponent.getParent()).contains(point) || !(furnitureComponent.getParent() instanceof JViewport) \u0026\u0026 furnitureComponent.contains(point)) {\n                        return new float[] { 0, 0 };\n                    }\n                }\n                return null;\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        controller.getPlanController().stopDraggedItems();\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (pointInView !\u003d null) {\n                        controller.drop(transferredFurniture, view, pointInView[0], pointInView[1]);\n                        ((JComponent) this.previousView).setCursor(this.previousCursor);\n                    }\n                    this.selectedPiece \u003d null;\n                    JComponent source \u003d (JComponent) ev.getSource();\n                    source.setTransferHandler(this.transferHandler);\n                    source.setAutoscrolls(this.autoscrolls);\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller) {\n        final JComponent catalogFurniturePane \u003d createCatalogFurniturePane(home, preferences, controller);\n        final JComponent planView3DPane \u003d createPlanView3DPane(home, preferences, controller);\n        if (catalogFurniturePane \u003d\u003d null) {\n            return planView3DPane;\n        } else if (planView3DPane \u003d\u003d null) {\n            return catalogFurniturePane;\n        } else {\n            final JSplitPane mainPane \u003d new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, catalogFurniturePane, planView3DPane);\n            // Set default divider location\n            mainPane.setDividerLocation(360);\n            configureSplitPane(mainPane, home, MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.3, true, controller);\n            return mainPane;\n        }\n    }\n\n    /**\n     * Configures \u003ccode\u003esplitPane\u003c/code\u003e divider location.\n     * If \u003ccode\u003edividerLocationProperty\u003c/code\u003e visual property exists in \u003ccode\u003ehome\u003c/code\u003e,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller) {\n        splitPane.setContinuousLayout(true);\n        splitPane.setOneTouchExpandable(true);\n        splitPane.setResizeWeight(defaultResizeWeight);\n        if (!showBorder) {\n            splitPane.setBorder(null);\n        }\n        // Restore divider location previously set\n        Integer dividerLocation \u003d (Integer) home.getVisualProperty(dividerLocationProperty);\n        if (dividerLocation !\u003d null) {\n            splitPane.setDividerLocation(dividerLocation);\n        }\n        splitPane.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, new PropertyChangeListener() {\n\n            public void propertyChange(final PropertyChangeEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        Component focusOwner \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();\n                        if (focusOwner !\u003d null \u0026\u0026 isChildComponentInvisible(splitPane, focusOwner)) {\n                            FocusTraversalPolicy focusTraversalPolicy \u003d getFocusTraversalPolicy();\n                            Component focusedComponent \u003d focusTraversalPolicy.getComponentAfter(HomePane.this, focusOwner);\n                            if (focusedComponent \u003d\u003d null) {\n                                focusedComponent \u003d focusTraversalPolicy.getComponentBefore(HomePane.this, focusOwner);\n                            }\n                            if (focusedComponent !\u003d null) {\n                                focusedComponent.requestFocusInWindow();\n                            }\n                        }\n                        controller.setVisualProperty(dividerLocationProperty, ev.getNewValue());\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent catalogView \u003d (JComponent) controller.getFurnitureCatalogController().getView();\n        if (catalogView !\u003d null) {\n            // Create catalog view popup menu\n            JPopupMenu catalogViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.COPY, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_HOME_FURNITURE, catalogViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.IMPORT_FURNITURE, catalogViewPopup);\n            SwingTools.hideDisabledMenuItems(catalogViewPopup);\n            catalogView.setComponentPopupMenu(catalogViewPopup);\n            preferences.addPropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, new FurnitureCatalogViewChangeListener(this, catalogView));\n            if (catalogView instanceof Scrollable) {\n                catalogView \u003d SwingTools.createScrollPane(catalogView);\n            }\n        }\n        // Configure furniture view\n        JComponent furnitureView \u003d (JComponent) controller.getFurnitureController().getView();\n        if (furnitureView !\u003d null) {\n            // Set default traversal keys of furniture view\n            KeyboardFocusManager focusManager \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager();\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS));\n            // Create furniture view popup menu\n            JPopupMenu furnitureViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.REDO, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.COPY, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.SELECT_ALL, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, furnitureViewPopup);\n            furnitureViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            furnitureViewPopup.addSeparator();\n            furnitureViewPopup.add(createFurnitureSortMenu(home, preferences));\n            furnitureViewPopup.add(createFurnitureDisplayPropertyMenu(home, preferences));\n            SwingTools.hideDisabledMenuItems(furnitureViewPopup);\n            furnitureView.setComponentPopupMenu(furnitureViewPopup);\n            if (furnitureView instanceof Scrollable) {\n                JScrollPane furnitureScrollPane \u003d SwingTools.createScrollPane(furnitureView);\n                // Add a mouse listener that gives focus to furniture view when\n                // user clicks in its viewport (tables don\u0027t spread vertically if their row count is too small)\n                final JViewport viewport \u003d furnitureScrollPane.getViewport();\n                viewport.addMouseListener(new MouseAdapter() {\n\n                    @Override\n                    public void mouseClicked(MouseEvent ev) {\n                        viewport.getView().requestFocusInWindow();\n                    }\n                });\n                Integer viewportY \u003d (Integer) home.getVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(0, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        controller.setVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY, viewport.getViewPosition().y);\n                    }\n                });\n                ((JViewport) furnitureView.getParent()).setComponentPopupMenu(furnitureViewPopup);\n                furnitureView \u003d furnitureScrollPane;\n            }\n        }\n        if (catalogView \u003d\u003d null) {\n            return furnitureView;\n        } else if (furnitureView \u003d\u003d null) {\n            return catalogView;\n        } else {\n            // Create a split pane that displays both components\n            JSplitPane catalogFurniturePane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, catalogView, furnitureView);\n            catalogFurniturePane.setBorder(null);\n            catalogFurniturePane.setMinimumSize(new Dimension());\n            configureSplitPane(catalogFurniturePane, home, CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n            return catalogFurniturePane;\n        }\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJComponent\u003e furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView \u003d this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView !\u003d null) {\n                    boolean transferHandlerEnabled \u003d homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView \u003d (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent \u003d SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent planView \u003d (JComponent) controller.getPlanController().getView();\n        if (planView !\u003d null) {\n            // Create plan view popup menu\n            JPopupMenu planViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, planViewPopup);\n            addActionToPopupMenu(ActionType.REDO, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, planViewPopup);\n            addActionToPopupMenu(ActionType.COPY, planViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, planViewPopup);\n            Action selectObjectAction \u003d this.menuActionMap.get(MenuActionType.SELECT_OBJECT_MENU);\n            JMenu selectObjectMenu;\n            if (selectObjectAction.getValue(Action.NAME) !\u003d null) {\n                selectObjectMenu \u003d new JMenu(selectObjectAction);\n                planViewPopup.add(selectObjectMenu);\n            } else {\n                selectObjectMenu \u003d null;\n            }\n            addActionToPopupMenu(ActionType.SELECT_ALL, planViewPopup);\n            planViewPopup.addSeparator();\n            addToggleActionToPopupMenu(ActionType.SELECT, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.PAN, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_WALLS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_ROOMS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_DIMENSION_LINES, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_LABELS, true, planViewPopup);\n            planViewPopup.addSeparator();\n            JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, true);\n            if (lockUnlockBasePlanMenuItem !\u003d null) {\n                planViewPopup.add(lockUnlockBasePlanMenuItem);\n            }\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, planViewPopup);\n            planViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            addActionToPopupMenu(ActionType.MODIFY_COMPASS, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.REVERSE_WALL_DIRECTION, planViewPopup);\n            addActionToPopupMenu(ActionType.SPLIT_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_ROOM, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LABEL, planViewPopup);\n            planViewPopup.add(createTextStyleMenu(home, preferences, true));\n            planViewPopup.addSeparator();\n            JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, true);\n            if (importModifyBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(importModifyBackgroundImageMenuItem);\n            }\n            JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, true);\n            if (hideShowBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(hideShowBackgroundImageMenuItem);\n            }\n            addActionToPopupMenu(ActionType.DELETE_BACKGROUND_IMAGE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.DELETE_LEVEL, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ZOOM_OUT, planViewPopup);\n            addActionToPopupMenu(ActionType.ZOOM_IN, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_SVG, planViewPopup);\n            SwingTools.hideDisabledMenuItems(planViewPopup);\n            if (selectObjectMenu !\u003d null) {\n                // Add a second popup listener to manage Select object sub menu before the menu is hidden when empty\n                addSelectObjectMenuItems(selectObjectMenu, controller.getPlanController(), preferences);\n            }\n            planView.setComponentPopupMenu(planViewPopup);\n            final JScrollPane planScrollPane;\n            if (planView instanceof Scrollable) {\n                planView \u003d planScrollPane \u003d SwingTools.createScrollPane(planView);\n            } else {\n                List\u003cJScrollPane\u003e scrollPanes \u003d SwingTools.findChildren(planView, JScrollPane.class);\n                if (scrollPanes.size() \u003d\u003d 1) {\n                    planScrollPane \u003d scrollPanes.get(0);\n                } else {\n                    planScrollPane \u003d null;\n                }\n            }\n            if (planScrollPane !\u003d null) {\n                setPlanRulersVisible(planScrollPane, controller, preferences.isRulersVisible());\n                if (planScrollPane.getCorner(JScrollPane.UPPER_LEADING_CORNER) \u003d\u003d null) {\n                    final JComponent lockUnlockBasePlanButton \u003d createLockUnlockBasePlanButton(home);\n                    if (lockUnlockBasePlanButton !\u003d null) {\n                        planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                        planScrollPane.addPropertyChangeListener(\"componentOrientation\", new PropertyChangeListener() {\n\n                            public void propertyChange(PropertyChangeEvent ev) {\n                                if (lockUnlockBasePlanButton.getParent() !\u003d null) {\n                                    planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                                }\n                            }\n                        });\n                    }\n                }\n                // Add a listener to update rulers visibility in preferences\n                preferences.addPropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, new RulersVisibilityChangeListener(this, planScrollPane, controller));\n                // Restore viewport position if it exists\n                final JViewport viewport \u003d planScrollPane.getViewport();\n                Integer viewportX \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY);\n                Integer viewportY \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportX !\u003d null \u0026\u0026 viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(viewportX, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        Point viewportPosition \u003d viewport.getViewPosition();\n                        controller.setVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY, viewportPosition.x);\n                        controller.setVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY, viewportPosition.y);\n                    }\n                });\n            }\n        }\n        // Configure 3D view\n        JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n        if (view3D !\u003d null) {\n            view3D.setPreferredSize(planView !\u003d null ? planView.getPreferredSize() : new Dimension(400, 400));\n            view3D.setMinimumSize(new Dimension());\n            // Create 3D view popup menu\n            JPopupMenu view3DPopup \u003d new JPopupMenu();\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_TOP, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_OBSERVER, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_OBSERVER, view3DPopup);\n            addActionToPopupMenu(ActionType.STORE_POINT_OF_VIEW, view3DPopup);\n            JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n            if (goToPointOfViewMenu !\u003d null) {\n                view3DPopup.add(goToPointOfViewMenu);\n            }\n            view3DPopup.addSeparator();\n            JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, true);\n            if (attachDetach3DViewMenuItem !\u003d null) {\n                view3DPopup.add(attachDetach3DViewMenuItem);\n            }\n            addToggleActionToPopupMenu(ActionType.DISPLAY_ALL_LEVELS, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_3D_ATTRIBUTES, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CREATE_PHOTO, view3DPopup);\n            addActionToPopupMenu(ActionType.CREATE_VIDEO, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_OBJ, view3DPopup);\n            SwingTools.hideDisabledMenuItems(view3DPopup);\n            view3D.setComponentPopupMenu(view3DPopup);\n            if (view3D instanceof Scrollable) {\n                view3D \u003d SwingTools.createScrollPane(view3D);\n            }\n            JComponent planView3DPane;\n            if (planView !\u003d null) {\n                // Create a split pane that displays both components\n                final JSplitPane planView3DSplitPane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, planView, view3D);\n                planView3DSplitPane.setMinimumSize(new Dimension());\n                configureSplitPane((JSplitPane) planView3DSplitPane, home, PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n                final Integer dividerLocation \u003d (Integer) home.getVisualProperty(PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                if (OperatingSystem.isMacOSX() \u0026\u0026 dividerLocation !\u003d null \u0026\u0026 dividerLocation \u003e 2) {\n                    // Under Mac OS X, ensure that the 3D view of an existing home will be displayed during a while\n                    // to avoid a freeze when the 3D view was saved as hidden and then the window displaying the 3D view is enlarged\n                    planView3DSplitPane.addAncestorListener(new AncestorListener() {\n\n                        public void ancestorAdded(AncestorEvent event) {\n                            planView3DSplitPane.removeAncestorListener(this);\n                            if (planView3DSplitPane.getRightComponent().getHeight() \u003d\u003d 0) {\n                                // If the 3D view is invisible, make it appear during a while\n                                planView3DSplitPane.setDividerLocation(dividerLocation - 2);\n                                Executors.newSingleThreadScheduledExecutor().schedule(new Runnable() {\n\n                                    public void run() {\n                                        EventQueue.invokeLater(new Runnable() {\n\n                                            public void run() {\n                                                planView3DSplitPane.setDividerLocation(dividerLocation);\n                                            }\n                                        });\n                                    }\n                                }, 1, TimeUnit.SECONDS);\n                            }\n                        }\n\n                        public void ancestorRemoved(AncestorEvent event) {\n                        }\n\n                        public void ancestorMoved(AncestorEvent event) {\n                        }\n                    });\n                }\n                planView3DPane \u003d planView3DSplitPane;\n            } else {\n                planView3DPane \u003d view3D;\n            }\n            // Detach 3D view if it was detached when saved and its dialog can be viewed in one of the screen devices\n            Boolean detachedView3D \u003d (Boolean) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY);\n            if (detachedView3D !\u003d null \u0026\u0026 detachedView3D.booleanValue()) {\n                // Check 3D view can be viewed in one of the available screens\n                final Integer dialogX \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n                final Integer dialogY \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY);\n                final Integer dialogWidth \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n                final Integer dialogHeight \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY);\n                if (dialogX !\u003d null \u0026\u0026 dialogY !\u003d null \u0026\u0026 dialogWidth !\u003d null \u0026\u0026 dialogHeight !\u003d null \u0026\u0026 SwingTools.isRectangleVisibleAtScreen(new Rectangle(dialogX, dialogY, dialogWidth, dialogHeight))) {\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            View view3D \u003d controller.getHomeController3D().getView();\n                            detachView(view3D, dialogX, dialogY, dialogWidth, dialogHeight);\n                        }\n                    });\n                    return planView3DPane;\n                }\n                if (planView3DPane instanceof JSplitPane) {\n                    ((JSplitPane) planView3DPane).setDividerLocation(0.5);\n                }\n                controller.setVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, null);\n            }\n            return planView3DPane;\n        } else {\n            return planView;\n        }\n    }\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences) {\n        JComponent planView \u003d (JComponent) planController.getView();\n        final Point lastMouseMoveLocation \u003d new Point(-1, -1);\n        ((JPopupMenu) selectObjectMenu.getParent()).addPopupMenuListener(new PopupMenuListener() {\n\n            @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n            public void popupMenuWillBecomeVisible(PopupMenuEvent ev) {\n                if (lastMouseMoveLocation.getX() \u003e\u003d 0 \u0026\u0026 !planController.isModificationState()) {\n                    final List\u003cSelectable\u003e items \u003d planController.getSelectableItemsAt(planController.getView().convertXPixelToModel(lastMouseMoveLocation.x), planController.getView().convertYPixelToModel(lastMouseMoveLocation.y));\n                    // Prepare localized formatters\n                    Map\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e formatters \u003d new HashMap\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e();\n                    formatters.put(Compass.class, new SelectableFormat\u003cCompass\u003e() {\n\n                        public String format(Compass compass) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.compass\");\n                        }\n                    });\n                    formatters.put(HomePieceOfFurniture.class, new SelectableFormat\u003cHomePieceOfFurniture\u003e() {\n\n                        public String format(HomePieceOfFurniture piece) {\n                            if (piece.getName().length() \u003e 0) {\n                                return piece.getName();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.furniture\");\n                            }\n                        }\n                    });\n                    formatters.put(Wall.class, new SelectableFormat\u003cWall\u003e() {\n\n                        public String format(Wall wall) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.wall\", preferences.getLengthUnit().getFormatWithUnit().format(wall.getLength()));\n                        }\n                    });\n                    formatters.put(Room.class, new SelectableFormat\u003cRoom\u003e() {\n\n                        public String format(Room room) {\n                            String roomInfo \u003d room.getName() !\u003d null \u0026\u0026 room.getName().length() \u003e 0 ? room.getName() : (room.isAreaVisible() ? preferences.getLengthUnit().getAreaFormatWithUnit().format(room.getArea()) : \"\");\n                            if (room.isFloorVisible() \u0026\u0026 !room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.floor\", roomInfo);\n                            } else if (!room.isFloorVisible() \u0026\u0026 room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.ceiling\", roomInfo);\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.room\", roomInfo);\n                            }\n                        }\n                    });\n                    formatters.put(DimensionLine.class, new SelectableFormat\u003cDimensionLine\u003e() {\n\n                        public String format(DimensionLine dimensionLine) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.dimensionLine\", preferences.getLengthUnit().getFormatWithUnit().format(dimensionLine.getLength()));\n                        }\n                    });\n                    formatters.put(Label.class, new SelectableFormat\u003cLabel\u003e() {\n\n                        public String format(Label label) {\n                            if (label.getText().length() \u003e 0) {\n                                return label.getText();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.label\");\n                            }\n                        }\n                    });\n                    for (final Selectable item : items) {\n                        String format \u003d null;\n                        for (Map.Entry\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e entry : formatters.entrySet()) {\n                            if (entry.getKey().isInstance(item)) {\n                                format \u003d entry.getValue().format(item);\n                                break;\n                            }\n                        }\n                        if (format !\u003d null) {\n                            selectObjectMenu.add(new JMenuItem(new AbstractAction(format) {\n\n                                public void actionPerformed(ActionEvent ev) {\n                                    planController.selectItem(item);\n                                }\n                            }));\n                        }\n                    }\n                }\n            }\n\n            public void popupMenuWillBecomeInvisible(PopupMenuEvent ev) {\n                selectObjectMenu.removeAll();\n            }\n\n            public void popupMenuCanceled(PopupMenuEvent ev) {\n            }\n        });\n        planView.addMouseMotionListener(new MouseMotionAdapter() {\n\n            @Override\n            public void mouseMoved(MouseEvent ev) {\n                lastMouseMoveLocation.setLocation(ev.getPoint());\n            }\n        });\n        planView.addMouseListener(new MouseAdapter() {\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                lastMouseMoveLocation.x \u003d -1;\n            }\n        });\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJScrollPane\u003e planScrollPane;\n\n        private WeakReference\u003cHomeController\u003e controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.planScrollPane \u003d new WeakReference\u003cJScrollPane\u003e(planScrollPane);\n            this.controller \u003d new WeakReference\u003cHomeController\u003e(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            JScrollPane planScrollPane \u003d this.planScrollPane.get();\n            HomeController controller \u003d this.controller.get();\n            if (homePane \u003d\u003d null || planScrollPane \u003d\u003d null || controller \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible) {\n        if (visible) {\n            // Change column and row header views\n            planScrollPane.setColumnHeaderView((JComponent) controller.getPlanController().getHorizontalRulerView());\n            planScrollPane.setRowHeaderView((JComponent) controller.getPlanController().getVerticalRulerView());\n        } else {\n            planScrollPane.setColumnHeaderView(null);\n            planScrollPane.setRowHeaderView(null);\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003eview\u003c/code\u003e a mouse listener that disables all menu items of\n     * \u003ccode\u003emenuBar\u003c/code\u003e during a drag and drop operation in \u003ccode\u003eview\u003c/code\u003e.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar) {\n        class MouseAndFocusListener extends MouseAdapter implements FocusListener {\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), false);\n                        }\n                    }\n                });\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            private void enableMenuItems(final JMenuBar menuBar) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), true);\n                        }\n                    }\n                });\n            }\n\n            private void setMenuItemsEnabled(JMenu menu, boolean enabled) {\n                for (int i \u003d 0, n \u003d menu.getItemCount(); i \u003c n; i++) {\n                    JMenuItem item \u003d menu.getItem(i);\n                    if (item instanceof JMenu) {\n                        setMenuItemsEnabled((JMenu) item, enabled);\n                    } else if (item !\u003d null) {\n                        item.setEnabled(enabled ? item.getAction().isEnabled() : false);\n                    }\n                }\n            }\n\n            // Need to take into account focus events because a mouse released event\n            // isn\u0027t dispatched when the component loses focus\n            public void focusGained(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            public void focusLost(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n        }\n        ;\n        MouseAndFocusListener listener \u003d new MouseAndFocusListener();\n        if (view !\u003d null) {\n            ((JComponent) view).addMouseListener(listener);\n            ((JComponent) view).addFocusListener(listener);\n        }\n    }\n\n    /**\n     * Detaches the given \u003ccode\u003eview\u003c/code\u003e from home view.\n     */\n    public void detachView(final View view) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        float dividerLocation;\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            if (splitPane.getOrientation() \u003d\u003d JSplitPane.VERTICAL_SPLIT) {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getHeight() - splitPane.getDividerSize());\n            } else {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getWidth() - splitPane.getDividerSize());\n            }\n        } else {\n            dividerLocation \u003d -1;\n        }\n        Integer dialogX \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n        Integer dialogWidth \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n        if (dialogX !\u003d null \u0026\u0026 dialogWidth !\u003d null) {\n            detachView(view, dialogX, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY), dialogWidth, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY));\n        } else {\n            Point componentLocation \u003d new Point();\n            Dimension componentSize \u003d component.getSize();\n            SwingUtilities.convertPointToScreen(componentLocation, component);\n            Insets insets \u003d new JDialog().getInsets();\n            detachView(view, componentLocation.x - insets.left, componentLocation.y - insets.top, componentSize.width + insets.left + insets.right, componentSize.height + insets.top + insets.bottom);\n        }\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY, dividerLocation);\n    }\n\n    /**\n     * Detaches a \u003ccode\u003eview\u003c/code\u003e at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        // Replace component by a dummy label to find easily where to attach back the component\n        JLabel dummyLabel \u003d new JLabel();\n        dummyLabel.setMaximumSize(new Dimension());\n        dummyLabel.setName(view.getClass().getName());\n        dummyLabel.setBorder(component.getBorder());\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            splitPane.setDividerSize(0);\n            if (splitPane.getLeftComponent() \u003d\u003d component) {\n                splitPane.setLeftComponent(dummyLabel);\n                splitPane.setDividerLocation(0f);\n            } else {\n                splitPane.setRightComponent(dummyLabel);\n                splitPane.setDividerLocation(1f);\n            }\n        } else {\n            int componentIndex \u003d parent.getComponentZOrder(component);\n            parent.remove(componentIndex);\n            parent.add(dummyLabel, componentIndex);\n        }\n        // Display view in a separate non modal dialog\n        Window window \u003d SwingUtilities.getWindowAncestor(this);\n        if (!(window instanceof JFrame)) {\n            window \u003d JOptionPane.getRootFrame();\n        }\n        JFrame defaultFrame \u003d (JFrame) window;\n        // Create a dialog with the same title as home frame\n        final JDialog separateDialog \u003d new JDialog(defaultFrame, defaultFrame.getTitle(), false);\n        separateDialog.setResizable(true);\n        defaultFrame.addPropertyChangeListener(\"title\", new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                separateDialog.setTitle((String) ev.getNewValue());\n            }\n        });\n        // Use same document modified indicator\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"Window.documentModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"Window.documentModified\", ev.getNewValue());\n                }\n            });\n        } else if (OperatingSystem.isMacOSX()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"windowModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"windowModified\", ev.getNewValue());\n                }\n            });\n        }\n        separateDialog.setContentPane(component);\n        separateDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\n        separateDialog.addWindowListener(new WindowAdapter() {\n\n            @Override\n            public void windowClosing(WindowEvent ev) {\n                controller.attachView(view);\n            }\n        });\n        separateDialog.addComponentListener(new ComponentAdapter() {\n\n            @Override\n            public void componentResized(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY, separateDialog.getWidth());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY, separateDialog.getHeight());\n            }\n\n            @Override\n            public void componentMoved(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, separateDialog.getX());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY, separateDialog.getY());\n            }\n        });\n        separateDialog.setBounds(x, y, width, height);\n        separateDialog.setLocationByPlatform(!SwingTools.isRectangleVisibleAtScreen(separateDialog.getBounds()));\n        separateDialog.setVisible(true);\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, true);\n    }\n\n    /**\n     * Attaches the given \u003ccode\u003eview\u003c/code\u003e to home view.\n     */\n    public void attachView(View view) {\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, false);\n        JComponent dummyComponent \u003d (JComponent) findChild(this, view.getClass().getName());\n        if (dummyComponent !\u003d null) {\n            JComponent component \u003d (JComponent) view;\n            Window window \u003d SwingUtilities.getWindowAncestor(component);\n            component.setBorder(dummyComponent.getBorder());\n            Container parent \u003d dummyComponent.getParent();\n            if (parent instanceof JSplitPane) {\n                JSplitPane splitPane \u003d (JSplitPane) parent;\n                float dividerLocation \u003d (Float) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                splitPane.setDividerSize(UIManager.getInt(\"SplitPane.dividerSize\"));\n                splitPane.setDividerLocation(dividerLocation);\n                if (splitPane.getLeftComponent() \u003d\u003d dummyComponent) {\n                    splitPane.setLeftComponent(component);\n                } else {\n                    splitPane.setRightComponent(component);\n                }\n            } else {\n                int componentIndex \u003d parent.getComponentZOrder(dummyComponent);\n                parent.remove(componentIndex);\n                parent.add(component, componentIndex);\n            }\n            window.dispose();\n        }\n    }\n\n    /**\n     * Returns among \u003ccode\u003eparent\u003c/code\u003e children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName) {\n        for (int i \u003d 0; i \u003c parent.getComponentCount(); i++) {\n            Component child \u003d parent.getComponent(i);\n            if (childName.equals(child.getName())) {\n                return child;\n            } else if (child instanceof Container) {\n                child \u003d findChild((Container) child, childName);\n                if (child !\u003d null) {\n                    return child;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"openHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D);\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importLanguageLibraryDialog.title\"), ContentManager.ContentType.LANGUAGE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.message\", new File(languageLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importFurnitureLibraryDialog.title\"), ContentManager.ContentType.FURNITURE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.message\", new File(furnitureLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importTexturesLibraryDialog.title\"), ContentManager.ContentType.TEXTURES_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.message\", new File(texturesLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.message\", new File(pluginName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"saveHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D, homeName);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in an error message box.\n     */\n    public void showError(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"error.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in a message box.\n     */\n    public void showMessage(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"message.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);\n    }\n\n    /**\n     * Displays the tip matching \u003ccode\u003eactionTipKey\u003c/code\u003e and\n     * returns \u003ccode\u003etrue\u003c/code\u003e if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipTitle\");\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipMessage\");\n        if (message.length() \u003e 0) {\n            JPanel tipPanel \u003d new JPanel(new GridBagLayout());\n            JLabel messageLabel \u003d new JLabel(message);\n            tipPanel.add(messageLabel, new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            // Add a check box that lets user choose whether he wants to display again the tip or not\n            JCheckBox doNotDisplayTipCheckBox \u003d new JCheckBox(SwingTools.getLocalizedLabelText(this.preferences, HomePane.class, \"doNotDisplayTipCheckBox.text\"));\n            if (!OperatingSystem.isMacOSX()) {\n                doNotDisplayTipCheckBox.setMnemonic(KeyStroke.getKeyStroke(this.preferences.getLocalizedString(HomePane.class, \"doNotDisplayTipCheckBox.mnemonic\")).getKeyCode());\n            }\n            tipPanel.add(doNotDisplayTipCheckBox, new GridBagConstraints(0, 1, 1, 1, 0, 1, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));\n            SwingTools.showMessageDialog(this, tipPanel, title, JOptionPane.INFORMATION_MESSAGE, doNotDisplayTipCheckBox);\n            return doNotDisplayTipCheckBox.isSelected();\n        } else {\n            // Ignore untranslated tips\n            return true;\n        }\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn\u0027t want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn\u0027t want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName) {\n        // Retrieve displayed text in buttons and message\n        String message;\n        if (homeName !\u003d null) {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\\\"\" + this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D) + \"\\\"\");\n        } else {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\");\n        }\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.doNotSave\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.cancel\");\n        switch(JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave, cancel }, save)) {\n            // Convert showOptionDialog answer to SaveAnswer enum constants\n            case JOptionPane.YES_OPTION:\n                return SaveAnswer.SAVE;\n            case JOptionPane.NO_OPTION:\n                return SaveAnswer.DO_NOT_SAVE;\n            default:\n                return SaveAnswer.CANCEL;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName) {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.message\", this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D));\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.doNotSave\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave }, doNotSave) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to exit.\n     */\n    public boolean confirmExit() {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.title\");\n        String quit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.quit\");\n        String doNotQuit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.doNotQuit\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { quit, doNotQuit }, doNotQuit) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog() {\n        String messageFormat \u003d this.preferences.getLocalizedString(HomePane.class, \"about.message\");\n        String aboutVersion \u003d this.controller.getVersion();\n        String message \u003d String.format(messageFormat, aboutVersion, System.getProperty(\"java.version\"));\n        // Use an uneditable editor pane to let user select text in dialog\n        JEditorPane messagePane \u003d new JEditorPane(\"text/html\", message);\n        messagePane.setOpaque(false);\n        messagePane.setEditable(false);\n        // Add a listener that displays hyperlinks content in browser\n        messagePane.addHyperlinkListener(new HyperlinkListener() {\n\n            public void hyperlinkUpdate(HyperlinkEvent ev) {\n                if (ev.getEventType() \u003d\u003d HyperlinkEvent.EventType.ACTIVATED) {\n                    SwingTools.showDocumentInBrowser(ev.getURL());\n                }\n            }\n        });\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"about.title\");\n        Icon icon \u003d new ImageIcon(HomePane.class.getResource(this.preferences.getLocalizedString(HomePane.class, \"about.icon\")));\n        JOptionPane.showMessageDialog(this, messagePane, title, JOptionPane.INFORMATION_MESSAGE, icon);\n    }\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or \u003ccode\u003enull\u003c/code\u003e if the user canceled print.\n     *    The \u003ccode\u003ecall\u003c/code\u003e method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable\u003cVoid\u003e showPrintDialog() {\n        PageFormat pageFormat \u003d HomePrintableComponent.getPageFormat(this.home.getPrint());\n        final PrinterJob printerJob \u003d PrinterJob.getPrinterJob();\n        printerJob.setPrintable(new HomePrintableComponent(this.home, this.controller, getFont()), pageFormat);\n        String jobName \u003d this.preferences.getLocalizedString(HomePane.class, \"print.jobName\");\n        if (this.home.getName() !\u003d null) {\n            jobName +\u003d \" - \" + this.controller.getContentManager().getPresentationName(this.home.getName(), ContentManager.ContentType.SWEET_HOME_3D);\n        }\n        printerJob.setJobName(jobName);\n        if (printerJob.printDialog()) {\n            return new Callable\u003cVoid\u003e() {\n\n                public Void call() throws RecorderException {\n                    try {\n                        printerJob.print();\n                        return null;\n                    } catch (InterruptedPrinterException ex) {\n                        throw new InterruptedRecorderException(\"Print interrupted\");\n                    } catch (PrinterException ex) {\n                        throw new RecorderException(\"Couldn\u0027t print\", ex);\n                    }\n                }\n            };\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"printToPDFDialog.title\"), ContentManager.ContentType.PDF, homeName);\n    }\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException {\n        OutputStream outputStream \u003d null;\n        boolean printInterrupted \u003d false;\n        try {\n            outputStream \u003d new FileOutputStream(pdfFile);\n            new HomePDFPrinter(this.home, this.preferences, this.controller, getFont()).write(outputStream);\n        } catch (InterruptedIOException ex) {\n            printInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Print interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n        } finally {\n            try {\n                if (outputStream !\u003d null) {\n                    outputStream.close();\n                }\n                // Delete the file if printing is interrupted\n                if (printInterrupted) {\n                    new File(pdfFile).delete();\n                }\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToSVGDialog.title\"), ContentManager.ContentType.SVG, homeName);\n    }\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException {\n        View planView \u003d this.controller.getPlanController().getView();\n        PlanComponent planComponent;\n        if (planView instanceof PlanComponent) {\n            planComponent \u003d (PlanComponent) planView;\n        } else {\n            planComponent \u003d new PlanComponent(this.home, this.preferences, null);\n        }\n        OutputStream outputStream \u003d null;\n        boolean exportInterrupted \u003d false;\n        try {\n            outputStream \u003d new BufferedOutputStream(new FileOutputStream(svgFile));\n            planComponent.exportToSVG(outputStream);\n        } catch (InterruptedIOException ex) {\n            exportInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Export to \" + svgFile + \" interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n        } finally {\n            if (outputStream !\u003d null) {\n                try {\n                    outputStream.close();\n                    // Delete the file if exporting is interrupted\n                    if (exportInterrupted) {\n                        new File(svgFile).delete();\n                    }\n                } catch (IOException ex) {\n                    throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n                }\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToOBJDialog.title\"), ContentManager.ContentType.OBJ, homeName);\n    }\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException {\n        String header \u003d this.preferences !\u003d null ? this.preferences.getLocalizedString(HomePane.class, \"exportToOBJ.header\", new Date()) : \"\";\n        // Use a clone of home to ignore selection\n        OBJExporter.exportHomeToFile(this.home.clone(), objFile, header);\n    }\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer \u003d null;\n            boolean exportInterrupted \u003d false;\n            try {\n                writer \u003d new OBJWriter(objFile, header, -1);\n                List\u003cSelectable\u003e emptySelection \u003d Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() \u003e 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds \u003d getExportedHomeBounds(home);\n                    Ground3D groundNode \u003d new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i \u003d 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode \u003d new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i \u003d 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode \u003d new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i \u003d 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode \u003d new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted \u003d true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer !\u003d null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns \u003ccode\u003ehome\u003c/code\u003e bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds \u003d updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds \u003d\u003d null) {\n                        homeBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given \u003ccode\u003efurniture\u003c/code\u003e.\n         */\n        private static List\u003cHomePieceOfFurniture\u003e getVisibleFurniture(List\u003cHomePieceOfFurniture\u003e furniture) {\n            List\u003cHomePieceOfFurniture\u003e visibleFurniture \u003d new ArrayList\u003cHomePieceOfFurniture\u003e(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() \u0026\u0026 (piece.getLevel() \u003d\u003d null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates \u003ccode\u003eobjectBounds\u003c/code\u003e to include the bounds of \u003ccode\u003eitems\u003c/code\u003e.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection\u003c? extends Selectable\u003e items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() \u003d\u003d null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds \u003d\u003d null) {\n                            objectBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection() {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.title\");\n        String delete \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.delete\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.cancel\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { delete, cancel }, cancel) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or \u003ccode\u003enull\u003c/code\u003e if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName) {\n        // Retrieve displayed text in dialog\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.title\");\n        List\u003cCamera\u003e storedCameras \u003d this.home.getStoredCameras();\n        JComponent cameraNameChooser;\n        JTextComponent cameraNameTextComponent;\n        if (storedCameras.isEmpty()) {\n            cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n        } else {\n            // If cameras are already stored in home propose an editable combo box to user\n            // to let him choose more easily an existing one if he want to overwrite it\n            String[] storedCameraNames \u003d new String[storedCameras.size()];\n            for (int i \u003d 0; i \u003c storedCameraNames.length; i++) {\n                storedCameraNames[i] \u003d storedCameras.get(i).getName();\n            }\n            JComboBox cameraNameComboBox \u003d new JComboBox(storedCameraNames);\n            cameraNameComboBox.setEditable(true);\n            cameraNameComboBox.getEditor().setItem(cameraName);\n            Component editorComponent \u003d cameraNameComboBox.getEditor().getEditorComponent();\n            if (editorComponent instanceof JTextComponent) {\n                cameraNameTextComponent \u003d (JTextComponent) editorComponent;\n                cameraNameChooser \u003d cameraNameComboBox;\n            } else {\n                cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n            }\n        }\n        JPanel cameraNamePanel \u003d new JPanel(new BorderLayout(2, 2));\n        cameraNamePanel.add(new JLabel(message), BorderLayout.NORTH);\n        cameraNamePanel.add(cameraNameChooser, BorderLayout.SOUTH);\n        if (SwingTools.showConfirmDialog(this, cameraNamePanel, title, cameraNameTextComponent) \u003d\u003d JOptionPane.OK_OPTION) {\n            return cameraNameTextComponent.getText();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty() {\n        try {\n            Clipboard clipboard \u003d getToolkit().getSystemClipboard();\n            return !(clipboard.isDataFlavorAvailable(HomeTransferableList.HOME_FLAVOR) || getToolkit().getSystemClipboard().isDataFlavorAvailable(DataFlavor.javaFileListFlavor));\n        } catch (AccessControlException ex) {\n            // AWT uses a private clipboard that won\u0027t be empty as soon as a copy action will be done\n            return this.clipboardEmpty;\n        }\n    }\n\n    /**\n     * Execute \u003ccode\u003erunnable\u003c/code\u003e asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable) {\n        EventQueue.invokeLater(runnable);\n    }\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction \u003d pluginAction;\n            this.propertyChangeSupport \u003d new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName \u003d ev.getPropertyName();\n                    Object oldValue \u003d ev.getOldValue();\n                    Object newValue \u003d ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don\u0027t check new value is null !)\n                        if (newValue !\u003d null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue !\u003d null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue !\u003d null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon \u003d (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon !\u003d null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic \u003d (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic !\u003d null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat\u003cT extends Selectable\u003e {\n\n        public abstract String format(T item);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "HomePane",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_0Test.java",
    "test_prompt": "// HomePane_0Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains ten unit test cases for the {@link HomePane#showOpenDialog()} method.\n*/\nclass HomePane_0Test {",
    "method_signature": "showOpenDialog()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// HomePane.java\n/*\n * HomePane.java 15 mai 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY \u003d \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY \u003d \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY \u003d \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY \u003d \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY \u003d \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT \u003d 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty \u003d true;\n\n    private ActionMap menuActionMap;\n\n    private List\u003cAction\u003e pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n        this.home \u003d home;\n        this.preferences \u003d preferences;\n        this.controller \u003d controller;\n        JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n        ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);\n        createActions(home, preferences, controller);\n        createMenuActions(preferences, controller);\n        createPluginActions(controller instanceof HomePluginController ? ((HomePluginController) controller).getPlugins() : null);\n        createTransferHandlers(home, controller);\n        addHomeListener(home);\n        addLevelVisibilityListener(home);\n        addLanguageListener(preferences);\n        addPlanControllerListener(controller.getPlanController());\n        addFocusListener();\n        updateFocusTraversalPolicy();\n        JMenuBar homeMenuBar \u003d createMenuBar(home, preferences, controller);\n        setJMenuBar(homeMenuBar);\n        Container contentPane \u003d getContentPane();\n        contentPane.add(createToolBar(home), BorderLayout.NORTH);\n        contentPane.add(createMainPane(home, preferences, controller));\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            // Under Mac OS X 10.5, add some dummy labels at left and right borders\n            // to avoid the tool bar to be attached on these borders\n            // (segmented buttons created on this system aren\u0027t properly rendered\n            // when they are aligned vertically)\n            contentPane.add(new JLabel(), BorderLayout.WEST);\n            contentPane.add(new JLabel(), BorderLayout.EAST);\n        }\n        disableMenuItemsDuringDragAndDrop(controller.getPlanController().getView(), homeMenuBar);\n        // Change component orientation\n        applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller) {\n        createAction(ActionType.NEW_HOME, preferences, controller, \"newHome\");\n        createAction(ActionType.OPEN, preferences, controller, \"open\");\n        createAction(ActionType.DELETE_RECENT_HOMES, preferences, controller, \"deleteRecentHomes\");\n        createAction(ActionType.CLOSE, preferences, controller, \"close\");\n        createAction(ActionType.SAVE, preferences, controller, \"save\");\n        createAction(ActionType.SAVE_AS, preferences, controller, \"saveAs\");\n        createAction(ActionType.SAVE_AND_COMPRESS, preferences, controller, \"saveAndCompress\");\n        createAction(ActionType.PAGE_SETUP, preferences, controller, \"setupPage\");\n        createAction(ActionType.PRINT_PREVIEW, preferences, controller, \"previewPrint\");\n        createAction(ActionType.PRINT, preferences, controller, \"print\");\n        createAction(ActionType.PRINT_TO_PDF, preferences, controller, \"printToPDF\");\n        createAction(ActionType.PREFERENCES, preferences, controller, \"editPreferences\");\n        createAction(ActionType.EXIT, preferences, controller, \"exit\");\n        createAction(ActionType.UNDO, preferences, controller, \"undo\");\n        createAction(ActionType.REDO, preferences, controller, \"redo\");\n        createClipboardAction(ActionType.CUT, preferences, TransferHandler.getCutAction(), true);\n        createClipboardAction(ActionType.COPY, preferences, TransferHandler.getCopyAction(), true);\n        createClipboardAction(ActionType.PASTE, preferences, TransferHandler.getPasteAction(), false);\n        createAction(ActionType.DELETE, preferences, controller, \"delete\");\n        createAction(ActionType.SELECT_ALL, preferences, controller, \"selectAll\");\n        createAction(ActionType.ADD_HOME_FURNITURE, preferences, controller, \"addHomeFurniture\");\n        FurnitureController furnitureController \u003d controller.getFurnitureController();\n        createAction(ActionType.DELETE_HOME_FURNITURE, preferences, furnitureController, \"deleteSelection\");\n        createAction(ActionType.MODIFY_FURNITURE, preferences, controller, \"modifySelectedFurniture\");\n        createAction(ActionType.GROUP_FURNITURE, preferences, furnitureController, \"groupSelectedFurniture\");\n        createAction(ActionType.UNGROUP_FURNITURE, preferences, furnitureController, \"ungroupSelectedFurniture\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_TOP, preferences, furnitureController, \"alignSelectedFurnitureOnTop\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BOTTOM, preferences, furnitureController, \"alignSelectedFurnitureOnBottom\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT, preferences, furnitureController, \"alignSelectedFurnitureOnLeft\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT, preferences, furnitureController, \"alignSelectedFurnitureOnRight\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnFrontSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnBackSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnLeftSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnRightSide\");\n        createAction(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, preferences, furnitureController, \"alignSelectedFurnitureSideBySide\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, preferences, furnitureController, \"distributeSelectedFurnitureHorizontally\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, preferences, furnitureController, \"distributeSelectedFurnitureVertically\");\n        final HomeController3D homeController3D \u003d controller.getHomeController3D();\n        if (homeController3D.getView() !\u003d null) {\n            createAction(ActionType.IMPORT_FURNITURE, preferences, controller, \"importFurniture\");\n        }\n        createAction(ActionType.IMPORT_FURNITURE_LIBRARY, preferences, controller, \"importFurnitureLibrary\");\n        createAction(ActionType.IMPORT_TEXTURES_LIBRARY, preferences, controller, \"importTexturesLibrary\");\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_NAME, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_X, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_Y, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_COLOR, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TYPE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER, preferences, furnitureController, \"toggleFurnitureSortOrder\");\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_NAME, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_X, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_Y, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_COLOR, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        PlanController planController \u003d controller.getPlanController();\n        if (planController.getView() !\u003d null) {\n            ButtonGroup modeGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.SELECT, planController.getMode() \u003d\u003d PlanController.Mode.SELECTION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.SELECTION);\n            createToggleAction(ActionType.PAN, planController.getMode() \u003d\u003d PlanController.Mode.PANNING, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.PANNING);\n            createToggleAction(ActionType.CREATE_WALLS, planController.getMode() \u003d\u003d PlanController.Mode.WALL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.WALL_CREATION);\n            createToggleAction(ActionType.CREATE_ROOMS, planController.getMode() \u003d\u003d PlanController.Mode.ROOM_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.ROOM_CREATION);\n            createToggleAction(ActionType.CREATE_DIMENSION_LINES, planController.getMode() \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.DIMENSION_LINE_CREATION);\n            createToggleAction(ActionType.CREATE_LABELS, planController.getMode() \u003d\u003d PlanController.Mode.LABEL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.LABEL_CREATION);\n            createAction(ActionType.DELETE_SELECTION, preferences, planController, \"deleteSelection\");\n            createAction(ActionType.LOCK_BASE_PLAN, preferences, planController, \"lockBasePlan\");\n            createAction(ActionType.UNLOCK_BASE_PLAN, preferences, planController, \"unlockBasePlan\");\n            createAction(ActionType.MODIFY_COMPASS, preferences, planController, \"modifyCompass\");\n            createAction(ActionType.MODIFY_WALL, preferences, planController, \"modifySelectedWalls\");\n            createAction(ActionType.MODIFY_ROOM, preferences, planController, \"modifySelectedRooms\");\n            createAction(ActionType.MODIFY_LABEL, preferences, planController, \"modifySelectedLabels\");\n            createAction(ActionType.INCREASE_TEXT_SIZE, preferences, planController, \"increaseTextSize\");\n            createAction(ActionType.DECREASE_TEXT_SIZE, preferences, planController, \"decreaseTextSize\");\n            // Use special toggle models for bold and italic check box menu items and tool bar buttons\n            // that are selected texts in home selected items are all bold or italic\n            Action toggleBoldAction \u003d createAction(ActionType.TOGGLE_BOLD_STYLE, preferences, planController, \"toggleBoldStyle\");\n            toggleBoldAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createBoldStyleToggleModel(home, preferences));\n            Action toggleItalicAction \u003d createAction(ActionType.TOGGLE_ITALIC_STYLE, preferences, planController, \"toggleItalicStyle\");\n            toggleItalicAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createItalicStyleToggleModel(home, preferences));\n            createAction(ActionType.REVERSE_WALL_DIRECTION, preferences, planController, \"reverseSelectedWallsDirection\");\n            createAction(ActionType.SPLIT_WALL, preferences, planController, \"splitSelectedWall\");\n            createAction(ActionType.IMPORT_BACKGROUND_IMAGE, preferences, controller, \"importBackgroundImage\");\n            createAction(ActionType.MODIFY_BACKGROUND_IMAGE, preferences, controller, \"modifyBackgroundImage\");\n            createAction(ActionType.HIDE_BACKGROUND_IMAGE, preferences, controller, \"hideBackgroundImage\");\n            createAction(ActionType.SHOW_BACKGROUND_IMAGE, preferences, controller, \"showBackgroundImage\");\n            createAction(ActionType.DELETE_BACKGROUND_IMAGE, preferences, controller, \"deleteBackgroundImage\");\n            createAction(ActionType.ADD_LEVEL, preferences, planController, \"addLevel\");\n            createAction(ActionType.MODIFY_LEVEL, preferences, planController, \"modifySelectedLevel\");\n            createAction(ActionType.DELETE_LEVEL, preferences, planController, \"deleteSelectedLevel\");\n            createAction(ActionType.ZOOM_IN, preferences, controller, \"zoomIn\");\n            createAction(ActionType.ZOOM_OUT, preferences, controller, \"zoomOut\");\n            createAction(ActionType.EXPORT_TO_SVG, preferences, controller, \"exportToSVG\");\n        }\n        if (homeController3D.getView() !\u003d null) {\n            ButtonGroup viewGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera(), viewGroup, preferences, homeController3D, \"viewFromTop\");\n            createToggleAction(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera(), viewGroup, preferences, homeController3D, \"viewFromObserver\");\n            createAction(ActionType.MODIFY_OBSERVER, preferences, planController, \"modifyObserverCamera\");\n            createAction(ActionType.STORE_POINT_OF_VIEW, preferences, controller, \"storeCamera\");\n            getActionMap().put(ActionType.DETACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.DETACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.detachView(homeController3D.getView());\n                }\n            });\n            getActionMap().put(ActionType.ATTACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.ATTACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.attachView(homeController3D.getView());\n                }\n            });\n            ButtonGroup displayLevelGroup \u003d new ButtonGroup();\n            boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n            createToggleAction(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displayAllLevels\");\n            createToggleAction(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displaySelectedLevel\");\n            createAction(ActionType.MODIFY_3D_ATTRIBUTES, preferences, homeController3D, \"modifyAttributes\");\n            createAction(ActionType.CREATE_PHOTO, preferences, controller, \"createPhoto\");\n            createAction(ActionType.CREATE_VIDEO, preferences, controller, \"createVideo\");\n            createAction(ActionType.EXPORT_TO_OBJ, preferences, controller, \"exportToOBJ\");\n        }\n        createAction(ActionType.HELP, preferences, controller, \"help\");\n        createAction(ActionType.ABOUT, preferences, controller, \"about\");\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object that calls on \u003ccode\u003econtroller\u003c/code\u003e a given\n     * \u003ccode\u003emethod\u003c/code\u003e with its \u003ccode\u003eparameters\u003c/code\u003e. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        try {\n            ControllerAction action \u003d new ControllerAction(preferences, HomePane.class, actionType.name(), controller, method, parameters);\n            getActionMap().put(actionType, action);\n            return action;\n        } catch (NoSuchMethodException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object associated with a \u003ccode\u003eToggleButtonModel\u003c/code\u003e instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        Action action \u003d createAction(actionType, preferences, controller, method, parameters);\n        JToggleButton.ToggleButtonModel toggleButtonModel \u003d new JToggleButton.ToggleButtonModel();\n        toggleButtonModel.setSelected(selected);\n        if (group !\u003d null) {\n            toggleButtonModel.setGroup(group);\n        }\n        action.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, toggleButtonModel);\n        return action;\n    }\n\n    /**\n     * Creates a \u003ccode\u003eReourceAction\u003c/code\u003e object that calls\n     * \u003ccode\u003eactionPerfomed\u003c/code\u003e method on a given\n     * existing \u003ccode\u003eclipboardAction\u003c/code\u003e with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction) {\n        getActionMap().put(actionType, new ResourceAction(preferences, HomePane.class, actionType.name()) {\n\n            public void actionPerformed(ActionEvent ev) {\n                if (copyAction) {\n                    clipboardEmpty \u003d false;\n                }\n                ev \u003d new ActionEvent(lastFocusedComponent, ActionEvent.ACTION_PERFORMED, null);\n                clipboardAction.actionPerformed(ev);\n            }\n        });\n    }\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller) {\n        this.menuActionMap \u003d new ActionMap();\n        createMenuAction(preferences, MenuActionType.FILE_MENU);\n        createMenuAction(preferences, MenuActionType.EDIT_MENU);\n        createMenuAction(preferences, MenuActionType.FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.PLAN_MENU);\n        createMenuAction(preferences, MenuActionType.VIEW_3D_MENU);\n        createMenuAction(preferences, MenuActionType.HELP_MENU);\n        createMenuAction(preferences, MenuActionType.OPEN_RECENT_HOME_MENU);\n        createMenuAction(preferences, MenuActionType.SORT_HOME_FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.ALIGN_OR_DISTRIBUTE_MENU);\n        createMenuAction(preferences, MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU);\n        createMenuAction(preferences, MenuActionType.MODIFY_TEXT_STYLE);\n        createMenuAction(preferences, MenuActionType.GO_TO_POINT_OF_VIEW);\n        createMenuAction(preferences, MenuActionType.SELECT_OBJECT_MENU);\n    }\n\n    /**\n     * Creates a \u003ccode\u003eResourceAction\u003c/code\u003e object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action) {\n        this.menuActionMap.put(action, new ResourceAction(preferences, HomePane.class, action.name(), true));\n    }\n\n    /**\n     * Creates the Swing actions matching each actions available in \u003ccode\u003eplugins\u003c/code\u003e.\n     */\n    private void createPluginActions(List\u003cPlugin\u003e plugins) {\n        this.pluginActions \u003d new ArrayList\u003cAction\u003e();\n        if (plugins !\u003d null) {\n            for (Plugin plugin : plugins) {\n                for (final PluginAction pluginAction : plugin.getActions()) {\n                    // Create a Swing action adapter to plug-in action\n                    this.pluginActions.add(new ActionAdapter(pluginAction));\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller) {\n        this.catalogTransferHandler \u003d new FurnitureCatalogTransferHandler(controller.getContentManager(), controller.getFurnitureCatalogController(), controller.getFurnitureController());\n        this.furnitureTransferHandler \u003d new FurnitureTransferHandler(home, controller.getContentManager(), controller);\n        this.planTransferHandler \u003d new PlanTransferHandler(home, controller.getContentManager(), controller);\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home) {\n        home.addPropertyChangeListener(Home.Property.CAMERA, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera());\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera());\n            }\n        });\n    }\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected) {\n        ((JToggleButton.ToggleButtonModel) getActionMap().get(actionType).getValue(ResourceAction.TOGGLE_BUTTON_MODEL)).setSelected(selected);\n    }\n\n    /**\n     * Adds listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home) {\n        home.getEnvironment().addPropertyChangeListener(HomeEnvironment.Property.ALL_LEVELS_VISIBLE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n                setToggleButtonModelSelected(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible);\n                setToggleButtonModelSelected(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible);\n            }\n        });\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003epreferences\u003c/code\u003e to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences) {\n        preferences.addPropertyChangeListener(UserPreferences.Property.LANGUAGE, new LanguageChangeListener(this));\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003eplanController\u003c/code\u003e to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController) {\n        planController.addPropertyChangeListener(PlanController.Property.MODE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                Mode mode \u003d planController.getMode();\n                setToggleButtonModelSelected(ActionType.SELECT, mode \u003d\u003d PlanController.Mode.SELECTION);\n                setToggleButtonModelSelected(ActionType.PAN, mode \u003d\u003d PlanController.Mode.PANNING);\n                setToggleButtonModelSelected(ActionType.CREATE_WALLS, mode \u003d\u003d PlanController.Mode.WALL_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_ROOMS, mode \u003d\u003d PlanController.Mode.ROOM_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_DIMENSION_LINES, mode \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_LABELS, mode \u003d\u003d PlanController.Mode.LABEL_CREATION);\n            }\n        });\n    }\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener() {\n        KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"currentFocusCycleRoot\", new FocusCycleRootChangeListener(this));\n    }\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener \u003d null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener \u003d new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent !\u003d null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent \u003d homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode !\u003d null \u0026\u0026 (lostFocusedComponent \u003d\u003d homePane.controller.getPlanController().getView() || ev.getNewValue() \u003d\u003d null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode \u003d null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() !\u003d null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent \u003d (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) \u0026\u0026 gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews \u003d { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view !\u003d null \u0026\u0026 SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent \u003d (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener \u003d new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController \u003d controller.getPlanController();\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 (ev.getModifiers() \u0026 (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) \u003d\u003d 0 \u0026\u0026 getActionMap().get(ActionType.PAN).getValue(Action.NAME) !\u003d null \u0026\u0026 planController.getMode() !\u003d PlanController.Mode.PANNING \u0026\u0026 !planController.isModificationState() \u0026\u0026 SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) \u0026\u0026 !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode \u003d planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 previousPlanControllerMode !\u003d null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode \u003d null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap \u003d getActionMap();\n            Action[] specialKeyActions \u003d { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask \u003d KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke \u003d (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() \u003d\u003d actionKeyStroke.getKeyChar() \u0026\u0026 (ev.getModifiers() \u0026 modifiersMask) \u003d\u003d (actionKeyStroke.getModifiers() \u0026 modifiersMask) \u0026\u0026 specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy() {\n        setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {\n\n            @Override\n            protected boolean accept(Component component) {\n                if (super.accept(component)) {\n                    for (JSplitPane splitPane; (splitPane \u003d (JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, component)) !\u003d null; component \u003d splitPane) {\n                        if (isChildComponentInvisible(splitPane, component)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n        setFocusTraversalPolicyProvider(true);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the top or the bottom component of the \u003ccode\u003esplitPane\u003c/code\u003e\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent) {\n        return (SwingUtilities.isDescendingFrom(childComponent, splitPane.getTopComponent()) \u0026\u0026 (splitPane.getTopComponent().getWidth() \u003d\u003d 0 || splitPane.getTopComponent().getHeight() \u003d\u003d 0)) || (SwingUtilities.isDescendingFrom(childComponent, splitPane.getBottomComponent()) \u0026\u0026 (splitPane.getBottomComponent().getWidth() \u003d\u003d 0 || splitPane.getBottomComponent().getHeight() \u003d\u003d 0));\n    }\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller) {\n        // Create File menu\n        JMenu fileMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FILE_MENU));\n        addActionToMenu(ActionType.NEW_HOME, fileMenu);\n        addActionToMenu(ActionType.OPEN, fileMenu);\n        final JMenu openRecentHomeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.OPEN_RECENT_HOME_MENU));\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n        openRecentHomeMenu.addMenuListener(new MenuListener() {\n\n            public void menuSelected(MenuEvent ev) {\n                updateOpenRecentHomeMenu(openRecentHomeMenu, controller);\n            }\n\n            public void menuCanceled(MenuEvent ev) {\n            }\n\n            public void menuDeselected(MenuEvent ev) {\n            }\n        });\n        fileMenu.add(openRecentHomeMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.CLOSE, fileMenu);\n        addActionToMenu(ActionType.SAVE, fileMenu);\n        addActionToMenu(ActionType.SAVE_AS, fileMenu);\n        addActionToMenu(ActionType.SAVE_AND_COMPRESS, fileMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.PAGE_SETUP, fileMenu);\n        addActionToMenu(ActionType.PRINT_PREVIEW, fileMenu);\n        addActionToMenu(ActionType.PRINT, fileMenu);\n        // Don\u0027t add PRINT_TO_PDF, PREFERENCES and EXIT menu items under Mac OS X,\n        // because PREFERENCES and EXIT items are displayed in application menu\n        // and PRINT_TO_PDF is available in standard Mac OS X Print dialog\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.PRINT_TO_PDF, fileMenu);\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.PREFERENCES, fileMenu);\n        }\n        // Create Edit menu\n        JMenu editMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.EDIT_MENU));\n        addActionToMenu(ActionType.UNDO, editMenu);\n        addActionToMenu(ActionType.REDO, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.CUT, editMenu);\n        addActionToMenu(ActionType.COPY, editMenu);\n        addActionToMenu(ActionType.PASTE, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.DELETE, editMenu);\n        addActionToMenu(ActionType.SELECT_ALL, editMenu);\n        // Create Furniture menu\n        JMenu furnitureMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FURNITURE_MENU));\n        addActionToMenu(ActionType.ADD_HOME_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.MODIFY_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.GROUP_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.UNGROUP_FURNITURE, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.IMPORT_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_FURNITURE_LIBRARY, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_TEXTURES_LIBRARY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        furnitureMenu.add(createFurnitureSortMenu(home, preferences));\n        furnitureMenu.add(createFurnitureDisplayPropertyMenu(home, preferences));\n        // Create Plan menu\n        JMenu planMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.PLAN_MENU));\n        addToggleActionToMenu(ActionType.SELECT, true, planMenu);\n        addToggleActionToMenu(ActionType.PAN, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_WALLS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_ROOMS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_DIMENSION_LINES, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_LABELS, true, planMenu);\n        planMenu.addSeparator();\n        JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, false);\n        if (lockUnlockBasePlanMenuItem !\u003d null) {\n            planMenu.add(lockUnlockBasePlanMenuItem);\n        }\n        addActionToMenu(ActionType.MODIFY_COMPASS, planMenu);\n        addActionToMenu(ActionType.MODIFY_WALL, planMenu);\n        addActionToMenu(ActionType.REVERSE_WALL_DIRECTION, planMenu);\n        addActionToMenu(ActionType.SPLIT_WALL, planMenu);\n        addActionToMenu(ActionType.MODIFY_ROOM, planMenu);\n        addActionToMenu(ActionType.MODIFY_LABEL, planMenu);\n        planMenu.add(createTextStyleMenu(home, preferences, false));\n        planMenu.addSeparator();\n        JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, false);\n        if (importModifyBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(importModifyBackgroundImageMenuItem);\n        }\n        JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, false);\n        if (hideShowBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(hideShowBackgroundImageMenuItem);\n        }\n        addActionToMenu(ActionType.DELETE_BACKGROUND_IMAGE, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ADD_LEVEL, planMenu);\n        addActionToMenu(ActionType.MODIFY_LEVEL, planMenu);\n        addActionToMenu(ActionType.DELETE_LEVEL, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ZOOM_IN, planMenu);\n        addActionToMenu(ActionType.ZOOM_OUT, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_SVG, planMenu);\n        // Create 3D Preview menu\n        JMenu preview3DMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.VIEW_3D_MENU));\n        addToggleActionToMenu(ActionType.VIEW_FROM_TOP, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.VIEW_FROM_OBSERVER, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_OBSERVER, preview3DMenu);\n        addActionToMenu(ActionType.STORE_POINT_OF_VIEW, preview3DMenu);\n        JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n        if (goToPointOfViewMenu !\u003d null) {\n            preview3DMenu.add(goToPointOfViewMenu);\n        }\n        preview3DMenu.addSeparator();\n        JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, false);\n        if (attachDetach3DViewMenuItem !\u003d null) {\n            preview3DMenu.add(attachDetach3DViewMenuItem);\n        }\n        addToggleActionToMenu(ActionType.DISPLAY_ALL_LEVELS, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_3D_ATTRIBUTES, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.CREATE_PHOTO, preview3DMenu);\n        addActionToMenu(ActionType.CREATE_VIDEO, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_OBJ, preview3DMenu);\n        // Create Help menu\n        JMenu helpMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.HELP_MENU));\n        addActionToMenu(ActionType.HELP, helpMenu);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.ABOUT, helpMenu);\n        }\n        // Add menus to menu bar\n        JMenuBar menuBar \u003d new JMenuBar();\n        menuBar.add(fileMenu);\n        menuBar.add(editMenu);\n        menuBar.add(furnitureMenu);\n        if (controller.getPlanController().getView() !\u003d null) {\n            menuBar.add(planMenu);\n        }\n        if (controller.getHomeController3D().getView() !\u003d null) {\n            menuBar.add(preview3DMenu);\n        }\n        menuBar.add(helpMenu);\n        // Add plugin actions menu items\n        for (Action pluginAction : this.pluginActions) {\n            String pluginMenu \u003d (String) pluginAction.getValue(PluginAction.Property.MENU.name());\n            if (pluginMenu !\u003d null) {\n                boolean pluginActionAdded \u003d false;\n                for (int i \u003d 0; i \u003c menuBar.getMenuCount(); i++) {\n                    JMenu menu \u003d menuBar.getMenu(i);\n                    if (menu.getText().equals(pluginMenu)) {\n                        // Add menu item to existing menu\n                        menu.addSeparator();\n                        menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                        pluginActionAdded \u003d true;\n                        break;\n                    }\n                }\n                if (!pluginActionAdded) {\n                    // Create missing menu before last menu\n                    JMenu menu \u003d new JMenu(pluginMenu);\n                    menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                    menuBar.add(menu, menuBar.getMenuCount() - 1);\n                }\n            }\n        }\n        // Add EXIT action at end to ensure it\u0027s the last item of file menu\n        if (!OperatingSystem.isMacOSX()) {\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.EXIT, fileMenu);\n        }\n        removeUselessSeparatorsAndEmptyMenus(menuBar);\n        return menuBar;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu) {\n        addActionToMenu(actionType, false, menu);\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu) {\n        addToggleActionToMenu(actionType, false, radioButton, menu);\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, popup, radioButton));\n        }\n    }\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton) {\n        JMenuItem menuItem;\n        if (radioButton) {\n            menuItem \u003d new JRadioButtonMenuItem();\n        } else {\n            menuItem \u003d new JCheckBoxMenuItem();\n        }\n        // Configure model\n        menuItem.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n        // Configure menu item action after setting its model to avoid losing its mnemonic\n        menuItem.setAction(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        return menuItem;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(new ResourceAction.PopupMenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, true, radioButton));\n        }\n    }\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component) {\n        for (int i \u003d component.getComponentCount() - 1; i \u003e\u003d 0; i--) {\n            Component child \u003d component.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d component.getComponentCount() - 1 || component.getComponent(i - 1) instanceof JSeparator)) {\n                component.remove(i);\n            } else if (child instanceof JMenu) {\n                removeUselessSeparatorsAndEmptyMenus(((JMenu) child).getPopupMenu());\n            }\n            if (child instanceof JMenu \u0026\u0026 (((JMenu) child).getMenuComponentCount() \u003d\u003d 0 || ((JMenu) child).getMenuComponentCount() \u003d\u003d 1 \u0026\u0026 ((JMenu) child).getMenuComponent(0) instanceof JSeparator)) {\n                component.remove(i);\n            }\n        }\n        // Don\u0027t let a menu start with a separator\n        if (component.getComponentCount() \u003e 0 \u0026\u0026 component.getComponent(0) instanceof JSeparator) {\n            component.remove(0);\n        }\n    }\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu alignOrDistributeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.ALIGN_OR_DISTRIBUTE_MENU));\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, popup, alignOrDistributeMenu);\n        return alignOrDistributeMenu;\n    }\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Sort submenu\n        JMenu sortMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.SORT_HOME_FURNITURE_MENU));\n        // Map sort furniture properties to sort actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e sortActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, sortActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_NAME, sortActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, sortActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, sortActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, sortActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_X, sortActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_Y, sortActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, sortActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, sortActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, sortActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_COLOR, sortActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, sortActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, sortActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TYPE, sortActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, sortActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE, sortActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, sortActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu and make them share the same radio button group\n        ButtonGroup sortButtonGroup \u003d new ButtonGroup();\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : sortActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action sortAction \u003d entry.getValue();\n            JRadioButtonMenuItem sortMenuItem \u003d new JRadioButtonMenuItem();\n            // Use a special model for sort radio button menu item that is selected if\n            // home is sorted on furnitureProperty criterion\n            sortMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return furnitureProperty \u003d\u003d home.getFurnitureSortedProperty();\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            sortMenuItem.setAction(new ResourceAction.MenuItemAction(sortAction));\n            sortMenu.add(sortMenuItem);\n            sortButtonGroup.add(sortMenuItem);\n        }\n        Action sortOrderAction \u003d getActionMap().get(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER);\n        if (sortOrderAction.getValue(Action.NAME) !\u003d null) {\n            sortMenu.addSeparator();\n            JCheckBoxMenuItem sortOrderCheckBoxMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for sort order check box menu item that is selected depending on\n            // home sort order property\n            sortOrderCheckBoxMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.isFurnitureDescendingSorted();\n                }\n            });\n            sortOrderCheckBoxMenuItem.setAction(new ResourceAction.MenuItemAction(sortOrderAction));\n            sortMenu.add(sortOrderCheckBoxMenuItem);\n        }\n        return sortMenu;\n    }\n\n    /**\n     * Adds to \u003ccode\u003eactions\u003c/code\u003e the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToMap(ActionType actionType, Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e actions, HomePieceOfFurniture.SortableProperty key) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            actions.put(key, action);\n        }\n    }\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Display property submenu\n        JMenu displayPropertyMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU));\n        // Map displayProperty furniture properties to displayProperty actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e displayPropertyActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, displayPropertyActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_NAME, displayPropertyActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, displayPropertyActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_X, displayPropertyActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_Y, displayPropertyActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, displayPropertyActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_COLOR, displayPropertyActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : displayPropertyActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action displayPropertyAction \u003d entry.getValue();\n            JCheckBoxMenuItem displayPropertyMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for displayProperty check box menu item that is selected if\n            // home furniture visible properties contains furnitureProperty\n            displayPropertyMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.getFurnitureVisibleProperties().contains(furnitureProperty);\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            displayPropertyMenuItem.setAction(displayPropertyAction);\n            displayPropertyMenu.add(displayPropertyMenuItem);\n        }\n        return displayPropertyMenu;\n    }\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem lockUnlockBasePlanMenuItem \u003d new JMenuItem(createLockUnlockBasePlanAction(home, popup));\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanMenuItem.setAction(createLockUnlockBasePlanAction(home, popup));\n                }\n            });\n            return lockUnlockBasePlanMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup) {\n        ActionType actionType \u003d home.isBasePlanLocked() ? ActionType.UNLOCK_BASE_PLAN : ActionType.LOCK_BASE_PLAN;\n        Action action \u003d getActionMap().get(actionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action);\n    }\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JButton lockUnlockBasePlanButton \u003d new JButton(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n            lockUnlockBasePlanButton.setBorderPainted(false);\n            lockUnlockBasePlanButton.setContentAreaFilled(false);\n            lockUnlockBasePlanButton.setFocusable(false);\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanButton.setAction(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n                }\n            });\n            return lockUnlockBasePlanButton;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu modifyTextStyleMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.MODIFY_TEXT_STYLE));\n        addActionToMenu(ActionType.INCREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        addActionToMenu(ActionType.DECREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        modifyTextStyleMenu.addSeparator();\n        addToggleActionToMenu(ActionType.TOGGLE_BOLD_STYLE, popup, false, modifyTextStyleMenu);\n        addToggleActionToMenu(ActionType.TOGGLE_ITALIC_STYLE, popup, false, modifyTextStyleMenu);\n        return modifyTextStyleMenu;\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all bold or not\n                Boolean selectionBoldStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean bold;\n                    if (item instanceof Label) {\n                        bold \u003d isItemTextBold(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        bold \u003d isItemTextBold(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        bold \u003d isItemTextBold(room, room.getNameStyle());\n                        if (bold !\u003d isItemTextBold(room, room.getAreaStyle())) {\n                            bold \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        bold \u003d isItemTextBold(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionBoldStyle \u003d\u003d null) {\n                        selectionBoldStyle \u003d bold;\n                    } else if (bold \u003d\u003d null || !selectionBoldStyle.equals(bold)) {\n                        selectionBoldStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionBoldStyle !\u003d null \u0026\u0026 selectionBoldStyle;\n            }\n\n            private boolean isItemTextBold(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isBold();\n            }\n        };\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all italic or not\n                Boolean selectionItalicStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean italic;\n                    if (item instanceof Label) {\n                        italic \u003d isItemTextItalic(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        italic \u003d isItemTextItalic(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        italic \u003d isItemTextItalic(room, room.getNameStyle());\n                        if (italic !\u003d isItemTextItalic(room, room.getAreaStyle())) {\n                            italic \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        italic \u003d isItemTextItalic(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionItalicStyle \u003d\u003d null) {\n                        selectionItalicStyle \u003d italic;\n                    } else if (italic \u003d\u003d null || !selectionItalicStyle.equals(italic)) {\n                        selectionItalicStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionItalicStyle !\u003d null \u0026\u0026 selectionItalicStyle;\n            }\n\n            private boolean isItemTextItalic(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isItalic();\n            }\n        };\n    }\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action importBackgroundImageAction \u003d actionMap.get(ActionType.IMPORT_BACKGROUND_IMAGE);\n        Action modifyBackgroundImageAction \u003d actionMap.get(ActionType.MODIFY_BACKGROUND_IMAGE);\n        if (importBackgroundImageAction !\u003d null \u0026\u0026 importBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 modifyBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem importModifyBackgroundImageMenuItem \u003d new JMenuItem(createImportModifyBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    importModifyBackgroundImageMenuItem.setAction(createImportModifyBackgroundImageAction(home, popup));\n                }\n            });\n            return importModifyBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener) {\n        home.addPropertyChangeListener(Home.Property.BACKGROUND_IMAGE, listener);\n        home.addPropertyChangeListener(Home.Property.SELECTED_LEVEL, listener);\n        final PropertyChangeListener levelChangeListener \u003d new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                if (Level.Property.BACKGROUND_IMAGE.name().equals(ev.getPropertyName())) {\n                    listener.propertyChange(ev);\n                }\n            }\n        };\n        for (Level level : this.home.getLevels()) {\n            level.addPropertyChangeListener(levelChangeListener);\n        }\n        this.home.addLevelsListener(new CollectionListener\u003cLevel\u003e() {\n\n            public void collectionChanged(CollectionEvent\u003cLevel\u003e ev) {\n                switch(ev.getType()) {\n                    case ADD:\n                        ev.getItem().addPropertyChangeListener(levelChangeListener);\n                        break;\n                    case DELETE:\n                        ev.getItem().removePropertyChangeListener(levelChangeListener);\n                        break;\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null ? ActionType.IMPORT_BACKGROUND_IMAGE : ActionType.MODIFY_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action hideBackgroundImageAction \u003d actionMap.get(ActionType.HIDE_BACKGROUND_IMAGE);\n        Action showBackgroundImageAction \u003d actionMap.get(ActionType.SHOW_BACKGROUND_IMAGE);\n        if (hideBackgroundImageAction !\u003d null \u0026\u0026 hideBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 showBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem hideShowBackgroundImageMenuItem \u003d new JMenuItem(createHideShowBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    hideShowBackgroundImageMenuItem.setAction(createHideShowBackgroundImageAction(home, popup));\n                }\n            });\n            return hideShowBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null || backgroundImage.isVisible() ? ActionType.HIDE_BACKGROUND_IMAGE : ActionType.SHOW_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller) {\n        Action goToPointOfViewAction \u003d this.menuActionMap.get(MenuActionType.GO_TO_POINT_OF_VIEW);\n        if (goToPointOfViewAction.getValue(Action.NAME) !\u003d null) {\n            final JMenu goToPointOfViewMenu \u003d new JMenu(goToPointOfViewAction);\n            updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n            home.addPropertyChangeListener(Home.Property.STORED_CAMERAS, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n                }\n            });\n            return goToPointOfViewMenu;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller) {\n        List\u003cCamera\u003e storedCameras \u003d home.getStoredCameras();\n        goToPointOfViewMenu.removeAll();\n        if (storedCameras.isEmpty()) {\n            goToPointOfViewMenu.setEnabled(false);\n            goToPointOfViewMenu.add(new ResourceAction(preferences, HomePane.class, \"NoStoredPointOfView\", false));\n        } else {\n            goToPointOfViewMenu.setEnabled(true);\n            for (final Camera camera : storedCameras) {\n                goToPointOfViewMenu.add(new AbstractAction(camera.getName()) {\n\n                    public void actionPerformed(ActionEvent e) {\n                        controller.getHomeController3D().goToCamera(camera);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action display3DViewInSeparateWindowAction \u003d actionMap.get(ActionType.DETACH_3D_VIEW);\n        Action display3DViewInMainWindowAction \u003d actionMap.get(ActionType.ATTACH_3D_VIEW);\n        if (display3DViewInSeparateWindowAction !\u003d null \u0026\u0026 display3DViewInSeparateWindowAction.getValue(Action.NAME) !\u003d null \u0026\u0026 display3DViewInMainWindowAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem attachDetach3DViewMenuItem \u003d new JMenuItem(createAttachDetach3DViewAction(controller, popup));\n            // Add a listener to 3D view to switch action when its parent changes\n            JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n            view3D.addAncestorListener(new AncestorListener() {\n\n                public void ancestorAdded(AncestorEvent ev) {\n                    attachDetach3DViewMenuItem.setAction(createAttachDetach3DViewAction(controller, popup));\n                }\n\n                public void ancestorRemoved(AncestorEvent ev) {\n                }\n\n                public void ancestorMoved(AncestorEvent ev) {\n                }\n            });\n            return attachDetach3DViewMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup) {\n        JRootPane view3DRootPane \u003d SwingUtilities.getRootPane((JComponent) controller.getHomeController3D().getView());\n        ActionType display3DViewActionType \u003d view3DRootPane \u003d\u003d this ? ActionType.DETACH_3D_VIEW : ActionType.ATTACH_3D_VIEW;\n        Action backgroundImageAction \u003d getActionMap().get(display3DViewActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Updates \u003ccode\u003eopenRecentHomeMenu\u003c/code\u003e from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller) {\n        openRecentHomeMenu.removeAll();\n        for (final String homeName : controller.getRecentHomes()) {\n            openRecentHomeMenu.add(new AbstractAction(controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D)) {\n\n                public void actionPerformed(ActionEvent e) {\n                    controller.open(homeName);\n                }\n            });\n        }\n        if (openRecentHomeMenu.getMenuComponentCount() \u003e 0) {\n            openRecentHomeMenu.addSeparator();\n        }\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n    }\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home) {\n        final JToolBar toolBar \u003d new UnfocusableToolBar();\n        addActionToToolBar(ActionType.NEW_HOME, toolBar);\n        addActionToToolBar(ActionType.OPEN, toolBar);\n        addActionToToolBar(ActionType.SAVE, toolBar);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToToolBar(ActionType.PREFERENCES, toolBar);\n        }\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.UNDO, toolBar);\n        addActionToToolBar(ActionType.REDO, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.CUT, toolBar);\n        addActionToToolBar(ActionType.COPY, toolBar);\n        addActionToToolBar(ActionType.PASTE, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.ADD_HOME_FURNITURE, toolBar);\n        toolBar.addSeparator();\n        addToggleActionToToolBar(ActionType.SELECT, toolBar);\n        addToggleActionToToolBar(ActionType.PAN, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_WALLS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_ROOMS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_DIMENSION_LINES, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_LABELS, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.INCREASE_TEXT_SIZE, toolBar);\n        addActionToToolBar(ActionType.DECREASE_TEXT_SIZE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_BOLD_STYLE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_ITALIC_STYLE, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.ZOOM_IN, toolBar);\n        addActionToToolBar(ActionType.ZOOM_OUT, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.CREATE_PHOTO, toolBar);\n        addActionToToolBar(ActionType.CREATE_VIDEO, toolBar);\n        toolBar.addSeparator();\n        // Add plugin actions buttons\n        boolean pluginActionsAdded \u003d false;\n        for (Action pluginAction : this.pluginActions) {\n            if (Boolean.TRUE.equals(pluginAction.getValue(PluginAction.Property.TOOL_BAR.name()))) {\n                toolBar.add(new ResourceAction.ToolBarAction(pluginAction));\n                pluginActionsAdded \u003d true;\n            }\n        }\n        if (pluginActionsAdded) {\n            toolBar.addSeparator();\n        }\n        addActionToToolBar(ActionType.HELP, toolBar);\n        // Remove useless separators\n        for (int i \u003d toolBar.getComponentCount() - 1; i \u003e 0; i--) {\n            Component child \u003d toolBar.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d toolBar.getComponentCount() - 1 || toolBar.getComponent(i - 1) instanceof JSeparator)) {\n                toolBar.remove(i);\n            }\n        }\n        return toolBar;\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            Action toolBarAction \u003d new ResourceAction.ToolBarAction(action);\n            JToggleButton toggleButton \u003d new JToggleButton(toolBarAction);\n            toggleButton.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n            toolBar.add(toggleButton);\n        }\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            toolBar.add(new ResourceAction.ToolBarAction(action));\n        }\n    }\n\n    /**\n     * Enables or disables the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            action.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText) {\n        setNameAndShortDescription(ActionType.UNDO, undoText);\n        setNameAndShortDescription(ActionType.REDO, redoText);\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * matching \u003ccode\u003eactionType\u003c/code\u003e. If \u003ccode\u003ename\u003c/code\u003e is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            if (name \u003d\u003d null) {\n                name \u003d (String) action.getValue(Action.DEFAULT);\n            }\n            action.putValue(Action.NAME, name);\n            action.putValue(Action.SHORT_DESCRIPTION, name);\n        }\n    }\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled) {\n        boolean dragAndDropWithTransferHandlerSupported;\n        try {\n            // Don\u0027t use transfer handlers for drag and drop with Plugin2 under Mac OS X or when in an unsigned applet\n            dragAndDropWithTransferHandlerSupported \u003d !Boolean.getBoolean(\"com.eteks.sweethome3d.dragAndDropWithoutTransferHandler\");\n        } catch (AccessControlException ex) {\n            dragAndDropWithTransferHandlerSupported \u003d false;\n        }\n        JComponent catalogView \u003d (JComponent) this.controller.getFurnitureCatalogController().getView();\n        JComponent furnitureView \u003d (JComponent) this.controller.getFurnitureController().getView();\n        JComponent planView \u003d (JComponent) this.controller.getPlanController().getView();\n        if (enabled) {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(this.catalogTransferHandler);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(this.furnitureTransferHandler);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(this.furnitureTransferHandler);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(this.planTransferHandler);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    // Check if furniture catalog is handled by a subcomponent\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    if (this.furnitureCatalogDragAndDropListener \u003d\u003d null) {\n                        this.furnitureCatalogDragAndDropListener \u003d createFurnitureCatalogMouseListener();\n                    }\n                    catalogComponent.addMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.addMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        } else {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(null);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(null);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(null);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(null);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    catalogComponent.removeMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.removeMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        }\n        this.transferHandlerEnabled \u003d enabled;\n    }\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener() {\n        return new MouseInputAdapter() {\n\n            private CatalogPieceOfFurniture selectedPiece;\n\n            private TransferHandler transferHandler;\n\n            private boolean autoscrolls;\n\n            private Cursor previousCursor;\n\n            private View previousView;\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev)) {\n                    List\u003cCatalogPieceOfFurniture\u003e selectedFurniture \u003d controller.getFurnitureCatalogController().getSelectedFurniture();\n                    if (selectedFurniture.size() \u003e 0) {\n                        JComponent source \u003d (JComponent) ev.getSource();\n                        this.transferHandler \u003d source.getTransferHandler();\n                        source.setTransferHandler(null);\n                        this.autoscrolls \u003d source.getAutoscrolls();\n                        source.setAutoscrolls(false);\n                        this.selectedPiece \u003d selectedFurniture.get(0);\n                        this.previousCursor \u003d null;\n                        this.previousView \u003d null;\n                    }\n                }\n            }\n\n            @Override\n            public void mouseDragged(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    // Force selection again\n                    List\u003cCatalogPieceOfFurniture\u003e emptyList \u003d Collections.emptyList();\n                    controller.getFurnitureCatalogController().setSelectedFurniture(emptyList);\n                    controller.getFurnitureCatalogController().setSelectedFurniture(Arrays.asList(new CatalogPieceOfFurniture[] { this.selectedPiece }));\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (this.previousView !\u003d view) {\n                        if (this.previousView !\u003d null) {\n                            if (this.previousView \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().stopDraggedItems();\n                            }\n                            ((JComponent) this.previousView).setCursor(this.previousCursor);\n                            this.previousCursor \u003d null;\n                            this.previousView \u003d null;\n                        }\n                        if (view !\u003d null) {\n                            JComponent component \u003d (JComponent) view;\n                            this.previousCursor \u003d component.getCursor();\n                            this.previousView \u003d view;\n                            component.setCursor(DragSource.DefaultCopyDrop);\n                            if (component.getParent() instanceof JViewport) {\n                                ((JViewport) component.getParent()).setCursor(DragSource.DefaultCopyDrop);\n                            }\n                            if (view \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().startDraggedItems(transferredFurniture, pointInView[0], pointInView[1]);\n                            }\n                        }\n                    } else if (pointInView !\u003d null) {\n                        controller.getPlanController().moveMouse(pointInView[0], pointInView[1]);\n                    }\n                }\n            }\n\n            private float[] getPointInPlanView(MouseEvent ev, List\u003cSelectable\u003e transferredFurniture) {\n                PlanView planView \u003d controller.getPlanController().getView();\n                if (planView !\u003d null) {\n                    JComponent planComponent \u003d (JComponent) planView;\n                    Point pointInPlanComponent \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent);\n                    if (planComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) planComponent.getParent()).contains(SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent.getParent())) || !(planComponent.getParent() instanceof JViewport) \u0026\u0026 planView.canImportDraggedItems(transferredFurniture, pointInPlanComponent.x, pointInPlanComponent.y)) {\n                        return new float[] { planView.convertXPixelToModel(pointInPlanComponent.x), planView.convertYPixelToModel(pointInPlanComponent.y) };\n                    }\n                }\n                return null;\n            }\n\n            private float[] getPointInFurnitureView(MouseEvent ev) {\n                View furnitureView \u003d controller.getFurnitureController().getView();\n                if (furnitureView !\u003d null) {\n                    JComponent furnitureComponent \u003d (JComponent) furnitureView;\n                    Point point \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getX(), ev.getY(), furnitureComponent.getParent() instanceof JViewport ? furnitureComponent.getParent() : furnitureComponent);\n                    if (furnitureComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) furnitureComponent.getParent()).contains(point) || !(furnitureComponent.getParent() instanceof JViewport) \u0026\u0026 furnitureComponent.contains(point)) {\n                        return new float[] { 0, 0 };\n                    }\n                }\n                return null;\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        controller.getPlanController().stopDraggedItems();\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (pointInView !\u003d null) {\n                        controller.drop(transferredFurniture, view, pointInView[0], pointInView[1]);\n                        ((JComponent) this.previousView).setCursor(this.previousCursor);\n                    }\n                    this.selectedPiece \u003d null;\n                    JComponent source \u003d (JComponent) ev.getSource();\n                    source.setTransferHandler(this.transferHandler);\n                    source.setAutoscrolls(this.autoscrolls);\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller) {\n        final JComponent catalogFurniturePane \u003d createCatalogFurniturePane(home, preferences, controller);\n        final JComponent planView3DPane \u003d createPlanView3DPane(home, preferences, controller);\n        if (catalogFurniturePane \u003d\u003d null) {\n            return planView3DPane;\n        } else if (planView3DPane \u003d\u003d null) {\n            return catalogFurniturePane;\n        } else {\n            final JSplitPane mainPane \u003d new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, catalogFurniturePane, planView3DPane);\n            // Set default divider location\n            mainPane.setDividerLocation(360);\n            configureSplitPane(mainPane, home, MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.3, true, controller);\n            return mainPane;\n        }\n    }\n\n    /**\n     * Configures \u003ccode\u003esplitPane\u003c/code\u003e divider location.\n     * If \u003ccode\u003edividerLocationProperty\u003c/code\u003e visual property exists in \u003ccode\u003ehome\u003c/code\u003e,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller) {\n        splitPane.setContinuousLayout(true);\n        splitPane.setOneTouchExpandable(true);\n        splitPane.setResizeWeight(defaultResizeWeight);\n        if (!showBorder) {\n            splitPane.setBorder(null);\n        }\n        // Restore divider location previously set\n        Integer dividerLocation \u003d (Integer) home.getVisualProperty(dividerLocationProperty);\n        if (dividerLocation !\u003d null) {\n            splitPane.setDividerLocation(dividerLocation);\n        }\n        splitPane.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, new PropertyChangeListener() {\n\n            public void propertyChange(final PropertyChangeEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        Component focusOwner \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();\n                        if (focusOwner !\u003d null \u0026\u0026 isChildComponentInvisible(splitPane, focusOwner)) {\n                            FocusTraversalPolicy focusTraversalPolicy \u003d getFocusTraversalPolicy();\n                            Component focusedComponent \u003d focusTraversalPolicy.getComponentAfter(HomePane.this, focusOwner);\n                            if (focusedComponent \u003d\u003d null) {\n                                focusedComponent \u003d focusTraversalPolicy.getComponentBefore(HomePane.this, focusOwner);\n                            }\n                            if (focusedComponent !\u003d null) {\n                                focusedComponent.requestFocusInWindow();\n                            }\n                        }\n                        controller.setVisualProperty(dividerLocationProperty, ev.getNewValue());\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent catalogView \u003d (JComponent) controller.getFurnitureCatalogController().getView();\n        if (catalogView !\u003d null) {\n            // Create catalog view popup menu\n            JPopupMenu catalogViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.COPY, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_HOME_FURNITURE, catalogViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.IMPORT_FURNITURE, catalogViewPopup);\n            SwingTools.hideDisabledMenuItems(catalogViewPopup);\n            catalogView.setComponentPopupMenu(catalogViewPopup);\n            preferences.addPropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, new FurnitureCatalogViewChangeListener(this, catalogView));\n            if (catalogView instanceof Scrollable) {\n                catalogView \u003d SwingTools.createScrollPane(catalogView);\n            }\n        }\n        // Configure furniture view\n        JComponent furnitureView \u003d (JComponent) controller.getFurnitureController().getView();\n        if (furnitureView !\u003d null) {\n            // Set default traversal keys of furniture view\n            KeyboardFocusManager focusManager \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager();\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS));\n            // Create furniture view popup menu\n            JPopupMenu furnitureViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.REDO, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.COPY, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.SELECT_ALL, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, furnitureViewPopup);\n            furnitureViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            furnitureViewPopup.addSeparator();\n            furnitureViewPopup.add(createFurnitureSortMenu(home, preferences));\n            furnitureViewPopup.add(createFurnitureDisplayPropertyMenu(home, preferences));\n            SwingTools.hideDisabledMenuItems(furnitureViewPopup);\n            furnitureView.setComponentPopupMenu(furnitureViewPopup);\n            if (furnitureView instanceof Scrollable) {\n                JScrollPane furnitureScrollPane \u003d SwingTools.createScrollPane(furnitureView);\n                // Add a mouse listener that gives focus to furniture view when\n                // user clicks in its viewport (tables don\u0027t spread vertically if their row count is too small)\n                final JViewport viewport \u003d furnitureScrollPane.getViewport();\n                viewport.addMouseListener(new MouseAdapter() {\n\n                    @Override\n                    public void mouseClicked(MouseEvent ev) {\n                        viewport.getView().requestFocusInWindow();\n                    }\n                });\n                Integer viewportY \u003d (Integer) home.getVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(0, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        controller.setVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY, viewport.getViewPosition().y);\n                    }\n                });\n                ((JViewport) furnitureView.getParent()).setComponentPopupMenu(furnitureViewPopup);\n                furnitureView \u003d furnitureScrollPane;\n            }\n        }\n        if (catalogView \u003d\u003d null) {\n            return furnitureView;\n        } else if (furnitureView \u003d\u003d null) {\n            return catalogView;\n        } else {\n            // Create a split pane that displays both components\n            JSplitPane catalogFurniturePane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, catalogView, furnitureView);\n            catalogFurniturePane.setBorder(null);\n            catalogFurniturePane.setMinimumSize(new Dimension());\n            configureSplitPane(catalogFurniturePane, home, CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n            return catalogFurniturePane;\n        }\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJComponent\u003e furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView \u003d this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView !\u003d null) {\n                    boolean transferHandlerEnabled \u003d homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView \u003d (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent \u003d SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent planView \u003d (JComponent) controller.getPlanController().getView();\n        if (planView !\u003d null) {\n            // Create plan view popup menu\n            JPopupMenu planViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, planViewPopup);\n            addActionToPopupMenu(ActionType.REDO, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, planViewPopup);\n            addActionToPopupMenu(ActionType.COPY, planViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, planViewPopup);\n            Action selectObjectAction \u003d this.menuActionMap.get(MenuActionType.SELECT_OBJECT_MENU);\n            JMenu selectObjectMenu;\n            if (selectObjectAction.getValue(Action.NAME) !\u003d null) {\n                selectObjectMenu \u003d new JMenu(selectObjectAction);\n                planViewPopup.add(selectObjectMenu);\n            } else {\n                selectObjectMenu \u003d null;\n            }\n            addActionToPopupMenu(ActionType.SELECT_ALL, planViewPopup);\n            planViewPopup.addSeparator();\n            addToggleActionToPopupMenu(ActionType.SELECT, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.PAN, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_WALLS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_ROOMS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_DIMENSION_LINES, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_LABELS, true, planViewPopup);\n            planViewPopup.addSeparator();\n            JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, true);\n            if (lockUnlockBasePlanMenuItem !\u003d null) {\n                planViewPopup.add(lockUnlockBasePlanMenuItem);\n            }\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, planViewPopup);\n            planViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            addActionToPopupMenu(ActionType.MODIFY_COMPASS, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.REVERSE_WALL_DIRECTION, planViewPopup);\n            addActionToPopupMenu(ActionType.SPLIT_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_ROOM, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LABEL, planViewPopup);\n            planViewPopup.add(createTextStyleMenu(home, preferences, true));\n            planViewPopup.addSeparator();\n            JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, true);\n            if (importModifyBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(importModifyBackgroundImageMenuItem);\n            }\n            JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, true);\n            if (hideShowBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(hideShowBackgroundImageMenuItem);\n            }\n            addActionToPopupMenu(ActionType.DELETE_BACKGROUND_IMAGE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.DELETE_LEVEL, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ZOOM_OUT, planViewPopup);\n            addActionToPopupMenu(ActionType.ZOOM_IN, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_SVG, planViewPopup);\n            SwingTools.hideDisabledMenuItems(planViewPopup);\n            if (selectObjectMenu !\u003d null) {\n                // Add a second popup listener to manage Select object sub menu before the menu is hidden when empty\n                addSelectObjectMenuItems(selectObjectMenu, controller.getPlanController(), preferences);\n            }\n            planView.setComponentPopupMenu(planViewPopup);\n            final JScrollPane planScrollPane;\n            if (planView instanceof Scrollable) {\n                planView \u003d planScrollPane \u003d SwingTools.createScrollPane(planView);\n            } else {\n                List\u003cJScrollPane\u003e scrollPanes \u003d SwingTools.findChildren(planView, JScrollPane.class);\n                if (scrollPanes.size() \u003d\u003d 1) {\n                    planScrollPane \u003d scrollPanes.get(0);\n                } else {\n                    planScrollPane \u003d null;\n                }\n            }\n            if (planScrollPane !\u003d null) {\n                setPlanRulersVisible(planScrollPane, controller, preferences.isRulersVisible());\n                if (planScrollPane.getCorner(JScrollPane.UPPER_LEADING_CORNER) \u003d\u003d null) {\n                    final JComponent lockUnlockBasePlanButton \u003d createLockUnlockBasePlanButton(home);\n                    if (lockUnlockBasePlanButton !\u003d null) {\n                        planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                        planScrollPane.addPropertyChangeListener(\"componentOrientation\", new PropertyChangeListener() {\n\n                            public void propertyChange(PropertyChangeEvent ev) {\n                                if (lockUnlockBasePlanButton.getParent() !\u003d null) {\n                                    planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                                }\n                            }\n                        });\n                    }\n                }\n                // Add a listener to update rulers visibility in preferences\n                preferences.addPropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, new RulersVisibilityChangeListener(this, planScrollPane, controller));\n                // Restore viewport position if it exists\n                final JViewport viewport \u003d planScrollPane.getViewport();\n                Integer viewportX \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY);\n                Integer viewportY \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportX !\u003d null \u0026\u0026 viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(viewportX, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        Point viewportPosition \u003d viewport.getViewPosition();\n                        controller.setVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY, viewportPosition.x);\n                        controller.setVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY, viewportPosition.y);\n                    }\n                });\n            }\n        }\n        // Configure 3D view\n        JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n        if (view3D !\u003d null) {\n            view3D.setPreferredSize(planView !\u003d null ? planView.getPreferredSize() : new Dimension(400, 400));\n            view3D.setMinimumSize(new Dimension());\n            // Create 3D view popup menu\n            JPopupMenu view3DPopup \u003d new JPopupMenu();\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_TOP, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_OBSERVER, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_OBSERVER, view3DPopup);\n            addActionToPopupMenu(ActionType.STORE_POINT_OF_VIEW, view3DPopup);\n            JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n            if (goToPointOfViewMenu !\u003d null) {\n                view3DPopup.add(goToPointOfViewMenu);\n            }\n            view3DPopup.addSeparator();\n            JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, true);\n            if (attachDetach3DViewMenuItem !\u003d null) {\n                view3DPopup.add(attachDetach3DViewMenuItem);\n            }\n            addToggleActionToPopupMenu(ActionType.DISPLAY_ALL_LEVELS, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_3D_ATTRIBUTES, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CREATE_PHOTO, view3DPopup);\n            addActionToPopupMenu(ActionType.CREATE_VIDEO, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_OBJ, view3DPopup);\n            SwingTools.hideDisabledMenuItems(view3DPopup);\n            view3D.setComponentPopupMenu(view3DPopup);\n            if (view3D instanceof Scrollable) {\n                view3D \u003d SwingTools.createScrollPane(view3D);\n            }\n            JComponent planView3DPane;\n            if (planView !\u003d null) {\n                // Create a split pane that displays both components\n                final JSplitPane planView3DSplitPane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, planView, view3D);\n                planView3DSplitPane.setMinimumSize(new Dimension());\n                configureSplitPane((JSplitPane) planView3DSplitPane, home, PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n                final Integer dividerLocation \u003d (Integer) home.getVisualProperty(PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                if (OperatingSystem.isMacOSX() \u0026\u0026 dividerLocation !\u003d null \u0026\u0026 dividerLocation \u003e 2) {\n                    // Under Mac OS X, ensure that the 3D view of an existing home will be displayed during a while\n                    // to avoid a freeze when the 3D view was saved as hidden and then the window displaying the 3D view is enlarged\n                    planView3DSplitPane.addAncestorListener(new AncestorListener() {\n\n                        public void ancestorAdded(AncestorEvent event) {\n                            planView3DSplitPane.removeAncestorListener(this);\n                            if (planView3DSplitPane.getRightComponent().getHeight() \u003d\u003d 0) {\n                                // If the 3D view is invisible, make it appear during a while\n                                planView3DSplitPane.setDividerLocation(dividerLocation - 2);\n                                Executors.newSingleThreadScheduledExecutor().schedule(new Runnable() {\n\n                                    public void run() {\n                                        EventQueue.invokeLater(new Runnable() {\n\n                                            public void run() {\n                                                planView3DSplitPane.setDividerLocation(dividerLocation);\n                                            }\n                                        });\n                                    }\n                                }, 1, TimeUnit.SECONDS);\n                            }\n                        }\n\n                        public void ancestorRemoved(AncestorEvent event) {\n                        }\n\n                        public void ancestorMoved(AncestorEvent event) {\n                        }\n                    });\n                }\n                planView3DPane \u003d planView3DSplitPane;\n            } else {\n                planView3DPane \u003d view3D;\n            }\n            // Detach 3D view if it was detached when saved and its dialog can be viewed in one of the screen devices\n            Boolean detachedView3D \u003d (Boolean) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY);\n            if (detachedView3D !\u003d null \u0026\u0026 detachedView3D.booleanValue()) {\n                // Check 3D view can be viewed in one of the available screens\n                final Integer dialogX \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n                final Integer dialogY \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY);\n                final Integer dialogWidth \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n                final Integer dialogHeight \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY);\n                if (dialogX !\u003d null \u0026\u0026 dialogY !\u003d null \u0026\u0026 dialogWidth !\u003d null \u0026\u0026 dialogHeight !\u003d null \u0026\u0026 SwingTools.isRectangleVisibleAtScreen(new Rectangle(dialogX, dialogY, dialogWidth, dialogHeight))) {\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            View view3D \u003d controller.getHomeController3D().getView();\n                            detachView(view3D, dialogX, dialogY, dialogWidth, dialogHeight);\n                        }\n                    });\n                    return planView3DPane;\n                }\n                if (planView3DPane instanceof JSplitPane) {\n                    ((JSplitPane) planView3DPane).setDividerLocation(0.5);\n                }\n                controller.setVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, null);\n            }\n            return planView3DPane;\n        } else {\n            return planView;\n        }\n    }\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences) {\n        JComponent planView \u003d (JComponent) planController.getView();\n        final Point lastMouseMoveLocation \u003d new Point(-1, -1);\n        ((JPopupMenu) selectObjectMenu.getParent()).addPopupMenuListener(new PopupMenuListener() {\n\n            @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n            public void popupMenuWillBecomeVisible(PopupMenuEvent ev) {\n                if (lastMouseMoveLocation.getX() \u003e\u003d 0 \u0026\u0026 !planController.isModificationState()) {\n                    final List\u003cSelectable\u003e items \u003d planController.getSelectableItemsAt(planController.getView().convertXPixelToModel(lastMouseMoveLocation.x), planController.getView().convertYPixelToModel(lastMouseMoveLocation.y));\n                    // Prepare localized formatters\n                    Map\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e formatters \u003d new HashMap\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e();\n                    formatters.put(Compass.class, new SelectableFormat\u003cCompass\u003e() {\n\n                        public String format(Compass compass) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.compass\");\n                        }\n                    });\n                    formatters.put(HomePieceOfFurniture.class, new SelectableFormat\u003cHomePieceOfFurniture\u003e() {\n\n                        public String format(HomePieceOfFurniture piece) {\n                            if (piece.getName().length() \u003e 0) {\n                                return piece.getName();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.furniture\");\n                            }\n                        }\n                    });\n                    formatters.put(Wall.class, new SelectableFormat\u003cWall\u003e() {\n\n                        public String format(Wall wall) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.wall\", preferences.getLengthUnit().getFormatWithUnit().format(wall.getLength()));\n                        }\n                    });\n                    formatters.put(Room.class, new SelectableFormat\u003cRoom\u003e() {\n\n                        public String format(Room room) {\n                            String roomInfo \u003d room.getName() !\u003d null \u0026\u0026 room.getName().length() \u003e 0 ? room.getName() : (room.isAreaVisible() ? preferences.getLengthUnit().getAreaFormatWithUnit().format(room.getArea()) : \"\");\n                            if (room.isFloorVisible() \u0026\u0026 !room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.floor\", roomInfo);\n                            } else if (!room.isFloorVisible() \u0026\u0026 room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.ceiling\", roomInfo);\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.room\", roomInfo);\n                            }\n                        }\n                    });\n                    formatters.put(DimensionLine.class, new SelectableFormat\u003cDimensionLine\u003e() {\n\n                        public String format(DimensionLine dimensionLine) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.dimensionLine\", preferences.getLengthUnit().getFormatWithUnit().format(dimensionLine.getLength()));\n                        }\n                    });\n                    formatters.put(Label.class, new SelectableFormat\u003cLabel\u003e() {\n\n                        public String format(Label label) {\n                            if (label.getText().length() \u003e 0) {\n                                return label.getText();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.label\");\n                            }\n                        }\n                    });\n                    for (final Selectable item : items) {\n                        String format \u003d null;\n                        for (Map.Entry\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e entry : formatters.entrySet()) {\n                            if (entry.getKey().isInstance(item)) {\n                                format \u003d entry.getValue().format(item);\n                                break;\n                            }\n                        }\n                        if (format !\u003d null) {\n                            selectObjectMenu.add(new JMenuItem(new AbstractAction(format) {\n\n                                public void actionPerformed(ActionEvent ev) {\n                                    planController.selectItem(item);\n                                }\n                            }));\n                        }\n                    }\n                }\n            }\n\n            public void popupMenuWillBecomeInvisible(PopupMenuEvent ev) {\n                selectObjectMenu.removeAll();\n            }\n\n            public void popupMenuCanceled(PopupMenuEvent ev) {\n            }\n        });\n        planView.addMouseMotionListener(new MouseMotionAdapter() {\n\n            @Override\n            public void mouseMoved(MouseEvent ev) {\n                lastMouseMoveLocation.setLocation(ev.getPoint());\n            }\n        });\n        planView.addMouseListener(new MouseAdapter() {\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                lastMouseMoveLocation.x \u003d -1;\n            }\n        });\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJScrollPane\u003e planScrollPane;\n\n        private WeakReference\u003cHomeController\u003e controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.planScrollPane \u003d new WeakReference\u003cJScrollPane\u003e(planScrollPane);\n            this.controller \u003d new WeakReference\u003cHomeController\u003e(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            JScrollPane planScrollPane \u003d this.planScrollPane.get();\n            HomeController controller \u003d this.controller.get();\n            if (homePane \u003d\u003d null || planScrollPane \u003d\u003d null || controller \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible) {\n        if (visible) {\n            // Change column and row header views\n            planScrollPane.setColumnHeaderView((JComponent) controller.getPlanController().getHorizontalRulerView());\n            planScrollPane.setRowHeaderView((JComponent) controller.getPlanController().getVerticalRulerView());\n        } else {\n            planScrollPane.setColumnHeaderView(null);\n            planScrollPane.setRowHeaderView(null);\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003eview\u003c/code\u003e a mouse listener that disables all menu items of\n     * \u003ccode\u003emenuBar\u003c/code\u003e during a drag and drop operation in \u003ccode\u003eview\u003c/code\u003e.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar) {\n        class MouseAndFocusListener extends MouseAdapter implements FocusListener {\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), false);\n                        }\n                    }\n                });\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            private void enableMenuItems(final JMenuBar menuBar) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), true);\n                        }\n                    }\n                });\n            }\n\n            private void setMenuItemsEnabled(JMenu menu, boolean enabled) {\n                for (int i \u003d 0, n \u003d menu.getItemCount(); i \u003c n; i++) {\n                    JMenuItem item \u003d menu.getItem(i);\n                    if (item instanceof JMenu) {\n                        setMenuItemsEnabled((JMenu) item, enabled);\n                    } else if (item !\u003d null) {\n                        item.setEnabled(enabled ? item.getAction().isEnabled() : false);\n                    }\n                }\n            }\n\n            // Need to take into account focus events because a mouse released event\n            // isn\u0027t dispatched when the component loses focus\n            public void focusGained(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            public void focusLost(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n        }\n        ;\n        MouseAndFocusListener listener \u003d new MouseAndFocusListener();\n        if (view !\u003d null) {\n            ((JComponent) view).addMouseListener(listener);\n            ((JComponent) view).addFocusListener(listener);\n        }\n    }\n\n    /**\n     * Detaches the given \u003ccode\u003eview\u003c/code\u003e from home view.\n     */\n    public void detachView(final View view) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        float dividerLocation;\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            if (splitPane.getOrientation() \u003d\u003d JSplitPane.VERTICAL_SPLIT) {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getHeight() - splitPane.getDividerSize());\n            } else {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getWidth() - splitPane.getDividerSize());\n            }\n        } else {\n            dividerLocation \u003d -1;\n        }\n        Integer dialogX \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n        Integer dialogWidth \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n        if (dialogX !\u003d null \u0026\u0026 dialogWidth !\u003d null) {\n            detachView(view, dialogX, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY), dialogWidth, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY));\n        } else {\n            Point componentLocation \u003d new Point();\n            Dimension componentSize \u003d component.getSize();\n            SwingUtilities.convertPointToScreen(componentLocation, component);\n            Insets insets \u003d new JDialog().getInsets();\n            detachView(view, componentLocation.x - insets.left, componentLocation.y - insets.top, componentSize.width + insets.left + insets.right, componentSize.height + insets.top + insets.bottom);\n        }\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY, dividerLocation);\n    }\n\n    /**\n     * Detaches a \u003ccode\u003eview\u003c/code\u003e at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        // Replace component by a dummy label to find easily where to attach back the component\n        JLabel dummyLabel \u003d new JLabel();\n        dummyLabel.setMaximumSize(new Dimension());\n        dummyLabel.setName(view.getClass().getName());\n        dummyLabel.setBorder(component.getBorder());\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            splitPane.setDividerSize(0);\n            if (splitPane.getLeftComponent() \u003d\u003d component) {\n                splitPane.setLeftComponent(dummyLabel);\n                splitPane.setDividerLocation(0f);\n            } else {\n                splitPane.setRightComponent(dummyLabel);\n                splitPane.setDividerLocation(1f);\n            }\n        } else {\n            int componentIndex \u003d parent.getComponentZOrder(component);\n            parent.remove(componentIndex);\n            parent.add(dummyLabel, componentIndex);\n        }\n        // Display view in a separate non modal dialog\n        Window window \u003d SwingUtilities.getWindowAncestor(this);\n        if (!(window instanceof JFrame)) {\n            window \u003d JOptionPane.getRootFrame();\n        }\n        JFrame defaultFrame \u003d (JFrame) window;\n        // Create a dialog with the same title as home frame\n        final JDialog separateDialog \u003d new JDialog(defaultFrame, defaultFrame.getTitle(), false);\n        separateDialog.setResizable(true);\n        defaultFrame.addPropertyChangeListener(\"title\", new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                separateDialog.setTitle((String) ev.getNewValue());\n            }\n        });\n        // Use same document modified indicator\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"Window.documentModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"Window.documentModified\", ev.getNewValue());\n                }\n            });\n        } else if (OperatingSystem.isMacOSX()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"windowModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"windowModified\", ev.getNewValue());\n                }\n            });\n        }\n        separateDialog.setContentPane(component);\n        separateDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\n        separateDialog.addWindowListener(new WindowAdapter() {\n\n            @Override\n            public void windowClosing(WindowEvent ev) {\n                controller.attachView(view);\n            }\n        });\n        separateDialog.addComponentListener(new ComponentAdapter() {\n\n            @Override\n            public void componentResized(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY, separateDialog.getWidth());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY, separateDialog.getHeight());\n            }\n\n            @Override\n            public void componentMoved(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, separateDialog.getX());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY, separateDialog.getY());\n            }\n        });\n        separateDialog.setBounds(x, y, width, height);\n        separateDialog.setLocationByPlatform(!SwingTools.isRectangleVisibleAtScreen(separateDialog.getBounds()));\n        separateDialog.setVisible(true);\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, true);\n    }\n\n    /**\n     * Attaches the given \u003ccode\u003eview\u003c/code\u003e to home view.\n     */\n    public void attachView(View view) {\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, false);\n        JComponent dummyComponent \u003d (JComponent) findChild(this, view.getClass().getName());\n        if (dummyComponent !\u003d null) {\n            JComponent component \u003d (JComponent) view;\n            Window window \u003d SwingUtilities.getWindowAncestor(component);\n            component.setBorder(dummyComponent.getBorder());\n            Container parent \u003d dummyComponent.getParent();\n            if (parent instanceof JSplitPane) {\n                JSplitPane splitPane \u003d (JSplitPane) parent;\n                float dividerLocation \u003d (Float) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                splitPane.setDividerSize(UIManager.getInt(\"SplitPane.dividerSize\"));\n                splitPane.setDividerLocation(dividerLocation);\n                if (splitPane.getLeftComponent() \u003d\u003d dummyComponent) {\n                    splitPane.setLeftComponent(component);\n                } else {\n                    splitPane.setRightComponent(component);\n                }\n            } else {\n                int componentIndex \u003d parent.getComponentZOrder(dummyComponent);\n                parent.remove(componentIndex);\n                parent.add(component, componentIndex);\n            }\n            window.dispose();\n        }\n    }\n\n    /**\n     * Returns among \u003ccode\u003eparent\u003c/code\u003e children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName) {\n        for (int i \u003d 0; i \u003c parent.getComponentCount(); i++) {\n            Component child \u003d parent.getComponent(i);\n            if (childName.equals(child.getName())) {\n                return child;\n            } else if (child instanceof Container) {\n                child \u003d findChild((Container) child, childName);\n                if (child !\u003d null) {\n                    return child;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"openHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D);\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importLanguageLibraryDialog.title\"), ContentManager.ContentType.LANGUAGE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.message\", new File(languageLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importFurnitureLibraryDialog.title\"), ContentManager.ContentType.FURNITURE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.message\", new File(furnitureLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importTexturesLibraryDialog.title\"), ContentManager.ContentType.TEXTURES_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.message\", new File(texturesLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.message\", new File(pluginName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"saveHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D, homeName);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in an error message box.\n     */\n    public void showError(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"error.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in a message box.\n     */\n    public void showMessage(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"message.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);\n    }\n\n    /**\n     * Displays the tip matching \u003ccode\u003eactionTipKey\u003c/code\u003e and\n     * returns \u003ccode\u003etrue\u003c/code\u003e if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipTitle\");\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipMessage\");\n        if (message.length() \u003e 0) {\n            JPanel tipPanel \u003d new JPanel(new GridBagLayout());\n            JLabel messageLabel \u003d new JLabel(message);\n            tipPanel.add(messageLabel, new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            // Add a check box that lets user choose whether he wants to display again the tip or not\n            JCheckBox doNotDisplayTipCheckBox \u003d new JCheckBox(SwingTools.getLocalizedLabelText(this.preferences, HomePane.class, \"doNotDisplayTipCheckBox.text\"));\n            if (!OperatingSystem.isMacOSX()) {\n                doNotDisplayTipCheckBox.setMnemonic(KeyStroke.getKeyStroke(this.preferences.getLocalizedString(HomePane.class, \"doNotDisplayTipCheckBox.mnemonic\")).getKeyCode());\n            }\n            tipPanel.add(doNotDisplayTipCheckBox, new GridBagConstraints(0, 1, 1, 1, 0, 1, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));\n            SwingTools.showMessageDialog(this, tipPanel, title, JOptionPane.INFORMATION_MESSAGE, doNotDisplayTipCheckBox);\n            return doNotDisplayTipCheckBox.isSelected();\n        } else {\n            // Ignore untranslated tips\n            return true;\n        }\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn\u0027t want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn\u0027t want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName) {\n        // Retrieve displayed text in buttons and message\n        String message;\n        if (homeName !\u003d null) {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\\\"\" + this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D) + \"\\\"\");\n        } else {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\");\n        }\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.doNotSave\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.cancel\");\n        switch(JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave, cancel }, save)) {\n            // Convert showOptionDialog answer to SaveAnswer enum constants\n            case JOptionPane.YES_OPTION:\n                return SaveAnswer.SAVE;\n            case JOptionPane.NO_OPTION:\n                return SaveAnswer.DO_NOT_SAVE;\n            default:\n                return SaveAnswer.CANCEL;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName) {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.message\", this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D));\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.doNotSave\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave }, doNotSave) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to exit.\n     */\n    public boolean confirmExit() {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.title\");\n        String quit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.quit\");\n        String doNotQuit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.doNotQuit\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { quit, doNotQuit }, doNotQuit) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog() {\n        String messageFormat \u003d this.preferences.getLocalizedString(HomePane.class, \"about.message\");\n        String aboutVersion \u003d this.controller.getVersion();\n        String message \u003d String.format(messageFormat, aboutVersion, System.getProperty(\"java.version\"));\n        // Use an uneditable editor pane to let user select text in dialog\n        JEditorPane messagePane \u003d new JEditorPane(\"text/html\", message);\n        messagePane.setOpaque(false);\n        messagePane.setEditable(false);\n        // Add a listener that displays hyperlinks content in browser\n        messagePane.addHyperlinkListener(new HyperlinkListener() {\n\n            public void hyperlinkUpdate(HyperlinkEvent ev) {\n                if (ev.getEventType() \u003d\u003d HyperlinkEvent.EventType.ACTIVATED) {\n                    SwingTools.showDocumentInBrowser(ev.getURL());\n                }\n            }\n        });\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"about.title\");\n        Icon icon \u003d new ImageIcon(HomePane.class.getResource(this.preferences.getLocalizedString(HomePane.class, \"about.icon\")));\n        JOptionPane.showMessageDialog(this, messagePane, title, JOptionPane.INFORMATION_MESSAGE, icon);\n    }\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or \u003ccode\u003enull\u003c/code\u003e if the user canceled print.\n     *    The \u003ccode\u003ecall\u003c/code\u003e method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable\u003cVoid\u003e showPrintDialog() {\n        PageFormat pageFormat \u003d HomePrintableComponent.getPageFormat(this.home.getPrint());\n        final PrinterJob printerJob \u003d PrinterJob.getPrinterJob();\n        printerJob.setPrintable(new HomePrintableComponent(this.home, this.controller, getFont()), pageFormat);\n        String jobName \u003d this.preferences.getLocalizedString(HomePane.class, \"print.jobName\");\n        if (this.home.getName() !\u003d null) {\n            jobName +\u003d \" - \" + this.controller.getContentManager().getPresentationName(this.home.getName(), ContentManager.ContentType.SWEET_HOME_3D);\n        }\n        printerJob.setJobName(jobName);\n        if (printerJob.printDialog()) {\n            return new Callable\u003cVoid\u003e() {\n\n                public Void call() throws RecorderException {\n                    try {\n                        printerJob.print();\n                        return null;\n                    } catch (InterruptedPrinterException ex) {\n                        throw new InterruptedRecorderException(\"Print interrupted\");\n                    } catch (PrinterException ex) {\n                        throw new RecorderException(\"Couldn\u0027t print\", ex);\n                    }\n                }\n            };\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"printToPDFDialog.title\"), ContentManager.ContentType.PDF, homeName);\n    }\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException {\n        OutputStream outputStream \u003d null;\n        boolean printInterrupted \u003d false;\n        try {\n            outputStream \u003d new FileOutputStream(pdfFile);\n            new HomePDFPrinter(this.home, this.preferences, this.controller, getFont()).write(outputStream);\n        } catch (InterruptedIOException ex) {\n            printInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Print interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n        } finally {\n            try {\n                if (outputStream !\u003d null) {\n                    outputStream.close();\n                }\n                // Delete the file if printing is interrupted\n                if (printInterrupted) {\n                    new File(pdfFile).delete();\n                }\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToSVGDialog.title\"), ContentManager.ContentType.SVG, homeName);\n    }\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException {\n        View planView \u003d this.controller.getPlanController().getView();\n        PlanComponent planComponent;\n        if (planView instanceof PlanComponent) {\n            planComponent \u003d (PlanComponent) planView;\n        } else {\n            planComponent \u003d new PlanComponent(this.home, this.preferences, null);\n        }\n        OutputStream outputStream \u003d null;\n        boolean exportInterrupted \u003d false;\n        try {\n            outputStream \u003d new BufferedOutputStream(new FileOutputStream(svgFile));\n            planComponent.exportToSVG(outputStream);\n        } catch (InterruptedIOException ex) {\n            exportInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Export to \" + svgFile + \" interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n        } finally {\n            if (outputStream !\u003d null) {\n                try {\n                    outputStream.close();\n                    // Delete the file if exporting is interrupted\n                    if (exportInterrupted) {\n                        new File(svgFile).delete();\n                    }\n                } catch (IOException ex) {\n                    throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n                }\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToOBJDialog.title\"), ContentManager.ContentType.OBJ, homeName);\n    }\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException {\n        String header \u003d this.preferences !\u003d null ? this.preferences.getLocalizedString(HomePane.class, \"exportToOBJ.header\", new Date()) : \"\";\n        // Use a clone of home to ignore selection\n        OBJExporter.exportHomeToFile(this.home.clone(), objFile, header);\n    }\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer \u003d null;\n            boolean exportInterrupted \u003d false;\n            try {\n                writer \u003d new OBJWriter(objFile, header, -1);\n                List\u003cSelectable\u003e emptySelection \u003d Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() \u003e 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds \u003d getExportedHomeBounds(home);\n                    Ground3D groundNode \u003d new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i \u003d 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode \u003d new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i \u003d 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode \u003d new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i \u003d 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode \u003d new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted \u003d true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer !\u003d null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns \u003ccode\u003ehome\u003c/code\u003e bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds \u003d updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds \u003d\u003d null) {\n                        homeBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given \u003ccode\u003efurniture\u003c/code\u003e.\n         */\n        private static List\u003cHomePieceOfFurniture\u003e getVisibleFurniture(List\u003cHomePieceOfFurniture\u003e furniture) {\n            List\u003cHomePieceOfFurniture\u003e visibleFurniture \u003d new ArrayList\u003cHomePieceOfFurniture\u003e(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() \u0026\u0026 (piece.getLevel() \u003d\u003d null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates \u003ccode\u003eobjectBounds\u003c/code\u003e to include the bounds of \u003ccode\u003eitems\u003c/code\u003e.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection\u003c? extends Selectable\u003e items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() \u003d\u003d null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds \u003d\u003d null) {\n                            objectBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection() {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.title\");\n        String delete \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.delete\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.cancel\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { delete, cancel }, cancel) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or \u003ccode\u003enull\u003c/code\u003e if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName) {\n        // Retrieve displayed text in dialog\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.title\");\n        List\u003cCamera\u003e storedCameras \u003d this.home.getStoredCameras();\n        JComponent cameraNameChooser;\n        JTextComponent cameraNameTextComponent;\n        if (storedCameras.isEmpty()) {\n            cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n        } else {\n            // If cameras are already stored in home propose an editable combo box to user\n            // to let him choose more easily an existing one if he want to overwrite it\n            String[] storedCameraNames \u003d new String[storedCameras.size()];\n            for (int i \u003d 0; i \u003c storedCameraNames.length; i++) {\n                storedCameraNames[i] \u003d storedCameras.get(i).getName();\n            }\n            JComboBox cameraNameComboBox \u003d new JComboBox(storedCameraNames);\n            cameraNameComboBox.setEditable(true);\n            cameraNameComboBox.getEditor().setItem(cameraName);\n            Component editorComponent \u003d cameraNameComboBox.getEditor().getEditorComponent();\n            if (editorComponent instanceof JTextComponent) {\n                cameraNameTextComponent \u003d (JTextComponent) editorComponent;\n                cameraNameChooser \u003d cameraNameComboBox;\n            } else {\n                cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n            }\n        }\n        JPanel cameraNamePanel \u003d new JPanel(new BorderLayout(2, 2));\n        cameraNamePanel.add(new JLabel(message), BorderLayout.NORTH);\n        cameraNamePanel.add(cameraNameChooser, BorderLayout.SOUTH);\n        if (SwingTools.showConfirmDialog(this, cameraNamePanel, title, cameraNameTextComponent) \u003d\u003d JOptionPane.OK_OPTION) {\n            return cameraNameTextComponent.getText();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty() {\n        try {\n            Clipboard clipboard \u003d getToolkit().getSystemClipboard();\n            return !(clipboard.isDataFlavorAvailable(HomeTransferableList.HOME_FLAVOR) || getToolkit().getSystemClipboard().isDataFlavorAvailable(DataFlavor.javaFileListFlavor));\n        } catch (AccessControlException ex) {\n            // AWT uses a private clipboard that won\u0027t be empty as soon as a copy action will be done\n            return this.clipboardEmpty;\n        }\n    }\n\n    /**\n     * Execute \u003ccode\u003erunnable\u003c/code\u003e asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable) {\n        EventQueue.invokeLater(runnable);\n    }\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction \u003d pluginAction;\n            this.propertyChangeSupport \u003d new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName \u003d ev.getPropertyName();\n                    Object oldValue \u003d ev.getOldValue();\n                    Object newValue \u003d ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don\u0027t check new value is null !)\n                        if (newValue !\u003d null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue !\u003d null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue !\u003d null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon \u003d (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon !\u003d null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic \u003d (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic !\u003d null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat\u003cT extends Selectable\u003e {\n\n        public abstract String format(T item);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "HomePane",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_1Test.java",
    "test_prompt": "// HomePane_1Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains ten unit test cases for the {@link HomePane#showImportLanguageLibraryDialog()} method.\n*/\nclass HomePane_1Test {",
    "method_signature": "showImportLanguageLibraryDialog()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// HomePane.java\n/*\n * HomePane.java 15 mai 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY \u003d \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY \u003d \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY \u003d \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY \u003d \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY \u003d \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT \u003d 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty \u003d true;\n\n    private ActionMap menuActionMap;\n\n    private List\u003cAction\u003e pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n        this.home \u003d home;\n        this.preferences \u003d preferences;\n        this.controller \u003d controller;\n        JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n        ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);\n        createActions(home, preferences, controller);\n        createMenuActions(preferences, controller);\n        createPluginActions(controller instanceof HomePluginController ? ((HomePluginController) controller).getPlugins() : null);\n        createTransferHandlers(home, controller);\n        addHomeListener(home);\n        addLevelVisibilityListener(home);\n        addLanguageListener(preferences);\n        addPlanControllerListener(controller.getPlanController());\n        addFocusListener();\n        updateFocusTraversalPolicy();\n        JMenuBar homeMenuBar \u003d createMenuBar(home, preferences, controller);\n        setJMenuBar(homeMenuBar);\n        Container contentPane \u003d getContentPane();\n        contentPane.add(createToolBar(home), BorderLayout.NORTH);\n        contentPane.add(createMainPane(home, preferences, controller));\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            // Under Mac OS X 10.5, add some dummy labels at left and right borders\n            // to avoid the tool bar to be attached on these borders\n            // (segmented buttons created on this system aren\u0027t properly rendered\n            // when they are aligned vertically)\n            contentPane.add(new JLabel(), BorderLayout.WEST);\n            contentPane.add(new JLabel(), BorderLayout.EAST);\n        }\n        disableMenuItemsDuringDragAndDrop(controller.getPlanController().getView(), homeMenuBar);\n        // Change component orientation\n        applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller) {\n        createAction(ActionType.NEW_HOME, preferences, controller, \"newHome\");\n        createAction(ActionType.OPEN, preferences, controller, \"open\");\n        createAction(ActionType.DELETE_RECENT_HOMES, preferences, controller, \"deleteRecentHomes\");\n        createAction(ActionType.CLOSE, preferences, controller, \"close\");\n        createAction(ActionType.SAVE, preferences, controller, \"save\");\n        createAction(ActionType.SAVE_AS, preferences, controller, \"saveAs\");\n        createAction(ActionType.SAVE_AND_COMPRESS, preferences, controller, \"saveAndCompress\");\n        createAction(ActionType.PAGE_SETUP, preferences, controller, \"setupPage\");\n        createAction(ActionType.PRINT_PREVIEW, preferences, controller, \"previewPrint\");\n        createAction(ActionType.PRINT, preferences, controller, \"print\");\n        createAction(ActionType.PRINT_TO_PDF, preferences, controller, \"printToPDF\");\n        createAction(ActionType.PREFERENCES, preferences, controller, \"editPreferences\");\n        createAction(ActionType.EXIT, preferences, controller, \"exit\");\n        createAction(ActionType.UNDO, preferences, controller, \"undo\");\n        createAction(ActionType.REDO, preferences, controller, \"redo\");\n        createClipboardAction(ActionType.CUT, preferences, TransferHandler.getCutAction(), true);\n        createClipboardAction(ActionType.COPY, preferences, TransferHandler.getCopyAction(), true);\n        createClipboardAction(ActionType.PASTE, preferences, TransferHandler.getPasteAction(), false);\n        createAction(ActionType.DELETE, preferences, controller, \"delete\");\n        createAction(ActionType.SELECT_ALL, preferences, controller, \"selectAll\");\n        createAction(ActionType.ADD_HOME_FURNITURE, preferences, controller, \"addHomeFurniture\");\n        FurnitureController furnitureController \u003d controller.getFurnitureController();\n        createAction(ActionType.DELETE_HOME_FURNITURE, preferences, furnitureController, \"deleteSelection\");\n        createAction(ActionType.MODIFY_FURNITURE, preferences, controller, \"modifySelectedFurniture\");\n        createAction(ActionType.GROUP_FURNITURE, preferences, furnitureController, \"groupSelectedFurniture\");\n        createAction(ActionType.UNGROUP_FURNITURE, preferences, furnitureController, \"ungroupSelectedFurniture\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_TOP, preferences, furnitureController, \"alignSelectedFurnitureOnTop\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BOTTOM, preferences, furnitureController, \"alignSelectedFurnitureOnBottom\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT, preferences, furnitureController, \"alignSelectedFurnitureOnLeft\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT, preferences, furnitureController, \"alignSelectedFurnitureOnRight\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnFrontSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnBackSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnLeftSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnRightSide\");\n        createAction(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, preferences, furnitureController, \"alignSelectedFurnitureSideBySide\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, preferences, furnitureController, \"distributeSelectedFurnitureHorizontally\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, preferences, furnitureController, \"distributeSelectedFurnitureVertically\");\n        final HomeController3D homeController3D \u003d controller.getHomeController3D();\n        if (homeController3D.getView() !\u003d null) {\n            createAction(ActionType.IMPORT_FURNITURE, preferences, controller, \"importFurniture\");\n        }\n        createAction(ActionType.IMPORT_FURNITURE_LIBRARY, preferences, controller, \"importFurnitureLibrary\");\n        createAction(ActionType.IMPORT_TEXTURES_LIBRARY, preferences, controller, \"importTexturesLibrary\");\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_NAME, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_X, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_Y, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_COLOR, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TYPE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER, preferences, furnitureController, \"toggleFurnitureSortOrder\");\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_NAME, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_X, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_Y, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_COLOR, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        PlanController planController \u003d controller.getPlanController();\n        if (planController.getView() !\u003d null) {\n            ButtonGroup modeGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.SELECT, planController.getMode() \u003d\u003d PlanController.Mode.SELECTION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.SELECTION);\n            createToggleAction(ActionType.PAN, planController.getMode() \u003d\u003d PlanController.Mode.PANNING, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.PANNING);\n            createToggleAction(ActionType.CREATE_WALLS, planController.getMode() \u003d\u003d PlanController.Mode.WALL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.WALL_CREATION);\n            createToggleAction(ActionType.CREATE_ROOMS, planController.getMode() \u003d\u003d PlanController.Mode.ROOM_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.ROOM_CREATION);\n            createToggleAction(ActionType.CREATE_DIMENSION_LINES, planController.getMode() \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.DIMENSION_LINE_CREATION);\n            createToggleAction(ActionType.CREATE_LABELS, planController.getMode() \u003d\u003d PlanController.Mode.LABEL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.LABEL_CREATION);\n            createAction(ActionType.DELETE_SELECTION, preferences, planController, \"deleteSelection\");\n            createAction(ActionType.LOCK_BASE_PLAN, preferences, planController, \"lockBasePlan\");\n            createAction(ActionType.UNLOCK_BASE_PLAN, preferences, planController, \"unlockBasePlan\");\n            createAction(ActionType.MODIFY_COMPASS, preferences, planController, \"modifyCompass\");\n            createAction(ActionType.MODIFY_WALL, preferences, planController, \"modifySelectedWalls\");\n            createAction(ActionType.MODIFY_ROOM, preferences, planController, \"modifySelectedRooms\");\n            createAction(ActionType.MODIFY_LABEL, preferences, planController, \"modifySelectedLabels\");\n            createAction(ActionType.INCREASE_TEXT_SIZE, preferences, planController, \"increaseTextSize\");\n            createAction(ActionType.DECREASE_TEXT_SIZE, preferences, planController, \"decreaseTextSize\");\n            // Use special toggle models for bold and italic check box menu items and tool bar buttons\n            // that are selected texts in home selected items are all bold or italic\n            Action toggleBoldAction \u003d createAction(ActionType.TOGGLE_BOLD_STYLE, preferences, planController, \"toggleBoldStyle\");\n            toggleBoldAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createBoldStyleToggleModel(home, preferences));\n            Action toggleItalicAction \u003d createAction(ActionType.TOGGLE_ITALIC_STYLE, preferences, planController, \"toggleItalicStyle\");\n            toggleItalicAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createItalicStyleToggleModel(home, preferences));\n            createAction(ActionType.REVERSE_WALL_DIRECTION, preferences, planController, \"reverseSelectedWallsDirection\");\n            createAction(ActionType.SPLIT_WALL, preferences, planController, \"splitSelectedWall\");\n            createAction(ActionType.IMPORT_BACKGROUND_IMAGE, preferences, controller, \"importBackgroundImage\");\n            createAction(ActionType.MODIFY_BACKGROUND_IMAGE, preferences, controller, \"modifyBackgroundImage\");\n            createAction(ActionType.HIDE_BACKGROUND_IMAGE, preferences, controller, \"hideBackgroundImage\");\n            createAction(ActionType.SHOW_BACKGROUND_IMAGE, preferences, controller, \"showBackgroundImage\");\n            createAction(ActionType.DELETE_BACKGROUND_IMAGE, preferences, controller, \"deleteBackgroundImage\");\n            createAction(ActionType.ADD_LEVEL, preferences, planController, \"addLevel\");\n            createAction(ActionType.MODIFY_LEVEL, preferences, planController, \"modifySelectedLevel\");\n            createAction(ActionType.DELETE_LEVEL, preferences, planController, \"deleteSelectedLevel\");\n            createAction(ActionType.ZOOM_IN, preferences, controller, \"zoomIn\");\n            createAction(ActionType.ZOOM_OUT, preferences, controller, \"zoomOut\");\n            createAction(ActionType.EXPORT_TO_SVG, preferences, controller, \"exportToSVG\");\n        }\n        if (homeController3D.getView() !\u003d null) {\n            ButtonGroup viewGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera(), viewGroup, preferences, homeController3D, \"viewFromTop\");\n            createToggleAction(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera(), viewGroup, preferences, homeController3D, \"viewFromObserver\");\n            createAction(ActionType.MODIFY_OBSERVER, preferences, planController, \"modifyObserverCamera\");\n            createAction(ActionType.STORE_POINT_OF_VIEW, preferences, controller, \"storeCamera\");\n            getActionMap().put(ActionType.DETACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.DETACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.detachView(homeController3D.getView());\n                }\n            });\n            getActionMap().put(ActionType.ATTACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.ATTACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.attachView(homeController3D.getView());\n                }\n            });\n            ButtonGroup displayLevelGroup \u003d new ButtonGroup();\n            boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n            createToggleAction(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displayAllLevels\");\n            createToggleAction(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displaySelectedLevel\");\n            createAction(ActionType.MODIFY_3D_ATTRIBUTES, preferences, homeController3D, \"modifyAttributes\");\n            createAction(ActionType.CREATE_PHOTO, preferences, controller, \"createPhoto\");\n            createAction(ActionType.CREATE_VIDEO, preferences, controller, \"createVideo\");\n            createAction(ActionType.EXPORT_TO_OBJ, preferences, controller, \"exportToOBJ\");\n        }\n        createAction(ActionType.HELP, preferences, controller, \"help\");\n        createAction(ActionType.ABOUT, preferences, controller, \"about\");\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object that calls on \u003ccode\u003econtroller\u003c/code\u003e a given\n     * \u003ccode\u003emethod\u003c/code\u003e with its \u003ccode\u003eparameters\u003c/code\u003e. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        try {\n            ControllerAction action \u003d new ControllerAction(preferences, HomePane.class, actionType.name(), controller, method, parameters);\n            getActionMap().put(actionType, action);\n            return action;\n        } catch (NoSuchMethodException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object associated with a \u003ccode\u003eToggleButtonModel\u003c/code\u003e instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        Action action \u003d createAction(actionType, preferences, controller, method, parameters);\n        JToggleButton.ToggleButtonModel toggleButtonModel \u003d new JToggleButton.ToggleButtonModel();\n        toggleButtonModel.setSelected(selected);\n        if (group !\u003d null) {\n            toggleButtonModel.setGroup(group);\n        }\n        action.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, toggleButtonModel);\n        return action;\n    }\n\n    /**\n     * Creates a \u003ccode\u003eReourceAction\u003c/code\u003e object that calls\n     * \u003ccode\u003eactionPerfomed\u003c/code\u003e method on a given\n     * existing \u003ccode\u003eclipboardAction\u003c/code\u003e with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction) {\n        getActionMap().put(actionType, new ResourceAction(preferences, HomePane.class, actionType.name()) {\n\n            public void actionPerformed(ActionEvent ev) {\n                if (copyAction) {\n                    clipboardEmpty \u003d false;\n                }\n                ev \u003d new ActionEvent(lastFocusedComponent, ActionEvent.ACTION_PERFORMED, null);\n                clipboardAction.actionPerformed(ev);\n            }\n        });\n    }\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller) {\n        this.menuActionMap \u003d new ActionMap();\n        createMenuAction(preferences, MenuActionType.FILE_MENU);\n        createMenuAction(preferences, MenuActionType.EDIT_MENU);\n        createMenuAction(preferences, MenuActionType.FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.PLAN_MENU);\n        createMenuAction(preferences, MenuActionType.VIEW_3D_MENU);\n        createMenuAction(preferences, MenuActionType.HELP_MENU);\n        createMenuAction(preferences, MenuActionType.OPEN_RECENT_HOME_MENU);\n        createMenuAction(preferences, MenuActionType.SORT_HOME_FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.ALIGN_OR_DISTRIBUTE_MENU);\n        createMenuAction(preferences, MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU);\n        createMenuAction(preferences, MenuActionType.MODIFY_TEXT_STYLE);\n        createMenuAction(preferences, MenuActionType.GO_TO_POINT_OF_VIEW);\n        createMenuAction(preferences, MenuActionType.SELECT_OBJECT_MENU);\n    }\n\n    /**\n     * Creates a \u003ccode\u003eResourceAction\u003c/code\u003e object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action) {\n        this.menuActionMap.put(action, new ResourceAction(preferences, HomePane.class, action.name(), true));\n    }\n\n    /**\n     * Creates the Swing actions matching each actions available in \u003ccode\u003eplugins\u003c/code\u003e.\n     */\n    private void createPluginActions(List\u003cPlugin\u003e plugins) {\n        this.pluginActions \u003d new ArrayList\u003cAction\u003e();\n        if (plugins !\u003d null) {\n            for (Plugin plugin : plugins) {\n                for (final PluginAction pluginAction : plugin.getActions()) {\n                    // Create a Swing action adapter to plug-in action\n                    this.pluginActions.add(new ActionAdapter(pluginAction));\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller) {\n        this.catalogTransferHandler \u003d new FurnitureCatalogTransferHandler(controller.getContentManager(), controller.getFurnitureCatalogController(), controller.getFurnitureController());\n        this.furnitureTransferHandler \u003d new FurnitureTransferHandler(home, controller.getContentManager(), controller);\n        this.planTransferHandler \u003d new PlanTransferHandler(home, controller.getContentManager(), controller);\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home) {\n        home.addPropertyChangeListener(Home.Property.CAMERA, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera());\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera());\n            }\n        });\n    }\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected) {\n        ((JToggleButton.ToggleButtonModel) getActionMap().get(actionType).getValue(ResourceAction.TOGGLE_BUTTON_MODEL)).setSelected(selected);\n    }\n\n    /**\n     * Adds listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home) {\n        home.getEnvironment().addPropertyChangeListener(HomeEnvironment.Property.ALL_LEVELS_VISIBLE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n                setToggleButtonModelSelected(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible);\n                setToggleButtonModelSelected(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible);\n            }\n        });\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003epreferences\u003c/code\u003e to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences) {\n        preferences.addPropertyChangeListener(UserPreferences.Property.LANGUAGE, new LanguageChangeListener(this));\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003eplanController\u003c/code\u003e to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController) {\n        planController.addPropertyChangeListener(PlanController.Property.MODE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                Mode mode \u003d planController.getMode();\n                setToggleButtonModelSelected(ActionType.SELECT, mode \u003d\u003d PlanController.Mode.SELECTION);\n                setToggleButtonModelSelected(ActionType.PAN, mode \u003d\u003d PlanController.Mode.PANNING);\n                setToggleButtonModelSelected(ActionType.CREATE_WALLS, mode \u003d\u003d PlanController.Mode.WALL_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_ROOMS, mode \u003d\u003d PlanController.Mode.ROOM_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_DIMENSION_LINES, mode \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_LABELS, mode \u003d\u003d PlanController.Mode.LABEL_CREATION);\n            }\n        });\n    }\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener() {\n        KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"currentFocusCycleRoot\", new FocusCycleRootChangeListener(this));\n    }\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener \u003d null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener \u003d new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent !\u003d null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent \u003d homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode !\u003d null \u0026\u0026 (lostFocusedComponent \u003d\u003d homePane.controller.getPlanController().getView() || ev.getNewValue() \u003d\u003d null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode \u003d null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() !\u003d null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent \u003d (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) \u0026\u0026 gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews \u003d { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view !\u003d null \u0026\u0026 SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent \u003d (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener \u003d new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController \u003d controller.getPlanController();\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 (ev.getModifiers() \u0026 (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) \u003d\u003d 0 \u0026\u0026 getActionMap().get(ActionType.PAN).getValue(Action.NAME) !\u003d null \u0026\u0026 planController.getMode() !\u003d PlanController.Mode.PANNING \u0026\u0026 !planController.isModificationState() \u0026\u0026 SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) \u0026\u0026 !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode \u003d planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 previousPlanControllerMode !\u003d null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode \u003d null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap \u003d getActionMap();\n            Action[] specialKeyActions \u003d { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask \u003d KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke \u003d (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() \u003d\u003d actionKeyStroke.getKeyChar() \u0026\u0026 (ev.getModifiers() \u0026 modifiersMask) \u003d\u003d (actionKeyStroke.getModifiers() \u0026 modifiersMask) \u0026\u0026 specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy() {\n        setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {\n\n            @Override\n            protected boolean accept(Component component) {\n                if (super.accept(component)) {\n                    for (JSplitPane splitPane; (splitPane \u003d (JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, component)) !\u003d null; component \u003d splitPane) {\n                        if (isChildComponentInvisible(splitPane, component)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n        setFocusTraversalPolicyProvider(true);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the top or the bottom component of the \u003ccode\u003esplitPane\u003c/code\u003e\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent) {\n        return (SwingUtilities.isDescendingFrom(childComponent, splitPane.getTopComponent()) \u0026\u0026 (splitPane.getTopComponent().getWidth() \u003d\u003d 0 || splitPane.getTopComponent().getHeight() \u003d\u003d 0)) || (SwingUtilities.isDescendingFrom(childComponent, splitPane.getBottomComponent()) \u0026\u0026 (splitPane.getBottomComponent().getWidth() \u003d\u003d 0 || splitPane.getBottomComponent().getHeight() \u003d\u003d 0));\n    }\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller) {\n        // Create File menu\n        JMenu fileMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FILE_MENU));\n        addActionToMenu(ActionType.NEW_HOME, fileMenu);\n        addActionToMenu(ActionType.OPEN, fileMenu);\n        final JMenu openRecentHomeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.OPEN_RECENT_HOME_MENU));\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n        openRecentHomeMenu.addMenuListener(new MenuListener() {\n\n            public void menuSelected(MenuEvent ev) {\n                updateOpenRecentHomeMenu(openRecentHomeMenu, controller);\n            }\n\n            public void menuCanceled(MenuEvent ev) {\n            }\n\n            public void menuDeselected(MenuEvent ev) {\n            }\n        });\n        fileMenu.add(openRecentHomeMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.CLOSE, fileMenu);\n        addActionToMenu(ActionType.SAVE, fileMenu);\n        addActionToMenu(ActionType.SAVE_AS, fileMenu);\n        addActionToMenu(ActionType.SAVE_AND_COMPRESS, fileMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.PAGE_SETUP, fileMenu);\n        addActionToMenu(ActionType.PRINT_PREVIEW, fileMenu);\n        addActionToMenu(ActionType.PRINT, fileMenu);\n        // Don\u0027t add PRINT_TO_PDF, PREFERENCES and EXIT menu items under Mac OS X,\n        // because PREFERENCES and EXIT items are displayed in application menu\n        // and PRINT_TO_PDF is available in standard Mac OS X Print dialog\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.PRINT_TO_PDF, fileMenu);\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.PREFERENCES, fileMenu);\n        }\n        // Create Edit menu\n        JMenu editMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.EDIT_MENU));\n        addActionToMenu(ActionType.UNDO, editMenu);\n        addActionToMenu(ActionType.REDO, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.CUT, editMenu);\n        addActionToMenu(ActionType.COPY, editMenu);\n        addActionToMenu(ActionType.PASTE, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.DELETE, editMenu);\n        addActionToMenu(ActionType.SELECT_ALL, editMenu);\n        // Create Furniture menu\n        JMenu furnitureMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FURNITURE_MENU));\n        addActionToMenu(ActionType.ADD_HOME_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.MODIFY_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.GROUP_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.UNGROUP_FURNITURE, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.IMPORT_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_FURNITURE_LIBRARY, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_TEXTURES_LIBRARY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        furnitureMenu.add(createFurnitureSortMenu(home, preferences));\n        furnitureMenu.add(createFurnitureDisplayPropertyMenu(home, preferences));\n        // Create Plan menu\n        JMenu planMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.PLAN_MENU));\n        addToggleActionToMenu(ActionType.SELECT, true, planMenu);\n        addToggleActionToMenu(ActionType.PAN, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_WALLS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_ROOMS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_DIMENSION_LINES, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_LABELS, true, planMenu);\n        planMenu.addSeparator();\n        JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, false);\n        if (lockUnlockBasePlanMenuItem !\u003d null) {\n            planMenu.add(lockUnlockBasePlanMenuItem);\n        }\n        addActionToMenu(ActionType.MODIFY_COMPASS, planMenu);\n        addActionToMenu(ActionType.MODIFY_WALL, planMenu);\n        addActionToMenu(ActionType.REVERSE_WALL_DIRECTION, planMenu);\n        addActionToMenu(ActionType.SPLIT_WALL, planMenu);\n        addActionToMenu(ActionType.MODIFY_ROOM, planMenu);\n        addActionToMenu(ActionType.MODIFY_LABEL, planMenu);\n        planMenu.add(createTextStyleMenu(home, preferences, false));\n        planMenu.addSeparator();\n        JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, false);\n        if (importModifyBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(importModifyBackgroundImageMenuItem);\n        }\n        JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, false);\n        if (hideShowBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(hideShowBackgroundImageMenuItem);\n        }\n        addActionToMenu(ActionType.DELETE_BACKGROUND_IMAGE, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ADD_LEVEL, planMenu);\n        addActionToMenu(ActionType.MODIFY_LEVEL, planMenu);\n        addActionToMenu(ActionType.DELETE_LEVEL, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ZOOM_IN, planMenu);\n        addActionToMenu(ActionType.ZOOM_OUT, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_SVG, planMenu);\n        // Create 3D Preview menu\n        JMenu preview3DMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.VIEW_3D_MENU));\n        addToggleActionToMenu(ActionType.VIEW_FROM_TOP, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.VIEW_FROM_OBSERVER, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_OBSERVER, preview3DMenu);\n        addActionToMenu(ActionType.STORE_POINT_OF_VIEW, preview3DMenu);\n        JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n        if (goToPointOfViewMenu !\u003d null) {\n            preview3DMenu.add(goToPointOfViewMenu);\n        }\n        preview3DMenu.addSeparator();\n        JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, false);\n        if (attachDetach3DViewMenuItem !\u003d null) {\n            preview3DMenu.add(attachDetach3DViewMenuItem);\n        }\n        addToggleActionToMenu(ActionType.DISPLAY_ALL_LEVELS, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_3D_ATTRIBUTES, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.CREATE_PHOTO, preview3DMenu);\n        addActionToMenu(ActionType.CREATE_VIDEO, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_OBJ, preview3DMenu);\n        // Create Help menu\n        JMenu helpMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.HELP_MENU));\n        addActionToMenu(ActionType.HELP, helpMenu);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.ABOUT, helpMenu);\n        }\n        // Add menus to menu bar\n        JMenuBar menuBar \u003d new JMenuBar();\n        menuBar.add(fileMenu);\n        menuBar.add(editMenu);\n        menuBar.add(furnitureMenu);\n        if (controller.getPlanController().getView() !\u003d null) {\n            menuBar.add(planMenu);\n        }\n        if (controller.getHomeController3D().getView() !\u003d null) {\n            menuBar.add(preview3DMenu);\n        }\n        menuBar.add(helpMenu);\n        // Add plugin actions menu items\n        for (Action pluginAction : this.pluginActions) {\n            String pluginMenu \u003d (String) pluginAction.getValue(PluginAction.Property.MENU.name());\n            if (pluginMenu !\u003d null) {\n                boolean pluginActionAdded \u003d false;\n                for (int i \u003d 0; i \u003c menuBar.getMenuCount(); i++) {\n                    JMenu menu \u003d menuBar.getMenu(i);\n                    if (menu.getText().equals(pluginMenu)) {\n                        // Add menu item to existing menu\n                        menu.addSeparator();\n                        menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                        pluginActionAdded \u003d true;\n                        break;\n                    }\n                }\n                if (!pluginActionAdded) {\n                    // Create missing menu before last menu\n                    JMenu menu \u003d new JMenu(pluginMenu);\n                    menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                    menuBar.add(menu, menuBar.getMenuCount() - 1);\n                }\n            }\n        }\n        // Add EXIT action at end to ensure it\u0027s the last item of file menu\n        if (!OperatingSystem.isMacOSX()) {\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.EXIT, fileMenu);\n        }\n        removeUselessSeparatorsAndEmptyMenus(menuBar);\n        return menuBar;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu) {\n        addActionToMenu(actionType, false, menu);\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu) {\n        addToggleActionToMenu(actionType, false, radioButton, menu);\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, popup, radioButton));\n        }\n    }\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton) {\n        JMenuItem menuItem;\n        if (radioButton) {\n            menuItem \u003d new JRadioButtonMenuItem();\n        } else {\n            menuItem \u003d new JCheckBoxMenuItem();\n        }\n        // Configure model\n        menuItem.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n        // Configure menu item action after setting its model to avoid losing its mnemonic\n        menuItem.setAction(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        return menuItem;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(new ResourceAction.PopupMenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, true, radioButton));\n        }\n    }\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component) {\n        for (int i \u003d component.getComponentCount() - 1; i \u003e\u003d 0; i--) {\n            Component child \u003d component.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d component.getComponentCount() - 1 || component.getComponent(i - 1) instanceof JSeparator)) {\n                component.remove(i);\n            } else if (child instanceof JMenu) {\n                removeUselessSeparatorsAndEmptyMenus(((JMenu) child).getPopupMenu());\n            }\n            if (child instanceof JMenu \u0026\u0026 (((JMenu) child).getMenuComponentCount() \u003d\u003d 0 || ((JMenu) child).getMenuComponentCount() \u003d\u003d 1 \u0026\u0026 ((JMenu) child).getMenuComponent(0) instanceof JSeparator)) {\n                component.remove(i);\n            }\n        }\n        // Don\u0027t let a menu start with a separator\n        if (component.getComponentCount() \u003e 0 \u0026\u0026 component.getComponent(0) instanceof JSeparator) {\n            component.remove(0);\n        }\n    }\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu alignOrDistributeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.ALIGN_OR_DISTRIBUTE_MENU));\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, popup, alignOrDistributeMenu);\n        return alignOrDistributeMenu;\n    }\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Sort submenu\n        JMenu sortMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.SORT_HOME_FURNITURE_MENU));\n        // Map sort furniture properties to sort actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e sortActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, sortActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_NAME, sortActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, sortActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, sortActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, sortActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_X, sortActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_Y, sortActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, sortActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, sortActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, sortActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_COLOR, sortActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, sortActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, sortActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TYPE, sortActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, sortActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE, sortActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, sortActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu and make them share the same radio button group\n        ButtonGroup sortButtonGroup \u003d new ButtonGroup();\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : sortActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action sortAction \u003d entry.getValue();\n            JRadioButtonMenuItem sortMenuItem \u003d new JRadioButtonMenuItem();\n            // Use a special model for sort radio button menu item that is selected if\n            // home is sorted on furnitureProperty criterion\n            sortMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return furnitureProperty \u003d\u003d home.getFurnitureSortedProperty();\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            sortMenuItem.setAction(new ResourceAction.MenuItemAction(sortAction));\n            sortMenu.add(sortMenuItem);\n            sortButtonGroup.add(sortMenuItem);\n        }\n        Action sortOrderAction \u003d getActionMap().get(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER);\n        if (sortOrderAction.getValue(Action.NAME) !\u003d null) {\n            sortMenu.addSeparator();\n            JCheckBoxMenuItem sortOrderCheckBoxMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for sort order check box menu item that is selected depending on\n            // home sort order property\n            sortOrderCheckBoxMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.isFurnitureDescendingSorted();\n                }\n            });\n            sortOrderCheckBoxMenuItem.setAction(new ResourceAction.MenuItemAction(sortOrderAction));\n            sortMenu.add(sortOrderCheckBoxMenuItem);\n        }\n        return sortMenu;\n    }\n\n    /**\n     * Adds to \u003ccode\u003eactions\u003c/code\u003e the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToMap(ActionType actionType, Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e actions, HomePieceOfFurniture.SortableProperty key) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            actions.put(key, action);\n        }\n    }\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Display property submenu\n        JMenu displayPropertyMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU));\n        // Map displayProperty furniture properties to displayProperty actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e displayPropertyActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, displayPropertyActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_NAME, displayPropertyActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, displayPropertyActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_X, displayPropertyActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_Y, displayPropertyActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, displayPropertyActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_COLOR, displayPropertyActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : displayPropertyActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action displayPropertyAction \u003d entry.getValue();\n            JCheckBoxMenuItem displayPropertyMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for displayProperty check box menu item that is selected if\n            // home furniture visible properties contains furnitureProperty\n            displayPropertyMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.getFurnitureVisibleProperties().contains(furnitureProperty);\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            displayPropertyMenuItem.setAction(displayPropertyAction);\n            displayPropertyMenu.add(displayPropertyMenuItem);\n        }\n        return displayPropertyMenu;\n    }\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem lockUnlockBasePlanMenuItem \u003d new JMenuItem(createLockUnlockBasePlanAction(home, popup));\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanMenuItem.setAction(createLockUnlockBasePlanAction(home, popup));\n                }\n            });\n            return lockUnlockBasePlanMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup) {\n        ActionType actionType \u003d home.isBasePlanLocked() ? ActionType.UNLOCK_BASE_PLAN : ActionType.LOCK_BASE_PLAN;\n        Action action \u003d getActionMap().get(actionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action);\n    }\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JButton lockUnlockBasePlanButton \u003d new JButton(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n            lockUnlockBasePlanButton.setBorderPainted(false);\n            lockUnlockBasePlanButton.setContentAreaFilled(false);\n            lockUnlockBasePlanButton.setFocusable(false);\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanButton.setAction(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n                }\n            });\n            return lockUnlockBasePlanButton;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu modifyTextStyleMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.MODIFY_TEXT_STYLE));\n        addActionToMenu(ActionType.INCREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        addActionToMenu(ActionType.DECREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        modifyTextStyleMenu.addSeparator();\n        addToggleActionToMenu(ActionType.TOGGLE_BOLD_STYLE, popup, false, modifyTextStyleMenu);\n        addToggleActionToMenu(ActionType.TOGGLE_ITALIC_STYLE, popup, false, modifyTextStyleMenu);\n        return modifyTextStyleMenu;\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all bold or not\n                Boolean selectionBoldStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean bold;\n                    if (item instanceof Label) {\n                        bold \u003d isItemTextBold(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        bold \u003d isItemTextBold(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        bold \u003d isItemTextBold(room, room.getNameStyle());\n                        if (bold !\u003d isItemTextBold(room, room.getAreaStyle())) {\n                            bold \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        bold \u003d isItemTextBold(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionBoldStyle \u003d\u003d null) {\n                        selectionBoldStyle \u003d bold;\n                    } else if (bold \u003d\u003d null || !selectionBoldStyle.equals(bold)) {\n                        selectionBoldStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionBoldStyle !\u003d null \u0026\u0026 selectionBoldStyle;\n            }\n\n            private boolean isItemTextBold(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isBold();\n            }\n        };\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all italic or not\n                Boolean selectionItalicStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean italic;\n                    if (item instanceof Label) {\n                        italic \u003d isItemTextItalic(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        italic \u003d isItemTextItalic(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        italic \u003d isItemTextItalic(room, room.getNameStyle());\n                        if (italic !\u003d isItemTextItalic(room, room.getAreaStyle())) {\n                            italic \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        italic \u003d isItemTextItalic(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionItalicStyle \u003d\u003d null) {\n                        selectionItalicStyle \u003d italic;\n                    } else if (italic \u003d\u003d null || !selectionItalicStyle.equals(italic)) {\n                        selectionItalicStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionItalicStyle !\u003d null \u0026\u0026 selectionItalicStyle;\n            }\n\n            private boolean isItemTextItalic(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isItalic();\n            }\n        };\n    }\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action importBackgroundImageAction \u003d actionMap.get(ActionType.IMPORT_BACKGROUND_IMAGE);\n        Action modifyBackgroundImageAction \u003d actionMap.get(ActionType.MODIFY_BACKGROUND_IMAGE);\n        if (importBackgroundImageAction !\u003d null \u0026\u0026 importBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 modifyBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem importModifyBackgroundImageMenuItem \u003d new JMenuItem(createImportModifyBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    importModifyBackgroundImageMenuItem.setAction(createImportModifyBackgroundImageAction(home, popup));\n                }\n            });\n            return importModifyBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener) {\n        home.addPropertyChangeListener(Home.Property.BACKGROUND_IMAGE, listener);\n        home.addPropertyChangeListener(Home.Property.SELECTED_LEVEL, listener);\n        final PropertyChangeListener levelChangeListener \u003d new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                if (Level.Property.BACKGROUND_IMAGE.name().equals(ev.getPropertyName())) {\n                    listener.propertyChange(ev);\n                }\n            }\n        };\n        for (Level level : this.home.getLevels()) {\n            level.addPropertyChangeListener(levelChangeListener);\n        }\n        this.home.addLevelsListener(new CollectionListener\u003cLevel\u003e() {\n\n            public void collectionChanged(CollectionEvent\u003cLevel\u003e ev) {\n                switch(ev.getType()) {\n                    case ADD:\n                        ev.getItem().addPropertyChangeListener(levelChangeListener);\n                        break;\n                    case DELETE:\n                        ev.getItem().removePropertyChangeListener(levelChangeListener);\n                        break;\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null ? ActionType.IMPORT_BACKGROUND_IMAGE : ActionType.MODIFY_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action hideBackgroundImageAction \u003d actionMap.get(ActionType.HIDE_BACKGROUND_IMAGE);\n        Action showBackgroundImageAction \u003d actionMap.get(ActionType.SHOW_BACKGROUND_IMAGE);\n        if (hideBackgroundImageAction !\u003d null \u0026\u0026 hideBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 showBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem hideShowBackgroundImageMenuItem \u003d new JMenuItem(createHideShowBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    hideShowBackgroundImageMenuItem.setAction(createHideShowBackgroundImageAction(home, popup));\n                }\n            });\n            return hideShowBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null || backgroundImage.isVisible() ? ActionType.HIDE_BACKGROUND_IMAGE : ActionType.SHOW_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller) {\n        Action goToPointOfViewAction \u003d this.menuActionMap.get(MenuActionType.GO_TO_POINT_OF_VIEW);\n        if (goToPointOfViewAction.getValue(Action.NAME) !\u003d null) {\n            final JMenu goToPointOfViewMenu \u003d new JMenu(goToPointOfViewAction);\n            updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n            home.addPropertyChangeListener(Home.Property.STORED_CAMERAS, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n                }\n            });\n            return goToPointOfViewMenu;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller) {\n        List\u003cCamera\u003e storedCameras \u003d home.getStoredCameras();\n        goToPointOfViewMenu.removeAll();\n        if (storedCameras.isEmpty()) {\n            goToPointOfViewMenu.setEnabled(false);\n            goToPointOfViewMenu.add(new ResourceAction(preferences, HomePane.class, \"NoStoredPointOfView\", false));\n        } else {\n            goToPointOfViewMenu.setEnabled(true);\n            for (final Camera camera : storedCameras) {\n                goToPointOfViewMenu.add(new AbstractAction(camera.getName()) {\n\n                    public void actionPerformed(ActionEvent e) {\n                        controller.getHomeController3D().goToCamera(camera);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action display3DViewInSeparateWindowAction \u003d actionMap.get(ActionType.DETACH_3D_VIEW);\n        Action display3DViewInMainWindowAction \u003d actionMap.get(ActionType.ATTACH_3D_VIEW);\n        if (display3DViewInSeparateWindowAction !\u003d null \u0026\u0026 display3DViewInSeparateWindowAction.getValue(Action.NAME) !\u003d null \u0026\u0026 display3DViewInMainWindowAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem attachDetach3DViewMenuItem \u003d new JMenuItem(createAttachDetach3DViewAction(controller, popup));\n            // Add a listener to 3D view to switch action when its parent changes\n            JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n            view3D.addAncestorListener(new AncestorListener() {\n\n                public void ancestorAdded(AncestorEvent ev) {\n                    attachDetach3DViewMenuItem.setAction(createAttachDetach3DViewAction(controller, popup));\n                }\n\n                public void ancestorRemoved(AncestorEvent ev) {\n                }\n\n                public void ancestorMoved(AncestorEvent ev) {\n                }\n            });\n            return attachDetach3DViewMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup) {\n        JRootPane view3DRootPane \u003d SwingUtilities.getRootPane((JComponent) controller.getHomeController3D().getView());\n        ActionType display3DViewActionType \u003d view3DRootPane \u003d\u003d this ? ActionType.DETACH_3D_VIEW : ActionType.ATTACH_3D_VIEW;\n        Action backgroundImageAction \u003d getActionMap().get(display3DViewActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Updates \u003ccode\u003eopenRecentHomeMenu\u003c/code\u003e from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller) {\n        openRecentHomeMenu.removeAll();\n        for (final String homeName : controller.getRecentHomes()) {\n            openRecentHomeMenu.add(new AbstractAction(controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D)) {\n\n                public void actionPerformed(ActionEvent e) {\n                    controller.open(homeName);\n                }\n            });\n        }\n        if (openRecentHomeMenu.getMenuComponentCount() \u003e 0) {\n            openRecentHomeMenu.addSeparator();\n        }\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n    }\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home) {\n        final JToolBar toolBar \u003d new UnfocusableToolBar();\n        addActionToToolBar(ActionType.NEW_HOME, toolBar);\n        addActionToToolBar(ActionType.OPEN, toolBar);\n        addActionToToolBar(ActionType.SAVE, toolBar);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToToolBar(ActionType.PREFERENCES, toolBar);\n        }\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.UNDO, toolBar);\n        addActionToToolBar(ActionType.REDO, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.CUT, toolBar);\n        addActionToToolBar(ActionType.COPY, toolBar);\n        addActionToToolBar(ActionType.PASTE, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.ADD_HOME_FURNITURE, toolBar);\n        toolBar.addSeparator();\n        addToggleActionToToolBar(ActionType.SELECT, toolBar);\n        addToggleActionToToolBar(ActionType.PAN, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_WALLS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_ROOMS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_DIMENSION_LINES, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_LABELS, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.INCREASE_TEXT_SIZE, toolBar);\n        addActionToToolBar(ActionType.DECREASE_TEXT_SIZE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_BOLD_STYLE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_ITALIC_STYLE, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.ZOOM_IN, toolBar);\n        addActionToToolBar(ActionType.ZOOM_OUT, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.CREATE_PHOTO, toolBar);\n        addActionToToolBar(ActionType.CREATE_VIDEO, toolBar);\n        toolBar.addSeparator();\n        // Add plugin actions buttons\n        boolean pluginActionsAdded \u003d false;\n        for (Action pluginAction : this.pluginActions) {\n            if (Boolean.TRUE.equals(pluginAction.getValue(PluginAction.Property.TOOL_BAR.name()))) {\n                toolBar.add(new ResourceAction.ToolBarAction(pluginAction));\n                pluginActionsAdded \u003d true;\n            }\n        }\n        if (pluginActionsAdded) {\n            toolBar.addSeparator();\n        }\n        addActionToToolBar(ActionType.HELP, toolBar);\n        // Remove useless separators\n        for (int i \u003d toolBar.getComponentCount() - 1; i \u003e 0; i--) {\n            Component child \u003d toolBar.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d toolBar.getComponentCount() - 1 || toolBar.getComponent(i - 1) instanceof JSeparator)) {\n                toolBar.remove(i);\n            }\n        }\n        return toolBar;\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            Action toolBarAction \u003d new ResourceAction.ToolBarAction(action);\n            JToggleButton toggleButton \u003d new JToggleButton(toolBarAction);\n            toggleButton.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n            toolBar.add(toggleButton);\n        }\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            toolBar.add(new ResourceAction.ToolBarAction(action));\n        }\n    }\n\n    /**\n     * Enables or disables the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            action.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText) {\n        setNameAndShortDescription(ActionType.UNDO, undoText);\n        setNameAndShortDescription(ActionType.REDO, redoText);\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * matching \u003ccode\u003eactionType\u003c/code\u003e. If \u003ccode\u003ename\u003c/code\u003e is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            if (name \u003d\u003d null) {\n                name \u003d (String) action.getValue(Action.DEFAULT);\n            }\n            action.putValue(Action.NAME, name);\n            action.putValue(Action.SHORT_DESCRIPTION, name);\n        }\n    }\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled) {\n        boolean dragAndDropWithTransferHandlerSupported;\n        try {\n            // Don\u0027t use transfer handlers for drag and drop with Plugin2 under Mac OS X or when in an unsigned applet\n            dragAndDropWithTransferHandlerSupported \u003d !Boolean.getBoolean(\"com.eteks.sweethome3d.dragAndDropWithoutTransferHandler\");\n        } catch (AccessControlException ex) {\n            dragAndDropWithTransferHandlerSupported \u003d false;\n        }\n        JComponent catalogView \u003d (JComponent) this.controller.getFurnitureCatalogController().getView();\n        JComponent furnitureView \u003d (JComponent) this.controller.getFurnitureController().getView();\n        JComponent planView \u003d (JComponent) this.controller.getPlanController().getView();\n        if (enabled) {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(this.catalogTransferHandler);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(this.furnitureTransferHandler);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(this.furnitureTransferHandler);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(this.planTransferHandler);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    // Check if furniture catalog is handled by a subcomponent\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    if (this.furnitureCatalogDragAndDropListener \u003d\u003d null) {\n                        this.furnitureCatalogDragAndDropListener \u003d createFurnitureCatalogMouseListener();\n                    }\n                    catalogComponent.addMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.addMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        } else {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(null);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(null);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(null);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(null);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    catalogComponent.removeMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.removeMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        }\n        this.transferHandlerEnabled \u003d enabled;\n    }\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener() {\n        return new MouseInputAdapter() {\n\n            private CatalogPieceOfFurniture selectedPiece;\n\n            private TransferHandler transferHandler;\n\n            private boolean autoscrolls;\n\n            private Cursor previousCursor;\n\n            private View previousView;\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev)) {\n                    List\u003cCatalogPieceOfFurniture\u003e selectedFurniture \u003d controller.getFurnitureCatalogController().getSelectedFurniture();\n                    if (selectedFurniture.size() \u003e 0) {\n                        JComponent source \u003d (JComponent) ev.getSource();\n                        this.transferHandler \u003d source.getTransferHandler();\n                        source.setTransferHandler(null);\n                        this.autoscrolls \u003d source.getAutoscrolls();\n                        source.setAutoscrolls(false);\n                        this.selectedPiece \u003d selectedFurniture.get(0);\n                        this.previousCursor \u003d null;\n                        this.previousView \u003d null;\n                    }\n                }\n            }\n\n            @Override\n            public void mouseDragged(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    // Force selection again\n                    List\u003cCatalogPieceOfFurniture\u003e emptyList \u003d Collections.emptyList();\n                    controller.getFurnitureCatalogController().setSelectedFurniture(emptyList);\n                    controller.getFurnitureCatalogController().setSelectedFurniture(Arrays.asList(new CatalogPieceOfFurniture[] { this.selectedPiece }));\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (this.previousView !\u003d view) {\n                        if (this.previousView !\u003d null) {\n                            if (this.previousView \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().stopDraggedItems();\n                            }\n                            ((JComponent) this.previousView).setCursor(this.previousCursor);\n                            this.previousCursor \u003d null;\n                            this.previousView \u003d null;\n                        }\n                        if (view !\u003d null) {\n                            JComponent component \u003d (JComponent) view;\n                            this.previousCursor \u003d component.getCursor();\n                            this.previousView \u003d view;\n                            component.setCursor(DragSource.DefaultCopyDrop);\n                            if (component.getParent() instanceof JViewport) {\n                                ((JViewport) component.getParent()).setCursor(DragSource.DefaultCopyDrop);\n                            }\n                            if (view \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().startDraggedItems(transferredFurniture, pointInView[0], pointInView[1]);\n                            }\n                        }\n                    } else if (pointInView !\u003d null) {\n                        controller.getPlanController().moveMouse(pointInView[0], pointInView[1]);\n                    }\n                }\n            }\n\n            private float[] getPointInPlanView(MouseEvent ev, List\u003cSelectable\u003e transferredFurniture) {\n                PlanView planView \u003d controller.getPlanController().getView();\n                if (planView !\u003d null) {\n                    JComponent planComponent \u003d (JComponent) planView;\n                    Point pointInPlanComponent \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent);\n                    if (planComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) planComponent.getParent()).contains(SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent.getParent())) || !(planComponent.getParent() instanceof JViewport) \u0026\u0026 planView.canImportDraggedItems(transferredFurniture, pointInPlanComponent.x, pointInPlanComponent.y)) {\n                        return new float[] { planView.convertXPixelToModel(pointInPlanComponent.x), planView.convertYPixelToModel(pointInPlanComponent.y) };\n                    }\n                }\n                return null;\n            }\n\n            private float[] getPointInFurnitureView(MouseEvent ev) {\n                View furnitureView \u003d controller.getFurnitureController().getView();\n                if (furnitureView !\u003d null) {\n                    JComponent furnitureComponent \u003d (JComponent) furnitureView;\n                    Point point \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getX(), ev.getY(), furnitureComponent.getParent() instanceof JViewport ? furnitureComponent.getParent() : furnitureComponent);\n                    if (furnitureComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) furnitureComponent.getParent()).contains(point) || !(furnitureComponent.getParent() instanceof JViewport) \u0026\u0026 furnitureComponent.contains(point)) {\n                        return new float[] { 0, 0 };\n                    }\n                }\n                return null;\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        controller.getPlanController().stopDraggedItems();\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (pointInView !\u003d null) {\n                        controller.drop(transferredFurniture, view, pointInView[0], pointInView[1]);\n                        ((JComponent) this.previousView).setCursor(this.previousCursor);\n                    }\n                    this.selectedPiece \u003d null;\n                    JComponent source \u003d (JComponent) ev.getSource();\n                    source.setTransferHandler(this.transferHandler);\n                    source.setAutoscrolls(this.autoscrolls);\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller) {\n        final JComponent catalogFurniturePane \u003d createCatalogFurniturePane(home, preferences, controller);\n        final JComponent planView3DPane \u003d createPlanView3DPane(home, preferences, controller);\n        if (catalogFurniturePane \u003d\u003d null) {\n            return planView3DPane;\n        } else if (planView3DPane \u003d\u003d null) {\n            return catalogFurniturePane;\n        } else {\n            final JSplitPane mainPane \u003d new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, catalogFurniturePane, planView3DPane);\n            // Set default divider location\n            mainPane.setDividerLocation(360);\n            configureSplitPane(mainPane, home, MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.3, true, controller);\n            return mainPane;\n        }\n    }\n\n    /**\n     * Configures \u003ccode\u003esplitPane\u003c/code\u003e divider location.\n     * If \u003ccode\u003edividerLocationProperty\u003c/code\u003e visual property exists in \u003ccode\u003ehome\u003c/code\u003e,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller) {\n        splitPane.setContinuousLayout(true);\n        splitPane.setOneTouchExpandable(true);\n        splitPane.setResizeWeight(defaultResizeWeight);\n        if (!showBorder) {\n            splitPane.setBorder(null);\n        }\n        // Restore divider location previously set\n        Integer dividerLocation \u003d (Integer) home.getVisualProperty(dividerLocationProperty);\n        if (dividerLocation !\u003d null) {\n            splitPane.setDividerLocation(dividerLocation);\n        }\n        splitPane.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, new PropertyChangeListener() {\n\n            public void propertyChange(final PropertyChangeEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        Component focusOwner \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();\n                        if (focusOwner !\u003d null \u0026\u0026 isChildComponentInvisible(splitPane, focusOwner)) {\n                            FocusTraversalPolicy focusTraversalPolicy \u003d getFocusTraversalPolicy();\n                            Component focusedComponent \u003d focusTraversalPolicy.getComponentAfter(HomePane.this, focusOwner);\n                            if (focusedComponent \u003d\u003d null) {\n                                focusedComponent \u003d focusTraversalPolicy.getComponentBefore(HomePane.this, focusOwner);\n                            }\n                            if (focusedComponent !\u003d null) {\n                                focusedComponent.requestFocusInWindow();\n                            }\n                        }\n                        controller.setVisualProperty(dividerLocationProperty, ev.getNewValue());\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent catalogView \u003d (JComponent) controller.getFurnitureCatalogController().getView();\n        if (catalogView !\u003d null) {\n            // Create catalog view popup menu\n            JPopupMenu catalogViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.COPY, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_HOME_FURNITURE, catalogViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.IMPORT_FURNITURE, catalogViewPopup);\n            SwingTools.hideDisabledMenuItems(catalogViewPopup);\n            catalogView.setComponentPopupMenu(catalogViewPopup);\n            preferences.addPropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, new FurnitureCatalogViewChangeListener(this, catalogView));\n            if (catalogView instanceof Scrollable) {\n                catalogView \u003d SwingTools.createScrollPane(catalogView);\n            }\n        }\n        // Configure furniture view\n        JComponent furnitureView \u003d (JComponent) controller.getFurnitureController().getView();\n        if (furnitureView !\u003d null) {\n            // Set default traversal keys of furniture view\n            KeyboardFocusManager focusManager \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager();\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS));\n            // Create furniture view popup menu\n            JPopupMenu furnitureViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.REDO, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.COPY, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.SELECT_ALL, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, furnitureViewPopup);\n            furnitureViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            furnitureViewPopup.addSeparator();\n            furnitureViewPopup.add(createFurnitureSortMenu(home, preferences));\n            furnitureViewPopup.add(createFurnitureDisplayPropertyMenu(home, preferences));\n            SwingTools.hideDisabledMenuItems(furnitureViewPopup);\n            furnitureView.setComponentPopupMenu(furnitureViewPopup);\n            if (furnitureView instanceof Scrollable) {\n                JScrollPane furnitureScrollPane \u003d SwingTools.createScrollPane(furnitureView);\n                // Add a mouse listener that gives focus to furniture view when\n                // user clicks in its viewport (tables don\u0027t spread vertically if their row count is too small)\n                final JViewport viewport \u003d furnitureScrollPane.getViewport();\n                viewport.addMouseListener(new MouseAdapter() {\n\n                    @Override\n                    public void mouseClicked(MouseEvent ev) {\n                        viewport.getView().requestFocusInWindow();\n                    }\n                });\n                Integer viewportY \u003d (Integer) home.getVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(0, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        controller.setVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY, viewport.getViewPosition().y);\n                    }\n                });\n                ((JViewport) furnitureView.getParent()).setComponentPopupMenu(furnitureViewPopup);\n                furnitureView \u003d furnitureScrollPane;\n            }\n        }\n        if (catalogView \u003d\u003d null) {\n            return furnitureView;\n        } else if (furnitureView \u003d\u003d null) {\n            return catalogView;\n        } else {\n            // Create a split pane that displays both components\n            JSplitPane catalogFurniturePane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, catalogView, furnitureView);\n            catalogFurniturePane.setBorder(null);\n            catalogFurniturePane.setMinimumSize(new Dimension());\n            configureSplitPane(catalogFurniturePane, home, CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n            return catalogFurniturePane;\n        }\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJComponent\u003e furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView \u003d this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView !\u003d null) {\n                    boolean transferHandlerEnabled \u003d homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView \u003d (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent \u003d SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent planView \u003d (JComponent) controller.getPlanController().getView();\n        if (planView !\u003d null) {\n            // Create plan view popup menu\n            JPopupMenu planViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, planViewPopup);\n            addActionToPopupMenu(ActionType.REDO, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, planViewPopup);\n            addActionToPopupMenu(ActionType.COPY, planViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, planViewPopup);\n            Action selectObjectAction \u003d this.menuActionMap.get(MenuActionType.SELECT_OBJECT_MENU);\n            JMenu selectObjectMenu;\n            if (selectObjectAction.getValue(Action.NAME) !\u003d null) {\n                selectObjectMenu \u003d new JMenu(selectObjectAction);\n                planViewPopup.add(selectObjectMenu);\n            } else {\n                selectObjectMenu \u003d null;\n            }\n            addActionToPopupMenu(ActionType.SELECT_ALL, planViewPopup);\n            planViewPopup.addSeparator();\n            addToggleActionToPopupMenu(ActionType.SELECT, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.PAN, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_WALLS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_ROOMS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_DIMENSION_LINES, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_LABELS, true, planViewPopup);\n            planViewPopup.addSeparator();\n            JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, true);\n            if (lockUnlockBasePlanMenuItem !\u003d null) {\n                planViewPopup.add(lockUnlockBasePlanMenuItem);\n            }\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, planViewPopup);\n            planViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            addActionToPopupMenu(ActionType.MODIFY_COMPASS, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.REVERSE_WALL_DIRECTION, planViewPopup);\n            addActionToPopupMenu(ActionType.SPLIT_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_ROOM, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LABEL, planViewPopup);\n            planViewPopup.add(createTextStyleMenu(home, preferences, true));\n            planViewPopup.addSeparator();\n            JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, true);\n            if (importModifyBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(importModifyBackgroundImageMenuItem);\n            }\n            JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, true);\n            if (hideShowBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(hideShowBackgroundImageMenuItem);\n            }\n            addActionToPopupMenu(ActionType.DELETE_BACKGROUND_IMAGE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.DELETE_LEVEL, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ZOOM_OUT, planViewPopup);\n            addActionToPopupMenu(ActionType.ZOOM_IN, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_SVG, planViewPopup);\n            SwingTools.hideDisabledMenuItems(planViewPopup);\n            if (selectObjectMenu !\u003d null) {\n                // Add a second popup listener to manage Select object sub menu before the menu is hidden when empty\n                addSelectObjectMenuItems(selectObjectMenu, controller.getPlanController(), preferences);\n            }\n            planView.setComponentPopupMenu(planViewPopup);\n            final JScrollPane planScrollPane;\n            if (planView instanceof Scrollable) {\n                planView \u003d planScrollPane \u003d SwingTools.createScrollPane(planView);\n            } else {\n                List\u003cJScrollPane\u003e scrollPanes \u003d SwingTools.findChildren(planView, JScrollPane.class);\n                if (scrollPanes.size() \u003d\u003d 1) {\n                    planScrollPane \u003d scrollPanes.get(0);\n                } else {\n                    planScrollPane \u003d null;\n                }\n            }\n            if (planScrollPane !\u003d null) {\n                setPlanRulersVisible(planScrollPane, controller, preferences.isRulersVisible());\n                if (planScrollPane.getCorner(JScrollPane.UPPER_LEADING_CORNER) \u003d\u003d null) {\n                    final JComponent lockUnlockBasePlanButton \u003d createLockUnlockBasePlanButton(home);\n                    if (lockUnlockBasePlanButton !\u003d null) {\n                        planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                        planScrollPane.addPropertyChangeListener(\"componentOrientation\", new PropertyChangeListener() {\n\n                            public void propertyChange(PropertyChangeEvent ev) {\n                                if (lockUnlockBasePlanButton.getParent() !\u003d null) {\n                                    planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                                }\n                            }\n                        });\n                    }\n                }\n                // Add a listener to update rulers visibility in preferences\n                preferences.addPropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, new RulersVisibilityChangeListener(this, planScrollPane, controller));\n                // Restore viewport position if it exists\n                final JViewport viewport \u003d planScrollPane.getViewport();\n                Integer viewportX \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY);\n                Integer viewportY \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportX !\u003d null \u0026\u0026 viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(viewportX, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        Point viewportPosition \u003d viewport.getViewPosition();\n                        controller.setVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY, viewportPosition.x);\n                        controller.setVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY, viewportPosition.y);\n                    }\n                });\n            }\n        }\n        // Configure 3D view\n        JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n        if (view3D !\u003d null) {\n            view3D.setPreferredSize(planView !\u003d null ? planView.getPreferredSize() : new Dimension(400, 400));\n            view3D.setMinimumSize(new Dimension());\n            // Create 3D view popup menu\n            JPopupMenu view3DPopup \u003d new JPopupMenu();\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_TOP, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_OBSERVER, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_OBSERVER, view3DPopup);\n            addActionToPopupMenu(ActionType.STORE_POINT_OF_VIEW, view3DPopup);\n            JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n            if (goToPointOfViewMenu !\u003d null) {\n                view3DPopup.add(goToPointOfViewMenu);\n            }\n            view3DPopup.addSeparator();\n            JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, true);\n            if (attachDetach3DViewMenuItem !\u003d null) {\n                view3DPopup.add(attachDetach3DViewMenuItem);\n            }\n            addToggleActionToPopupMenu(ActionType.DISPLAY_ALL_LEVELS, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_3D_ATTRIBUTES, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CREATE_PHOTO, view3DPopup);\n            addActionToPopupMenu(ActionType.CREATE_VIDEO, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_OBJ, view3DPopup);\n            SwingTools.hideDisabledMenuItems(view3DPopup);\n            view3D.setComponentPopupMenu(view3DPopup);\n            if (view3D instanceof Scrollable) {\n                view3D \u003d SwingTools.createScrollPane(view3D);\n            }\n            JComponent planView3DPane;\n            if (planView !\u003d null) {\n                // Create a split pane that displays both components\n                final JSplitPane planView3DSplitPane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, planView, view3D);\n                planView3DSplitPane.setMinimumSize(new Dimension());\n                configureSplitPane((JSplitPane) planView3DSplitPane, home, PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n                final Integer dividerLocation \u003d (Integer) home.getVisualProperty(PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                if (OperatingSystem.isMacOSX() \u0026\u0026 dividerLocation !\u003d null \u0026\u0026 dividerLocation \u003e 2) {\n                    // Under Mac OS X, ensure that the 3D view of an existing home will be displayed during a while\n                    // to avoid a freeze when the 3D view was saved as hidden and then the window displaying the 3D view is enlarged\n                    planView3DSplitPane.addAncestorListener(new AncestorListener() {\n\n                        public void ancestorAdded(AncestorEvent event) {\n                            planView3DSplitPane.removeAncestorListener(this);\n                            if (planView3DSplitPane.getRightComponent().getHeight() \u003d\u003d 0) {\n                                // If the 3D view is invisible, make it appear during a while\n                                planView3DSplitPane.setDividerLocation(dividerLocation - 2);\n                                Executors.newSingleThreadScheduledExecutor().schedule(new Runnable() {\n\n                                    public void run() {\n                                        EventQueue.invokeLater(new Runnable() {\n\n                                            public void run() {\n                                                planView3DSplitPane.setDividerLocation(dividerLocation);\n                                            }\n                                        });\n                                    }\n                                }, 1, TimeUnit.SECONDS);\n                            }\n                        }\n\n                        public void ancestorRemoved(AncestorEvent event) {\n                        }\n\n                        public void ancestorMoved(AncestorEvent event) {\n                        }\n                    });\n                }\n                planView3DPane \u003d planView3DSplitPane;\n            } else {\n                planView3DPane \u003d view3D;\n            }\n            // Detach 3D view if it was detached when saved and its dialog can be viewed in one of the screen devices\n            Boolean detachedView3D \u003d (Boolean) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY);\n            if (detachedView3D !\u003d null \u0026\u0026 detachedView3D.booleanValue()) {\n                // Check 3D view can be viewed in one of the available screens\n                final Integer dialogX \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n                final Integer dialogY \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY);\n                final Integer dialogWidth \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n                final Integer dialogHeight \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY);\n                if (dialogX !\u003d null \u0026\u0026 dialogY !\u003d null \u0026\u0026 dialogWidth !\u003d null \u0026\u0026 dialogHeight !\u003d null \u0026\u0026 SwingTools.isRectangleVisibleAtScreen(new Rectangle(dialogX, dialogY, dialogWidth, dialogHeight))) {\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            View view3D \u003d controller.getHomeController3D().getView();\n                            detachView(view3D, dialogX, dialogY, dialogWidth, dialogHeight);\n                        }\n                    });\n                    return planView3DPane;\n                }\n                if (planView3DPane instanceof JSplitPane) {\n                    ((JSplitPane) planView3DPane).setDividerLocation(0.5);\n                }\n                controller.setVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, null);\n            }\n            return planView3DPane;\n        } else {\n            return planView;\n        }\n    }\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences) {\n        JComponent planView \u003d (JComponent) planController.getView();\n        final Point lastMouseMoveLocation \u003d new Point(-1, -1);\n        ((JPopupMenu) selectObjectMenu.getParent()).addPopupMenuListener(new PopupMenuListener() {\n\n            @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n            public void popupMenuWillBecomeVisible(PopupMenuEvent ev) {\n                if (lastMouseMoveLocation.getX() \u003e\u003d 0 \u0026\u0026 !planController.isModificationState()) {\n                    final List\u003cSelectable\u003e items \u003d planController.getSelectableItemsAt(planController.getView().convertXPixelToModel(lastMouseMoveLocation.x), planController.getView().convertYPixelToModel(lastMouseMoveLocation.y));\n                    // Prepare localized formatters\n                    Map\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e formatters \u003d new HashMap\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e();\n                    formatters.put(Compass.class, new SelectableFormat\u003cCompass\u003e() {\n\n                        public String format(Compass compass) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.compass\");\n                        }\n                    });\n                    formatters.put(HomePieceOfFurniture.class, new SelectableFormat\u003cHomePieceOfFurniture\u003e() {\n\n                        public String format(HomePieceOfFurniture piece) {\n                            if (piece.getName().length() \u003e 0) {\n                                return piece.getName();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.furniture\");\n                            }\n                        }\n                    });\n                    formatters.put(Wall.class, new SelectableFormat\u003cWall\u003e() {\n\n                        public String format(Wall wall) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.wall\", preferences.getLengthUnit().getFormatWithUnit().format(wall.getLength()));\n                        }\n                    });\n                    formatters.put(Room.class, new SelectableFormat\u003cRoom\u003e() {\n\n                        public String format(Room room) {\n                            String roomInfo \u003d room.getName() !\u003d null \u0026\u0026 room.getName().length() \u003e 0 ? room.getName() : (room.isAreaVisible() ? preferences.getLengthUnit().getAreaFormatWithUnit().format(room.getArea()) : \"\");\n                            if (room.isFloorVisible() \u0026\u0026 !room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.floor\", roomInfo);\n                            } else if (!room.isFloorVisible() \u0026\u0026 room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.ceiling\", roomInfo);\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.room\", roomInfo);\n                            }\n                        }\n                    });\n                    formatters.put(DimensionLine.class, new SelectableFormat\u003cDimensionLine\u003e() {\n\n                        public String format(DimensionLine dimensionLine) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.dimensionLine\", preferences.getLengthUnit().getFormatWithUnit().format(dimensionLine.getLength()));\n                        }\n                    });\n                    formatters.put(Label.class, new SelectableFormat\u003cLabel\u003e() {\n\n                        public String format(Label label) {\n                            if (label.getText().length() \u003e 0) {\n                                return label.getText();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.label\");\n                            }\n                        }\n                    });\n                    for (final Selectable item : items) {\n                        String format \u003d null;\n                        for (Map.Entry\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e entry : formatters.entrySet()) {\n                            if (entry.getKey().isInstance(item)) {\n                                format \u003d entry.getValue().format(item);\n                                break;\n                            }\n                        }\n                        if (format !\u003d null) {\n                            selectObjectMenu.add(new JMenuItem(new AbstractAction(format) {\n\n                                public void actionPerformed(ActionEvent ev) {\n                                    planController.selectItem(item);\n                                }\n                            }));\n                        }\n                    }\n                }\n            }\n\n            public void popupMenuWillBecomeInvisible(PopupMenuEvent ev) {\n                selectObjectMenu.removeAll();\n            }\n\n            public void popupMenuCanceled(PopupMenuEvent ev) {\n            }\n        });\n        planView.addMouseMotionListener(new MouseMotionAdapter() {\n\n            @Override\n            public void mouseMoved(MouseEvent ev) {\n                lastMouseMoveLocation.setLocation(ev.getPoint());\n            }\n        });\n        planView.addMouseListener(new MouseAdapter() {\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                lastMouseMoveLocation.x \u003d -1;\n            }\n        });\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJScrollPane\u003e planScrollPane;\n\n        private WeakReference\u003cHomeController\u003e controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.planScrollPane \u003d new WeakReference\u003cJScrollPane\u003e(planScrollPane);\n            this.controller \u003d new WeakReference\u003cHomeController\u003e(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            JScrollPane planScrollPane \u003d this.planScrollPane.get();\n            HomeController controller \u003d this.controller.get();\n            if (homePane \u003d\u003d null || planScrollPane \u003d\u003d null || controller \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible) {\n        if (visible) {\n            // Change column and row header views\n            planScrollPane.setColumnHeaderView((JComponent) controller.getPlanController().getHorizontalRulerView());\n            planScrollPane.setRowHeaderView((JComponent) controller.getPlanController().getVerticalRulerView());\n        } else {\n            planScrollPane.setColumnHeaderView(null);\n            planScrollPane.setRowHeaderView(null);\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003eview\u003c/code\u003e a mouse listener that disables all menu items of\n     * \u003ccode\u003emenuBar\u003c/code\u003e during a drag and drop operation in \u003ccode\u003eview\u003c/code\u003e.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar) {\n        class MouseAndFocusListener extends MouseAdapter implements FocusListener {\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), false);\n                        }\n                    }\n                });\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            private void enableMenuItems(final JMenuBar menuBar) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), true);\n                        }\n                    }\n                });\n            }\n\n            private void setMenuItemsEnabled(JMenu menu, boolean enabled) {\n                for (int i \u003d 0, n \u003d menu.getItemCount(); i \u003c n; i++) {\n                    JMenuItem item \u003d menu.getItem(i);\n                    if (item instanceof JMenu) {\n                        setMenuItemsEnabled((JMenu) item, enabled);\n                    } else if (item !\u003d null) {\n                        item.setEnabled(enabled ? item.getAction().isEnabled() : false);\n                    }\n                }\n            }\n\n            // Need to take into account focus events because a mouse released event\n            // isn\u0027t dispatched when the component loses focus\n            public void focusGained(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            public void focusLost(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n        }\n        ;\n        MouseAndFocusListener listener \u003d new MouseAndFocusListener();\n        if (view !\u003d null) {\n            ((JComponent) view).addMouseListener(listener);\n            ((JComponent) view).addFocusListener(listener);\n        }\n    }\n\n    /**\n     * Detaches the given \u003ccode\u003eview\u003c/code\u003e from home view.\n     */\n    public void detachView(final View view) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        float dividerLocation;\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            if (splitPane.getOrientation() \u003d\u003d JSplitPane.VERTICAL_SPLIT) {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getHeight() - splitPane.getDividerSize());\n            } else {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getWidth() - splitPane.getDividerSize());\n            }\n        } else {\n            dividerLocation \u003d -1;\n        }\n        Integer dialogX \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n        Integer dialogWidth \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n        if (dialogX !\u003d null \u0026\u0026 dialogWidth !\u003d null) {\n            detachView(view, dialogX, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY), dialogWidth, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY));\n        } else {\n            Point componentLocation \u003d new Point();\n            Dimension componentSize \u003d component.getSize();\n            SwingUtilities.convertPointToScreen(componentLocation, component);\n            Insets insets \u003d new JDialog().getInsets();\n            detachView(view, componentLocation.x - insets.left, componentLocation.y - insets.top, componentSize.width + insets.left + insets.right, componentSize.height + insets.top + insets.bottom);\n        }\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY, dividerLocation);\n    }\n\n    /**\n     * Detaches a \u003ccode\u003eview\u003c/code\u003e at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        // Replace component by a dummy label to find easily where to attach back the component\n        JLabel dummyLabel \u003d new JLabel();\n        dummyLabel.setMaximumSize(new Dimension());\n        dummyLabel.setName(view.getClass().getName());\n        dummyLabel.setBorder(component.getBorder());\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            splitPane.setDividerSize(0);\n            if (splitPane.getLeftComponent() \u003d\u003d component) {\n                splitPane.setLeftComponent(dummyLabel);\n                splitPane.setDividerLocation(0f);\n            } else {\n                splitPane.setRightComponent(dummyLabel);\n                splitPane.setDividerLocation(1f);\n            }\n        } else {\n            int componentIndex \u003d parent.getComponentZOrder(component);\n            parent.remove(componentIndex);\n            parent.add(dummyLabel, componentIndex);\n        }\n        // Display view in a separate non modal dialog\n        Window window \u003d SwingUtilities.getWindowAncestor(this);\n        if (!(window instanceof JFrame)) {\n            window \u003d JOptionPane.getRootFrame();\n        }\n        JFrame defaultFrame \u003d (JFrame) window;\n        // Create a dialog with the same title as home frame\n        final JDialog separateDialog \u003d new JDialog(defaultFrame, defaultFrame.getTitle(), false);\n        separateDialog.setResizable(true);\n        defaultFrame.addPropertyChangeListener(\"title\", new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                separateDialog.setTitle((String) ev.getNewValue());\n            }\n        });\n        // Use same document modified indicator\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"Window.documentModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"Window.documentModified\", ev.getNewValue());\n                }\n            });\n        } else if (OperatingSystem.isMacOSX()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"windowModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"windowModified\", ev.getNewValue());\n                }\n            });\n        }\n        separateDialog.setContentPane(component);\n        separateDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\n        separateDialog.addWindowListener(new WindowAdapter() {\n\n            @Override\n            public void windowClosing(WindowEvent ev) {\n                controller.attachView(view);\n            }\n        });\n        separateDialog.addComponentListener(new ComponentAdapter() {\n\n            @Override\n            public void componentResized(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY, separateDialog.getWidth());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY, separateDialog.getHeight());\n            }\n\n            @Override\n            public void componentMoved(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, separateDialog.getX());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY, separateDialog.getY());\n            }\n        });\n        separateDialog.setBounds(x, y, width, height);\n        separateDialog.setLocationByPlatform(!SwingTools.isRectangleVisibleAtScreen(separateDialog.getBounds()));\n        separateDialog.setVisible(true);\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, true);\n    }\n\n    /**\n     * Attaches the given \u003ccode\u003eview\u003c/code\u003e to home view.\n     */\n    public void attachView(View view) {\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, false);\n        JComponent dummyComponent \u003d (JComponent) findChild(this, view.getClass().getName());\n        if (dummyComponent !\u003d null) {\n            JComponent component \u003d (JComponent) view;\n            Window window \u003d SwingUtilities.getWindowAncestor(component);\n            component.setBorder(dummyComponent.getBorder());\n            Container parent \u003d dummyComponent.getParent();\n            if (parent instanceof JSplitPane) {\n                JSplitPane splitPane \u003d (JSplitPane) parent;\n                float dividerLocation \u003d (Float) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                splitPane.setDividerSize(UIManager.getInt(\"SplitPane.dividerSize\"));\n                splitPane.setDividerLocation(dividerLocation);\n                if (splitPane.getLeftComponent() \u003d\u003d dummyComponent) {\n                    splitPane.setLeftComponent(component);\n                } else {\n                    splitPane.setRightComponent(component);\n                }\n            } else {\n                int componentIndex \u003d parent.getComponentZOrder(dummyComponent);\n                parent.remove(componentIndex);\n                parent.add(component, componentIndex);\n            }\n            window.dispose();\n        }\n    }\n\n    /**\n     * Returns among \u003ccode\u003eparent\u003c/code\u003e children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName) {\n        for (int i \u003d 0; i \u003c parent.getComponentCount(); i++) {\n            Component child \u003d parent.getComponent(i);\n            if (childName.equals(child.getName())) {\n                return child;\n            } else if (child instanceof Container) {\n                child \u003d findChild((Container) child, childName);\n                if (child !\u003d null) {\n                    return child;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"openHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D);\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importLanguageLibraryDialog.title\"), ContentManager.ContentType.LANGUAGE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.message\", new File(languageLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importFurnitureLibraryDialog.title\"), ContentManager.ContentType.FURNITURE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.message\", new File(furnitureLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importTexturesLibraryDialog.title\"), ContentManager.ContentType.TEXTURES_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.message\", new File(texturesLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.message\", new File(pluginName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"saveHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D, homeName);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in an error message box.\n     */\n    public void showError(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"error.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in a message box.\n     */\n    public void showMessage(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"message.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);\n    }\n\n    /**\n     * Displays the tip matching \u003ccode\u003eactionTipKey\u003c/code\u003e and\n     * returns \u003ccode\u003etrue\u003c/code\u003e if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipTitle\");\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipMessage\");\n        if (message.length() \u003e 0) {\n            JPanel tipPanel \u003d new JPanel(new GridBagLayout());\n            JLabel messageLabel \u003d new JLabel(message);\n            tipPanel.add(messageLabel, new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            // Add a check box that lets user choose whether he wants to display again the tip or not\n            JCheckBox doNotDisplayTipCheckBox \u003d new JCheckBox(SwingTools.getLocalizedLabelText(this.preferences, HomePane.class, \"doNotDisplayTipCheckBox.text\"));\n            if (!OperatingSystem.isMacOSX()) {\n                doNotDisplayTipCheckBox.setMnemonic(KeyStroke.getKeyStroke(this.preferences.getLocalizedString(HomePane.class, \"doNotDisplayTipCheckBox.mnemonic\")).getKeyCode());\n            }\n            tipPanel.add(doNotDisplayTipCheckBox, new GridBagConstraints(0, 1, 1, 1, 0, 1, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));\n            SwingTools.showMessageDialog(this, tipPanel, title, JOptionPane.INFORMATION_MESSAGE, doNotDisplayTipCheckBox);\n            return doNotDisplayTipCheckBox.isSelected();\n        } else {\n            // Ignore untranslated tips\n            return true;\n        }\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn\u0027t want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn\u0027t want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName) {\n        // Retrieve displayed text in buttons and message\n        String message;\n        if (homeName !\u003d null) {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\\\"\" + this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D) + \"\\\"\");\n        } else {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\");\n        }\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.doNotSave\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.cancel\");\n        switch(JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave, cancel }, save)) {\n            // Convert showOptionDialog answer to SaveAnswer enum constants\n            case JOptionPane.YES_OPTION:\n                return SaveAnswer.SAVE;\n            case JOptionPane.NO_OPTION:\n                return SaveAnswer.DO_NOT_SAVE;\n            default:\n                return SaveAnswer.CANCEL;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName) {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.message\", this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D));\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.doNotSave\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave }, doNotSave) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to exit.\n     */\n    public boolean confirmExit() {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.title\");\n        String quit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.quit\");\n        String doNotQuit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.doNotQuit\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { quit, doNotQuit }, doNotQuit) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog() {\n        String messageFormat \u003d this.preferences.getLocalizedString(HomePane.class, \"about.message\");\n        String aboutVersion \u003d this.controller.getVersion();\n        String message \u003d String.format(messageFormat, aboutVersion, System.getProperty(\"java.version\"));\n        // Use an uneditable editor pane to let user select text in dialog\n        JEditorPane messagePane \u003d new JEditorPane(\"text/html\", message);\n        messagePane.setOpaque(false);\n        messagePane.setEditable(false);\n        // Add a listener that displays hyperlinks content in browser\n        messagePane.addHyperlinkListener(new HyperlinkListener() {\n\n            public void hyperlinkUpdate(HyperlinkEvent ev) {\n                if (ev.getEventType() \u003d\u003d HyperlinkEvent.EventType.ACTIVATED) {\n                    SwingTools.showDocumentInBrowser(ev.getURL());\n                }\n            }\n        });\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"about.title\");\n        Icon icon \u003d new ImageIcon(HomePane.class.getResource(this.preferences.getLocalizedString(HomePane.class, \"about.icon\")));\n        JOptionPane.showMessageDialog(this, messagePane, title, JOptionPane.INFORMATION_MESSAGE, icon);\n    }\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or \u003ccode\u003enull\u003c/code\u003e if the user canceled print.\n     *    The \u003ccode\u003ecall\u003c/code\u003e method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable\u003cVoid\u003e showPrintDialog() {\n        PageFormat pageFormat \u003d HomePrintableComponent.getPageFormat(this.home.getPrint());\n        final PrinterJob printerJob \u003d PrinterJob.getPrinterJob();\n        printerJob.setPrintable(new HomePrintableComponent(this.home, this.controller, getFont()), pageFormat);\n        String jobName \u003d this.preferences.getLocalizedString(HomePane.class, \"print.jobName\");\n        if (this.home.getName() !\u003d null) {\n            jobName +\u003d \" - \" + this.controller.getContentManager().getPresentationName(this.home.getName(), ContentManager.ContentType.SWEET_HOME_3D);\n        }\n        printerJob.setJobName(jobName);\n        if (printerJob.printDialog()) {\n            return new Callable\u003cVoid\u003e() {\n\n                public Void call() throws RecorderException {\n                    try {\n                        printerJob.print();\n                        return null;\n                    } catch (InterruptedPrinterException ex) {\n                        throw new InterruptedRecorderException(\"Print interrupted\");\n                    } catch (PrinterException ex) {\n                        throw new RecorderException(\"Couldn\u0027t print\", ex);\n                    }\n                }\n            };\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"printToPDFDialog.title\"), ContentManager.ContentType.PDF, homeName);\n    }\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException {\n        OutputStream outputStream \u003d null;\n        boolean printInterrupted \u003d false;\n        try {\n            outputStream \u003d new FileOutputStream(pdfFile);\n            new HomePDFPrinter(this.home, this.preferences, this.controller, getFont()).write(outputStream);\n        } catch (InterruptedIOException ex) {\n            printInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Print interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n        } finally {\n            try {\n                if (outputStream !\u003d null) {\n                    outputStream.close();\n                }\n                // Delete the file if printing is interrupted\n                if (printInterrupted) {\n                    new File(pdfFile).delete();\n                }\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToSVGDialog.title\"), ContentManager.ContentType.SVG, homeName);\n    }\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException {\n        View planView \u003d this.controller.getPlanController().getView();\n        PlanComponent planComponent;\n        if (planView instanceof PlanComponent) {\n            planComponent \u003d (PlanComponent) planView;\n        } else {\n            planComponent \u003d new PlanComponent(this.home, this.preferences, null);\n        }\n        OutputStream outputStream \u003d null;\n        boolean exportInterrupted \u003d false;\n        try {\n            outputStream \u003d new BufferedOutputStream(new FileOutputStream(svgFile));\n            planComponent.exportToSVG(outputStream);\n        } catch (InterruptedIOException ex) {\n            exportInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Export to \" + svgFile + \" interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n        } finally {\n            if (outputStream !\u003d null) {\n                try {\n                    outputStream.close();\n                    // Delete the file if exporting is interrupted\n                    if (exportInterrupted) {\n                        new File(svgFile).delete();\n                    }\n                } catch (IOException ex) {\n                    throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n                }\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToOBJDialog.title\"), ContentManager.ContentType.OBJ, homeName);\n    }\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException {\n        String header \u003d this.preferences !\u003d null ? this.preferences.getLocalizedString(HomePane.class, \"exportToOBJ.header\", new Date()) : \"\";\n        // Use a clone of home to ignore selection\n        OBJExporter.exportHomeToFile(this.home.clone(), objFile, header);\n    }\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer \u003d null;\n            boolean exportInterrupted \u003d false;\n            try {\n                writer \u003d new OBJWriter(objFile, header, -1);\n                List\u003cSelectable\u003e emptySelection \u003d Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() \u003e 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds \u003d getExportedHomeBounds(home);\n                    Ground3D groundNode \u003d new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i \u003d 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode \u003d new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i \u003d 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode \u003d new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i \u003d 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode \u003d new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted \u003d true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer !\u003d null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns \u003ccode\u003ehome\u003c/code\u003e bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds \u003d updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds \u003d\u003d null) {\n                        homeBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given \u003ccode\u003efurniture\u003c/code\u003e.\n         */\n        private static List\u003cHomePieceOfFurniture\u003e getVisibleFurniture(List\u003cHomePieceOfFurniture\u003e furniture) {\n            List\u003cHomePieceOfFurniture\u003e visibleFurniture \u003d new ArrayList\u003cHomePieceOfFurniture\u003e(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() \u0026\u0026 (piece.getLevel() \u003d\u003d null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates \u003ccode\u003eobjectBounds\u003c/code\u003e to include the bounds of \u003ccode\u003eitems\u003c/code\u003e.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection\u003c? extends Selectable\u003e items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() \u003d\u003d null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds \u003d\u003d null) {\n                            objectBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection() {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.title\");\n        String delete \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.delete\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.cancel\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { delete, cancel }, cancel) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or \u003ccode\u003enull\u003c/code\u003e if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName) {\n        // Retrieve displayed text in dialog\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.title\");\n        List\u003cCamera\u003e storedCameras \u003d this.home.getStoredCameras();\n        JComponent cameraNameChooser;\n        JTextComponent cameraNameTextComponent;\n        if (storedCameras.isEmpty()) {\n            cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n        } else {\n            // If cameras are already stored in home propose an editable combo box to user\n            // to let him choose more easily an existing one if he want to overwrite it\n            String[] storedCameraNames \u003d new String[storedCameras.size()];\n            for (int i \u003d 0; i \u003c storedCameraNames.length; i++) {\n                storedCameraNames[i] \u003d storedCameras.get(i).getName();\n            }\n            JComboBox cameraNameComboBox \u003d new JComboBox(storedCameraNames);\n            cameraNameComboBox.setEditable(true);\n            cameraNameComboBox.getEditor().setItem(cameraName);\n            Component editorComponent \u003d cameraNameComboBox.getEditor().getEditorComponent();\n            if (editorComponent instanceof JTextComponent) {\n                cameraNameTextComponent \u003d (JTextComponent) editorComponent;\n                cameraNameChooser \u003d cameraNameComboBox;\n            } else {\n                cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n            }\n        }\n        JPanel cameraNamePanel \u003d new JPanel(new BorderLayout(2, 2));\n        cameraNamePanel.add(new JLabel(message), BorderLayout.NORTH);\n        cameraNamePanel.add(cameraNameChooser, BorderLayout.SOUTH);\n        if (SwingTools.showConfirmDialog(this, cameraNamePanel, title, cameraNameTextComponent) \u003d\u003d JOptionPane.OK_OPTION) {\n            return cameraNameTextComponent.getText();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty() {\n        try {\n            Clipboard clipboard \u003d getToolkit().getSystemClipboard();\n            return !(clipboard.isDataFlavorAvailable(HomeTransferableList.HOME_FLAVOR) || getToolkit().getSystemClipboard().isDataFlavorAvailable(DataFlavor.javaFileListFlavor));\n        } catch (AccessControlException ex) {\n            // AWT uses a private clipboard that won\u0027t be empty as soon as a copy action will be done\n            return this.clipboardEmpty;\n        }\n    }\n\n    /**\n     * Execute \u003ccode\u003erunnable\u003c/code\u003e asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable) {\n        EventQueue.invokeLater(runnable);\n    }\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction \u003d pluginAction;\n            this.propertyChangeSupport \u003d new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName \u003d ev.getPropertyName();\n                    Object oldValue \u003d ev.getOldValue();\n                    Object newValue \u003d ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don\u0027t check new value is null !)\n                        if (newValue !\u003d null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue !\u003d null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue !\u003d null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon \u003d (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon !\u003d null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic \u003d (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic !\u003d null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat\u003cT extends Selectable\u003e {\n\n        public abstract String format(T item);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "HomePane",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_3Test.java",
    "test_prompt": "// HomePane_3Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains ten unit test cases for the {@link HomePane#showImportFurnitureLibraryDialog()} method.\n*/\nclass HomePane_3Test {",
    "method_signature": "showImportFurnitureLibraryDialog()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// HomePane.java\n/*\n * HomePane.java 15 mai 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY \u003d \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY \u003d \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY \u003d \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY \u003d \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY \u003d \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT \u003d 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty \u003d true;\n\n    private ActionMap menuActionMap;\n\n    private List\u003cAction\u003e pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n        this.home \u003d home;\n        this.preferences \u003d preferences;\n        this.controller \u003d controller;\n        JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n        ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);\n        createActions(home, preferences, controller);\n        createMenuActions(preferences, controller);\n        createPluginActions(controller instanceof HomePluginController ? ((HomePluginController) controller).getPlugins() : null);\n        createTransferHandlers(home, controller);\n        addHomeListener(home);\n        addLevelVisibilityListener(home);\n        addLanguageListener(preferences);\n        addPlanControllerListener(controller.getPlanController());\n        addFocusListener();\n        updateFocusTraversalPolicy();\n        JMenuBar homeMenuBar \u003d createMenuBar(home, preferences, controller);\n        setJMenuBar(homeMenuBar);\n        Container contentPane \u003d getContentPane();\n        contentPane.add(createToolBar(home), BorderLayout.NORTH);\n        contentPane.add(createMainPane(home, preferences, controller));\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            // Under Mac OS X 10.5, add some dummy labels at left and right borders\n            // to avoid the tool bar to be attached on these borders\n            // (segmented buttons created on this system aren\u0027t properly rendered\n            // when they are aligned vertically)\n            contentPane.add(new JLabel(), BorderLayout.WEST);\n            contentPane.add(new JLabel(), BorderLayout.EAST);\n        }\n        disableMenuItemsDuringDragAndDrop(controller.getPlanController().getView(), homeMenuBar);\n        // Change component orientation\n        applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller) {\n        createAction(ActionType.NEW_HOME, preferences, controller, \"newHome\");\n        createAction(ActionType.OPEN, preferences, controller, \"open\");\n        createAction(ActionType.DELETE_RECENT_HOMES, preferences, controller, \"deleteRecentHomes\");\n        createAction(ActionType.CLOSE, preferences, controller, \"close\");\n        createAction(ActionType.SAVE, preferences, controller, \"save\");\n        createAction(ActionType.SAVE_AS, preferences, controller, \"saveAs\");\n        createAction(ActionType.SAVE_AND_COMPRESS, preferences, controller, \"saveAndCompress\");\n        createAction(ActionType.PAGE_SETUP, preferences, controller, \"setupPage\");\n        createAction(ActionType.PRINT_PREVIEW, preferences, controller, \"previewPrint\");\n        createAction(ActionType.PRINT, preferences, controller, \"print\");\n        createAction(ActionType.PRINT_TO_PDF, preferences, controller, \"printToPDF\");\n        createAction(ActionType.PREFERENCES, preferences, controller, \"editPreferences\");\n        createAction(ActionType.EXIT, preferences, controller, \"exit\");\n        createAction(ActionType.UNDO, preferences, controller, \"undo\");\n        createAction(ActionType.REDO, preferences, controller, \"redo\");\n        createClipboardAction(ActionType.CUT, preferences, TransferHandler.getCutAction(), true);\n        createClipboardAction(ActionType.COPY, preferences, TransferHandler.getCopyAction(), true);\n        createClipboardAction(ActionType.PASTE, preferences, TransferHandler.getPasteAction(), false);\n        createAction(ActionType.DELETE, preferences, controller, \"delete\");\n        createAction(ActionType.SELECT_ALL, preferences, controller, \"selectAll\");\n        createAction(ActionType.ADD_HOME_FURNITURE, preferences, controller, \"addHomeFurniture\");\n        FurnitureController furnitureController \u003d controller.getFurnitureController();\n        createAction(ActionType.DELETE_HOME_FURNITURE, preferences, furnitureController, \"deleteSelection\");\n        createAction(ActionType.MODIFY_FURNITURE, preferences, controller, \"modifySelectedFurniture\");\n        createAction(ActionType.GROUP_FURNITURE, preferences, furnitureController, \"groupSelectedFurniture\");\n        createAction(ActionType.UNGROUP_FURNITURE, preferences, furnitureController, \"ungroupSelectedFurniture\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_TOP, preferences, furnitureController, \"alignSelectedFurnitureOnTop\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BOTTOM, preferences, furnitureController, \"alignSelectedFurnitureOnBottom\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT, preferences, furnitureController, \"alignSelectedFurnitureOnLeft\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT, preferences, furnitureController, \"alignSelectedFurnitureOnRight\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnFrontSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnBackSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnLeftSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnRightSide\");\n        createAction(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, preferences, furnitureController, \"alignSelectedFurnitureSideBySide\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, preferences, furnitureController, \"distributeSelectedFurnitureHorizontally\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, preferences, furnitureController, \"distributeSelectedFurnitureVertically\");\n        final HomeController3D homeController3D \u003d controller.getHomeController3D();\n        if (homeController3D.getView() !\u003d null) {\n            createAction(ActionType.IMPORT_FURNITURE, preferences, controller, \"importFurniture\");\n        }\n        createAction(ActionType.IMPORT_FURNITURE_LIBRARY, preferences, controller, \"importFurnitureLibrary\");\n        createAction(ActionType.IMPORT_TEXTURES_LIBRARY, preferences, controller, \"importTexturesLibrary\");\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_NAME, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_X, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_Y, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_COLOR, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TYPE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER, preferences, furnitureController, \"toggleFurnitureSortOrder\");\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_NAME, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_X, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_Y, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_COLOR, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        PlanController planController \u003d controller.getPlanController();\n        if (planController.getView() !\u003d null) {\n            ButtonGroup modeGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.SELECT, planController.getMode() \u003d\u003d PlanController.Mode.SELECTION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.SELECTION);\n            createToggleAction(ActionType.PAN, planController.getMode() \u003d\u003d PlanController.Mode.PANNING, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.PANNING);\n            createToggleAction(ActionType.CREATE_WALLS, planController.getMode() \u003d\u003d PlanController.Mode.WALL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.WALL_CREATION);\n            createToggleAction(ActionType.CREATE_ROOMS, planController.getMode() \u003d\u003d PlanController.Mode.ROOM_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.ROOM_CREATION);\n            createToggleAction(ActionType.CREATE_DIMENSION_LINES, planController.getMode() \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.DIMENSION_LINE_CREATION);\n            createToggleAction(ActionType.CREATE_LABELS, planController.getMode() \u003d\u003d PlanController.Mode.LABEL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.LABEL_CREATION);\n            createAction(ActionType.DELETE_SELECTION, preferences, planController, \"deleteSelection\");\n            createAction(ActionType.LOCK_BASE_PLAN, preferences, planController, \"lockBasePlan\");\n            createAction(ActionType.UNLOCK_BASE_PLAN, preferences, planController, \"unlockBasePlan\");\n            createAction(ActionType.MODIFY_COMPASS, preferences, planController, \"modifyCompass\");\n            createAction(ActionType.MODIFY_WALL, preferences, planController, \"modifySelectedWalls\");\n            createAction(ActionType.MODIFY_ROOM, preferences, planController, \"modifySelectedRooms\");\n            createAction(ActionType.MODIFY_LABEL, preferences, planController, \"modifySelectedLabels\");\n            createAction(ActionType.INCREASE_TEXT_SIZE, preferences, planController, \"increaseTextSize\");\n            createAction(ActionType.DECREASE_TEXT_SIZE, preferences, planController, \"decreaseTextSize\");\n            // Use special toggle models for bold and italic check box menu items and tool bar buttons\n            // that are selected texts in home selected items are all bold or italic\n            Action toggleBoldAction \u003d createAction(ActionType.TOGGLE_BOLD_STYLE, preferences, planController, \"toggleBoldStyle\");\n            toggleBoldAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createBoldStyleToggleModel(home, preferences));\n            Action toggleItalicAction \u003d createAction(ActionType.TOGGLE_ITALIC_STYLE, preferences, planController, \"toggleItalicStyle\");\n            toggleItalicAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createItalicStyleToggleModel(home, preferences));\n            createAction(ActionType.REVERSE_WALL_DIRECTION, preferences, planController, \"reverseSelectedWallsDirection\");\n            createAction(ActionType.SPLIT_WALL, preferences, planController, \"splitSelectedWall\");\n            createAction(ActionType.IMPORT_BACKGROUND_IMAGE, preferences, controller, \"importBackgroundImage\");\n            createAction(ActionType.MODIFY_BACKGROUND_IMAGE, preferences, controller, \"modifyBackgroundImage\");\n            createAction(ActionType.HIDE_BACKGROUND_IMAGE, preferences, controller, \"hideBackgroundImage\");\n            createAction(ActionType.SHOW_BACKGROUND_IMAGE, preferences, controller, \"showBackgroundImage\");\n            createAction(ActionType.DELETE_BACKGROUND_IMAGE, preferences, controller, \"deleteBackgroundImage\");\n            createAction(ActionType.ADD_LEVEL, preferences, planController, \"addLevel\");\n            createAction(ActionType.MODIFY_LEVEL, preferences, planController, \"modifySelectedLevel\");\n            createAction(ActionType.DELETE_LEVEL, preferences, planController, \"deleteSelectedLevel\");\n            createAction(ActionType.ZOOM_IN, preferences, controller, \"zoomIn\");\n            createAction(ActionType.ZOOM_OUT, preferences, controller, \"zoomOut\");\n            createAction(ActionType.EXPORT_TO_SVG, preferences, controller, \"exportToSVG\");\n        }\n        if (homeController3D.getView() !\u003d null) {\n            ButtonGroup viewGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera(), viewGroup, preferences, homeController3D, \"viewFromTop\");\n            createToggleAction(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera(), viewGroup, preferences, homeController3D, \"viewFromObserver\");\n            createAction(ActionType.MODIFY_OBSERVER, preferences, planController, \"modifyObserverCamera\");\n            createAction(ActionType.STORE_POINT_OF_VIEW, preferences, controller, \"storeCamera\");\n            getActionMap().put(ActionType.DETACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.DETACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.detachView(homeController3D.getView());\n                }\n            });\n            getActionMap().put(ActionType.ATTACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.ATTACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.attachView(homeController3D.getView());\n                }\n            });\n            ButtonGroup displayLevelGroup \u003d new ButtonGroup();\n            boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n            createToggleAction(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displayAllLevels\");\n            createToggleAction(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displaySelectedLevel\");\n            createAction(ActionType.MODIFY_3D_ATTRIBUTES, preferences, homeController3D, \"modifyAttributes\");\n            createAction(ActionType.CREATE_PHOTO, preferences, controller, \"createPhoto\");\n            createAction(ActionType.CREATE_VIDEO, preferences, controller, \"createVideo\");\n            createAction(ActionType.EXPORT_TO_OBJ, preferences, controller, \"exportToOBJ\");\n        }\n        createAction(ActionType.HELP, preferences, controller, \"help\");\n        createAction(ActionType.ABOUT, preferences, controller, \"about\");\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object that calls on \u003ccode\u003econtroller\u003c/code\u003e a given\n     * \u003ccode\u003emethod\u003c/code\u003e with its \u003ccode\u003eparameters\u003c/code\u003e. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        try {\n            ControllerAction action \u003d new ControllerAction(preferences, HomePane.class, actionType.name(), controller, method, parameters);\n            getActionMap().put(actionType, action);\n            return action;\n        } catch (NoSuchMethodException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object associated with a \u003ccode\u003eToggleButtonModel\u003c/code\u003e instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        Action action \u003d createAction(actionType, preferences, controller, method, parameters);\n        JToggleButton.ToggleButtonModel toggleButtonModel \u003d new JToggleButton.ToggleButtonModel();\n        toggleButtonModel.setSelected(selected);\n        if (group !\u003d null) {\n            toggleButtonModel.setGroup(group);\n        }\n        action.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, toggleButtonModel);\n        return action;\n    }\n\n    /**\n     * Creates a \u003ccode\u003eReourceAction\u003c/code\u003e object that calls\n     * \u003ccode\u003eactionPerfomed\u003c/code\u003e method on a given\n     * existing \u003ccode\u003eclipboardAction\u003c/code\u003e with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction) {\n        getActionMap().put(actionType, new ResourceAction(preferences, HomePane.class, actionType.name()) {\n\n            public void actionPerformed(ActionEvent ev) {\n                if (copyAction) {\n                    clipboardEmpty \u003d false;\n                }\n                ev \u003d new ActionEvent(lastFocusedComponent, ActionEvent.ACTION_PERFORMED, null);\n                clipboardAction.actionPerformed(ev);\n            }\n        });\n    }\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller) {\n        this.menuActionMap \u003d new ActionMap();\n        createMenuAction(preferences, MenuActionType.FILE_MENU);\n        createMenuAction(preferences, MenuActionType.EDIT_MENU);\n        createMenuAction(preferences, MenuActionType.FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.PLAN_MENU);\n        createMenuAction(preferences, MenuActionType.VIEW_3D_MENU);\n        createMenuAction(preferences, MenuActionType.HELP_MENU);\n        createMenuAction(preferences, MenuActionType.OPEN_RECENT_HOME_MENU);\n        createMenuAction(preferences, MenuActionType.SORT_HOME_FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.ALIGN_OR_DISTRIBUTE_MENU);\n        createMenuAction(preferences, MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU);\n        createMenuAction(preferences, MenuActionType.MODIFY_TEXT_STYLE);\n        createMenuAction(preferences, MenuActionType.GO_TO_POINT_OF_VIEW);\n        createMenuAction(preferences, MenuActionType.SELECT_OBJECT_MENU);\n    }\n\n    /**\n     * Creates a \u003ccode\u003eResourceAction\u003c/code\u003e object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action) {\n        this.menuActionMap.put(action, new ResourceAction(preferences, HomePane.class, action.name(), true));\n    }\n\n    /**\n     * Creates the Swing actions matching each actions available in \u003ccode\u003eplugins\u003c/code\u003e.\n     */\n    private void createPluginActions(List\u003cPlugin\u003e plugins) {\n        this.pluginActions \u003d new ArrayList\u003cAction\u003e();\n        if (plugins !\u003d null) {\n            for (Plugin plugin : plugins) {\n                for (final PluginAction pluginAction : plugin.getActions()) {\n                    // Create a Swing action adapter to plug-in action\n                    this.pluginActions.add(new ActionAdapter(pluginAction));\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller) {\n        this.catalogTransferHandler \u003d new FurnitureCatalogTransferHandler(controller.getContentManager(), controller.getFurnitureCatalogController(), controller.getFurnitureController());\n        this.furnitureTransferHandler \u003d new FurnitureTransferHandler(home, controller.getContentManager(), controller);\n        this.planTransferHandler \u003d new PlanTransferHandler(home, controller.getContentManager(), controller);\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home) {\n        home.addPropertyChangeListener(Home.Property.CAMERA, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera());\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera());\n            }\n        });\n    }\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected) {\n        ((JToggleButton.ToggleButtonModel) getActionMap().get(actionType).getValue(ResourceAction.TOGGLE_BUTTON_MODEL)).setSelected(selected);\n    }\n\n    /**\n     * Adds listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home) {\n        home.getEnvironment().addPropertyChangeListener(HomeEnvironment.Property.ALL_LEVELS_VISIBLE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n                setToggleButtonModelSelected(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible);\n                setToggleButtonModelSelected(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible);\n            }\n        });\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003epreferences\u003c/code\u003e to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences) {\n        preferences.addPropertyChangeListener(UserPreferences.Property.LANGUAGE, new LanguageChangeListener(this));\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003eplanController\u003c/code\u003e to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController) {\n        planController.addPropertyChangeListener(PlanController.Property.MODE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                Mode mode \u003d planController.getMode();\n                setToggleButtonModelSelected(ActionType.SELECT, mode \u003d\u003d PlanController.Mode.SELECTION);\n                setToggleButtonModelSelected(ActionType.PAN, mode \u003d\u003d PlanController.Mode.PANNING);\n                setToggleButtonModelSelected(ActionType.CREATE_WALLS, mode \u003d\u003d PlanController.Mode.WALL_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_ROOMS, mode \u003d\u003d PlanController.Mode.ROOM_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_DIMENSION_LINES, mode \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_LABELS, mode \u003d\u003d PlanController.Mode.LABEL_CREATION);\n            }\n        });\n    }\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener() {\n        KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"currentFocusCycleRoot\", new FocusCycleRootChangeListener(this));\n    }\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener \u003d null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener \u003d new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent !\u003d null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent \u003d homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode !\u003d null \u0026\u0026 (lostFocusedComponent \u003d\u003d homePane.controller.getPlanController().getView() || ev.getNewValue() \u003d\u003d null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode \u003d null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() !\u003d null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent \u003d (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) \u0026\u0026 gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews \u003d { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view !\u003d null \u0026\u0026 SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent \u003d (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener \u003d new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController \u003d controller.getPlanController();\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 (ev.getModifiers() \u0026 (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) \u003d\u003d 0 \u0026\u0026 getActionMap().get(ActionType.PAN).getValue(Action.NAME) !\u003d null \u0026\u0026 planController.getMode() !\u003d PlanController.Mode.PANNING \u0026\u0026 !planController.isModificationState() \u0026\u0026 SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) \u0026\u0026 !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode \u003d planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 previousPlanControllerMode !\u003d null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode \u003d null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap \u003d getActionMap();\n            Action[] specialKeyActions \u003d { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask \u003d KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke \u003d (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() \u003d\u003d actionKeyStroke.getKeyChar() \u0026\u0026 (ev.getModifiers() \u0026 modifiersMask) \u003d\u003d (actionKeyStroke.getModifiers() \u0026 modifiersMask) \u0026\u0026 specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy() {\n        setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {\n\n            @Override\n            protected boolean accept(Component component) {\n                if (super.accept(component)) {\n                    for (JSplitPane splitPane; (splitPane \u003d (JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, component)) !\u003d null; component \u003d splitPane) {\n                        if (isChildComponentInvisible(splitPane, component)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n        setFocusTraversalPolicyProvider(true);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the top or the bottom component of the \u003ccode\u003esplitPane\u003c/code\u003e\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent) {\n        return (SwingUtilities.isDescendingFrom(childComponent, splitPane.getTopComponent()) \u0026\u0026 (splitPane.getTopComponent().getWidth() \u003d\u003d 0 || splitPane.getTopComponent().getHeight() \u003d\u003d 0)) || (SwingUtilities.isDescendingFrom(childComponent, splitPane.getBottomComponent()) \u0026\u0026 (splitPane.getBottomComponent().getWidth() \u003d\u003d 0 || splitPane.getBottomComponent().getHeight() \u003d\u003d 0));\n    }\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller) {\n        // Create File menu\n        JMenu fileMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FILE_MENU));\n        addActionToMenu(ActionType.NEW_HOME, fileMenu);\n        addActionToMenu(ActionType.OPEN, fileMenu);\n        final JMenu openRecentHomeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.OPEN_RECENT_HOME_MENU));\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n        openRecentHomeMenu.addMenuListener(new MenuListener() {\n\n            public void menuSelected(MenuEvent ev) {\n                updateOpenRecentHomeMenu(openRecentHomeMenu, controller);\n            }\n\n            public void menuCanceled(MenuEvent ev) {\n            }\n\n            public void menuDeselected(MenuEvent ev) {\n            }\n        });\n        fileMenu.add(openRecentHomeMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.CLOSE, fileMenu);\n        addActionToMenu(ActionType.SAVE, fileMenu);\n        addActionToMenu(ActionType.SAVE_AS, fileMenu);\n        addActionToMenu(ActionType.SAVE_AND_COMPRESS, fileMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.PAGE_SETUP, fileMenu);\n        addActionToMenu(ActionType.PRINT_PREVIEW, fileMenu);\n        addActionToMenu(ActionType.PRINT, fileMenu);\n        // Don\u0027t add PRINT_TO_PDF, PREFERENCES and EXIT menu items under Mac OS X,\n        // because PREFERENCES and EXIT items are displayed in application menu\n        // and PRINT_TO_PDF is available in standard Mac OS X Print dialog\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.PRINT_TO_PDF, fileMenu);\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.PREFERENCES, fileMenu);\n        }\n        // Create Edit menu\n        JMenu editMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.EDIT_MENU));\n        addActionToMenu(ActionType.UNDO, editMenu);\n        addActionToMenu(ActionType.REDO, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.CUT, editMenu);\n        addActionToMenu(ActionType.COPY, editMenu);\n        addActionToMenu(ActionType.PASTE, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.DELETE, editMenu);\n        addActionToMenu(ActionType.SELECT_ALL, editMenu);\n        // Create Furniture menu\n        JMenu furnitureMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FURNITURE_MENU));\n        addActionToMenu(ActionType.ADD_HOME_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.MODIFY_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.GROUP_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.UNGROUP_FURNITURE, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.IMPORT_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_FURNITURE_LIBRARY, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_TEXTURES_LIBRARY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        furnitureMenu.add(createFurnitureSortMenu(home, preferences));\n        furnitureMenu.add(createFurnitureDisplayPropertyMenu(home, preferences));\n        // Create Plan menu\n        JMenu planMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.PLAN_MENU));\n        addToggleActionToMenu(ActionType.SELECT, true, planMenu);\n        addToggleActionToMenu(ActionType.PAN, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_WALLS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_ROOMS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_DIMENSION_LINES, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_LABELS, true, planMenu);\n        planMenu.addSeparator();\n        JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, false);\n        if (lockUnlockBasePlanMenuItem !\u003d null) {\n            planMenu.add(lockUnlockBasePlanMenuItem);\n        }\n        addActionToMenu(ActionType.MODIFY_COMPASS, planMenu);\n        addActionToMenu(ActionType.MODIFY_WALL, planMenu);\n        addActionToMenu(ActionType.REVERSE_WALL_DIRECTION, planMenu);\n        addActionToMenu(ActionType.SPLIT_WALL, planMenu);\n        addActionToMenu(ActionType.MODIFY_ROOM, planMenu);\n        addActionToMenu(ActionType.MODIFY_LABEL, planMenu);\n        planMenu.add(createTextStyleMenu(home, preferences, false));\n        planMenu.addSeparator();\n        JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, false);\n        if (importModifyBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(importModifyBackgroundImageMenuItem);\n        }\n        JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, false);\n        if (hideShowBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(hideShowBackgroundImageMenuItem);\n        }\n        addActionToMenu(ActionType.DELETE_BACKGROUND_IMAGE, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ADD_LEVEL, planMenu);\n        addActionToMenu(ActionType.MODIFY_LEVEL, planMenu);\n        addActionToMenu(ActionType.DELETE_LEVEL, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ZOOM_IN, planMenu);\n        addActionToMenu(ActionType.ZOOM_OUT, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_SVG, planMenu);\n        // Create 3D Preview menu\n        JMenu preview3DMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.VIEW_3D_MENU));\n        addToggleActionToMenu(ActionType.VIEW_FROM_TOP, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.VIEW_FROM_OBSERVER, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_OBSERVER, preview3DMenu);\n        addActionToMenu(ActionType.STORE_POINT_OF_VIEW, preview3DMenu);\n        JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n        if (goToPointOfViewMenu !\u003d null) {\n            preview3DMenu.add(goToPointOfViewMenu);\n        }\n        preview3DMenu.addSeparator();\n        JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, false);\n        if (attachDetach3DViewMenuItem !\u003d null) {\n            preview3DMenu.add(attachDetach3DViewMenuItem);\n        }\n        addToggleActionToMenu(ActionType.DISPLAY_ALL_LEVELS, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_3D_ATTRIBUTES, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.CREATE_PHOTO, preview3DMenu);\n        addActionToMenu(ActionType.CREATE_VIDEO, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_OBJ, preview3DMenu);\n        // Create Help menu\n        JMenu helpMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.HELP_MENU));\n        addActionToMenu(ActionType.HELP, helpMenu);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.ABOUT, helpMenu);\n        }\n        // Add menus to menu bar\n        JMenuBar menuBar \u003d new JMenuBar();\n        menuBar.add(fileMenu);\n        menuBar.add(editMenu);\n        menuBar.add(furnitureMenu);\n        if (controller.getPlanController().getView() !\u003d null) {\n            menuBar.add(planMenu);\n        }\n        if (controller.getHomeController3D().getView() !\u003d null) {\n            menuBar.add(preview3DMenu);\n        }\n        menuBar.add(helpMenu);\n        // Add plugin actions menu items\n        for (Action pluginAction : this.pluginActions) {\n            String pluginMenu \u003d (String) pluginAction.getValue(PluginAction.Property.MENU.name());\n            if (pluginMenu !\u003d null) {\n                boolean pluginActionAdded \u003d false;\n                for (int i \u003d 0; i \u003c menuBar.getMenuCount(); i++) {\n                    JMenu menu \u003d menuBar.getMenu(i);\n                    if (menu.getText().equals(pluginMenu)) {\n                        // Add menu item to existing menu\n                        menu.addSeparator();\n                        menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                        pluginActionAdded \u003d true;\n                        break;\n                    }\n                }\n                if (!pluginActionAdded) {\n                    // Create missing menu before last menu\n                    JMenu menu \u003d new JMenu(pluginMenu);\n                    menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                    menuBar.add(menu, menuBar.getMenuCount() - 1);\n                }\n            }\n        }\n        // Add EXIT action at end to ensure it\u0027s the last item of file menu\n        if (!OperatingSystem.isMacOSX()) {\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.EXIT, fileMenu);\n        }\n        removeUselessSeparatorsAndEmptyMenus(menuBar);\n        return menuBar;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu) {\n        addActionToMenu(actionType, false, menu);\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu) {\n        addToggleActionToMenu(actionType, false, radioButton, menu);\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, popup, radioButton));\n        }\n    }\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton) {\n        JMenuItem menuItem;\n        if (radioButton) {\n            menuItem \u003d new JRadioButtonMenuItem();\n        } else {\n            menuItem \u003d new JCheckBoxMenuItem();\n        }\n        // Configure model\n        menuItem.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n        // Configure menu item action after setting its model to avoid losing its mnemonic\n        menuItem.setAction(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        return menuItem;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(new ResourceAction.PopupMenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, true, radioButton));\n        }\n    }\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component) {\n        for (int i \u003d component.getComponentCount() - 1; i \u003e\u003d 0; i--) {\n            Component child \u003d component.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d component.getComponentCount() - 1 || component.getComponent(i - 1) instanceof JSeparator)) {\n                component.remove(i);\n            } else if (child instanceof JMenu) {\n                removeUselessSeparatorsAndEmptyMenus(((JMenu) child).getPopupMenu());\n            }\n            if (child instanceof JMenu \u0026\u0026 (((JMenu) child).getMenuComponentCount() \u003d\u003d 0 || ((JMenu) child).getMenuComponentCount() \u003d\u003d 1 \u0026\u0026 ((JMenu) child).getMenuComponent(0) instanceof JSeparator)) {\n                component.remove(i);\n            }\n        }\n        // Don\u0027t let a menu start with a separator\n        if (component.getComponentCount() \u003e 0 \u0026\u0026 component.getComponent(0) instanceof JSeparator) {\n            component.remove(0);\n        }\n    }\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu alignOrDistributeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.ALIGN_OR_DISTRIBUTE_MENU));\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, popup, alignOrDistributeMenu);\n        return alignOrDistributeMenu;\n    }\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Sort submenu\n        JMenu sortMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.SORT_HOME_FURNITURE_MENU));\n        // Map sort furniture properties to sort actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e sortActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, sortActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_NAME, sortActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, sortActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, sortActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, sortActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_X, sortActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_Y, sortActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, sortActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, sortActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, sortActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_COLOR, sortActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, sortActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, sortActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TYPE, sortActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, sortActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE, sortActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, sortActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu and make them share the same radio button group\n        ButtonGroup sortButtonGroup \u003d new ButtonGroup();\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : sortActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action sortAction \u003d entry.getValue();\n            JRadioButtonMenuItem sortMenuItem \u003d new JRadioButtonMenuItem();\n            // Use a special model for sort radio button menu item that is selected if\n            // home is sorted on furnitureProperty criterion\n            sortMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return furnitureProperty \u003d\u003d home.getFurnitureSortedProperty();\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            sortMenuItem.setAction(new ResourceAction.MenuItemAction(sortAction));\n            sortMenu.add(sortMenuItem);\n            sortButtonGroup.add(sortMenuItem);\n        }\n        Action sortOrderAction \u003d getActionMap().get(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER);\n        if (sortOrderAction.getValue(Action.NAME) !\u003d null) {\n            sortMenu.addSeparator();\n            JCheckBoxMenuItem sortOrderCheckBoxMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for sort order check box menu item that is selected depending on\n            // home sort order property\n            sortOrderCheckBoxMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.isFurnitureDescendingSorted();\n                }\n            });\n            sortOrderCheckBoxMenuItem.setAction(new ResourceAction.MenuItemAction(sortOrderAction));\n            sortMenu.add(sortOrderCheckBoxMenuItem);\n        }\n        return sortMenu;\n    }\n\n    /**\n     * Adds to \u003ccode\u003eactions\u003c/code\u003e the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToMap(ActionType actionType, Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e actions, HomePieceOfFurniture.SortableProperty key) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            actions.put(key, action);\n        }\n    }\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Display property submenu\n        JMenu displayPropertyMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU));\n        // Map displayProperty furniture properties to displayProperty actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e displayPropertyActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, displayPropertyActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_NAME, displayPropertyActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, displayPropertyActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_X, displayPropertyActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_Y, displayPropertyActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, displayPropertyActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_COLOR, displayPropertyActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : displayPropertyActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action displayPropertyAction \u003d entry.getValue();\n            JCheckBoxMenuItem displayPropertyMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for displayProperty check box menu item that is selected if\n            // home furniture visible properties contains furnitureProperty\n            displayPropertyMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.getFurnitureVisibleProperties().contains(furnitureProperty);\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            displayPropertyMenuItem.setAction(displayPropertyAction);\n            displayPropertyMenu.add(displayPropertyMenuItem);\n        }\n        return displayPropertyMenu;\n    }\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem lockUnlockBasePlanMenuItem \u003d new JMenuItem(createLockUnlockBasePlanAction(home, popup));\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanMenuItem.setAction(createLockUnlockBasePlanAction(home, popup));\n                }\n            });\n            return lockUnlockBasePlanMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup) {\n        ActionType actionType \u003d home.isBasePlanLocked() ? ActionType.UNLOCK_BASE_PLAN : ActionType.LOCK_BASE_PLAN;\n        Action action \u003d getActionMap().get(actionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action);\n    }\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JButton lockUnlockBasePlanButton \u003d new JButton(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n            lockUnlockBasePlanButton.setBorderPainted(false);\n            lockUnlockBasePlanButton.setContentAreaFilled(false);\n            lockUnlockBasePlanButton.setFocusable(false);\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanButton.setAction(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n                }\n            });\n            return lockUnlockBasePlanButton;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu modifyTextStyleMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.MODIFY_TEXT_STYLE));\n        addActionToMenu(ActionType.INCREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        addActionToMenu(ActionType.DECREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        modifyTextStyleMenu.addSeparator();\n        addToggleActionToMenu(ActionType.TOGGLE_BOLD_STYLE, popup, false, modifyTextStyleMenu);\n        addToggleActionToMenu(ActionType.TOGGLE_ITALIC_STYLE, popup, false, modifyTextStyleMenu);\n        return modifyTextStyleMenu;\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all bold or not\n                Boolean selectionBoldStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean bold;\n                    if (item instanceof Label) {\n                        bold \u003d isItemTextBold(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        bold \u003d isItemTextBold(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        bold \u003d isItemTextBold(room, room.getNameStyle());\n                        if (bold !\u003d isItemTextBold(room, room.getAreaStyle())) {\n                            bold \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        bold \u003d isItemTextBold(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionBoldStyle \u003d\u003d null) {\n                        selectionBoldStyle \u003d bold;\n                    } else if (bold \u003d\u003d null || !selectionBoldStyle.equals(bold)) {\n                        selectionBoldStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionBoldStyle !\u003d null \u0026\u0026 selectionBoldStyle;\n            }\n\n            private boolean isItemTextBold(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isBold();\n            }\n        };\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all italic or not\n                Boolean selectionItalicStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean italic;\n                    if (item instanceof Label) {\n                        italic \u003d isItemTextItalic(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        italic \u003d isItemTextItalic(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        italic \u003d isItemTextItalic(room, room.getNameStyle());\n                        if (italic !\u003d isItemTextItalic(room, room.getAreaStyle())) {\n                            italic \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        italic \u003d isItemTextItalic(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionItalicStyle \u003d\u003d null) {\n                        selectionItalicStyle \u003d italic;\n                    } else if (italic \u003d\u003d null || !selectionItalicStyle.equals(italic)) {\n                        selectionItalicStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionItalicStyle !\u003d null \u0026\u0026 selectionItalicStyle;\n            }\n\n            private boolean isItemTextItalic(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isItalic();\n            }\n        };\n    }\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action importBackgroundImageAction \u003d actionMap.get(ActionType.IMPORT_BACKGROUND_IMAGE);\n        Action modifyBackgroundImageAction \u003d actionMap.get(ActionType.MODIFY_BACKGROUND_IMAGE);\n        if (importBackgroundImageAction !\u003d null \u0026\u0026 importBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 modifyBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem importModifyBackgroundImageMenuItem \u003d new JMenuItem(createImportModifyBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    importModifyBackgroundImageMenuItem.setAction(createImportModifyBackgroundImageAction(home, popup));\n                }\n            });\n            return importModifyBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener) {\n        home.addPropertyChangeListener(Home.Property.BACKGROUND_IMAGE, listener);\n        home.addPropertyChangeListener(Home.Property.SELECTED_LEVEL, listener);\n        final PropertyChangeListener levelChangeListener \u003d new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                if (Level.Property.BACKGROUND_IMAGE.name().equals(ev.getPropertyName())) {\n                    listener.propertyChange(ev);\n                }\n            }\n        };\n        for (Level level : this.home.getLevels()) {\n            level.addPropertyChangeListener(levelChangeListener);\n        }\n        this.home.addLevelsListener(new CollectionListener\u003cLevel\u003e() {\n\n            public void collectionChanged(CollectionEvent\u003cLevel\u003e ev) {\n                switch(ev.getType()) {\n                    case ADD:\n                        ev.getItem().addPropertyChangeListener(levelChangeListener);\n                        break;\n                    case DELETE:\n                        ev.getItem().removePropertyChangeListener(levelChangeListener);\n                        break;\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null ? ActionType.IMPORT_BACKGROUND_IMAGE : ActionType.MODIFY_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action hideBackgroundImageAction \u003d actionMap.get(ActionType.HIDE_BACKGROUND_IMAGE);\n        Action showBackgroundImageAction \u003d actionMap.get(ActionType.SHOW_BACKGROUND_IMAGE);\n        if (hideBackgroundImageAction !\u003d null \u0026\u0026 hideBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 showBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem hideShowBackgroundImageMenuItem \u003d new JMenuItem(createHideShowBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    hideShowBackgroundImageMenuItem.setAction(createHideShowBackgroundImageAction(home, popup));\n                }\n            });\n            return hideShowBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null || backgroundImage.isVisible() ? ActionType.HIDE_BACKGROUND_IMAGE : ActionType.SHOW_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller) {\n        Action goToPointOfViewAction \u003d this.menuActionMap.get(MenuActionType.GO_TO_POINT_OF_VIEW);\n        if (goToPointOfViewAction.getValue(Action.NAME) !\u003d null) {\n            final JMenu goToPointOfViewMenu \u003d new JMenu(goToPointOfViewAction);\n            updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n            home.addPropertyChangeListener(Home.Property.STORED_CAMERAS, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n                }\n            });\n            return goToPointOfViewMenu;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller) {\n        List\u003cCamera\u003e storedCameras \u003d home.getStoredCameras();\n        goToPointOfViewMenu.removeAll();\n        if (storedCameras.isEmpty()) {\n            goToPointOfViewMenu.setEnabled(false);\n            goToPointOfViewMenu.add(new ResourceAction(preferences, HomePane.class, \"NoStoredPointOfView\", false));\n        } else {\n            goToPointOfViewMenu.setEnabled(true);\n            for (final Camera camera : storedCameras) {\n                goToPointOfViewMenu.add(new AbstractAction(camera.getName()) {\n\n                    public void actionPerformed(ActionEvent e) {\n                        controller.getHomeController3D().goToCamera(camera);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action display3DViewInSeparateWindowAction \u003d actionMap.get(ActionType.DETACH_3D_VIEW);\n        Action display3DViewInMainWindowAction \u003d actionMap.get(ActionType.ATTACH_3D_VIEW);\n        if (display3DViewInSeparateWindowAction !\u003d null \u0026\u0026 display3DViewInSeparateWindowAction.getValue(Action.NAME) !\u003d null \u0026\u0026 display3DViewInMainWindowAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem attachDetach3DViewMenuItem \u003d new JMenuItem(createAttachDetach3DViewAction(controller, popup));\n            // Add a listener to 3D view to switch action when its parent changes\n            JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n            view3D.addAncestorListener(new AncestorListener() {\n\n                public void ancestorAdded(AncestorEvent ev) {\n                    attachDetach3DViewMenuItem.setAction(createAttachDetach3DViewAction(controller, popup));\n                }\n\n                public void ancestorRemoved(AncestorEvent ev) {\n                }\n\n                public void ancestorMoved(AncestorEvent ev) {\n                }\n            });\n            return attachDetach3DViewMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup) {\n        JRootPane view3DRootPane \u003d SwingUtilities.getRootPane((JComponent) controller.getHomeController3D().getView());\n        ActionType display3DViewActionType \u003d view3DRootPane \u003d\u003d this ? ActionType.DETACH_3D_VIEW : ActionType.ATTACH_3D_VIEW;\n        Action backgroundImageAction \u003d getActionMap().get(display3DViewActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Updates \u003ccode\u003eopenRecentHomeMenu\u003c/code\u003e from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller) {\n        openRecentHomeMenu.removeAll();\n        for (final String homeName : controller.getRecentHomes()) {\n            openRecentHomeMenu.add(new AbstractAction(controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D)) {\n\n                public void actionPerformed(ActionEvent e) {\n                    controller.open(homeName);\n                }\n            });\n        }\n        if (openRecentHomeMenu.getMenuComponentCount() \u003e 0) {\n            openRecentHomeMenu.addSeparator();\n        }\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n    }\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home) {\n        final JToolBar toolBar \u003d new UnfocusableToolBar();\n        addActionToToolBar(ActionType.NEW_HOME, toolBar);\n        addActionToToolBar(ActionType.OPEN, toolBar);\n        addActionToToolBar(ActionType.SAVE, toolBar);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToToolBar(ActionType.PREFERENCES, toolBar);\n        }\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.UNDO, toolBar);\n        addActionToToolBar(ActionType.REDO, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.CUT, toolBar);\n        addActionToToolBar(ActionType.COPY, toolBar);\n        addActionToToolBar(ActionType.PASTE, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.ADD_HOME_FURNITURE, toolBar);\n        toolBar.addSeparator();\n        addToggleActionToToolBar(ActionType.SELECT, toolBar);\n        addToggleActionToToolBar(ActionType.PAN, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_WALLS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_ROOMS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_DIMENSION_LINES, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_LABELS, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.INCREASE_TEXT_SIZE, toolBar);\n        addActionToToolBar(ActionType.DECREASE_TEXT_SIZE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_BOLD_STYLE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_ITALIC_STYLE, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.ZOOM_IN, toolBar);\n        addActionToToolBar(ActionType.ZOOM_OUT, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.CREATE_PHOTO, toolBar);\n        addActionToToolBar(ActionType.CREATE_VIDEO, toolBar);\n        toolBar.addSeparator();\n        // Add plugin actions buttons\n        boolean pluginActionsAdded \u003d false;\n        for (Action pluginAction : this.pluginActions) {\n            if (Boolean.TRUE.equals(pluginAction.getValue(PluginAction.Property.TOOL_BAR.name()))) {\n                toolBar.add(new ResourceAction.ToolBarAction(pluginAction));\n                pluginActionsAdded \u003d true;\n            }\n        }\n        if (pluginActionsAdded) {\n            toolBar.addSeparator();\n        }\n        addActionToToolBar(ActionType.HELP, toolBar);\n        // Remove useless separators\n        for (int i \u003d toolBar.getComponentCount() - 1; i \u003e 0; i--) {\n            Component child \u003d toolBar.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d toolBar.getComponentCount() - 1 || toolBar.getComponent(i - 1) instanceof JSeparator)) {\n                toolBar.remove(i);\n            }\n        }\n        return toolBar;\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            Action toolBarAction \u003d new ResourceAction.ToolBarAction(action);\n            JToggleButton toggleButton \u003d new JToggleButton(toolBarAction);\n            toggleButton.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n            toolBar.add(toggleButton);\n        }\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            toolBar.add(new ResourceAction.ToolBarAction(action));\n        }\n    }\n\n    /**\n     * Enables or disables the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            action.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText) {\n        setNameAndShortDescription(ActionType.UNDO, undoText);\n        setNameAndShortDescription(ActionType.REDO, redoText);\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * matching \u003ccode\u003eactionType\u003c/code\u003e. If \u003ccode\u003ename\u003c/code\u003e is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            if (name \u003d\u003d null) {\n                name \u003d (String) action.getValue(Action.DEFAULT);\n            }\n            action.putValue(Action.NAME, name);\n            action.putValue(Action.SHORT_DESCRIPTION, name);\n        }\n    }\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled) {\n        boolean dragAndDropWithTransferHandlerSupported;\n        try {\n            // Don\u0027t use transfer handlers for drag and drop with Plugin2 under Mac OS X or when in an unsigned applet\n            dragAndDropWithTransferHandlerSupported \u003d !Boolean.getBoolean(\"com.eteks.sweethome3d.dragAndDropWithoutTransferHandler\");\n        } catch (AccessControlException ex) {\n            dragAndDropWithTransferHandlerSupported \u003d false;\n        }\n        JComponent catalogView \u003d (JComponent) this.controller.getFurnitureCatalogController().getView();\n        JComponent furnitureView \u003d (JComponent) this.controller.getFurnitureController().getView();\n        JComponent planView \u003d (JComponent) this.controller.getPlanController().getView();\n        if (enabled) {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(this.catalogTransferHandler);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(this.furnitureTransferHandler);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(this.furnitureTransferHandler);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(this.planTransferHandler);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    // Check if furniture catalog is handled by a subcomponent\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    if (this.furnitureCatalogDragAndDropListener \u003d\u003d null) {\n                        this.furnitureCatalogDragAndDropListener \u003d createFurnitureCatalogMouseListener();\n                    }\n                    catalogComponent.addMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.addMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        } else {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(null);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(null);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(null);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(null);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    catalogComponent.removeMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.removeMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        }\n        this.transferHandlerEnabled \u003d enabled;\n    }\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener() {\n        return new MouseInputAdapter() {\n\n            private CatalogPieceOfFurniture selectedPiece;\n\n            private TransferHandler transferHandler;\n\n            private boolean autoscrolls;\n\n            private Cursor previousCursor;\n\n            private View previousView;\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev)) {\n                    List\u003cCatalogPieceOfFurniture\u003e selectedFurniture \u003d controller.getFurnitureCatalogController().getSelectedFurniture();\n                    if (selectedFurniture.size() \u003e 0) {\n                        JComponent source \u003d (JComponent) ev.getSource();\n                        this.transferHandler \u003d source.getTransferHandler();\n                        source.setTransferHandler(null);\n                        this.autoscrolls \u003d source.getAutoscrolls();\n                        source.setAutoscrolls(false);\n                        this.selectedPiece \u003d selectedFurniture.get(0);\n                        this.previousCursor \u003d null;\n                        this.previousView \u003d null;\n                    }\n                }\n            }\n\n            @Override\n            public void mouseDragged(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    // Force selection again\n                    List\u003cCatalogPieceOfFurniture\u003e emptyList \u003d Collections.emptyList();\n                    controller.getFurnitureCatalogController().setSelectedFurniture(emptyList);\n                    controller.getFurnitureCatalogController().setSelectedFurniture(Arrays.asList(new CatalogPieceOfFurniture[] { this.selectedPiece }));\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (this.previousView !\u003d view) {\n                        if (this.previousView !\u003d null) {\n                            if (this.previousView \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().stopDraggedItems();\n                            }\n                            ((JComponent) this.previousView).setCursor(this.previousCursor);\n                            this.previousCursor \u003d null;\n                            this.previousView \u003d null;\n                        }\n                        if (view !\u003d null) {\n                            JComponent component \u003d (JComponent) view;\n                            this.previousCursor \u003d component.getCursor();\n                            this.previousView \u003d view;\n                            component.setCursor(DragSource.DefaultCopyDrop);\n                            if (component.getParent() instanceof JViewport) {\n                                ((JViewport) component.getParent()).setCursor(DragSource.DefaultCopyDrop);\n                            }\n                            if (view \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().startDraggedItems(transferredFurniture, pointInView[0], pointInView[1]);\n                            }\n                        }\n                    } else if (pointInView !\u003d null) {\n                        controller.getPlanController().moveMouse(pointInView[0], pointInView[1]);\n                    }\n                }\n            }\n\n            private float[] getPointInPlanView(MouseEvent ev, List\u003cSelectable\u003e transferredFurniture) {\n                PlanView planView \u003d controller.getPlanController().getView();\n                if (planView !\u003d null) {\n                    JComponent planComponent \u003d (JComponent) planView;\n                    Point pointInPlanComponent \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent);\n                    if (planComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) planComponent.getParent()).contains(SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent.getParent())) || !(planComponent.getParent() instanceof JViewport) \u0026\u0026 planView.canImportDraggedItems(transferredFurniture, pointInPlanComponent.x, pointInPlanComponent.y)) {\n                        return new float[] { planView.convertXPixelToModel(pointInPlanComponent.x), planView.convertYPixelToModel(pointInPlanComponent.y) };\n                    }\n                }\n                return null;\n            }\n\n            private float[] getPointInFurnitureView(MouseEvent ev) {\n                View furnitureView \u003d controller.getFurnitureController().getView();\n                if (furnitureView !\u003d null) {\n                    JComponent furnitureComponent \u003d (JComponent) furnitureView;\n                    Point point \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getX(), ev.getY(), furnitureComponent.getParent() instanceof JViewport ? furnitureComponent.getParent() : furnitureComponent);\n                    if (furnitureComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) furnitureComponent.getParent()).contains(point) || !(furnitureComponent.getParent() instanceof JViewport) \u0026\u0026 furnitureComponent.contains(point)) {\n                        return new float[] { 0, 0 };\n                    }\n                }\n                return null;\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        controller.getPlanController().stopDraggedItems();\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (pointInView !\u003d null) {\n                        controller.drop(transferredFurniture, view, pointInView[0], pointInView[1]);\n                        ((JComponent) this.previousView).setCursor(this.previousCursor);\n                    }\n                    this.selectedPiece \u003d null;\n                    JComponent source \u003d (JComponent) ev.getSource();\n                    source.setTransferHandler(this.transferHandler);\n                    source.setAutoscrolls(this.autoscrolls);\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller) {\n        final JComponent catalogFurniturePane \u003d createCatalogFurniturePane(home, preferences, controller);\n        final JComponent planView3DPane \u003d createPlanView3DPane(home, preferences, controller);\n        if (catalogFurniturePane \u003d\u003d null) {\n            return planView3DPane;\n        } else if (planView3DPane \u003d\u003d null) {\n            return catalogFurniturePane;\n        } else {\n            final JSplitPane mainPane \u003d new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, catalogFurniturePane, planView3DPane);\n            // Set default divider location\n            mainPane.setDividerLocation(360);\n            configureSplitPane(mainPane, home, MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.3, true, controller);\n            return mainPane;\n        }\n    }\n\n    /**\n     * Configures \u003ccode\u003esplitPane\u003c/code\u003e divider location.\n     * If \u003ccode\u003edividerLocationProperty\u003c/code\u003e visual property exists in \u003ccode\u003ehome\u003c/code\u003e,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller) {\n        splitPane.setContinuousLayout(true);\n        splitPane.setOneTouchExpandable(true);\n        splitPane.setResizeWeight(defaultResizeWeight);\n        if (!showBorder) {\n            splitPane.setBorder(null);\n        }\n        // Restore divider location previously set\n        Integer dividerLocation \u003d (Integer) home.getVisualProperty(dividerLocationProperty);\n        if (dividerLocation !\u003d null) {\n            splitPane.setDividerLocation(dividerLocation);\n        }\n        splitPane.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, new PropertyChangeListener() {\n\n            public void propertyChange(final PropertyChangeEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        Component focusOwner \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();\n                        if (focusOwner !\u003d null \u0026\u0026 isChildComponentInvisible(splitPane, focusOwner)) {\n                            FocusTraversalPolicy focusTraversalPolicy \u003d getFocusTraversalPolicy();\n                            Component focusedComponent \u003d focusTraversalPolicy.getComponentAfter(HomePane.this, focusOwner);\n                            if (focusedComponent \u003d\u003d null) {\n                                focusedComponent \u003d focusTraversalPolicy.getComponentBefore(HomePane.this, focusOwner);\n                            }\n                            if (focusedComponent !\u003d null) {\n                                focusedComponent.requestFocusInWindow();\n                            }\n                        }\n                        controller.setVisualProperty(dividerLocationProperty, ev.getNewValue());\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent catalogView \u003d (JComponent) controller.getFurnitureCatalogController().getView();\n        if (catalogView !\u003d null) {\n            // Create catalog view popup menu\n            JPopupMenu catalogViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.COPY, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_HOME_FURNITURE, catalogViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.IMPORT_FURNITURE, catalogViewPopup);\n            SwingTools.hideDisabledMenuItems(catalogViewPopup);\n            catalogView.setComponentPopupMenu(catalogViewPopup);\n            preferences.addPropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, new FurnitureCatalogViewChangeListener(this, catalogView));\n            if (catalogView instanceof Scrollable) {\n                catalogView \u003d SwingTools.createScrollPane(catalogView);\n            }\n        }\n        // Configure furniture view\n        JComponent furnitureView \u003d (JComponent) controller.getFurnitureController().getView();\n        if (furnitureView !\u003d null) {\n            // Set default traversal keys of furniture view\n            KeyboardFocusManager focusManager \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager();\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS));\n            // Create furniture view popup menu\n            JPopupMenu furnitureViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.REDO, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.COPY, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.SELECT_ALL, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, furnitureViewPopup);\n            furnitureViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            furnitureViewPopup.addSeparator();\n            furnitureViewPopup.add(createFurnitureSortMenu(home, preferences));\n            furnitureViewPopup.add(createFurnitureDisplayPropertyMenu(home, preferences));\n            SwingTools.hideDisabledMenuItems(furnitureViewPopup);\n            furnitureView.setComponentPopupMenu(furnitureViewPopup);\n            if (furnitureView instanceof Scrollable) {\n                JScrollPane furnitureScrollPane \u003d SwingTools.createScrollPane(furnitureView);\n                // Add a mouse listener that gives focus to furniture view when\n                // user clicks in its viewport (tables don\u0027t spread vertically if their row count is too small)\n                final JViewport viewport \u003d furnitureScrollPane.getViewport();\n                viewport.addMouseListener(new MouseAdapter() {\n\n                    @Override\n                    public void mouseClicked(MouseEvent ev) {\n                        viewport.getView().requestFocusInWindow();\n                    }\n                });\n                Integer viewportY \u003d (Integer) home.getVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(0, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        controller.setVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY, viewport.getViewPosition().y);\n                    }\n                });\n                ((JViewport) furnitureView.getParent()).setComponentPopupMenu(furnitureViewPopup);\n                furnitureView \u003d furnitureScrollPane;\n            }\n        }\n        if (catalogView \u003d\u003d null) {\n            return furnitureView;\n        } else if (furnitureView \u003d\u003d null) {\n            return catalogView;\n        } else {\n            // Create a split pane that displays both components\n            JSplitPane catalogFurniturePane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, catalogView, furnitureView);\n            catalogFurniturePane.setBorder(null);\n            catalogFurniturePane.setMinimumSize(new Dimension());\n            configureSplitPane(catalogFurniturePane, home, CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n            return catalogFurniturePane;\n        }\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJComponent\u003e furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView \u003d this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView !\u003d null) {\n                    boolean transferHandlerEnabled \u003d homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView \u003d (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent \u003d SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent planView \u003d (JComponent) controller.getPlanController().getView();\n        if (planView !\u003d null) {\n            // Create plan view popup menu\n            JPopupMenu planViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, planViewPopup);\n            addActionToPopupMenu(ActionType.REDO, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, planViewPopup);\n            addActionToPopupMenu(ActionType.COPY, planViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, planViewPopup);\n            Action selectObjectAction \u003d this.menuActionMap.get(MenuActionType.SELECT_OBJECT_MENU);\n            JMenu selectObjectMenu;\n            if (selectObjectAction.getValue(Action.NAME) !\u003d null) {\n                selectObjectMenu \u003d new JMenu(selectObjectAction);\n                planViewPopup.add(selectObjectMenu);\n            } else {\n                selectObjectMenu \u003d null;\n            }\n            addActionToPopupMenu(ActionType.SELECT_ALL, planViewPopup);\n            planViewPopup.addSeparator();\n            addToggleActionToPopupMenu(ActionType.SELECT, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.PAN, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_WALLS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_ROOMS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_DIMENSION_LINES, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_LABELS, true, planViewPopup);\n            planViewPopup.addSeparator();\n            JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, true);\n            if (lockUnlockBasePlanMenuItem !\u003d null) {\n                planViewPopup.add(lockUnlockBasePlanMenuItem);\n            }\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, planViewPopup);\n            planViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            addActionToPopupMenu(ActionType.MODIFY_COMPASS, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.REVERSE_WALL_DIRECTION, planViewPopup);\n            addActionToPopupMenu(ActionType.SPLIT_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_ROOM, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LABEL, planViewPopup);\n            planViewPopup.add(createTextStyleMenu(home, preferences, true));\n            planViewPopup.addSeparator();\n            JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, true);\n            if (importModifyBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(importModifyBackgroundImageMenuItem);\n            }\n            JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, true);\n            if (hideShowBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(hideShowBackgroundImageMenuItem);\n            }\n            addActionToPopupMenu(ActionType.DELETE_BACKGROUND_IMAGE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.DELETE_LEVEL, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ZOOM_OUT, planViewPopup);\n            addActionToPopupMenu(ActionType.ZOOM_IN, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_SVG, planViewPopup);\n            SwingTools.hideDisabledMenuItems(planViewPopup);\n            if (selectObjectMenu !\u003d null) {\n                // Add a second popup listener to manage Select object sub menu before the menu is hidden when empty\n                addSelectObjectMenuItems(selectObjectMenu, controller.getPlanController(), preferences);\n            }\n            planView.setComponentPopupMenu(planViewPopup);\n            final JScrollPane planScrollPane;\n            if (planView instanceof Scrollable) {\n                planView \u003d planScrollPane \u003d SwingTools.createScrollPane(planView);\n            } else {\n                List\u003cJScrollPane\u003e scrollPanes \u003d SwingTools.findChildren(planView, JScrollPane.class);\n                if (scrollPanes.size() \u003d\u003d 1) {\n                    planScrollPane \u003d scrollPanes.get(0);\n                } else {\n                    planScrollPane \u003d null;\n                }\n            }\n            if (planScrollPane !\u003d null) {\n                setPlanRulersVisible(planScrollPane, controller, preferences.isRulersVisible());\n                if (planScrollPane.getCorner(JScrollPane.UPPER_LEADING_CORNER) \u003d\u003d null) {\n                    final JComponent lockUnlockBasePlanButton \u003d createLockUnlockBasePlanButton(home);\n                    if (lockUnlockBasePlanButton !\u003d null) {\n                        planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                        planScrollPane.addPropertyChangeListener(\"componentOrientation\", new PropertyChangeListener() {\n\n                            public void propertyChange(PropertyChangeEvent ev) {\n                                if (lockUnlockBasePlanButton.getParent() !\u003d null) {\n                                    planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                                }\n                            }\n                        });\n                    }\n                }\n                // Add a listener to update rulers visibility in preferences\n                preferences.addPropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, new RulersVisibilityChangeListener(this, planScrollPane, controller));\n                // Restore viewport position if it exists\n                final JViewport viewport \u003d planScrollPane.getViewport();\n                Integer viewportX \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY);\n                Integer viewportY \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportX !\u003d null \u0026\u0026 viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(viewportX, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        Point viewportPosition \u003d viewport.getViewPosition();\n                        controller.setVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY, viewportPosition.x);\n                        controller.setVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY, viewportPosition.y);\n                    }\n                });\n            }\n        }\n        // Configure 3D view\n        JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n        if (view3D !\u003d null) {\n            view3D.setPreferredSize(planView !\u003d null ? planView.getPreferredSize() : new Dimension(400, 400));\n            view3D.setMinimumSize(new Dimension());\n            // Create 3D view popup menu\n            JPopupMenu view3DPopup \u003d new JPopupMenu();\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_TOP, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_OBSERVER, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_OBSERVER, view3DPopup);\n            addActionToPopupMenu(ActionType.STORE_POINT_OF_VIEW, view3DPopup);\n            JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n            if (goToPointOfViewMenu !\u003d null) {\n                view3DPopup.add(goToPointOfViewMenu);\n            }\n            view3DPopup.addSeparator();\n            JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, true);\n            if (attachDetach3DViewMenuItem !\u003d null) {\n                view3DPopup.add(attachDetach3DViewMenuItem);\n            }\n            addToggleActionToPopupMenu(ActionType.DISPLAY_ALL_LEVELS, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_3D_ATTRIBUTES, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CREATE_PHOTO, view3DPopup);\n            addActionToPopupMenu(ActionType.CREATE_VIDEO, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_OBJ, view3DPopup);\n            SwingTools.hideDisabledMenuItems(view3DPopup);\n            view3D.setComponentPopupMenu(view3DPopup);\n            if (view3D instanceof Scrollable) {\n                view3D \u003d SwingTools.createScrollPane(view3D);\n            }\n            JComponent planView3DPane;\n            if (planView !\u003d null) {\n                // Create a split pane that displays both components\n                final JSplitPane planView3DSplitPane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, planView, view3D);\n                planView3DSplitPane.setMinimumSize(new Dimension());\n                configureSplitPane((JSplitPane) planView3DSplitPane, home, PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n                final Integer dividerLocation \u003d (Integer) home.getVisualProperty(PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                if (OperatingSystem.isMacOSX() \u0026\u0026 dividerLocation !\u003d null \u0026\u0026 dividerLocation \u003e 2) {\n                    // Under Mac OS X, ensure that the 3D view of an existing home will be displayed during a while\n                    // to avoid a freeze when the 3D view was saved as hidden and then the window displaying the 3D view is enlarged\n                    planView3DSplitPane.addAncestorListener(new AncestorListener() {\n\n                        public void ancestorAdded(AncestorEvent event) {\n                            planView3DSplitPane.removeAncestorListener(this);\n                            if (planView3DSplitPane.getRightComponent().getHeight() \u003d\u003d 0) {\n                                // If the 3D view is invisible, make it appear during a while\n                                planView3DSplitPane.setDividerLocation(dividerLocation - 2);\n                                Executors.newSingleThreadScheduledExecutor().schedule(new Runnable() {\n\n                                    public void run() {\n                                        EventQueue.invokeLater(new Runnable() {\n\n                                            public void run() {\n                                                planView3DSplitPane.setDividerLocation(dividerLocation);\n                                            }\n                                        });\n                                    }\n                                }, 1, TimeUnit.SECONDS);\n                            }\n                        }\n\n                        public void ancestorRemoved(AncestorEvent event) {\n                        }\n\n                        public void ancestorMoved(AncestorEvent event) {\n                        }\n                    });\n                }\n                planView3DPane \u003d planView3DSplitPane;\n            } else {\n                planView3DPane \u003d view3D;\n            }\n            // Detach 3D view if it was detached when saved and its dialog can be viewed in one of the screen devices\n            Boolean detachedView3D \u003d (Boolean) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY);\n            if (detachedView3D !\u003d null \u0026\u0026 detachedView3D.booleanValue()) {\n                // Check 3D view can be viewed in one of the available screens\n                final Integer dialogX \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n                final Integer dialogY \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY);\n                final Integer dialogWidth \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n                final Integer dialogHeight \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY);\n                if (dialogX !\u003d null \u0026\u0026 dialogY !\u003d null \u0026\u0026 dialogWidth !\u003d null \u0026\u0026 dialogHeight !\u003d null \u0026\u0026 SwingTools.isRectangleVisibleAtScreen(new Rectangle(dialogX, dialogY, dialogWidth, dialogHeight))) {\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            View view3D \u003d controller.getHomeController3D().getView();\n                            detachView(view3D, dialogX, dialogY, dialogWidth, dialogHeight);\n                        }\n                    });\n                    return planView3DPane;\n                }\n                if (planView3DPane instanceof JSplitPane) {\n                    ((JSplitPane) planView3DPane).setDividerLocation(0.5);\n                }\n                controller.setVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, null);\n            }\n            return planView3DPane;\n        } else {\n            return planView;\n        }\n    }\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences) {\n        JComponent planView \u003d (JComponent) planController.getView();\n        final Point lastMouseMoveLocation \u003d new Point(-1, -1);\n        ((JPopupMenu) selectObjectMenu.getParent()).addPopupMenuListener(new PopupMenuListener() {\n\n            @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n            public void popupMenuWillBecomeVisible(PopupMenuEvent ev) {\n                if (lastMouseMoveLocation.getX() \u003e\u003d 0 \u0026\u0026 !planController.isModificationState()) {\n                    final List\u003cSelectable\u003e items \u003d planController.getSelectableItemsAt(planController.getView().convertXPixelToModel(lastMouseMoveLocation.x), planController.getView().convertYPixelToModel(lastMouseMoveLocation.y));\n                    // Prepare localized formatters\n                    Map\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e formatters \u003d new HashMap\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e();\n                    formatters.put(Compass.class, new SelectableFormat\u003cCompass\u003e() {\n\n                        public String format(Compass compass) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.compass\");\n                        }\n                    });\n                    formatters.put(HomePieceOfFurniture.class, new SelectableFormat\u003cHomePieceOfFurniture\u003e() {\n\n                        public String format(HomePieceOfFurniture piece) {\n                            if (piece.getName().length() \u003e 0) {\n                                return piece.getName();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.furniture\");\n                            }\n                        }\n                    });\n                    formatters.put(Wall.class, new SelectableFormat\u003cWall\u003e() {\n\n                        public String format(Wall wall) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.wall\", preferences.getLengthUnit().getFormatWithUnit().format(wall.getLength()));\n                        }\n                    });\n                    formatters.put(Room.class, new SelectableFormat\u003cRoom\u003e() {\n\n                        public String format(Room room) {\n                            String roomInfo \u003d room.getName() !\u003d null \u0026\u0026 room.getName().length() \u003e 0 ? room.getName() : (room.isAreaVisible() ? preferences.getLengthUnit().getAreaFormatWithUnit().format(room.getArea()) : \"\");\n                            if (room.isFloorVisible() \u0026\u0026 !room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.floor\", roomInfo);\n                            } else if (!room.isFloorVisible() \u0026\u0026 room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.ceiling\", roomInfo);\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.room\", roomInfo);\n                            }\n                        }\n                    });\n                    formatters.put(DimensionLine.class, new SelectableFormat\u003cDimensionLine\u003e() {\n\n                        public String format(DimensionLine dimensionLine) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.dimensionLine\", preferences.getLengthUnit().getFormatWithUnit().format(dimensionLine.getLength()));\n                        }\n                    });\n                    formatters.put(Label.class, new SelectableFormat\u003cLabel\u003e() {\n\n                        public String format(Label label) {\n                            if (label.getText().length() \u003e 0) {\n                                return label.getText();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.label\");\n                            }\n                        }\n                    });\n                    for (final Selectable item : items) {\n                        String format \u003d null;\n                        for (Map.Entry\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e entry : formatters.entrySet()) {\n                            if (entry.getKey().isInstance(item)) {\n                                format \u003d entry.getValue().format(item);\n                                break;\n                            }\n                        }\n                        if (format !\u003d null) {\n                            selectObjectMenu.add(new JMenuItem(new AbstractAction(format) {\n\n                                public void actionPerformed(ActionEvent ev) {\n                                    planController.selectItem(item);\n                                }\n                            }));\n                        }\n                    }\n                }\n            }\n\n            public void popupMenuWillBecomeInvisible(PopupMenuEvent ev) {\n                selectObjectMenu.removeAll();\n            }\n\n            public void popupMenuCanceled(PopupMenuEvent ev) {\n            }\n        });\n        planView.addMouseMotionListener(new MouseMotionAdapter() {\n\n            @Override\n            public void mouseMoved(MouseEvent ev) {\n                lastMouseMoveLocation.setLocation(ev.getPoint());\n            }\n        });\n        planView.addMouseListener(new MouseAdapter() {\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                lastMouseMoveLocation.x \u003d -1;\n            }\n        });\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJScrollPane\u003e planScrollPane;\n\n        private WeakReference\u003cHomeController\u003e controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.planScrollPane \u003d new WeakReference\u003cJScrollPane\u003e(planScrollPane);\n            this.controller \u003d new WeakReference\u003cHomeController\u003e(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            JScrollPane planScrollPane \u003d this.planScrollPane.get();\n            HomeController controller \u003d this.controller.get();\n            if (homePane \u003d\u003d null || planScrollPane \u003d\u003d null || controller \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible) {\n        if (visible) {\n            // Change column and row header views\n            planScrollPane.setColumnHeaderView((JComponent) controller.getPlanController().getHorizontalRulerView());\n            planScrollPane.setRowHeaderView((JComponent) controller.getPlanController().getVerticalRulerView());\n        } else {\n            planScrollPane.setColumnHeaderView(null);\n            planScrollPane.setRowHeaderView(null);\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003eview\u003c/code\u003e a mouse listener that disables all menu items of\n     * \u003ccode\u003emenuBar\u003c/code\u003e during a drag and drop operation in \u003ccode\u003eview\u003c/code\u003e.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar) {\n        class MouseAndFocusListener extends MouseAdapter implements FocusListener {\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), false);\n                        }\n                    }\n                });\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            private void enableMenuItems(final JMenuBar menuBar) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), true);\n                        }\n                    }\n                });\n            }\n\n            private void setMenuItemsEnabled(JMenu menu, boolean enabled) {\n                for (int i \u003d 0, n \u003d menu.getItemCount(); i \u003c n; i++) {\n                    JMenuItem item \u003d menu.getItem(i);\n                    if (item instanceof JMenu) {\n                        setMenuItemsEnabled((JMenu) item, enabled);\n                    } else if (item !\u003d null) {\n                        item.setEnabled(enabled ? item.getAction().isEnabled() : false);\n                    }\n                }\n            }\n\n            // Need to take into account focus events because a mouse released event\n            // isn\u0027t dispatched when the component loses focus\n            public void focusGained(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            public void focusLost(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n        }\n        ;\n        MouseAndFocusListener listener \u003d new MouseAndFocusListener();\n        if (view !\u003d null) {\n            ((JComponent) view).addMouseListener(listener);\n            ((JComponent) view).addFocusListener(listener);\n        }\n    }\n\n    /**\n     * Detaches the given \u003ccode\u003eview\u003c/code\u003e from home view.\n     */\n    public void detachView(final View view) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        float dividerLocation;\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            if (splitPane.getOrientation() \u003d\u003d JSplitPane.VERTICAL_SPLIT) {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getHeight() - splitPane.getDividerSize());\n            } else {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getWidth() - splitPane.getDividerSize());\n            }\n        } else {\n            dividerLocation \u003d -1;\n        }\n        Integer dialogX \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n        Integer dialogWidth \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n        if (dialogX !\u003d null \u0026\u0026 dialogWidth !\u003d null) {\n            detachView(view, dialogX, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY), dialogWidth, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY));\n        } else {\n            Point componentLocation \u003d new Point();\n            Dimension componentSize \u003d component.getSize();\n            SwingUtilities.convertPointToScreen(componentLocation, component);\n            Insets insets \u003d new JDialog().getInsets();\n            detachView(view, componentLocation.x - insets.left, componentLocation.y - insets.top, componentSize.width + insets.left + insets.right, componentSize.height + insets.top + insets.bottom);\n        }\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY, dividerLocation);\n    }\n\n    /**\n     * Detaches a \u003ccode\u003eview\u003c/code\u003e at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        // Replace component by a dummy label to find easily where to attach back the component\n        JLabel dummyLabel \u003d new JLabel();\n        dummyLabel.setMaximumSize(new Dimension());\n        dummyLabel.setName(view.getClass().getName());\n        dummyLabel.setBorder(component.getBorder());\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            splitPane.setDividerSize(0);\n            if (splitPane.getLeftComponent() \u003d\u003d component) {\n                splitPane.setLeftComponent(dummyLabel);\n                splitPane.setDividerLocation(0f);\n            } else {\n                splitPane.setRightComponent(dummyLabel);\n                splitPane.setDividerLocation(1f);\n            }\n        } else {\n            int componentIndex \u003d parent.getComponentZOrder(component);\n            parent.remove(componentIndex);\n            parent.add(dummyLabel, componentIndex);\n        }\n        // Display view in a separate non modal dialog\n        Window window \u003d SwingUtilities.getWindowAncestor(this);\n        if (!(window instanceof JFrame)) {\n            window \u003d JOptionPane.getRootFrame();\n        }\n        JFrame defaultFrame \u003d (JFrame) window;\n        // Create a dialog with the same title as home frame\n        final JDialog separateDialog \u003d new JDialog(defaultFrame, defaultFrame.getTitle(), false);\n        separateDialog.setResizable(true);\n        defaultFrame.addPropertyChangeListener(\"title\", new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                separateDialog.setTitle((String) ev.getNewValue());\n            }\n        });\n        // Use same document modified indicator\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"Window.documentModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"Window.documentModified\", ev.getNewValue());\n                }\n            });\n        } else if (OperatingSystem.isMacOSX()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"windowModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"windowModified\", ev.getNewValue());\n                }\n            });\n        }\n        separateDialog.setContentPane(component);\n        separateDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\n        separateDialog.addWindowListener(new WindowAdapter() {\n\n            @Override\n            public void windowClosing(WindowEvent ev) {\n                controller.attachView(view);\n            }\n        });\n        separateDialog.addComponentListener(new ComponentAdapter() {\n\n            @Override\n            public void componentResized(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY, separateDialog.getWidth());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY, separateDialog.getHeight());\n            }\n\n            @Override\n            public void componentMoved(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, separateDialog.getX());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY, separateDialog.getY());\n            }\n        });\n        separateDialog.setBounds(x, y, width, height);\n        separateDialog.setLocationByPlatform(!SwingTools.isRectangleVisibleAtScreen(separateDialog.getBounds()));\n        separateDialog.setVisible(true);\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, true);\n    }\n\n    /**\n     * Attaches the given \u003ccode\u003eview\u003c/code\u003e to home view.\n     */\n    public void attachView(View view) {\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, false);\n        JComponent dummyComponent \u003d (JComponent) findChild(this, view.getClass().getName());\n        if (dummyComponent !\u003d null) {\n            JComponent component \u003d (JComponent) view;\n            Window window \u003d SwingUtilities.getWindowAncestor(component);\n            component.setBorder(dummyComponent.getBorder());\n            Container parent \u003d dummyComponent.getParent();\n            if (parent instanceof JSplitPane) {\n                JSplitPane splitPane \u003d (JSplitPane) parent;\n                float dividerLocation \u003d (Float) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                splitPane.setDividerSize(UIManager.getInt(\"SplitPane.dividerSize\"));\n                splitPane.setDividerLocation(dividerLocation);\n                if (splitPane.getLeftComponent() \u003d\u003d dummyComponent) {\n                    splitPane.setLeftComponent(component);\n                } else {\n                    splitPane.setRightComponent(component);\n                }\n            } else {\n                int componentIndex \u003d parent.getComponentZOrder(dummyComponent);\n                parent.remove(componentIndex);\n                parent.add(component, componentIndex);\n            }\n            window.dispose();\n        }\n    }\n\n    /**\n     * Returns among \u003ccode\u003eparent\u003c/code\u003e children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName) {\n        for (int i \u003d 0; i \u003c parent.getComponentCount(); i++) {\n            Component child \u003d parent.getComponent(i);\n            if (childName.equals(child.getName())) {\n                return child;\n            } else if (child instanceof Container) {\n                child \u003d findChild((Container) child, childName);\n                if (child !\u003d null) {\n                    return child;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"openHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D);\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importLanguageLibraryDialog.title\"), ContentManager.ContentType.LANGUAGE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.message\", new File(languageLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importFurnitureLibraryDialog.title\"), ContentManager.ContentType.FURNITURE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.message\", new File(furnitureLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importTexturesLibraryDialog.title\"), ContentManager.ContentType.TEXTURES_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.message\", new File(texturesLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.message\", new File(pluginName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"saveHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D, homeName);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in an error message box.\n     */\n    public void showError(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"error.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in a message box.\n     */\n    public void showMessage(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"message.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);\n    }\n\n    /**\n     * Displays the tip matching \u003ccode\u003eactionTipKey\u003c/code\u003e and\n     * returns \u003ccode\u003etrue\u003c/code\u003e if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipTitle\");\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipMessage\");\n        if (message.length() \u003e 0) {\n            JPanel tipPanel \u003d new JPanel(new GridBagLayout());\n            JLabel messageLabel \u003d new JLabel(message);\n            tipPanel.add(messageLabel, new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            // Add a check box that lets user choose whether he wants to display again the tip or not\n            JCheckBox doNotDisplayTipCheckBox \u003d new JCheckBox(SwingTools.getLocalizedLabelText(this.preferences, HomePane.class, \"doNotDisplayTipCheckBox.text\"));\n            if (!OperatingSystem.isMacOSX()) {\n                doNotDisplayTipCheckBox.setMnemonic(KeyStroke.getKeyStroke(this.preferences.getLocalizedString(HomePane.class, \"doNotDisplayTipCheckBox.mnemonic\")).getKeyCode());\n            }\n            tipPanel.add(doNotDisplayTipCheckBox, new GridBagConstraints(0, 1, 1, 1, 0, 1, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));\n            SwingTools.showMessageDialog(this, tipPanel, title, JOptionPane.INFORMATION_MESSAGE, doNotDisplayTipCheckBox);\n            return doNotDisplayTipCheckBox.isSelected();\n        } else {\n            // Ignore untranslated tips\n            return true;\n        }\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn\u0027t want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn\u0027t want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName) {\n        // Retrieve displayed text in buttons and message\n        String message;\n        if (homeName !\u003d null) {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\\\"\" + this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D) + \"\\\"\");\n        } else {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\");\n        }\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.doNotSave\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.cancel\");\n        switch(JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave, cancel }, save)) {\n            // Convert showOptionDialog answer to SaveAnswer enum constants\n            case JOptionPane.YES_OPTION:\n                return SaveAnswer.SAVE;\n            case JOptionPane.NO_OPTION:\n                return SaveAnswer.DO_NOT_SAVE;\n            default:\n                return SaveAnswer.CANCEL;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName) {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.message\", this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D));\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.doNotSave\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave }, doNotSave) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to exit.\n     */\n    public boolean confirmExit() {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.title\");\n        String quit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.quit\");\n        String doNotQuit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.doNotQuit\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { quit, doNotQuit }, doNotQuit) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog() {\n        String messageFormat \u003d this.preferences.getLocalizedString(HomePane.class, \"about.message\");\n        String aboutVersion \u003d this.controller.getVersion();\n        String message \u003d String.format(messageFormat, aboutVersion, System.getProperty(\"java.version\"));\n        // Use an uneditable editor pane to let user select text in dialog\n        JEditorPane messagePane \u003d new JEditorPane(\"text/html\", message);\n        messagePane.setOpaque(false);\n        messagePane.setEditable(false);\n        // Add a listener that displays hyperlinks content in browser\n        messagePane.addHyperlinkListener(new HyperlinkListener() {\n\n            public void hyperlinkUpdate(HyperlinkEvent ev) {\n                if (ev.getEventType() \u003d\u003d HyperlinkEvent.EventType.ACTIVATED) {\n                    SwingTools.showDocumentInBrowser(ev.getURL());\n                }\n            }\n        });\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"about.title\");\n        Icon icon \u003d new ImageIcon(HomePane.class.getResource(this.preferences.getLocalizedString(HomePane.class, \"about.icon\")));\n        JOptionPane.showMessageDialog(this, messagePane, title, JOptionPane.INFORMATION_MESSAGE, icon);\n    }\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or \u003ccode\u003enull\u003c/code\u003e if the user canceled print.\n     *    The \u003ccode\u003ecall\u003c/code\u003e method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable\u003cVoid\u003e showPrintDialog() {\n        PageFormat pageFormat \u003d HomePrintableComponent.getPageFormat(this.home.getPrint());\n        final PrinterJob printerJob \u003d PrinterJob.getPrinterJob();\n        printerJob.setPrintable(new HomePrintableComponent(this.home, this.controller, getFont()), pageFormat);\n        String jobName \u003d this.preferences.getLocalizedString(HomePane.class, \"print.jobName\");\n        if (this.home.getName() !\u003d null) {\n            jobName +\u003d \" - \" + this.controller.getContentManager().getPresentationName(this.home.getName(), ContentManager.ContentType.SWEET_HOME_3D);\n        }\n        printerJob.setJobName(jobName);\n        if (printerJob.printDialog()) {\n            return new Callable\u003cVoid\u003e() {\n\n                public Void call() throws RecorderException {\n                    try {\n                        printerJob.print();\n                        return null;\n                    } catch (InterruptedPrinterException ex) {\n                        throw new InterruptedRecorderException(\"Print interrupted\");\n                    } catch (PrinterException ex) {\n                        throw new RecorderException(\"Couldn\u0027t print\", ex);\n                    }\n                }\n            };\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"printToPDFDialog.title\"), ContentManager.ContentType.PDF, homeName);\n    }\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException {\n        OutputStream outputStream \u003d null;\n        boolean printInterrupted \u003d false;\n        try {\n            outputStream \u003d new FileOutputStream(pdfFile);\n            new HomePDFPrinter(this.home, this.preferences, this.controller, getFont()).write(outputStream);\n        } catch (InterruptedIOException ex) {\n            printInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Print interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n        } finally {\n            try {\n                if (outputStream !\u003d null) {\n                    outputStream.close();\n                }\n                // Delete the file if printing is interrupted\n                if (printInterrupted) {\n                    new File(pdfFile).delete();\n                }\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToSVGDialog.title\"), ContentManager.ContentType.SVG, homeName);\n    }\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException {\n        View planView \u003d this.controller.getPlanController().getView();\n        PlanComponent planComponent;\n        if (planView instanceof PlanComponent) {\n            planComponent \u003d (PlanComponent) planView;\n        } else {\n            planComponent \u003d new PlanComponent(this.home, this.preferences, null);\n        }\n        OutputStream outputStream \u003d null;\n        boolean exportInterrupted \u003d false;\n        try {\n            outputStream \u003d new BufferedOutputStream(new FileOutputStream(svgFile));\n            planComponent.exportToSVG(outputStream);\n        } catch (InterruptedIOException ex) {\n            exportInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Export to \" + svgFile + \" interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n        } finally {\n            if (outputStream !\u003d null) {\n                try {\n                    outputStream.close();\n                    // Delete the file if exporting is interrupted\n                    if (exportInterrupted) {\n                        new File(svgFile).delete();\n                    }\n                } catch (IOException ex) {\n                    throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n                }\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToOBJDialog.title\"), ContentManager.ContentType.OBJ, homeName);\n    }\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException {\n        String header \u003d this.preferences !\u003d null ? this.preferences.getLocalizedString(HomePane.class, \"exportToOBJ.header\", new Date()) : \"\";\n        // Use a clone of home to ignore selection\n        OBJExporter.exportHomeToFile(this.home.clone(), objFile, header);\n    }\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer \u003d null;\n            boolean exportInterrupted \u003d false;\n            try {\n                writer \u003d new OBJWriter(objFile, header, -1);\n                List\u003cSelectable\u003e emptySelection \u003d Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() \u003e 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds \u003d getExportedHomeBounds(home);\n                    Ground3D groundNode \u003d new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i \u003d 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode \u003d new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i \u003d 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode \u003d new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i \u003d 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode \u003d new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted \u003d true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer !\u003d null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns \u003ccode\u003ehome\u003c/code\u003e bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds \u003d updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds \u003d\u003d null) {\n                        homeBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given \u003ccode\u003efurniture\u003c/code\u003e.\n         */\n        private static List\u003cHomePieceOfFurniture\u003e getVisibleFurniture(List\u003cHomePieceOfFurniture\u003e furniture) {\n            List\u003cHomePieceOfFurniture\u003e visibleFurniture \u003d new ArrayList\u003cHomePieceOfFurniture\u003e(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() \u0026\u0026 (piece.getLevel() \u003d\u003d null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates \u003ccode\u003eobjectBounds\u003c/code\u003e to include the bounds of \u003ccode\u003eitems\u003c/code\u003e.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection\u003c? extends Selectable\u003e items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() \u003d\u003d null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds \u003d\u003d null) {\n                            objectBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection() {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.title\");\n        String delete \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.delete\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.cancel\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { delete, cancel }, cancel) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or \u003ccode\u003enull\u003c/code\u003e if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName) {\n        // Retrieve displayed text in dialog\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.title\");\n        List\u003cCamera\u003e storedCameras \u003d this.home.getStoredCameras();\n        JComponent cameraNameChooser;\n        JTextComponent cameraNameTextComponent;\n        if (storedCameras.isEmpty()) {\n            cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n        } else {\n            // If cameras are already stored in home propose an editable combo box to user\n            // to let him choose more easily an existing one if he want to overwrite it\n            String[] storedCameraNames \u003d new String[storedCameras.size()];\n            for (int i \u003d 0; i \u003c storedCameraNames.length; i++) {\n                storedCameraNames[i] \u003d storedCameras.get(i).getName();\n            }\n            JComboBox cameraNameComboBox \u003d new JComboBox(storedCameraNames);\n            cameraNameComboBox.setEditable(true);\n            cameraNameComboBox.getEditor().setItem(cameraName);\n            Component editorComponent \u003d cameraNameComboBox.getEditor().getEditorComponent();\n            if (editorComponent instanceof JTextComponent) {\n                cameraNameTextComponent \u003d (JTextComponent) editorComponent;\n                cameraNameChooser \u003d cameraNameComboBox;\n            } else {\n                cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n            }\n        }\n        JPanel cameraNamePanel \u003d new JPanel(new BorderLayout(2, 2));\n        cameraNamePanel.add(new JLabel(message), BorderLayout.NORTH);\n        cameraNamePanel.add(cameraNameChooser, BorderLayout.SOUTH);\n        if (SwingTools.showConfirmDialog(this, cameraNamePanel, title, cameraNameTextComponent) \u003d\u003d JOptionPane.OK_OPTION) {\n            return cameraNameTextComponent.getText();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty() {\n        try {\n            Clipboard clipboard \u003d getToolkit().getSystemClipboard();\n            return !(clipboard.isDataFlavorAvailable(HomeTransferableList.HOME_FLAVOR) || getToolkit().getSystemClipboard().isDataFlavorAvailable(DataFlavor.javaFileListFlavor));\n        } catch (AccessControlException ex) {\n            // AWT uses a private clipboard that won\u0027t be empty as soon as a copy action will be done\n            return this.clipboardEmpty;\n        }\n    }\n\n    /**\n     * Execute \u003ccode\u003erunnable\u003c/code\u003e asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable) {\n        EventQueue.invokeLater(runnable);\n    }\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction \u003d pluginAction;\n            this.propertyChangeSupport \u003d new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName \u003d ev.getPropertyName();\n                    Object oldValue \u003d ev.getOldValue();\n                    Object newValue \u003d ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don\u0027t check new value is null !)\n                        if (newValue !\u003d null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue !\u003d null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue !\u003d null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon \u003d (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon !\u003d null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic \u003d (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic !\u003d null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat\u003cT extends Selectable\u003e {\n\n        public abstract String format(T item);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "HomePane",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_5Test.java",
    "test_prompt": "// HomePane_5Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains ten unit test cases for the {@link HomePane#showImportTexturesLibraryDialog()} method.\n*/\nclass HomePane_5Test {",
    "method_signature": "showImportTexturesLibraryDialog()",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// HomePane.java\n/*\n * HomePane.java 15 mai 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY \u003d \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY \u003d \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY \u003d \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY \u003d \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY \u003d \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT \u003d 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty \u003d true;\n\n    private ActionMap menuActionMap;\n\n    private List\u003cAction\u003e pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n        this.home \u003d home;\n        this.preferences \u003d preferences;\n        this.controller \u003d controller;\n        JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n        ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);\n        createActions(home, preferences, controller);\n        createMenuActions(preferences, controller);\n        createPluginActions(controller instanceof HomePluginController ? ((HomePluginController) controller).getPlugins() : null);\n        createTransferHandlers(home, controller);\n        addHomeListener(home);\n        addLevelVisibilityListener(home);\n        addLanguageListener(preferences);\n        addPlanControllerListener(controller.getPlanController());\n        addFocusListener();\n        updateFocusTraversalPolicy();\n        JMenuBar homeMenuBar \u003d createMenuBar(home, preferences, controller);\n        setJMenuBar(homeMenuBar);\n        Container contentPane \u003d getContentPane();\n        contentPane.add(createToolBar(home), BorderLayout.NORTH);\n        contentPane.add(createMainPane(home, preferences, controller));\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            // Under Mac OS X 10.5, add some dummy labels at left and right borders\n            // to avoid the tool bar to be attached on these borders\n            // (segmented buttons created on this system aren\u0027t properly rendered\n            // when they are aligned vertically)\n            contentPane.add(new JLabel(), BorderLayout.WEST);\n            contentPane.add(new JLabel(), BorderLayout.EAST);\n        }\n        disableMenuItemsDuringDragAndDrop(controller.getPlanController().getView(), homeMenuBar);\n        // Change component orientation\n        applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller) {\n        createAction(ActionType.NEW_HOME, preferences, controller, \"newHome\");\n        createAction(ActionType.OPEN, preferences, controller, \"open\");\n        createAction(ActionType.DELETE_RECENT_HOMES, preferences, controller, \"deleteRecentHomes\");\n        createAction(ActionType.CLOSE, preferences, controller, \"close\");\n        createAction(ActionType.SAVE, preferences, controller, \"save\");\n        createAction(ActionType.SAVE_AS, preferences, controller, \"saveAs\");\n        createAction(ActionType.SAVE_AND_COMPRESS, preferences, controller, \"saveAndCompress\");\n        createAction(ActionType.PAGE_SETUP, preferences, controller, \"setupPage\");\n        createAction(ActionType.PRINT_PREVIEW, preferences, controller, \"previewPrint\");\n        createAction(ActionType.PRINT, preferences, controller, \"print\");\n        createAction(ActionType.PRINT_TO_PDF, preferences, controller, \"printToPDF\");\n        createAction(ActionType.PREFERENCES, preferences, controller, \"editPreferences\");\n        createAction(ActionType.EXIT, preferences, controller, \"exit\");\n        createAction(ActionType.UNDO, preferences, controller, \"undo\");\n        createAction(ActionType.REDO, preferences, controller, \"redo\");\n        createClipboardAction(ActionType.CUT, preferences, TransferHandler.getCutAction(), true);\n        createClipboardAction(ActionType.COPY, preferences, TransferHandler.getCopyAction(), true);\n        createClipboardAction(ActionType.PASTE, preferences, TransferHandler.getPasteAction(), false);\n        createAction(ActionType.DELETE, preferences, controller, \"delete\");\n        createAction(ActionType.SELECT_ALL, preferences, controller, \"selectAll\");\n        createAction(ActionType.ADD_HOME_FURNITURE, preferences, controller, \"addHomeFurniture\");\n        FurnitureController furnitureController \u003d controller.getFurnitureController();\n        createAction(ActionType.DELETE_HOME_FURNITURE, preferences, furnitureController, \"deleteSelection\");\n        createAction(ActionType.MODIFY_FURNITURE, preferences, controller, \"modifySelectedFurniture\");\n        createAction(ActionType.GROUP_FURNITURE, preferences, furnitureController, \"groupSelectedFurniture\");\n        createAction(ActionType.UNGROUP_FURNITURE, preferences, furnitureController, \"ungroupSelectedFurniture\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_TOP, preferences, furnitureController, \"alignSelectedFurnitureOnTop\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BOTTOM, preferences, furnitureController, \"alignSelectedFurnitureOnBottom\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT, preferences, furnitureController, \"alignSelectedFurnitureOnLeft\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT, preferences, furnitureController, \"alignSelectedFurnitureOnRight\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnFrontSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnBackSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnLeftSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnRightSide\");\n        createAction(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, preferences, furnitureController, \"alignSelectedFurnitureSideBySide\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, preferences, furnitureController, \"distributeSelectedFurnitureHorizontally\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, preferences, furnitureController, \"distributeSelectedFurnitureVertically\");\n        final HomeController3D homeController3D \u003d controller.getHomeController3D();\n        if (homeController3D.getView() !\u003d null) {\n            createAction(ActionType.IMPORT_FURNITURE, preferences, controller, \"importFurniture\");\n        }\n        createAction(ActionType.IMPORT_FURNITURE_LIBRARY, preferences, controller, \"importFurnitureLibrary\");\n        createAction(ActionType.IMPORT_TEXTURES_LIBRARY, preferences, controller, \"importTexturesLibrary\");\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_NAME, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_X, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_Y, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_COLOR, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TYPE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER, preferences, furnitureController, \"toggleFurnitureSortOrder\");\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_NAME, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_X, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_Y, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_COLOR, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        PlanController planController \u003d controller.getPlanController();\n        if (planController.getView() !\u003d null) {\n            ButtonGroup modeGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.SELECT, planController.getMode() \u003d\u003d PlanController.Mode.SELECTION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.SELECTION);\n            createToggleAction(ActionType.PAN, planController.getMode() \u003d\u003d PlanController.Mode.PANNING, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.PANNING);\n            createToggleAction(ActionType.CREATE_WALLS, planController.getMode() \u003d\u003d PlanController.Mode.WALL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.WALL_CREATION);\n            createToggleAction(ActionType.CREATE_ROOMS, planController.getMode() \u003d\u003d PlanController.Mode.ROOM_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.ROOM_CREATION);\n            createToggleAction(ActionType.CREATE_DIMENSION_LINES, planController.getMode() \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.DIMENSION_LINE_CREATION);\n            createToggleAction(ActionType.CREATE_LABELS, planController.getMode() \u003d\u003d PlanController.Mode.LABEL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.LABEL_CREATION);\n            createAction(ActionType.DELETE_SELECTION, preferences, planController, \"deleteSelection\");\n            createAction(ActionType.LOCK_BASE_PLAN, preferences, planController, \"lockBasePlan\");\n            createAction(ActionType.UNLOCK_BASE_PLAN, preferences, planController, \"unlockBasePlan\");\n            createAction(ActionType.MODIFY_COMPASS, preferences, planController, \"modifyCompass\");\n            createAction(ActionType.MODIFY_WALL, preferences, planController, \"modifySelectedWalls\");\n            createAction(ActionType.MODIFY_ROOM, preferences, planController, \"modifySelectedRooms\");\n            createAction(ActionType.MODIFY_LABEL, preferences, planController, \"modifySelectedLabels\");\n            createAction(ActionType.INCREASE_TEXT_SIZE, preferences, planController, \"increaseTextSize\");\n            createAction(ActionType.DECREASE_TEXT_SIZE, preferences, planController, \"decreaseTextSize\");\n            // Use special toggle models for bold and italic check box menu items and tool bar buttons\n            // that are selected texts in home selected items are all bold or italic\n            Action toggleBoldAction \u003d createAction(ActionType.TOGGLE_BOLD_STYLE, preferences, planController, \"toggleBoldStyle\");\n            toggleBoldAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createBoldStyleToggleModel(home, preferences));\n            Action toggleItalicAction \u003d createAction(ActionType.TOGGLE_ITALIC_STYLE, preferences, planController, \"toggleItalicStyle\");\n            toggleItalicAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createItalicStyleToggleModel(home, preferences));\n            createAction(ActionType.REVERSE_WALL_DIRECTION, preferences, planController, \"reverseSelectedWallsDirection\");\n            createAction(ActionType.SPLIT_WALL, preferences, planController, \"splitSelectedWall\");\n            createAction(ActionType.IMPORT_BACKGROUND_IMAGE, preferences, controller, \"importBackgroundImage\");\n            createAction(ActionType.MODIFY_BACKGROUND_IMAGE, preferences, controller, \"modifyBackgroundImage\");\n            createAction(ActionType.HIDE_BACKGROUND_IMAGE, preferences, controller, \"hideBackgroundImage\");\n            createAction(ActionType.SHOW_BACKGROUND_IMAGE, preferences, controller, \"showBackgroundImage\");\n            createAction(ActionType.DELETE_BACKGROUND_IMAGE, preferences, controller, \"deleteBackgroundImage\");\n            createAction(ActionType.ADD_LEVEL, preferences, planController, \"addLevel\");\n            createAction(ActionType.MODIFY_LEVEL, preferences, planController, \"modifySelectedLevel\");\n            createAction(ActionType.DELETE_LEVEL, preferences, planController, \"deleteSelectedLevel\");\n            createAction(ActionType.ZOOM_IN, preferences, controller, \"zoomIn\");\n            createAction(ActionType.ZOOM_OUT, preferences, controller, \"zoomOut\");\n            createAction(ActionType.EXPORT_TO_SVG, preferences, controller, \"exportToSVG\");\n        }\n        if (homeController3D.getView() !\u003d null) {\n            ButtonGroup viewGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera(), viewGroup, preferences, homeController3D, \"viewFromTop\");\n            createToggleAction(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera(), viewGroup, preferences, homeController3D, \"viewFromObserver\");\n            createAction(ActionType.MODIFY_OBSERVER, preferences, planController, \"modifyObserverCamera\");\n            createAction(ActionType.STORE_POINT_OF_VIEW, preferences, controller, \"storeCamera\");\n            getActionMap().put(ActionType.DETACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.DETACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.detachView(homeController3D.getView());\n                }\n            });\n            getActionMap().put(ActionType.ATTACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.ATTACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.attachView(homeController3D.getView());\n                }\n            });\n            ButtonGroup displayLevelGroup \u003d new ButtonGroup();\n            boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n            createToggleAction(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displayAllLevels\");\n            createToggleAction(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displaySelectedLevel\");\n            createAction(ActionType.MODIFY_3D_ATTRIBUTES, preferences, homeController3D, \"modifyAttributes\");\n            createAction(ActionType.CREATE_PHOTO, preferences, controller, \"createPhoto\");\n            createAction(ActionType.CREATE_VIDEO, preferences, controller, \"createVideo\");\n            createAction(ActionType.EXPORT_TO_OBJ, preferences, controller, \"exportToOBJ\");\n        }\n        createAction(ActionType.HELP, preferences, controller, \"help\");\n        createAction(ActionType.ABOUT, preferences, controller, \"about\");\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object that calls on \u003ccode\u003econtroller\u003c/code\u003e a given\n     * \u003ccode\u003emethod\u003c/code\u003e with its \u003ccode\u003eparameters\u003c/code\u003e. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        try {\n            ControllerAction action \u003d new ControllerAction(preferences, HomePane.class, actionType.name(), controller, method, parameters);\n            getActionMap().put(actionType, action);\n            return action;\n        } catch (NoSuchMethodException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object associated with a \u003ccode\u003eToggleButtonModel\u003c/code\u003e instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        Action action \u003d createAction(actionType, preferences, controller, method, parameters);\n        JToggleButton.ToggleButtonModel toggleButtonModel \u003d new JToggleButton.ToggleButtonModel();\n        toggleButtonModel.setSelected(selected);\n        if (group !\u003d null) {\n            toggleButtonModel.setGroup(group);\n        }\n        action.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, toggleButtonModel);\n        return action;\n    }\n\n    /**\n     * Creates a \u003ccode\u003eReourceAction\u003c/code\u003e object that calls\n     * \u003ccode\u003eactionPerfomed\u003c/code\u003e method on a given\n     * existing \u003ccode\u003eclipboardAction\u003c/code\u003e with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction) {\n        getActionMap().put(actionType, new ResourceAction(preferences, HomePane.class, actionType.name()) {\n\n            public void actionPerformed(ActionEvent ev) {\n                if (copyAction) {\n                    clipboardEmpty \u003d false;\n                }\n                ev \u003d new ActionEvent(lastFocusedComponent, ActionEvent.ACTION_PERFORMED, null);\n                clipboardAction.actionPerformed(ev);\n            }\n        });\n    }\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller) {\n        this.menuActionMap \u003d new ActionMap();\n        createMenuAction(preferences, MenuActionType.FILE_MENU);\n        createMenuAction(preferences, MenuActionType.EDIT_MENU);\n        createMenuAction(preferences, MenuActionType.FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.PLAN_MENU);\n        createMenuAction(preferences, MenuActionType.VIEW_3D_MENU);\n        createMenuAction(preferences, MenuActionType.HELP_MENU);\n        createMenuAction(preferences, MenuActionType.OPEN_RECENT_HOME_MENU);\n        createMenuAction(preferences, MenuActionType.SORT_HOME_FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.ALIGN_OR_DISTRIBUTE_MENU);\n        createMenuAction(preferences, MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU);\n        createMenuAction(preferences, MenuActionType.MODIFY_TEXT_STYLE);\n        createMenuAction(preferences, MenuActionType.GO_TO_POINT_OF_VIEW);\n        createMenuAction(preferences, MenuActionType.SELECT_OBJECT_MENU);\n    }\n\n    /**\n     * Creates a \u003ccode\u003eResourceAction\u003c/code\u003e object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action) {\n        this.menuActionMap.put(action, new ResourceAction(preferences, HomePane.class, action.name(), true));\n    }\n\n    /**\n     * Creates the Swing actions matching each actions available in \u003ccode\u003eplugins\u003c/code\u003e.\n     */\n    private void createPluginActions(List\u003cPlugin\u003e plugins) {\n        this.pluginActions \u003d new ArrayList\u003cAction\u003e();\n        if (plugins !\u003d null) {\n            for (Plugin plugin : plugins) {\n                for (final PluginAction pluginAction : plugin.getActions()) {\n                    // Create a Swing action adapter to plug-in action\n                    this.pluginActions.add(new ActionAdapter(pluginAction));\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller) {\n        this.catalogTransferHandler \u003d new FurnitureCatalogTransferHandler(controller.getContentManager(), controller.getFurnitureCatalogController(), controller.getFurnitureController());\n        this.furnitureTransferHandler \u003d new FurnitureTransferHandler(home, controller.getContentManager(), controller);\n        this.planTransferHandler \u003d new PlanTransferHandler(home, controller.getContentManager(), controller);\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home) {\n        home.addPropertyChangeListener(Home.Property.CAMERA, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera());\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera());\n            }\n        });\n    }\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected) {\n        ((JToggleButton.ToggleButtonModel) getActionMap().get(actionType).getValue(ResourceAction.TOGGLE_BUTTON_MODEL)).setSelected(selected);\n    }\n\n    /**\n     * Adds listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home) {\n        home.getEnvironment().addPropertyChangeListener(HomeEnvironment.Property.ALL_LEVELS_VISIBLE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n                setToggleButtonModelSelected(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible);\n                setToggleButtonModelSelected(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible);\n            }\n        });\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003epreferences\u003c/code\u003e to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences) {\n        preferences.addPropertyChangeListener(UserPreferences.Property.LANGUAGE, new LanguageChangeListener(this));\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003eplanController\u003c/code\u003e to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController) {\n        planController.addPropertyChangeListener(PlanController.Property.MODE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                Mode mode \u003d planController.getMode();\n                setToggleButtonModelSelected(ActionType.SELECT, mode \u003d\u003d PlanController.Mode.SELECTION);\n                setToggleButtonModelSelected(ActionType.PAN, mode \u003d\u003d PlanController.Mode.PANNING);\n                setToggleButtonModelSelected(ActionType.CREATE_WALLS, mode \u003d\u003d PlanController.Mode.WALL_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_ROOMS, mode \u003d\u003d PlanController.Mode.ROOM_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_DIMENSION_LINES, mode \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_LABELS, mode \u003d\u003d PlanController.Mode.LABEL_CREATION);\n            }\n        });\n    }\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener() {\n        KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"currentFocusCycleRoot\", new FocusCycleRootChangeListener(this));\n    }\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener \u003d null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener \u003d new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent !\u003d null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent \u003d homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode !\u003d null \u0026\u0026 (lostFocusedComponent \u003d\u003d homePane.controller.getPlanController().getView() || ev.getNewValue() \u003d\u003d null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode \u003d null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() !\u003d null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent \u003d (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) \u0026\u0026 gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews \u003d { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view !\u003d null \u0026\u0026 SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent \u003d (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener \u003d new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController \u003d controller.getPlanController();\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 (ev.getModifiers() \u0026 (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) \u003d\u003d 0 \u0026\u0026 getActionMap().get(ActionType.PAN).getValue(Action.NAME) !\u003d null \u0026\u0026 planController.getMode() !\u003d PlanController.Mode.PANNING \u0026\u0026 !planController.isModificationState() \u0026\u0026 SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) \u0026\u0026 !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode \u003d planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 previousPlanControllerMode !\u003d null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode \u003d null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap \u003d getActionMap();\n            Action[] specialKeyActions \u003d { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask \u003d KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke \u003d (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() \u003d\u003d actionKeyStroke.getKeyChar() \u0026\u0026 (ev.getModifiers() \u0026 modifiersMask) \u003d\u003d (actionKeyStroke.getModifiers() \u0026 modifiersMask) \u0026\u0026 specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy() {\n        setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {\n\n            @Override\n            protected boolean accept(Component component) {\n                if (super.accept(component)) {\n                    for (JSplitPane splitPane; (splitPane \u003d (JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, component)) !\u003d null; component \u003d splitPane) {\n                        if (isChildComponentInvisible(splitPane, component)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n        setFocusTraversalPolicyProvider(true);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the top or the bottom component of the \u003ccode\u003esplitPane\u003c/code\u003e\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent) {\n        return (SwingUtilities.isDescendingFrom(childComponent, splitPane.getTopComponent()) \u0026\u0026 (splitPane.getTopComponent().getWidth() \u003d\u003d 0 || splitPane.getTopComponent().getHeight() \u003d\u003d 0)) || (SwingUtilities.isDescendingFrom(childComponent, splitPane.getBottomComponent()) \u0026\u0026 (splitPane.getBottomComponent().getWidth() \u003d\u003d 0 || splitPane.getBottomComponent().getHeight() \u003d\u003d 0));\n    }\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller) {\n        // Create File menu\n        JMenu fileMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FILE_MENU));\n        addActionToMenu(ActionType.NEW_HOME, fileMenu);\n        addActionToMenu(ActionType.OPEN, fileMenu);\n        final JMenu openRecentHomeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.OPEN_RECENT_HOME_MENU));\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n        openRecentHomeMenu.addMenuListener(new MenuListener() {\n\n            public void menuSelected(MenuEvent ev) {\n                updateOpenRecentHomeMenu(openRecentHomeMenu, controller);\n            }\n\n            public void menuCanceled(MenuEvent ev) {\n            }\n\n            public void menuDeselected(MenuEvent ev) {\n            }\n        });\n        fileMenu.add(openRecentHomeMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.CLOSE, fileMenu);\n        addActionToMenu(ActionType.SAVE, fileMenu);\n        addActionToMenu(ActionType.SAVE_AS, fileMenu);\n        addActionToMenu(ActionType.SAVE_AND_COMPRESS, fileMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.PAGE_SETUP, fileMenu);\n        addActionToMenu(ActionType.PRINT_PREVIEW, fileMenu);\n        addActionToMenu(ActionType.PRINT, fileMenu);\n        // Don\u0027t add PRINT_TO_PDF, PREFERENCES and EXIT menu items under Mac OS X,\n        // because PREFERENCES and EXIT items are displayed in application menu\n        // and PRINT_TO_PDF is available in standard Mac OS X Print dialog\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.PRINT_TO_PDF, fileMenu);\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.PREFERENCES, fileMenu);\n        }\n        // Create Edit menu\n        JMenu editMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.EDIT_MENU));\n        addActionToMenu(ActionType.UNDO, editMenu);\n        addActionToMenu(ActionType.REDO, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.CUT, editMenu);\n        addActionToMenu(ActionType.COPY, editMenu);\n        addActionToMenu(ActionType.PASTE, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.DELETE, editMenu);\n        addActionToMenu(ActionType.SELECT_ALL, editMenu);\n        // Create Furniture menu\n        JMenu furnitureMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FURNITURE_MENU));\n        addActionToMenu(ActionType.ADD_HOME_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.MODIFY_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.GROUP_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.UNGROUP_FURNITURE, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.IMPORT_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_FURNITURE_LIBRARY, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_TEXTURES_LIBRARY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        furnitureMenu.add(createFurnitureSortMenu(home, preferences));\n        furnitureMenu.add(createFurnitureDisplayPropertyMenu(home, preferences));\n        // Create Plan menu\n        JMenu planMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.PLAN_MENU));\n        addToggleActionToMenu(ActionType.SELECT, true, planMenu);\n        addToggleActionToMenu(ActionType.PAN, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_WALLS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_ROOMS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_DIMENSION_LINES, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_LABELS, true, planMenu);\n        planMenu.addSeparator();\n        JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, false);\n        if (lockUnlockBasePlanMenuItem !\u003d null) {\n            planMenu.add(lockUnlockBasePlanMenuItem);\n        }\n        addActionToMenu(ActionType.MODIFY_COMPASS, planMenu);\n        addActionToMenu(ActionType.MODIFY_WALL, planMenu);\n        addActionToMenu(ActionType.REVERSE_WALL_DIRECTION, planMenu);\n        addActionToMenu(ActionType.SPLIT_WALL, planMenu);\n        addActionToMenu(ActionType.MODIFY_ROOM, planMenu);\n        addActionToMenu(ActionType.MODIFY_LABEL, planMenu);\n        planMenu.add(createTextStyleMenu(home, preferences, false));\n        planMenu.addSeparator();\n        JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, false);\n        if (importModifyBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(importModifyBackgroundImageMenuItem);\n        }\n        JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, false);\n        if (hideShowBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(hideShowBackgroundImageMenuItem);\n        }\n        addActionToMenu(ActionType.DELETE_BACKGROUND_IMAGE, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ADD_LEVEL, planMenu);\n        addActionToMenu(ActionType.MODIFY_LEVEL, planMenu);\n        addActionToMenu(ActionType.DELETE_LEVEL, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ZOOM_IN, planMenu);\n        addActionToMenu(ActionType.ZOOM_OUT, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_SVG, planMenu);\n        // Create 3D Preview menu\n        JMenu preview3DMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.VIEW_3D_MENU));\n        addToggleActionToMenu(ActionType.VIEW_FROM_TOP, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.VIEW_FROM_OBSERVER, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_OBSERVER, preview3DMenu);\n        addActionToMenu(ActionType.STORE_POINT_OF_VIEW, preview3DMenu);\n        JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n        if (goToPointOfViewMenu !\u003d null) {\n            preview3DMenu.add(goToPointOfViewMenu);\n        }\n        preview3DMenu.addSeparator();\n        JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, false);\n        if (attachDetach3DViewMenuItem !\u003d null) {\n            preview3DMenu.add(attachDetach3DViewMenuItem);\n        }\n        addToggleActionToMenu(ActionType.DISPLAY_ALL_LEVELS, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_3D_ATTRIBUTES, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.CREATE_PHOTO, preview3DMenu);\n        addActionToMenu(ActionType.CREATE_VIDEO, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_OBJ, preview3DMenu);\n        // Create Help menu\n        JMenu helpMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.HELP_MENU));\n        addActionToMenu(ActionType.HELP, helpMenu);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.ABOUT, helpMenu);\n        }\n        // Add menus to menu bar\n        JMenuBar menuBar \u003d new JMenuBar();\n        menuBar.add(fileMenu);\n        menuBar.add(editMenu);\n        menuBar.add(furnitureMenu);\n        if (controller.getPlanController().getView() !\u003d null) {\n            menuBar.add(planMenu);\n        }\n        if (controller.getHomeController3D().getView() !\u003d null) {\n            menuBar.add(preview3DMenu);\n        }\n        menuBar.add(helpMenu);\n        // Add plugin actions menu items\n        for (Action pluginAction : this.pluginActions) {\n            String pluginMenu \u003d (String) pluginAction.getValue(PluginAction.Property.MENU.name());\n            if (pluginMenu !\u003d null) {\n                boolean pluginActionAdded \u003d false;\n                for (int i \u003d 0; i \u003c menuBar.getMenuCount(); i++) {\n                    JMenu menu \u003d menuBar.getMenu(i);\n                    if (menu.getText().equals(pluginMenu)) {\n                        // Add menu item to existing menu\n                        menu.addSeparator();\n                        menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                        pluginActionAdded \u003d true;\n                        break;\n                    }\n                }\n                if (!pluginActionAdded) {\n                    // Create missing menu before last menu\n                    JMenu menu \u003d new JMenu(pluginMenu);\n                    menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                    menuBar.add(menu, menuBar.getMenuCount() - 1);\n                }\n            }\n        }\n        // Add EXIT action at end to ensure it\u0027s the last item of file menu\n        if (!OperatingSystem.isMacOSX()) {\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.EXIT, fileMenu);\n        }\n        removeUselessSeparatorsAndEmptyMenus(menuBar);\n        return menuBar;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu) {\n        addActionToMenu(actionType, false, menu);\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu) {\n        addToggleActionToMenu(actionType, false, radioButton, menu);\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, popup, radioButton));\n        }\n    }\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton) {\n        JMenuItem menuItem;\n        if (radioButton) {\n            menuItem \u003d new JRadioButtonMenuItem();\n        } else {\n            menuItem \u003d new JCheckBoxMenuItem();\n        }\n        // Configure model\n        menuItem.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n        // Configure menu item action after setting its model to avoid losing its mnemonic\n        menuItem.setAction(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        return menuItem;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(new ResourceAction.PopupMenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, true, radioButton));\n        }\n    }\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component) {\n        for (int i \u003d component.getComponentCount() - 1; i \u003e\u003d 0; i--) {\n            Component child \u003d component.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d component.getComponentCount() - 1 || component.getComponent(i - 1) instanceof JSeparator)) {\n                component.remove(i);\n            } else if (child instanceof JMenu) {\n                removeUselessSeparatorsAndEmptyMenus(((JMenu) child).getPopupMenu());\n            }\n            if (child instanceof JMenu \u0026\u0026 (((JMenu) child).getMenuComponentCount() \u003d\u003d 0 || ((JMenu) child).getMenuComponentCount() \u003d\u003d 1 \u0026\u0026 ((JMenu) child).getMenuComponent(0) instanceof JSeparator)) {\n                component.remove(i);\n            }\n        }\n        // Don\u0027t let a menu start with a separator\n        if (component.getComponentCount() \u003e 0 \u0026\u0026 component.getComponent(0) instanceof JSeparator) {\n            component.remove(0);\n        }\n    }\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu alignOrDistributeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.ALIGN_OR_DISTRIBUTE_MENU));\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, popup, alignOrDistributeMenu);\n        return alignOrDistributeMenu;\n    }\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Sort submenu\n        JMenu sortMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.SORT_HOME_FURNITURE_MENU));\n        // Map sort furniture properties to sort actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e sortActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, sortActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_NAME, sortActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, sortActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, sortActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, sortActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_X, sortActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_Y, sortActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, sortActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, sortActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, sortActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_COLOR, sortActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, sortActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, sortActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TYPE, sortActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, sortActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE, sortActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, sortActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu and make them share the same radio button group\n        ButtonGroup sortButtonGroup \u003d new ButtonGroup();\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : sortActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action sortAction \u003d entry.getValue();\n            JRadioButtonMenuItem sortMenuItem \u003d new JRadioButtonMenuItem();\n            // Use a special model for sort radio button menu item that is selected if\n            // home is sorted on furnitureProperty criterion\n            sortMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return furnitureProperty \u003d\u003d home.getFurnitureSortedProperty();\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            sortMenuItem.setAction(new ResourceAction.MenuItemAction(sortAction));\n            sortMenu.add(sortMenuItem);\n            sortButtonGroup.add(sortMenuItem);\n        }\n        Action sortOrderAction \u003d getActionMap().get(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER);\n        if (sortOrderAction.getValue(Action.NAME) !\u003d null) {\n            sortMenu.addSeparator();\n            JCheckBoxMenuItem sortOrderCheckBoxMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for sort order check box menu item that is selected depending on\n            // home sort order property\n            sortOrderCheckBoxMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.isFurnitureDescendingSorted();\n                }\n            });\n            sortOrderCheckBoxMenuItem.setAction(new ResourceAction.MenuItemAction(sortOrderAction));\n            sortMenu.add(sortOrderCheckBoxMenuItem);\n        }\n        return sortMenu;\n    }\n\n    /**\n     * Adds to \u003ccode\u003eactions\u003c/code\u003e the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToMap(ActionType actionType, Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e actions, HomePieceOfFurniture.SortableProperty key) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            actions.put(key, action);\n        }\n    }\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Display property submenu\n        JMenu displayPropertyMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU));\n        // Map displayProperty furniture properties to displayProperty actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e displayPropertyActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, displayPropertyActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_NAME, displayPropertyActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, displayPropertyActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_X, displayPropertyActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_Y, displayPropertyActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, displayPropertyActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_COLOR, displayPropertyActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : displayPropertyActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action displayPropertyAction \u003d entry.getValue();\n            JCheckBoxMenuItem displayPropertyMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for displayProperty check box menu item that is selected if\n            // home furniture visible properties contains furnitureProperty\n            displayPropertyMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.getFurnitureVisibleProperties().contains(furnitureProperty);\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            displayPropertyMenuItem.setAction(displayPropertyAction);\n            displayPropertyMenu.add(displayPropertyMenuItem);\n        }\n        return displayPropertyMenu;\n    }\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem lockUnlockBasePlanMenuItem \u003d new JMenuItem(createLockUnlockBasePlanAction(home, popup));\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanMenuItem.setAction(createLockUnlockBasePlanAction(home, popup));\n                }\n            });\n            return lockUnlockBasePlanMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup) {\n        ActionType actionType \u003d home.isBasePlanLocked() ? ActionType.UNLOCK_BASE_PLAN : ActionType.LOCK_BASE_PLAN;\n        Action action \u003d getActionMap().get(actionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action);\n    }\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JButton lockUnlockBasePlanButton \u003d new JButton(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n            lockUnlockBasePlanButton.setBorderPainted(false);\n            lockUnlockBasePlanButton.setContentAreaFilled(false);\n            lockUnlockBasePlanButton.setFocusable(false);\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanButton.setAction(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n                }\n            });\n            return lockUnlockBasePlanButton;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu modifyTextStyleMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.MODIFY_TEXT_STYLE));\n        addActionToMenu(ActionType.INCREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        addActionToMenu(ActionType.DECREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        modifyTextStyleMenu.addSeparator();\n        addToggleActionToMenu(ActionType.TOGGLE_BOLD_STYLE, popup, false, modifyTextStyleMenu);\n        addToggleActionToMenu(ActionType.TOGGLE_ITALIC_STYLE, popup, false, modifyTextStyleMenu);\n        return modifyTextStyleMenu;\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all bold or not\n                Boolean selectionBoldStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean bold;\n                    if (item instanceof Label) {\n                        bold \u003d isItemTextBold(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        bold \u003d isItemTextBold(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        bold \u003d isItemTextBold(room, room.getNameStyle());\n                        if (bold !\u003d isItemTextBold(room, room.getAreaStyle())) {\n                            bold \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        bold \u003d isItemTextBold(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionBoldStyle \u003d\u003d null) {\n                        selectionBoldStyle \u003d bold;\n                    } else if (bold \u003d\u003d null || !selectionBoldStyle.equals(bold)) {\n                        selectionBoldStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionBoldStyle !\u003d null \u0026\u0026 selectionBoldStyle;\n            }\n\n            private boolean isItemTextBold(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isBold();\n            }\n        };\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all italic or not\n                Boolean selectionItalicStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean italic;\n                    if (item instanceof Label) {\n                        italic \u003d isItemTextItalic(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        italic \u003d isItemTextItalic(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        italic \u003d isItemTextItalic(room, room.getNameStyle());\n                        if (italic !\u003d isItemTextItalic(room, room.getAreaStyle())) {\n                            italic \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        italic \u003d isItemTextItalic(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionItalicStyle \u003d\u003d null) {\n                        selectionItalicStyle \u003d italic;\n                    } else if (italic \u003d\u003d null || !selectionItalicStyle.equals(italic)) {\n                        selectionItalicStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionItalicStyle !\u003d null \u0026\u0026 selectionItalicStyle;\n            }\n\n            private boolean isItemTextItalic(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isItalic();\n            }\n        };\n    }\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action importBackgroundImageAction \u003d actionMap.get(ActionType.IMPORT_BACKGROUND_IMAGE);\n        Action modifyBackgroundImageAction \u003d actionMap.get(ActionType.MODIFY_BACKGROUND_IMAGE);\n        if (importBackgroundImageAction !\u003d null \u0026\u0026 importBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 modifyBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem importModifyBackgroundImageMenuItem \u003d new JMenuItem(createImportModifyBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    importModifyBackgroundImageMenuItem.setAction(createImportModifyBackgroundImageAction(home, popup));\n                }\n            });\n            return importModifyBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener) {\n        home.addPropertyChangeListener(Home.Property.BACKGROUND_IMAGE, listener);\n        home.addPropertyChangeListener(Home.Property.SELECTED_LEVEL, listener);\n        final PropertyChangeListener levelChangeListener \u003d new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                if (Level.Property.BACKGROUND_IMAGE.name().equals(ev.getPropertyName())) {\n                    listener.propertyChange(ev);\n                }\n            }\n        };\n        for (Level level : this.home.getLevels()) {\n            level.addPropertyChangeListener(levelChangeListener);\n        }\n        this.home.addLevelsListener(new CollectionListener\u003cLevel\u003e() {\n\n            public void collectionChanged(CollectionEvent\u003cLevel\u003e ev) {\n                switch(ev.getType()) {\n                    case ADD:\n                        ev.getItem().addPropertyChangeListener(levelChangeListener);\n                        break;\n                    case DELETE:\n                        ev.getItem().removePropertyChangeListener(levelChangeListener);\n                        break;\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null ? ActionType.IMPORT_BACKGROUND_IMAGE : ActionType.MODIFY_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action hideBackgroundImageAction \u003d actionMap.get(ActionType.HIDE_BACKGROUND_IMAGE);\n        Action showBackgroundImageAction \u003d actionMap.get(ActionType.SHOW_BACKGROUND_IMAGE);\n        if (hideBackgroundImageAction !\u003d null \u0026\u0026 hideBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 showBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem hideShowBackgroundImageMenuItem \u003d new JMenuItem(createHideShowBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    hideShowBackgroundImageMenuItem.setAction(createHideShowBackgroundImageAction(home, popup));\n                }\n            });\n            return hideShowBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null || backgroundImage.isVisible() ? ActionType.HIDE_BACKGROUND_IMAGE : ActionType.SHOW_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller) {\n        Action goToPointOfViewAction \u003d this.menuActionMap.get(MenuActionType.GO_TO_POINT_OF_VIEW);\n        if (goToPointOfViewAction.getValue(Action.NAME) !\u003d null) {\n            final JMenu goToPointOfViewMenu \u003d new JMenu(goToPointOfViewAction);\n            updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n            home.addPropertyChangeListener(Home.Property.STORED_CAMERAS, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n                }\n            });\n            return goToPointOfViewMenu;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller) {\n        List\u003cCamera\u003e storedCameras \u003d home.getStoredCameras();\n        goToPointOfViewMenu.removeAll();\n        if (storedCameras.isEmpty()) {\n            goToPointOfViewMenu.setEnabled(false);\n            goToPointOfViewMenu.add(new ResourceAction(preferences, HomePane.class, \"NoStoredPointOfView\", false));\n        } else {\n            goToPointOfViewMenu.setEnabled(true);\n            for (final Camera camera : storedCameras) {\n                goToPointOfViewMenu.add(new AbstractAction(camera.getName()) {\n\n                    public void actionPerformed(ActionEvent e) {\n                        controller.getHomeController3D().goToCamera(camera);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action display3DViewInSeparateWindowAction \u003d actionMap.get(ActionType.DETACH_3D_VIEW);\n        Action display3DViewInMainWindowAction \u003d actionMap.get(ActionType.ATTACH_3D_VIEW);\n        if (display3DViewInSeparateWindowAction !\u003d null \u0026\u0026 display3DViewInSeparateWindowAction.getValue(Action.NAME) !\u003d null \u0026\u0026 display3DViewInMainWindowAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem attachDetach3DViewMenuItem \u003d new JMenuItem(createAttachDetach3DViewAction(controller, popup));\n            // Add a listener to 3D view to switch action when its parent changes\n            JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n            view3D.addAncestorListener(new AncestorListener() {\n\n                public void ancestorAdded(AncestorEvent ev) {\n                    attachDetach3DViewMenuItem.setAction(createAttachDetach3DViewAction(controller, popup));\n                }\n\n                public void ancestorRemoved(AncestorEvent ev) {\n                }\n\n                public void ancestorMoved(AncestorEvent ev) {\n                }\n            });\n            return attachDetach3DViewMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup) {\n        JRootPane view3DRootPane \u003d SwingUtilities.getRootPane((JComponent) controller.getHomeController3D().getView());\n        ActionType display3DViewActionType \u003d view3DRootPane \u003d\u003d this ? ActionType.DETACH_3D_VIEW : ActionType.ATTACH_3D_VIEW;\n        Action backgroundImageAction \u003d getActionMap().get(display3DViewActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Updates \u003ccode\u003eopenRecentHomeMenu\u003c/code\u003e from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller) {\n        openRecentHomeMenu.removeAll();\n        for (final String homeName : controller.getRecentHomes()) {\n            openRecentHomeMenu.add(new AbstractAction(controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D)) {\n\n                public void actionPerformed(ActionEvent e) {\n                    controller.open(homeName);\n                }\n            });\n        }\n        if (openRecentHomeMenu.getMenuComponentCount() \u003e 0) {\n            openRecentHomeMenu.addSeparator();\n        }\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n    }\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home) {\n        final JToolBar toolBar \u003d new UnfocusableToolBar();\n        addActionToToolBar(ActionType.NEW_HOME, toolBar);\n        addActionToToolBar(ActionType.OPEN, toolBar);\n        addActionToToolBar(ActionType.SAVE, toolBar);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToToolBar(ActionType.PREFERENCES, toolBar);\n        }\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.UNDO, toolBar);\n        addActionToToolBar(ActionType.REDO, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.CUT, toolBar);\n        addActionToToolBar(ActionType.COPY, toolBar);\n        addActionToToolBar(ActionType.PASTE, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.ADD_HOME_FURNITURE, toolBar);\n        toolBar.addSeparator();\n        addToggleActionToToolBar(ActionType.SELECT, toolBar);\n        addToggleActionToToolBar(ActionType.PAN, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_WALLS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_ROOMS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_DIMENSION_LINES, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_LABELS, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.INCREASE_TEXT_SIZE, toolBar);\n        addActionToToolBar(ActionType.DECREASE_TEXT_SIZE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_BOLD_STYLE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_ITALIC_STYLE, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.ZOOM_IN, toolBar);\n        addActionToToolBar(ActionType.ZOOM_OUT, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.CREATE_PHOTO, toolBar);\n        addActionToToolBar(ActionType.CREATE_VIDEO, toolBar);\n        toolBar.addSeparator();\n        // Add plugin actions buttons\n        boolean pluginActionsAdded \u003d false;\n        for (Action pluginAction : this.pluginActions) {\n            if (Boolean.TRUE.equals(pluginAction.getValue(PluginAction.Property.TOOL_BAR.name()))) {\n                toolBar.add(new ResourceAction.ToolBarAction(pluginAction));\n                pluginActionsAdded \u003d true;\n            }\n        }\n        if (pluginActionsAdded) {\n            toolBar.addSeparator();\n        }\n        addActionToToolBar(ActionType.HELP, toolBar);\n        // Remove useless separators\n        for (int i \u003d toolBar.getComponentCount() - 1; i \u003e 0; i--) {\n            Component child \u003d toolBar.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d toolBar.getComponentCount() - 1 || toolBar.getComponent(i - 1) instanceof JSeparator)) {\n                toolBar.remove(i);\n            }\n        }\n        return toolBar;\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            Action toolBarAction \u003d new ResourceAction.ToolBarAction(action);\n            JToggleButton toggleButton \u003d new JToggleButton(toolBarAction);\n            toggleButton.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n            toolBar.add(toggleButton);\n        }\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            toolBar.add(new ResourceAction.ToolBarAction(action));\n        }\n    }\n\n    /**\n     * Enables or disables the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            action.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText) {\n        setNameAndShortDescription(ActionType.UNDO, undoText);\n        setNameAndShortDescription(ActionType.REDO, redoText);\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * matching \u003ccode\u003eactionType\u003c/code\u003e. If \u003ccode\u003ename\u003c/code\u003e is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            if (name \u003d\u003d null) {\n                name \u003d (String) action.getValue(Action.DEFAULT);\n            }\n            action.putValue(Action.NAME, name);\n            action.putValue(Action.SHORT_DESCRIPTION, name);\n        }\n    }\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled) {\n        boolean dragAndDropWithTransferHandlerSupported;\n        try {\n            // Don\u0027t use transfer handlers for drag and drop with Plugin2 under Mac OS X or when in an unsigned applet\n            dragAndDropWithTransferHandlerSupported \u003d !Boolean.getBoolean(\"com.eteks.sweethome3d.dragAndDropWithoutTransferHandler\");\n        } catch (AccessControlException ex) {\n            dragAndDropWithTransferHandlerSupported \u003d false;\n        }\n        JComponent catalogView \u003d (JComponent) this.controller.getFurnitureCatalogController().getView();\n        JComponent furnitureView \u003d (JComponent) this.controller.getFurnitureController().getView();\n        JComponent planView \u003d (JComponent) this.controller.getPlanController().getView();\n        if (enabled) {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(this.catalogTransferHandler);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(this.furnitureTransferHandler);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(this.furnitureTransferHandler);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(this.planTransferHandler);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    // Check if furniture catalog is handled by a subcomponent\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    if (this.furnitureCatalogDragAndDropListener \u003d\u003d null) {\n                        this.furnitureCatalogDragAndDropListener \u003d createFurnitureCatalogMouseListener();\n                    }\n                    catalogComponent.addMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.addMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        } else {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(null);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(null);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(null);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(null);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    catalogComponent.removeMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.removeMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        }\n        this.transferHandlerEnabled \u003d enabled;\n    }\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener() {\n        return new MouseInputAdapter() {\n\n            private CatalogPieceOfFurniture selectedPiece;\n\n            private TransferHandler transferHandler;\n\n            private boolean autoscrolls;\n\n            private Cursor previousCursor;\n\n            private View previousView;\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev)) {\n                    List\u003cCatalogPieceOfFurniture\u003e selectedFurniture \u003d controller.getFurnitureCatalogController().getSelectedFurniture();\n                    if (selectedFurniture.size() \u003e 0) {\n                        JComponent source \u003d (JComponent) ev.getSource();\n                        this.transferHandler \u003d source.getTransferHandler();\n                        source.setTransferHandler(null);\n                        this.autoscrolls \u003d source.getAutoscrolls();\n                        source.setAutoscrolls(false);\n                        this.selectedPiece \u003d selectedFurniture.get(0);\n                        this.previousCursor \u003d null;\n                        this.previousView \u003d null;\n                    }\n                }\n            }\n\n            @Override\n            public void mouseDragged(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    // Force selection again\n                    List\u003cCatalogPieceOfFurniture\u003e emptyList \u003d Collections.emptyList();\n                    controller.getFurnitureCatalogController().setSelectedFurniture(emptyList);\n                    controller.getFurnitureCatalogController().setSelectedFurniture(Arrays.asList(new CatalogPieceOfFurniture[] { this.selectedPiece }));\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (this.previousView !\u003d view) {\n                        if (this.previousView !\u003d null) {\n                            if (this.previousView \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().stopDraggedItems();\n                            }\n                            ((JComponent) this.previousView).setCursor(this.previousCursor);\n                            this.previousCursor \u003d null;\n                            this.previousView \u003d null;\n                        }\n                        if (view !\u003d null) {\n                            JComponent component \u003d (JComponent) view;\n                            this.previousCursor \u003d component.getCursor();\n                            this.previousView \u003d view;\n                            component.setCursor(DragSource.DefaultCopyDrop);\n                            if (component.getParent() instanceof JViewport) {\n                                ((JViewport) component.getParent()).setCursor(DragSource.DefaultCopyDrop);\n                            }\n                            if (view \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().startDraggedItems(transferredFurniture, pointInView[0], pointInView[1]);\n                            }\n                        }\n                    } else if (pointInView !\u003d null) {\n                        controller.getPlanController().moveMouse(pointInView[0], pointInView[1]);\n                    }\n                }\n            }\n\n            private float[] getPointInPlanView(MouseEvent ev, List\u003cSelectable\u003e transferredFurniture) {\n                PlanView planView \u003d controller.getPlanController().getView();\n                if (planView !\u003d null) {\n                    JComponent planComponent \u003d (JComponent) planView;\n                    Point pointInPlanComponent \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent);\n                    if (planComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) planComponent.getParent()).contains(SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent.getParent())) || !(planComponent.getParent() instanceof JViewport) \u0026\u0026 planView.canImportDraggedItems(transferredFurniture, pointInPlanComponent.x, pointInPlanComponent.y)) {\n                        return new float[] { planView.convertXPixelToModel(pointInPlanComponent.x), planView.convertYPixelToModel(pointInPlanComponent.y) };\n                    }\n                }\n                return null;\n            }\n\n            private float[] getPointInFurnitureView(MouseEvent ev) {\n                View furnitureView \u003d controller.getFurnitureController().getView();\n                if (furnitureView !\u003d null) {\n                    JComponent furnitureComponent \u003d (JComponent) furnitureView;\n                    Point point \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getX(), ev.getY(), furnitureComponent.getParent() instanceof JViewport ? furnitureComponent.getParent() : furnitureComponent);\n                    if (furnitureComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) furnitureComponent.getParent()).contains(point) || !(furnitureComponent.getParent() instanceof JViewport) \u0026\u0026 furnitureComponent.contains(point)) {\n                        return new float[] { 0, 0 };\n                    }\n                }\n                return null;\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        controller.getPlanController().stopDraggedItems();\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (pointInView !\u003d null) {\n                        controller.drop(transferredFurniture, view, pointInView[0], pointInView[1]);\n                        ((JComponent) this.previousView).setCursor(this.previousCursor);\n                    }\n                    this.selectedPiece \u003d null;\n                    JComponent source \u003d (JComponent) ev.getSource();\n                    source.setTransferHandler(this.transferHandler);\n                    source.setAutoscrolls(this.autoscrolls);\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller) {\n        final JComponent catalogFurniturePane \u003d createCatalogFurniturePane(home, preferences, controller);\n        final JComponent planView3DPane \u003d createPlanView3DPane(home, preferences, controller);\n        if (catalogFurniturePane \u003d\u003d null) {\n            return planView3DPane;\n        } else if (planView3DPane \u003d\u003d null) {\n            return catalogFurniturePane;\n        } else {\n            final JSplitPane mainPane \u003d new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, catalogFurniturePane, planView3DPane);\n            // Set default divider location\n            mainPane.setDividerLocation(360);\n            configureSplitPane(mainPane, home, MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.3, true, controller);\n            return mainPane;\n        }\n    }\n\n    /**\n     * Configures \u003ccode\u003esplitPane\u003c/code\u003e divider location.\n     * If \u003ccode\u003edividerLocationProperty\u003c/code\u003e visual property exists in \u003ccode\u003ehome\u003c/code\u003e,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller) {\n        splitPane.setContinuousLayout(true);\n        splitPane.setOneTouchExpandable(true);\n        splitPane.setResizeWeight(defaultResizeWeight);\n        if (!showBorder) {\n            splitPane.setBorder(null);\n        }\n        // Restore divider location previously set\n        Integer dividerLocation \u003d (Integer) home.getVisualProperty(dividerLocationProperty);\n        if (dividerLocation !\u003d null) {\n            splitPane.setDividerLocation(dividerLocation);\n        }\n        splitPane.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, new PropertyChangeListener() {\n\n            public void propertyChange(final PropertyChangeEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        Component focusOwner \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();\n                        if (focusOwner !\u003d null \u0026\u0026 isChildComponentInvisible(splitPane, focusOwner)) {\n                            FocusTraversalPolicy focusTraversalPolicy \u003d getFocusTraversalPolicy();\n                            Component focusedComponent \u003d focusTraversalPolicy.getComponentAfter(HomePane.this, focusOwner);\n                            if (focusedComponent \u003d\u003d null) {\n                                focusedComponent \u003d focusTraversalPolicy.getComponentBefore(HomePane.this, focusOwner);\n                            }\n                            if (focusedComponent !\u003d null) {\n                                focusedComponent.requestFocusInWindow();\n                            }\n                        }\n                        controller.setVisualProperty(dividerLocationProperty, ev.getNewValue());\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent catalogView \u003d (JComponent) controller.getFurnitureCatalogController().getView();\n        if (catalogView !\u003d null) {\n            // Create catalog view popup menu\n            JPopupMenu catalogViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.COPY, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_HOME_FURNITURE, catalogViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.IMPORT_FURNITURE, catalogViewPopup);\n            SwingTools.hideDisabledMenuItems(catalogViewPopup);\n            catalogView.setComponentPopupMenu(catalogViewPopup);\n            preferences.addPropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, new FurnitureCatalogViewChangeListener(this, catalogView));\n            if (catalogView instanceof Scrollable) {\n                catalogView \u003d SwingTools.createScrollPane(catalogView);\n            }\n        }\n        // Configure furniture view\n        JComponent furnitureView \u003d (JComponent) controller.getFurnitureController().getView();\n        if (furnitureView !\u003d null) {\n            // Set default traversal keys of furniture view\n            KeyboardFocusManager focusManager \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager();\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS));\n            // Create furniture view popup menu\n            JPopupMenu furnitureViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.REDO, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.COPY, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.SELECT_ALL, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, furnitureViewPopup);\n            furnitureViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            furnitureViewPopup.addSeparator();\n            furnitureViewPopup.add(createFurnitureSortMenu(home, preferences));\n            furnitureViewPopup.add(createFurnitureDisplayPropertyMenu(home, preferences));\n            SwingTools.hideDisabledMenuItems(furnitureViewPopup);\n            furnitureView.setComponentPopupMenu(furnitureViewPopup);\n            if (furnitureView instanceof Scrollable) {\n                JScrollPane furnitureScrollPane \u003d SwingTools.createScrollPane(furnitureView);\n                // Add a mouse listener that gives focus to furniture view when\n                // user clicks in its viewport (tables don\u0027t spread vertically if their row count is too small)\n                final JViewport viewport \u003d furnitureScrollPane.getViewport();\n                viewport.addMouseListener(new MouseAdapter() {\n\n                    @Override\n                    public void mouseClicked(MouseEvent ev) {\n                        viewport.getView().requestFocusInWindow();\n                    }\n                });\n                Integer viewportY \u003d (Integer) home.getVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(0, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        controller.setVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY, viewport.getViewPosition().y);\n                    }\n                });\n                ((JViewport) furnitureView.getParent()).setComponentPopupMenu(furnitureViewPopup);\n                furnitureView \u003d furnitureScrollPane;\n            }\n        }\n        if (catalogView \u003d\u003d null) {\n            return furnitureView;\n        } else if (furnitureView \u003d\u003d null) {\n            return catalogView;\n        } else {\n            // Create a split pane that displays both components\n            JSplitPane catalogFurniturePane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, catalogView, furnitureView);\n            catalogFurniturePane.setBorder(null);\n            catalogFurniturePane.setMinimumSize(new Dimension());\n            configureSplitPane(catalogFurniturePane, home, CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n            return catalogFurniturePane;\n        }\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJComponent\u003e furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView \u003d this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView !\u003d null) {\n                    boolean transferHandlerEnabled \u003d homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView \u003d (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent \u003d SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent planView \u003d (JComponent) controller.getPlanController().getView();\n        if (planView !\u003d null) {\n            // Create plan view popup menu\n            JPopupMenu planViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, planViewPopup);\n            addActionToPopupMenu(ActionType.REDO, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, planViewPopup);\n            addActionToPopupMenu(ActionType.COPY, planViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, planViewPopup);\n            Action selectObjectAction \u003d this.menuActionMap.get(MenuActionType.SELECT_OBJECT_MENU);\n            JMenu selectObjectMenu;\n            if (selectObjectAction.getValue(Action.NAME) !\u003d null) {\n                selectObjectMenu \u003d new JMenu(selectObjectAction);\n                planViewPopup.add(selectObjectMenu);\n            } else {\n                selectObjectMenu \u003d null;\n            }\n            addActionToPopupMenu(ActionType.SELECT_ALL, planViewPopup);\n            planViewPopup.addSeparator();\n            addToggleActionToPopupMenu(ActionType.SELECT, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.PAN, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_WALLS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_ROOMS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_DIMENSION_LINES, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_LABELS, true, planViewPopup);\n            planViewPopup.addSeparator();\n            JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, true);\n            if (lockUnlockBasePlanMenuItem !\u003d null) {\n                planViewPopup.add(lockUnlockBasePlanMenuItem);\n            }\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, planViewPopup);\n            planViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            addActionToPopupMenu(ActionType.MODIFY_COMPASS, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.REVERSE_WALL_DIRECTION, planViewPopup);\n            addActionToPopupMenu(ActionType.SPLIT_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_ROOM, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LABEL, planViewPopup);\n            planViewPopup.add(createTextStyleMenu(home, preferences, true));\n            planViewPopup.addSeparator();\n            JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, true);\n            if (importModifyBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(importModifyBackgroundImageMenuItem);\n            }\n            JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, true);\n            if (hideShowBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(hideShowBackgroundImageMenuItem);\n            }\n            addActionToPopupMenu(ActionType.DELETE_BACKGROUND_IMAGE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.DELETE_LEVEL, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ZOOM_OUT, planViewPopup);\n            addActionToPopupMenu(ActionType.ZOOM_IN, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_SVG, planViewPopup);\n            SwingTools.hideDisabledMenuItems(planViewPopup);\n            if (selectObjectMenu !\u003d null) {\n                // Add a second popup listener to manage Select object sub menu before the menu is hidden when empty\n                addSelectObjectMenuItems(selectObjectMenu, controller.getPlanController(), preferences);\n            }\n            planView.setComponentPopupMenu(planViewPopup);\n            final JScrollPane planScrollPane;\n            if (planView instanceof Scrollable) {\n                planView \u003d planScrollPane \u003d SwingTools.createScrollPane(planView);\n            } else {\n                List\u003cJScrollPane\u003e scrollPanes \u003d SwingTools.findChildren(planView, JScrollPane.class);\n                if (scrollPanes.size() \u003d\u003d 1) {\n                    planScrollPane \u003d scrollPanes.get(0);\n                } else {\n                    planScrollPane \u003d null;\n                }\n            }\n            if (planScrollPane !\u003d null) {\n                setPlanRulersVisible(planScrollPane, controller, preferences.isRulersVisible());\n                if (planScrollPane.getCorner(JScrollPane.UPPER_LEADING_CORNER) \u003d\u003d null) {\n                    final JComponent lockUnlockBasePlanButton \u003d createLockUnlockBasePlanButton(home);\n                    if (lockUnlockBasePlanButton !\u003d null) {\n                        planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                        planScrollPane.addPropertyChangeListener(\"componentOrientation\", new PropertyChangeListener() {\n\n                            public void propertyChange(PropertyChangeEvent ev) {\n                                if (lockUnlockBasePlanButton.getParent() !\u003d null) {\n                                    planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                                }\n                            }\n                        });\n                    }\n                }\n                // Add a listener to update rulers visibility in preferences\n                preferences.addPropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, new RulersVisibilityChangeListener(this, planScrollPane, controller));\n                // Restore viewport position if it exists\n                final JViewport viewport \u003d planScrollPane.getViewport();\n                Integer viewportX \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY);\n                Integer viewportY \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportX !\u003d null \u0026\u0026 viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(viewportX, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        Point viewportPosition \u003d viewport.getViewPosition();\n                        controller.setVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY, viewportPosition.x);\n                        controller.setVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY, viewportPosition.y);\n                    }\n                });\n            }\n        }\n        // Configure 3D view\n        JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n        if (view3D !\u003d null) {\n            view3D.setPreferredSize(planView !\u003d null ? planView.getPreferredSize() : new Dimension(400, 400));\n            view3D.setMinimumSize(new Dimension());\n            // Create 3D view popup menu\n            JPopupMenu view3DPopup \u003d new JPopupMenu();\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_TOP, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_OBSERVER, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_OBSERVER, view3DPopup);\n            addActionToPopupMenu(ActionType.STORE_POINT_OF_VIEW, view3DPopup);\n            JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n            if (goToPointOfViewMenu !\u003d null) {\n                view3DPopup.add(goToPointOfViewMenu);\n            }\n            view3DPopup.addSeparator();\n            JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, true);\n            if (attachDetach3DViewMenuItem !\u003d null) {\n                view3DPopup.add(attachDetach3DViewMenuItem);\n            }\n            addToggleActionToPopupMenu(ActionType.DISPLAY_ALL_LEVELS, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_3D_ATTRIBUTES, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CREATE_PHOTO, view3DPopup);\n            addActionToPopupMenu(ActionType.CREATE_VIDEO, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_OBJ, view3DPopup);\n            SwingTools.hideDisabledMenuItems(view3DPopup);\n            view3D.setComponentPopupMenu(view3DPopup);\n            if (view3D instanceof Scrollable) {\n                view3D \u003d SwingTools.createScrollPane(view3D);\n            }\n            JComponent planView3DPane;\n            if (planView !\u003d null) {\n                // Create a split pane that displays both components\n                final JSplitPane planView3DSplitPane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, planView, view3D);\n                planView3DSplitPane.setMinimumSize(new Dimension());\n                configureSplitPane((JSplitPane) planView3DSplitPane, home, PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n                final Integer dividerLocation \u003d (Integer) home.getVisualProperty(PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                if (OperatingSystem.isMacOSX() \u0026\u0026 dividerLocation !\u003d null \u0026\u0026 dividerLocation \u003e 2) {\n                    // Under Mac OS X, ensure that the 3D view of an existing home will be displayed during a while\n                    // to avoid a freeze when the 3D view was saved as hidden and then the window displaying the 3D view is enlarged\n                    planView3DSplitPane.addAncestorListener(new AncestorListener() {\n\n                        public void ancestorAdded(AncestorEvent event) {\n                            planView3DSplitPane.removeAncestorListener(this);\n                            if (planView3DSplitPane.getRightComponent().getHeight() \u003d\u003d 0) {\n                                // If the 3D view is invisible, make it appear during a while\n                                planView3DSplitPane.setDividerLocation(dividerLocation - 2);\n                                Executors.newSingleThreadScheduledExecutor().schedule(new Runnable() {\n\n                                    public void run() {\n                                        EventQueue.invokeLater(new Runnable() {\n\n                                            public void run() {\n                                                planView3DSplitPane.setDividerLocation(dividerLocation);\n                                            }\n                                        });\n                                    }\n                                }, 1, TimeUnit.SECONDS);\n                            }\n                        }\n\n                        public void ancestorRemoved(AncestorEvent event) {\n                        }\n\n                        public void ancestorMoved(AncestorEvent event) {\n                        }\n                    });\n                }\n                planView3DPane \u003d planView3DSplitPane;\n            } else {\n                planView3DPane \u003d view3D;\n            }\n            // Detach 3D view if it was detached when saved and its dialog can be viewed in one of the screen devices\n            Boolean detachedView3D \u003d (Boolean) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY);\n            if (detachedView3D !\u003d null \u0026\u0026 detachedView3D.booleanValue()) {\n                // Check 3D view can be viewed in one of the available screens\n                final Integer dialogX \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n                final Integer dialogY \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY);\n                final Integer dialogWidth \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n                final Integer dialogHeight \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY);\n                if (dialogX !\u003d null \u0026\u0026 dialogY !\u003d null \u0026\u0026 dialogWidth !\u003d null \u0026\u0026 dialogHeight !\u003d null \u0026\u0026 SwingTools.isRectangleVisibleAtScreen(new Rectangle(dialogX, dialogY, dialogWidth, dialogHeight))) {\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            View view3D \u003d controller.getHomeController3D().getView();\n                            detachView(view3D, dialogX, dialogY, dialogWidth, dialogHeight);\n                        }\n                    });\n                    return planView3DPane;\n                }\n                if (planView3DPane instanceof JSplitPane) {\n                    ((JSplitPane) planView3DPane).setDividerLocation(0.5);\n                }\n                controller.setVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, null);\n            }\n            return planView3DPane;\n        } else {\n            return planView;\n        }\n    }\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences) {\n        JComponent planView \u003d (JComponent) planController.getView();\n        final Point lastMouseMoveLocation \u003d new Point(-1, -1);\n        ((JPopupMenu) selectObjectMenu.getParent()).addPopupMenuListener(new PopupMenuListener() {\n\n            @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n            public void popupMenuWillBecomeVisible(PopupMenuEvent ev) {\n                if (lastMouseMoveLocation.getX() \u003e\u003d 0 \u0026\u0026 !planController.isModificationState()) {\n                    final List\u003cSelectable\u003e items \u003d planController.getSelectableItemsAt(planController.getView().convertXPixelToModel(lastMouseMoveLocation.x), planController.getView().convertYPixelToModel(lastMouseMoveLocation.y));\n                    // Prepare localized formatters\n                    Map\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e formatters \u003d new HashMap\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e();\n                    formatters.put(Compass.class, new SelectableFormat\u003cCompass\u003e() {\n\n                        public String format(Compass compass) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.compass\");\n                        }\n                    });\n                    formatters.put(HomePieceOfFurniture.class, new SelectableFormat\u003cHomePieceOfFurniture\u003e() {\n\n                        public String format(HomePieceOfFurniture piece) {\n                            if (piece.getName().length() \u003e 0) {\n                                return piece.getName();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.furniture\");\n                            }\n                        }\n                    });\n                    formatters.put(Wall.class, new SelectableFormat\u003cWall\u003e() {\n\n                        public String format(Wall wall) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.wall\", preferences.getLengthUnit().getFormatWithUnit().format(wall.getLength()));\n                        }\n                    });\n                    formatters.put(Room.class, new SelectableFormat\u003cRoom\u003e() {\n\n                        public String format(Room room) {\n                            String roomInfo \u003d room.getName() !\u003d null \u0026\u0026 room.getName().length() \u003e 0 ? room.getName() : (room.isAreaVisible() ? preferences.getLengthUnit().getAreaFormatWithUnit().format(room.getArea()) : \"\");\n                            if (room.isFloorVisible() \u0026\u0026 !room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.floor\", roomInfo);\n                            } else if (!room.isFloorVisible() \u0026\u0026 room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.ceiling\", roomInfo);\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.room\", roomInfo);\n                            }\n                        }\n                    });\n                    formatters.put(DimensionLine.class, new SelectableFormat\u003cDimensionLine\u003e() {\n\n                        public String format(DimensionLine dimensionLine) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.dimensionLine\", preferences.getLengthUnit().getFormatWithUnit().format(dimensionLine.getLength()));\n                        }\n                    });\n                    formatters.put(Label.class, new SelectableFormat\u003cLabel\u003e() {\n\n                        public String format(Label label) {\n                            if (label.getText().length() \u003e 0) {\n                                return label.getText();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.label\");\n                            }\n                        }\n                    });\n                    for (final Selectable item : items) {\n                        String format \u003d null;\n                        for (Map.Entry\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e entry : formatters.entrySet()) {\n                            if (entry.getKey().isInstance(item)) {\n                                format \u003d entry.getValue().format(item);\n                                break;\n                            }\n                        }\n                        if (format !\u003d null) {\n                            selectObjectMenu.add(new JMenuItem(new AbstractAction(format) {\n\n                                public void actionPerformed(ActionEvent ev) {\n                                    planController.selectItem(item);\n                                }\n                            }));\n                        }\n                    }\n                }\n            }\n\n            public void popupMenuWillBecomeInvisible(PopupMenuEvent ev) {\n                selectObjectMenu.removeAll();\n            }\n\n            public void popupMenuCanceled(PopupMenuEvent ev) {\n            }\n        });\n        planView.addMouseMotionListener(new MouseMotionAdapter() {\n\n            @Override\n            public void mouseMoved(MouseEvent ev) {\n                lastMouseMoveLocation.setLocation(ev.getPoint());\n            }\n        });\n        planView.addMouseListener(new MouseAdapter() {\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                lastMouseMoveLocation.x \u003d -1;\n            }\n        });\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJScrollPane\u003e planScrollPane;\n\n        private WeakReference\u003cHomeController\u003e controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.planScrollPane \u003d new WeakReference\u003cJScrollPane\u003e(planScrollPane);\n            this.controller \u003d new WeakReference\u003cHomeController\u003e(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            JScrollPane planScrollPane \u003d this.planScrollPane.get();\n            HomeController controller \u003d this.controller.get();\n            if (homePane \u003d\u003d null || planScrollPane \u003d\u003d null || controller \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible) {\n        if (visible) {\n            // Change column and row header views\n            planScrollPane.setColumnHeaderView((JComponent) controller.getPlanController().getHorizontalRulerView());\n            planScrollPane.setRowHeaderView((JComponent) controller.getPlanController().getVerticalRulerView());\n        } else {\n            planScrollPane.setColumnHeaderView(null);\n            planScrollPane.setRowHeaderView(null);\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003eview\u003c/code\u003e a mouse listener that disables all menu items of\n     * \u003ccode\u003emenuBar\u003c/code\u003e during a drag and drop operation in \u003ccode\u003eview\u003c/code\u003e.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar) {\n        class MouseAndFocusListener extends MouseAdapter implements FocusListener {\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), false);\n                        }\n                    }\n                });\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            private void enableMenuItems(final JMenuBar menuBar) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), true);\n                        }\n                    }\n                });\n            }\n\n            private void setMenuItemsEnabled(JMenu menu, boolean enabled) {\n                for (int i \u003d 0, n \u003d menu.getItemCount(); i \u003c n; i++) {\n                    JMenuItem item \u003d menu.getItem(i);\n                    if (item instanceof JMenu) {\n                        setMenuItemsEnabled((JMenu) item, enabled);\n                    } else if (item !\u003d null) {\n                        item.setEnabled(enabled ? item.getAction().isEnabled() : false);\n                    }\n                }\n            }\n\n            // Need to take into account focus events because a mouse released event\n            // isn\u0027t dispatched when the component loses focus\n            public void focusGained(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            public void focusLost(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n        }\n        ;\n        MouseAndFocusListener listener \u003d new MouseAndFocusListener();\n        if (view !\u003d null) {\n            ((JComponent) view).addMouseListener(listener);\n            ((JComponent) view).addFocusListener(listener);\n        }\n    }\n\n    /**\n     * Detaches the given \u003ccode\u003eview\u003c/code\u003e from home view.\n     */\n    public void detachView(final View view) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        float dividerLocation;\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            if (splitPane.getOrientation() \u003d\u003d JSplitPane.VERTICAL_SPLIT) {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getHeight() - splitPane.getDividerSize());\n            } else {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getWidth() - splitPane.getDividerSize());\n            }\n        } else {\n            dividerLocation \u003d -1;\n        }\n        Integer dialogX \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n        Integer dialogWidth \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n        if (dialogX !\u003d null \u0026\u0026 dialogWidth !\u003d null) {\n            detachView(view, dialogX, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY), dialogWidth, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY));\n        } else {\n            Point componentLocation \u003d new Point();\n            Dimension componentSize \u003d component.getSize();\n            SwingUtilities.convertPointToScreen(componentLocation, component);\n            Insets insets \u003d new JDialog().getInsets();\n            detachView(view, componentLocation.x - insets.left, componentLocation.y - insets.top, componentSize.width + insets.left + insets.right, componentSize.height + insets.top + insets.bottom);\n        }\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY, dividerLocation);\n    }\n\n    /**\n     * Detaches a \u003ccode\u003eview\u003c/code\u003e at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        // Replace component by a dummy label to find easily where to attach back the component\n        JLabel dummyLabel \u003d new JLabel();\n        dummyLabel.setMaximumSize(new Dimension());\n        dummyLabel.setName(view.getClass().getName());\n        dummyLabel.setBorder(component.getBorder());\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            splitPane.setDividerSize(0);\n            if (splitPane.getLeftComponent() \u003d\u003d component) {\n                splitPane.setLeftComponent(dummyLabel);\n                splitPane.setDividerLocation(0f);\n            } else {\n                splitPane.setRightComponent(dummyLabel);\n                splitPane.setDividerLocation(1f);\n            }\n        } else {\n            int componentIndex \u003d parent.getComponentZOrder(component);\n            parent.remove(componentIndex);\n            parent.add(dummyLabel, componentIndex);\n        }\n        // Display view in a separate non modal dialog\n        Window window \u003d SwingUtilities.getWindowAncestor(this);\n        if (!(window instanceof JFrame)) {\n            window \u003d JOptionPane.getRootFrame();\n        }\n        JFrame defaultFrame \u003d (JFrame) window;\n        // Create a dialog with the same title as home frame\n        final JDialog separateDialog \u003d new JDialog(defaultFrame, defaultFrame.getTitle(), false);\n        separateDialog.setResizable(true);\n        defaultFrame.addPropertyChangeListener(\"title\", new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                separateDialog.setTitle((String) ev.getNewValue());\n            }\n        });\n        // Use same document modified indicator\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"Window.documentModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"Window.documentModified\", ev.getNewValue());\n                }\n            });\n        } else if (OperatingSystem.isMacOSX()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"windowModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"windowModified\", ev.getNewValue());\n                }\n            });\n        }\n        separateDialog.setContentPane(component);\n        separateDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\n        separateDialog.addWindowListener(new WindowAdapter() {\n\n            @Override\n            public void windowClosing(WindowEvent ev) {\n                controller.attachView(view);\n            }\n        });\n        separateDialog.addComponentListener(new ComponentAdapter() {\n\n            @Override\n            public void componentResized(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY, separateDialog.getWidth());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY, separateDialog.getHeight());\n            }\n\n            @Override\n            public void componentMoved(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, separateDialog.getX());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY, separateDialog.getY());\n            }\n        });\n        separateDialog.setBounds(x, y, width, height);\n        separateDialog.setLocationByPlatform(!SwingTools.isRectangleVisibleAtScreen(separateDialog.getBounds()));\n        separateDialog.setVisible(true);\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, true);\n    }\n\n    /**\n     * Attaches the given \u003ccode\u003eview\u003c/code\u003e to home view.\n     */\n    public void attachView(View view) {\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, false);\n        JComponent dummyComponent \u003d (JComponent) findChild(this, view.getClass().getName());\n        if (dummyComponent !\u003d null) {\n            JComponent component \u003d (JComponent) view;\n            Window window \u003d SwingUtilities.getWindowAncestor(component);\n            component.setBorder(dummyComponent.getBorder());\n            Container parent \u003d dummyComponent.getParent();\n            if (parent instanceof JSplitPane) {\n                JSplitPane splitPane \u003d (JSplitPane) parent;\n                float dividerLocation \u003d (Float) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                splitPane.setDividerSize(UIManager.getInt(\"SplitPane.dividerSize\"));\n                splitPane.setDividerLocation(dividerLocation);\n                if (splitPane.getLeftComponent() \u003d\u003d dummyComponent) {\n                    splitPane.setLeftComponent(component);\n                } else {\n                    splitPane.setRightComponent(component);\n                }\n            } else {\n                int componentIndex \u003d parent.getComponentZOrder(dummyComponent);\n                parent.remove(componentIndex);\n                parent.add(component, componentIndex);\n            }\n            window.dispose();\n        }\n    }\n\n    /**\n     * Returns among \u003ccode\u003eparent\u003c/code\u003e children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName) {\n        for (int i \u003d 0; i \u003c parent.getComponentCount(); i++) {\n            Component child \u003d parent.getComponent(i);\n            if (childName.equals(child.getName())) {\n                return child;\n            } else if (child instanceof Container) {\n                child \u003d findChild((Container) child, childName);\n                if (child !\u003d null) {\n                    return child;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"openHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D);\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importLanguageLibraryDialog.title\"), ContentManager.ContentType.LANGUAGE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.message\", new File(languageLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importFurnitureLibraryDialog.title\"), ContentManager.ContentType.FURNITURE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.message\", new File(furnitureLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importTexturesLibraryDialog.title\"), ContentManager.ContentType.TEXTURES_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.message\", new File(texturesLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.message\", new File(pluginName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"saveHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D, homeName);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in an error message box.\n     */\n    public void showError(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"error.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in a message box.\n     */\n    public void showMessage(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"message.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);\n    }\n\n    /**\n     * Displays the tip matching \u003ccode\u003eactionTipKey\u003c/code\u003e and\n     * returns \u003ccode\u003etrue\u003c/code\u003e if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipTitle\");\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipMessage\");\n        if (message.length() \u003e 0) {\n            JPanel tipPanel \u003d new JPanel(new GridBagLayout());\n            JLabel messageLabel \u003d new JLabel(message);\n            tipPanel.add(messageLabel, new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            // Add a check box that lets user choose whether he wants to display again the tip or not\n            JCheckBox doNotDisplayTipCheckBox \u003d new JCheckBox(SwingTools.getLocalizedLabelText(this.preferences, HomePane.class, \"doNotDisplayTipCheckBox.text\"));\n            if (!OperatingSystem.isMacOSX()) {\n                doNotDisplayTipCheckBox.setMnemonic(KeyStroke.getKeyStroke(this.preferences.getLocalizedString(HomePane.class, \"doNotDisplayTipCheckBox.mnemonic\")).getKeyCode());\n            }\n            tipPanel.add(doNotDisplayTipCheckBox, new GridBagConstraints(0, 1, 1, 1, 0, 1, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));\n            SwingTools.showMessageDialog(this, tipPanel, title, JOptionPane.INFORMATION_MESSAGE, doNotDisplayTipCheckBox);\n            return doNotDisplayTipCheckBox.isSelected();\n        } else {\n            // Ignore untranslated tips\n            return true;\n        }\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn\u0027t want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn\u0027t want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName) {\n        // Retrieve displayed text in buttons and message\n        String message;\n        if (homeName !\u003d null) {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\\\"\" + this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D) + \"\\\"\");\n        } else {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\");\n        }\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.doNotSave\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.cancel\");\n        switch(JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave, cancel }, save)) {\n            // Convert showOptionDialog answer to SaveAnswer enum constants\n            case JOptionPane.YES_OPTION:\n                return SaveAnswer.SAVE;\n            case JOptionPane.NO_OPTION:\n                return SaveAnswer.DO_NOT_SAVE;\n            default:\n                return SaveAnswer.CANCEL;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName) {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.message\", this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D));\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.doNotSave\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave }, doNotSave) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to exit.\n     */\n    public boolean confirmExit() {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.title\");\n        String quit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.quit\");\n        String doNotQuit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.doNotQuit\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { quit, doNotQuit }, doNotQuit) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog() {\n        String messageFormat \u003d this.preferences.getLocalizedString(HomePane.class, \"about.message\");\n        String aboutVersion \u003d this.controller.getVersion();\n        String message \u003d String.format(messageFormat, aboutVersion, System.getProperty(\"java.version\"));\n        // Use an uneditable editor pane to let user select text in dialog\n        JEditorPane messagePane \u003d new JEditorPane(\"text/html\", message);\n        messagePane.setOpaque(false);\n        messagePane.setEditable(false);\n        // Add a listener that displays hyperlinks content in browser\n        messagePane.addHyperlinkListener(new HyperlinkListener() {\n\n            public void hyperlinkUpdate(HyperlinkEvent ev) {\n                if (ev.getEventType() \u003d\u003d HyperlinkEvent.EventType.ACTIVATED) {\n                    SwingTools.showDocumentInBrowser(ev.getURL());\n                }\n            }\n        });\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"about.title\");\n        Icon icon \u003d new ImageIcon(HomePane.class.getResource(this.preferences.getLocalizedString(HomePane.class, \"about.icon\")));\n        JOptionPane.showMessageDialog(this, messagePane, title, JOptionPane.INFORMATION_MESSAGE, icon);\n    }\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or \u003ccode\u003enull\u003c/code\u003e if the user canceled print.\n     *    The \u003ccode\u003ecall\u003c/code\u003e method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable\u003cVoid\u003e showPrintDialog() {\n        PageFormat pageFormat \u003d HomePrintableComponent.getPageFormat(this.home.getPrint());\n        final PrinterJob printerJob \u003d PrinterJob.getPrinterJob();\n        printerJob.setPrintable(new HomePrintableComponent(this.home, this.controller, getFont()), pageFormat);\n        String jobName \u003d this.preferences.getLocalizedString(HomePane.class, \"print.jobName\");\n        if (this.home.getName() !\u003d null) {\n            jobName +\u003d \" - \" + this.controller.getContentManager().getPresentationName(this.home.getName(), ContentManager.ContentType.SWEET_HOME_3D);\n        }\n        printerJob.setJobName(jobName);\n        if (printerJob.printDialog()) {\n            return new Callable\u003cVoid\u003e() {\n\n                public Void call() throws RecorderException {\n                    try {\n                        printerJob.print();\n                        return null;\n                    } catch (InterruptedPrinterException ex) {\n                        throw new InterruptedRecorderException(\"Print interrupted\");\n                    } catch (PrinterException ex) {\n                        throw new RecorderException(\"Couldn\u0027t print\", ex);\n                    }\n                }\n            };\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"printToPDFDialog.title\"), ContentManager.ContentType.PDF, homeName);\n    }\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException {\n        OutputStream outputStream \u003d null;\n        boolean printInterrupted \u003d false;\n        try {\n            outputStream \u003d new FileOutputStream(pdfFile);\n            new HomePDFPrinter(this.home, this.preferences, this.controller, getFont()).write(outputStream);\n        } catch (InterruptedIOException ex) {\n            printInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Print interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n        } finally {\n            try {\n                if (outputStream !\u003d null) {\n                    outputStream.close();\n                }\n                // Delete the file if printing is interrupted\n                if (printInterrupted) {\n                    new File(pdfFile).delete();\n                }\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToSVGDialog.title\"), ContentManager.ContentType.SVG, homeName);\n    }\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException {\n        View planView \u003d this.controller.getPlanController().getView();\n        PlanComponent planComponent;\n        if (planView instanceof PlanComponent) {\n            planComponent \u003d (PlanComponent) planView;\n        } else {\n            planComponent \u003d new PlanComponent(this.home, this.preferences, null);\n        }\n        OutputStream outputStream \u003d null;\n        boolean exportInterrupted \u003d false;\n        try {\n            outputStream \u003d new BufferedOutputStream(new FileOutputStream(svgFile));\n            planComponent.exportToSVG(outputStream);\n        } catch (InterruptedIOException ex) {\n            exportInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Export to \" + svgFile + \" interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n        } finally {\n            if (outputStream !\u003d null) {\n                try {\n                    outputStream.close();\n                    // Delete the file if exporting is interrupted\n                    if (exportInterrupted) {\n                        new File(svgFile).delete();\n                    }\n                } catch (IOException ex) {\n                    throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n                }\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToOBJDialog.title\"), ContentManager.ContentType.OBJ, homeName);\n    }\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException {\n        String header \u003d this.preferences !\u003d null ? this.preferences.getLocalizedString(HomePane.class, \"exportToOBJ.header\", new Date()) : \"\";\n        // Use a clone of home to ignore selection\n        OBJExporter.exportHomeToFile(this.home.clone(), objFile, header);\n    }\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer \u003d null;\n            boolean exportInterrupted \u003d false;\n            try {\n                writer \u003d new OBJWriter(objFile, header, -1);\n                List\u003cSelectable\u003e emptySelection \u003d Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() \u003e 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds \u003d getExportedHomeBounds(home);\n                    Ground3D groundNode \u003d new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i \u003d 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode \u003d new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i \u003d 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode \u003d new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i \u003d 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode \u003d new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted \u003d true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer !\u003d null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns \u003ccode\u003ehome\u003c/code\u003e bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds \u003d updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds \u003d\u003d null) {\n                        homeBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given \u003ccode\u003efurniture\u003c/code\u003e.\n         */\n        private static List\u003cHomePieceOfFurniture\u003e getVisibleFurniture(List\u003cHomePieceOfFurniture\u003e furniture) {\n            List\u003cHomePieceOfFurniture\u003e visibleFurniture \u003d new ArrayList\u003cHomePieceOfFurniture\u003e(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() \u0026\u0026 (piece.getLevel() \u003d\u003d null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates \u003ccode\u003eobjectBounds\u003c/code\u003e to include the bounds of \u003ccode\u003eitems\u003c/code\u003e.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection\u003c? extends Selectable\u003e items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() \u003d\u003d null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds \u003d\u003d null) {\n                            objectBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection() {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.title\");\n        String delete \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.delete\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.cancel\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { delete, cancel }, cancel) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or \u003ccode\u003enull\u003c/code\u003e if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName) {\n        // Retrieve displayed text in dialog\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.title\");\n        List\u003cCamera\u003e storedCameras \u003d this.home.getStoredCameras();\n        JComponent cameraNameChooser;\n        JTextComponent cameraNameTextComponent;\n        if (storedCameras.isEmpty()) {\n            cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n        } else {\n            // If cameras are already stored in home propose an editable combo box to user\n            // to let him choose more easily an existing one if he want to overwrite it\n            String[] storedCameraNames \u003d new String[storedCameras.size()];\n            for (int i \u003d 0; i \u003c storedCameraNames.length; i++) {\n                storedCameraNames[i] \u003d storedCameras.get(i).getName();\n            }\n            JComboBox cameraNameComboBox \u003d new JComboBox(storedCameraNames);\n            cameraNameComboBox.setEditable(true);\n            cameraNameComboBox.getEditor().setItem(cameraName);\n            Component editorComponent \u003d cameraNameComboBox.getEditor().getEditorComponent();\n            if (editorComponent instanceof JTextComponent) {\n                cameraNameTextComponent \u003d (JTextComponent) editorComponent;\n                cameraNameChooser \u003d cameraNameComboBox;\n            } else {\n                cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n            }\n        }\n        JPanel cameraNamePanel \u003d new JPanel(new BorderLayout(2, 2));\n        cameraNamePanel.add(new JLabel(message), BorderLayout.NORTH);\n        cameraNamePanel.add(cameraNameChooser, BorderLayout.SOUTH);\n        if (SwingTools.showConfirmDialog(this, cameraNamePanel, title, cameraNameTextComponent) \u003d\u003d JOptionPane.OK_OPTION) {\n            return cameraNameTextComponent.getText();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty() {\n        try {\n            Clipboard clipboard \u003d getToolkit().getSystemClipboard();\n            return !(clipboard.isDataFlavorAvailable(HomeTransferableList.HOME_FLAVOR) || getToolkit().getSystemClipboard().isDataFlavorAvailable(DataFlavor.javaFileListFlavor));\n        } catch (AccessControlException ex) {\n            // AWT uses a private clipboard that won\u0027t be empty as soon as a copy action will be done\n            return this.clipboardEmpty;\n        }\n    }\n\n    /**\n     * Execute \u003ccode\u003erunnable\u003c/code\u003e asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable) {\n        EventQueue.invokeLater(runnable);\n    }\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction \u003d pluginAction;\n            this.propertyChangeSupport \u003d new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName \u003d ev.getPropertyName();\n                    Object oldValue \u003d ev.getOldValue();\n                    Object newValue \u003d ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don\u0027t check new value is null !)\n                        if (newValue !\u003d null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue !\u003d null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue !\u003d null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon \u003d (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon !\u003d null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic \u003d (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic !\u003d null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat\u003cT extends Selectable\u003e {\n\n        public abstract String format(T item);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "HomePane",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_12Test.java",
    "test_prompt": "// HomePane_12Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains ten unit test cases for the {@link HomePane#confirmExit()} method.\n*/\nclass HomePane_12Test {",
    "method_signature": "confirmExit()",
    "suffix": "12"
  },
  {
    "numberTests": "ten",
    "original_code": "// HomePane.java\n/*\n * HomePane.java 15 mai 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY \u003d \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY \u003d \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY \u003d \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY \u003d \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY \u003d \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT \u003d 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty \u003d true;\n\n    private ActionMap menuActionMap;\n\n    private List\u003cAction\u003e pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n        this.home \u003d home;\n        this.preferences \u003d preferences;\n        this.controller \u003d controller;\n        JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n        ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);\n        createActions(home, preferences, controller);\n        createMenuActions(preferences, controller);\n        createPluginActions(controller instanceof HomePluginController ? ((HomePluginController) controller).getPlugins() : null);\n        createTransferHandlers(home, controller);\n        addHomeListener(home);\n        addLevelVisibilityListener(home);\n        addLanguageListener(preferences);\n        addPlanControllerListener(controller.getPlanController());\n        addFocusListener();\n        updateFocusTraversalPolicy();\n        JMenuBar homeMenuBar \u003d createMenuBar(home, preferences, controller);\n        setJMenuBar(homeMenuBar);\n        Container contentPane \u003d getContentPane();\n        contentPane.add(createToolBar(home), BorderLayout.NORTH);\n        contentPane.add(createMainPane(home, preferences, controller));\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            // Under Mac OS X 10.5, add some dummy labels at left and right borders\n            // to avoid the tool bar to be attached on these borders\n            // (segmented buttons created on this system aren\u0027t properly rendered\n            // when they are aligned vertically)\n            contentPane.add(new JLabel(), BorderLayout.WEST);\n            contentPane.add(new JLabel(), BorderLayout.EAST);\n        }\n        disableMenuItemsDuringDragAndDrop(controller.getPlanController().getView(), homeMenuBar);\n        // Change component orientation\n        applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller) {\n        createAction(ActionType.NEW_HOME, preferences, controller, \"newHome\");\n        createAction(ActionType.OPEN, preferences, controller, \"open\");\n        createAction(ActionType.DELETE_RECENT_HOMES, preferences, controller, \"deleteRecentHomes\");\n        createAction(ActionType.CLOSE, preferences, controller, \"close\");\n        createAction(ActionType.SAVE, preferences, controller, \"save\");\n        createAction(ActionType.SAVE_AS, preferences, controller, \"saveAs\");\n        createAction(ActionType.SAVE_AND_COMPRESS, preferences, controller, \"saveAndCompress\");\n        createAction(ActionType.PAGE_SETUP, preferences, controller, \"setupPage\");\n        createAction(ActionType.PRINT_PREVIEW, preferences, controller, \"previewPrint\");\n        createAction(ActionType.PRINT, preferences, controller, \"print\");\n        createAction(ActionType.PRINT_TO_PDF, preferences, controller, \"printToPDF\");\n        createAction(ActionType.PREFERENCES, preferences, controller, \"editPreferences\");\n        createAction(ActionType.EXIT, preferences, controller, \"exit\");\n        createAction(ActionType.UNDO, preferences, controller, \"undo\");\n        createAction(ActionType.REDO, preferences, controller, \"redo\");\n        createClipboardAction(ActionType.CUT, preferences, TransferHandler.getCutAction(), true);\n        createClipboardAction(ActionType.COPY, preferences, TransferHandler.getCopyAction(), true);\n        createClipboardAction(ActionType.PASTE, preferences, TransferHandler.getPasteAction(), false);\n        createAction(ActionType.DELETE, preferences, controller, \"delete\");\n        createAction(ActionType.SELECT_ALL, preferences, controller, \"selectAll\");\n        createAction(ActionType.ADD_HOME_FURNITURE, preferences, controller, \"addHomeFurniture\");\n        FurnitureController furnitureController \u003d controller.getFurnitureController();\n        createAction(ActionType.DELETE_HOME_FURNITURE, preferences, furnitureController, \"deleteSelection\");\n        createAction(ActionType.MODIFY_FURNITURE, preferences, controller, \"modifySelectedFurniture\");\n        createAction(ActionType.GROUP_FURNITURE, preferences, furnitureController, \"groupSelectedFurniture\");\n        createAction(ActionType.UNGROUP_FURNITURE, preferences, furnitureController, \"ungroupSelectedFurniture\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_TOP, preferences, furnitureController, \"alignSelectedFurnitureOnTop\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BOTTOM, preferences, furnitureController, \"alignSelectedFurnitureOnBottom\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT, preferences, furnitureController, \"alignSelectedFurnitureOnLeft\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT, preferences, furnitureController, \"alignSelectedFurnitureOnRight\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnFrontSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnBackSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnLeftSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnRightSide\");\n        createAction(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, preferences, furnitureController, \"alignSelectedFurnitureSideBySide\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, preferences, furnitureController, \"distributeSelectedFurnitureHorizontally\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, preferences, furnitureController, \"distributeSelectedFurnitureVertically\");\n        final HomeController3D homeController3D \u003d controller.getHomeController3D();\n        if (homeController3D.getView() !\u003d null) {\n            createAction(ActionType.IMPORT_FURNITURE, preferences, controller, \"importFurniture\");\n        }\n        createAction(ActionType.IMPORT_FURNITURE_LIBRARY, preferences, controller, \"importFurnitureLibrary\");\n        createAction(ActionType.IMPORT_TEXTURES_LIBRARY, preferences, controller, \"importTexturesLibrary\");\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_NAME, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_X, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_Y, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_COLOR, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TYPE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER, preferences, furnitureController, \"toggleFurnitureSortOrder\");\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_NAME, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_X, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_Y, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_COLOR, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        PlanController planController \u003d controller.getPlanController();\n        if (planController.getView() !\u003d null) {\n            ButtonGroup modeGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.SELECT, planController.getMode() \u003d\u003d PlanController.Mode.SELECTION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.SELECTION);\n            createToggleAction(ActionType.PAN, planController.getMode() \u003d\u003d PlanController.Mode.PANNING, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.PANNING);\n            createToggleAction(ActionType.CREATE_WALLS, planController.getMode() \u003d\u003d PlanController.Mode.WALL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.WALL_CREATION);\n            createToggleAction(ActionType.CREATE_ROOMS, planController.getMode() \u003d\u003d PlanController.Mode.ROOM_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.ROOM_CREATION);\n            createToggleAction(ActionType.CREATE_DIMENSION_LINES, planController.getMode() \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.DIMENSION_LINE_CREATION);\n            createToggleAction(ActionType.CREATE_LABELS, planController.getMode() \u003d\u003d PlanController.Mode.LABEL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.LABEL_CREATION);\n            createAction(ActionType.DELETE_SELECTION, preferences, planController, \"deleteSelection\");\n            createAction(ActionType.LOCK_BASE_PLAN, preferences, planController, \"lockBasePlan\");\n            createAction(ActionType.UNLOCK_BASE_PLAN, preferences, planController, \"unlockBasePlan\");\n            createAction(ActionType.MODIFY_COMPASS, preferences, planController, \"modifyCompass\");\n            createAction(ActionType.MODIFY_WALL, preferences, planController, \"modifySelectedWalls\");\n            createAction(ActionType.MODIFY_ROOM, preferences, planController, \"modifySelectedRooms\");\n            createAction(ActionType.MODIFY_LABEL, preferences, planController, \"modifySelectedLabels\");\n            createAction(ActionType.INCREASE_TEXT_SIZE, preferences, planController, \"increaseTextSize\");\n            createAction(ActionType.DECREASE_TEXT_SIZE, preferences, planController, \"decreaseTextSize\");\n            // Use special toggle models for bold and italic check box menu items and tool bar buttons\n            // that are selected texts in home selected items are all bold or italic\n            Action toggleBoldAction \u003d createAction(ActionType.TOGGLE_BOLD_STYLE, preferences, planController, \"toggleBoldStyle\");\n            toggleBoldAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createBoldStyleToggleModel(home, preferences));\n            Action toggleItalicAction \u003d createAction(ActionType.TOGGLE_ITALIC_STYLE, preferences, planController, \"toggleItalicStyle\");\n            toggleItalicAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createItalicStyleToggleModel(home, preferences));\n            createAction(ActionType.REVERSE_WALL_DIRECTION, preferences, planController, \"reverseSelectedWallsDirection\");\n            createAction(ActionType.SPLIT_WALL, preferences, planController, \"splitSelectedWall\");\n            createAction(ActionType.IMPORT_BACKGROUND_IMAGE, preferences, controller, \"importBackgroundImage\");\n            createAction(ActionType.MODIFY_BACKGROUND_IMAGE, preferences, controller, \"modifyBackgroundImage\");\n            createAction(ActionType.HIDE_BACKGROUND_IMAGE, preferences, controller, \"hideBackgroundImage\");\n            createAction(ActionType.SHOW_BACKGROUND_IMAGE, preferences, controller, \"showBackgroundImage\");\n            createAction(ActionType.DELETE_BACKGROUND_IMAGE, preferences, controller, \"deleteBackgroundImage\");\n            createAction(ActionType.ADD_LEVEL, preferences, planController, \"addLevel\");\n            createAction(ActionType.MODIFY_LEVEL, preferences, planController, \"modifySelectedLevel\");\n            createAction(ActionType.DELETE_LEVEL, preferences, planController, \"deleteSelectedLevel\");\n            createAction(ActionType.ZOOM_IN, preferences, controller, \"zoomIn\");\n            createAction(ActionType.ZOOM_OUT, preferences, controller, \"zoomOut\");\n            createAction(ActionType.EXPORT_TO_SVG, preferences, controller, \"exportToSVG\");\n        }\n        if (homeController3D.getView() !\u003d null) {\n            ButtonGroup viewGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera(), viewGroup, preferences, homeController3D, \"viewFromTop\");\n            createToggleAction(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera(), viewGroup, preferences, homeController3D, \"viewFromObserver\");\n            createAction(ActionType.MODIFY_OBSERVER, preferences, planController, \"modifyObserverCamera\");\n            createAction(ActionType.STORE_POINT_OF_VIEW, preferences, controller, \"storeCamera\");\n            getActionMap().put(ActionType.DETACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.DETACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.detachView(homeController3D.getView());\n                }\n            });\n            getActionMap().put(ActionType.ATTACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.ATTACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.attachView(homeController3D.getView());\n                }\n            });\n            ButtonGroup displayLevelGroup \u003d new ButtonGroup();\n            boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n            createToggleAction(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displayAllLevels\");\n            createToggleAction(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displaySelectedLevel\");\n            createAction(ActionType.MODIFY_3D_ATTRIBUTES, preferences, homeController3D, \"modifyAttributes\");\n            createAction(ActionType.CREATE_PHOTO, preferences, controller, \"createPhoto\");\n            createAction(ActionType.CREATE_VIDEO, preferences, controller, \"createVideo\");\n            createAction(ActionType.EXPORT_TO_OBJ, preferences, controller, \"exportToOBJ\");\n        }\n        createAction(ActionType.HELP, preferences, controller, \"help\");\n        createAction(ActionType.ABOUT, preferences, controller, \"about\");\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object that calls on \u003ccode\u003econtroller\u003c/code\u003e a given\n     * \u003ccode\u003emethod\u003c/code\u003e with its \u003ccode\u003eparameters\u003c/code\u003e. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        try {\n            ControllerAction action \u003d new ControllerAction(preferences, HomePane.class, actionType.name(), controller, method, parameters);\n            getActionMap().put(actionType, action);\n            return action;\n        } catch (NoSuchMethodException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object associated with a \u003ccode\u003eToggleButtonModel\u003c/code\u003e instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        Action action \u003d createAction(actionType, preferences, controller, method, parameters);\n        JToggleButton.ToggleButtonModel toggleButtonModel \u003d new JToggleButton.ToggleButtonModel();\n        toggleButtonModel.setSelected(selected);\n        if (group !\u003d null) {\n            toggleButtonModel.setGroup(group);\n        }\n        action.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, toggleButtonModel);\n        return action;\n    }\n\n    /**\n     * Creates a \u003ccode\u003eReourceAction\u003c/code\u003e object that calls\n     * \u003ccode\u003eactionPerfomed\u003c/code\u003e method on a given\n     * existing \u003ccode\u003eclipboardAction\u003c/code\u003e with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction) {\n        getActionMap().put(actionType, new ResourceAction(preferences, HomePane.class, actionType.name()) {\n\n            public void actionPerformed(ActionEvent ev) {\n                if (copyAction) {\n                    clipboardEmpty \u003d false;\n                }\n                ev \u003d new ActionEvent(lastFocusedComponent, ActionEvent.ACTION_PERFORMED, null);\n                clipboardAction.actionPerformed(ev);\n            }\n        });\n    }\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller) {\n        this.menuActionMap \u003d new ActionMap();\n        createMenuAction(preferences, MenuActionType.FILE_MENU);\n        createMenuAction(preferences, MenuActionType.EDIT_MENU);\n        createMenuAction(preferences, MenuActionType.FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.PLAN_MENU);\n        createMenuAction(preferences, MenuActionType.VIEW_3D_MENU);\n        createMenuAction(preferences, MenuActionType.HELP_MENU);\n        createMenuAction(preferences, MenuActionType.OPEN_RECENT_HOME_MENU);\n        createMenuAction(preferences, MenuActionType.SORT_HOME_FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.ALIGN_OR_DISTRIBUTE_MENU);\n        createMenuAction(preferences, MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU);\n        createMenuAction(preferences, MenuActionType.MODIFY_TEXT_STYLE);\n        createMenuAction(preferences, MenuActionType.GO_TO_POINT_OF_VIEW);\n        createMenuAction(preferences, MenuActionType.SELECT_OBJECT_MENU);\n    }\n\n    /**\n     * Creates a \u003ccode\u003eResourceAction\u003c/code\u003e object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action) {\n        this.menuActionMap.put(action, new ResourceAction(preferences, HomePane.class, action.name(), true));\n    }\n\n    /**\n     * Creates the Swing actions matching each actions available in \u003ccode\u003eplugins\u003c/code\u003e.\n     */\n    private void createPluginActions(List\u003cPlugin\u003e plugins) {\n        this.pluginActions \u003d new ArrayList\u003cAction\u003e();\n        if (plugins !\u003d null) {\n            for (Plugin plugin : plugins) {\n                for (final PluginAction pluginAction : plugin.getActions()) {\n                    // Create a Swing action adapter to plug-in action\n                    this.pluginActions.add(new ActionAdapter(pluginAction));\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller) {\n        this.catalogTransferHandler \u003d new FurnitureCatalogTransferHandler(controller.getContentManager(), controller.getFurnitureCatalogController(), controller.getFurnitureController());\n        this.furnitureTransferHandler \u003d new FurnitureTransferHandler(home, controller.getContentManager(), controller);\n        this.planTransferHandler \u003d new PlanTransferHandler(home, controller.getContentManager(), controller);\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home) {\n        home.addPropertyChangeListener(Home.Property.CAMERA, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera());\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera());\n            }\n        });\n    }\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected) {\n        ((JToggleButton.ToggleButtonModel) getActionMap().get(actionType).getValue(ResourceAction.TOGGLE_BUTTON_MODEL)).setSelected(selected);\n    }\n\n    /**\n     * Adds listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home) {\n        home.getEnvironment().addPropertyChangeListener(HomeEnvironment.Property.ALL_LEVELS_VISIBLE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n                setToggleButtonModelSelected(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible);\n                setToggleButtonModelSelected(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible);\n            }\n        });\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003epreferences\u003c/code\u003e to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences) {\n        preferences.addPropertyChangeListener(UserPreferences.Property.LANGUAGE, new LanguageChangeListener(this));\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003eplanController\u003c/code\u003e to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController) {\n        planController.addPropertyChangeListener(PlanController.Property.MODE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                Mode mode \u003d planController.getMode();\n                setToggleButtonModelSelected(ActionType.SELECT, mode \u003d\u003d PlanController.Mode.SELECTION);\n                setToggleButtonModelSelected(ActionType.PAN, mode \u003d\u003d PlanController.Mode.PANNING);\n                setToggleButtonModelSelected(ActionType.CREATE_WALLS, mode \u003d\u003d PlanController.Mode.WALL_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_ROOMS, mode \u003d\u003d PlanController.Mode.ROOM_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_DIMENSION_LINES, mode \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_LABELS, mode \u003d\u003d PlanController.Mode.LABEL_CREATION);\n            }\n        });\n    }\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener() {\n        KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"currentFocusCycleRoot\", new FocusCycleRootChangeListener(this));\n    }\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener \u003d null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener \u003d new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent !\u003d null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent \u003d homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode !\u003d null \u0026\u0026 (lostFocusedComponent \u003d\u003d homePane.controller.getPlanController().getView() || ev.getNewValue() \u003d\u003d null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode \u003d null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() !\u003d null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent \u003d (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) \u0026\u0026 gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews \u003d { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view !\u003d null \u0026\u0026 SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent \u003d (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener \u003d new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController \u003d controller.getPlanController();\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 (ev.getModifiers() \u0026 (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) \u003d\u003d 0 \u0026\u0026 getActionMap().get(ActionType.PAN).getValue(Action.NAME) !\u003d null \u0026\u0026 planController.getMode() !\u003d PlanController.Mode.PANNING \u0026\u0026 !planController.isModificationState() \u0026\u0026 SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) \u0026\u0026 !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode \u003d planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 previousPlanControllerMode !\u003d null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode \u003d null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap \u003d getActionMap();\n            Action[] specialKeyActions \u003d { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask \u003d KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke \u003d (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() \u003d\u003d actionKeyStroke.getKeyChar() \u0026\u0026 (ev.getModifiers() \u0026 modifiersMask) \u003d\u003d (actionKeyStroke.getModifiers() \u0026 modifiersMask) \u0026\u0026 specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy() {\n        setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {\n\n            @Override\n            protected boolean accept(Component component) {\n                if (super.accept(component)) {\n                    for (JSplitPane splitPane; (splitPane \u003d (JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, component)) !\u003d null; component \u003d splitPane) {\n                        if (isChildComponentInvisible(splitPane, component)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n        setFocusTraversalPolicyProvider(true);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the top or the bottom component of the \u003ccode\u003esplitPane\u003c/code\u003e\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent) {\n        return (SwingUtilities.isDescendingFrom(childComponent, splitPane.getTopComponent()) \u0026\u0026 (splitPane.getTopComponent().getWidth() \u003d\u003d 0 || splitPane.getTopComponent().getHeight() \u003d\u003d 0)) || (SwingUtilities.isDescendingFrom(childComponent, splitPane.getBottomComponent()) \u0026\u0026 (splitPane.getBottomComponent().getWidth() \u003d\u003d 0 || splitPane.getBottomComponent().getHeight() \u003d\u003d 0));\n    }\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller) {\n        // Create File menu\n        JMenu fileMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FILE_MENU));\n        addActionToMenu(ActionType.NEW_HOME, fileMenu);\n        addActionToMenu(ActionType.OPEN, fileMenu);\n        final JMenu openRecentHomeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.OPEN_RECENT_HOME_MENU));\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n        openRecentHomeMenu.addMenuListener(new MenuListener() {\n\n            public void menuSelected(MenuEvent ev) {\n                updateOpenRecentHomeMenu(openRecentHomeMenu, controller);\n            }\n\n            public void menuCanceled(MenuEvent ev) {\n            }\n\n            public void menuDeselected(MenuEvent ev) {\n            }\n        });\n        fileMenu.add(openRecentHomeMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.CLOSE, fileMenu);\n        addActionToMenu(ActionType.SAVE, fileMenu);\n        addActionToMenu(ActionType.SAVE_AS, fileMenu);\n        addActionToMenu(ActionType.SAVE_AND_COMPRESS, fileMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.PAGE_SETUP, fileMenu);\n        addActionToMenu(ActionType.PRINT_PREVIEW, fileMenu);\n        addActionToMenu(ActionType.PRINT, fileMenu);\n        // Don\u0027t add PRINT_TO_PDF, PREFERENCES and EXIT menu items under Mac OS X,\n        // because PREFERENCES and EXIT items are displayed in application menu\n        // and PRINT_TO_PDF is available in standard Mac OS X Print dialog\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.PRINT_TO_PDF, fileMenu);\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.PREFERENCES, fileMenu);\n        }\n        // Create Edit menu\n        JMenu editMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.EDIT_MENU));\n        addActionToMenu(ActionType.UNDO, editMenu);\n        addActionToMenu(ActionType.REDO, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.CUT, editMenu);\n        addActionToMenu(ActionType.COPY, editMenu);\n        addActionToMenu(ActionType.PASTE, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.DELETE, editMenu);\n        addActionToMenu(ActionType.SELECT_ALL, editMenu);\n        // Create Furniture menu\n        JMenu furnitureMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FURNITURE_MENU));\n        addActionToMenu(ActionType.ADD_HOME_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.MODIFY_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.GROUP_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.UNGROUP_FURNITURE, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.IMPORT_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_FURNITURE_LIBRARY, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_TEXTURES_LIBRARY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        furnitureMenu.add(createFurnitureSortMenu(home, preferences));\n        furnitureMenu.add(createFurnitureDisplayPropertyMenu(home, preferences));\n        // Create Plan menu\n        JMenu planMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.PLAN_MENU));\n        addToggleActionToMenu(ActionType.SELECT, true, planMenu);\n        addToggleActionToMenu(ActionType.PAN, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_WALLS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_ROOMS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_DIMENSION_LINES, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_LABELS, true, planMenu);\n        planMenu.addSeparator();\n        JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, false);\n        if (lockUnlockBasePlanMenuItem !\u003d null) {\n            planMenu.add(lockUnlockBasePlanMenuItem);\n        }\n        addActionToMenu(ActionType.MODIFY_COMPASS, planMenu);\n        addActionToMenu(ActionType.MODIFY_WALL, planMenu);\n        addActionToMenu(ActionType.REVERSE_WALL_DIRECTION, planMenu);\n        addActionToMenu(ActionType.SPLIT_WALL, planMenu);\n        addActionToMenu(ActionType.MODIFY_ROOM, planMenu);\n        addActionToMenu(ActionType.MODIFY_LABEL, planMenu);\n        planMenu.add(createTextStyleMenu(home, preferences, false));\n        planMenu.addSeparator();\n        JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, false);\n        if (importModifyBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(importModifyBackgroundImageMenuItem);\n        }\n        JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, false);\n        if (hideShowBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(hideShowBackgroundImageMenuItem);\n        }\n        addActionToMenu(ActionType.DELETE_BACKGROUND_IMAGE, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ADD_LEVEL, planMenu);\n        addActionToMenu(ActionType.MODIFY_LEVEL, planMenu);\n        addActionToMenu(ActionType.DELETE_LEVEL, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ZOOM_IN, planMenu);\n        addActionToMenu(ActionType.ZOOM_OUT, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_SVG, planMenu);\n        // Create 3D Preview menu\n        JMenu preview3DMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.VIEW_3D_MENU));\n        addToggleActionToMenu(ActionType.VIEW_FROM_TOP, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.VIEW_FROM_OBSERVER, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_OBSERVER, preview3DMenu);\n        addActionToMenu(ActionType.STORE_POINT_OF_VIEW, preview3DMenu);\n        JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n        if (goToPointOfViewMenu !\u003d null) {\n            preview3DMenu.add(goToPointOfViewMenu);\n        }\n        preview3DMenu.addSeparator();\n        JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, false);\n        if (attachDetach3DViewMenuItem !\u003d null) {\n            preview3DMenu.add(attachDetach3DViewMenuItem);\n        }\n        addToggleActionToMenu(ActionType.DISPLAY_ALL_LEVELS, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_3D_ATTRIBUTES, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.CREATE_PHOTO, preview3DMenu);\n        addActionToMenu(ActionType.CREATE_VIDEO, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_OBJ, preview3DMenu);\n        // Create Help menu\n        JMenu helpMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.HELP_MENU));\n        addActionToMenu(ActionType.HELP, helpMenu);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.ABOUT, helpMenu);\n        }\n        // Add menus to menu bar\n        JMenuBar menuBar \u003d new JMenuBar();\n        menuBar.add(fileMenu);\n        menuBar.add(editMenu);\n        menuBar.add(furnitureMenu);\n        if (controller.getPlanController().getView() !\u003d null) {\n            menuBar.add(planMenu);\n        }\n        if (controller.getHomeController3D().getView() !\u003d null) {\n            menuBar.add(preview3DMenu);\n        }\n        menuBar.add(helpMenu);\n        // Add plugin actions menu items\n        for (Action pluginAction : this.pluginActions) {\n            String pluginMenu \u003d (String) pluginAction.getValue(PluginAction.Property.MENU.name());\n            if (pluginMenu !\u003d null) {\n                boolean pluginActionAdded \u003d false;\n                for (int i \u003d 0; i \u003c menuBar.getMenuCount(); i++) {\n                    JMenu menu \u003d menuBar.getMenu(i);\n                    if (menu.getText().equals(pluginMenu)) {\n                        // Add menu item to existing menu\n                        menu.addSeparator();\n                        menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                        pluginActionAdded \u003d true;\n                        break;\n                    }\n                }\n                if (!pluginActionAdded) {\n                    // Create missing menu before last menu\n                    JMenu menu \u003d new JMenu(pluginMenu);\n                    menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                    menuBar.add(menu, menuBar.getMenuCount() - 1);\n                }\n            }\n        }\n        // Add EXIT action at end to ensure it\u0027s the last item of file menu\n        if (!OperatingSystem.isMacOSX()) {\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.EXIT, fileMenu);\n        }\n        removeUselessSeparatorsAndEmptyMenus(menuBar);\n        return menuBar;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu) {\n        addActionToMenu(actionType, false, menu);\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu) {\n        addToggleActionToMenu(actionType, false, radioButton, menu);\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, popup, radioButton));\n        }\n    }\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton) {\n        JMenuItem menuItem;\n        if (radioButton) {\n            menuItem \u003d new JRadioButtonMenuItem();\n        } else {\n            menuItem \u003d new JCheckBoxMenuItem();\n        }\n        // Configure model\n        menuItem.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n        // Configure menu item action after setting its model to avoid losing its mnemonic\n        menuItem.setAction(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        return menuItem;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(new ResourceAction.PopupMenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, true, radioButton));\n        }\n    }\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component) {\n        for (int i \u003d component.getComponentCount() - 1; i \u003e\u003d 0; i--) {\n            Component child \u003d component.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d component.getComponentCount() - 1 || component.getComponent(i - 1) instanceof JSeparator)) {\n                component.remove(i);\n            } else if (child instanceof JMenu) {\n                removeUselessSeparatorsAndEmptyMenus(((JMenu) child).getPopupMenu());\n            }\n            if (child instanceof JMenu \u0026\u0026 (((JMenu) child).getMenuComponentCount() \u003d\u003d 0 || ((JMenu) child).getMenuComponentCount() \u003d\u003d 1 \u0026\u0026 ((JMenu) child).getMenuComponent(0) instanceof JSeparator)) {\n                component.remove(i);\n            }\n        }\n        // Don\u0027t let a menu start with a separator\n        if (component.getComponentCount() \u003e 0 \u0026\u0026 component.getComponent(0) instanceof JSeparator) {\n            component.remove(0);\n        }\n    }\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu alignOrDistributeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.ALIGN_OR_DISTRIBUTE_MENU));\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, popup, alignOrDistributeMenu);\n        return alignOrDistributeMenu;\n    }\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Sort submenu\n        JMenu sortMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.SORT_HOME_FURNITURE_MENU));\n        // Map sort furniture properties to sort actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e sortActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, sortActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_NAME, sortActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, sortActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, sortActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, sortActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_X, sortActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_Y, sortActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, sortActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, sortActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, sortActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_COLOR, sortActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, sortActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, sortActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TYPE, sortActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, sortActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE, sortActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, sortActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu and make them share the same radio button group\n        ButtonGroup sortButtonGroup \u003d new ButtonGroup();\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : sortActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action sortAction \u003d entry.getValue();\n            JRadioButtonMenuItem sortMenuItem \u003d new JRadioButtonMenuItem();\n            // Use a special model for sort radio button menu item that is selected if\n            // home is sorted on furnitureProperty criterion\n            sortMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return furnitureProperty \u003d\u003d home.getFurnitureSortedProperty();\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            sortMenuItem.setAction(new ResourceAction.MenuItemAction(sortAction));\n            sortMenu.add(sortMenuItem);\n            sortButtonGroup.add(sortMenuItem);\n        }\n        Action sortOrderAction \u003d getActionMap().get(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER);\n        if (sortOrderAction.getValue(Action.NAME) !\u003d null) {\n            sortMenu.addSeparator();\n            JCheckBoxMenuItem sortOrderCheckBoxMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for sort order check box menu item that is selected depending on\n            // home sort order property\n            sortOrderCheckBoxMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.isFurnitureDescendingSorted();\n                }\n            });\n            sortOrderCheckBoxMenuItem.setAction(new ResourceAction.MenuItemAction(sortOrderAction));\n            sortMenu.add(sortOrderCheckBoxMenuItem);\n        }\n        return sortMenu;\n    }\n\n    /**\n     * Adds to \u003ccode\u003eactions\u003c/code\u003e the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToMap(ActionType actionType, Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e actions, HomePieceOfFurniture.SortableProperty key) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            actions.put(key, action);\n        }\n    }\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Display property submenu\n        JMenu displayPropertyMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU));\n        // Map displayProperty furniture properties to displayProperty actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e displayPropertyActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, displayPropertyActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_NAME, displayPropertyActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, displayPropertyActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_X, displayPropertyActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_Y, displayPropertyActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, displayPropertyActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_COLOR, displayPropertyActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : displayPropertyActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action displayPropertyAction \u003d entry.getValue();\n            JCheckBoxMenuItem displayPropertyMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for displayProperty check box menu item that is selected if\n            // home furniture visible properties contains furnitureProperty\n            displayPropertyMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.getFurnitureVisibleProperties().contains(furnitureProperty);\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            displayPropertyMenuItem.setAction(displayPropertyAction);\n            displayPropertyMenu.add(displayPropertyMenuItem);\n        }\n        return displayPropertyMenu;\n    }\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem lockUnlockBasePlanMenuItem \u003d new JMenuItem(createLockUnlockBasePlanAction(home, popup));\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanMenuItem.setAction(createLockUnlockBasePlanAction(home, popup));\n                }\n            });\n            return lockUnlockBasePlanMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup) {\n        ActionType actionType \u003d home.isBasePlanLocked() ? ActionType.UNLOCK_BASE_PLAN : ActionType.LOCK_BASE_PLAN;\n        Action action \u003d getActionMap().get(actionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action);\n    }\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JButton lockUnlockBasePlanButton \u003d new JButton(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n            lockUnlockBasePlanButton.setBorderPainted(false);\n            lockUnlockBasePlanButton.setContentAreaFilled(false);\n            lockUnlockBasePlanButton.setFocusable(false);\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanButton.setAction(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n                }\n            });\n            return lockUnlockBasePlanButton;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu modifyTextStyleMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.MODIFY_TEXT_STYLE));\n        addActionToMenu(ActionType.INCREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        addActionToMenu(ActionType.DECREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        modifyTextStyleMenu.addSeparator();\n        addToggleActionToMenu(ActionType.TOGGLE_BOLD_STYLE, popup, false, modifyTextStyleMenu);\n        addToggleActionToMenu(ActionType.TOGGLE_ITALIC_STYLE, popup, false, modifyTextStyleMenu);\n        return modifyTextStyleMenu;\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all bold or not\n                Boolean selectionBoldStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean bold;\n                    if (item instanceof Label) {\n                        bold \u003d isItemTextBold(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        bold \u003d isItemTextBold(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        bold \u003d isItemTextBold(room, room.getNameStyle());\n                        if (bold !\u003d isItemTextBold(room, room.getAreaStyle())) {\n                            bold \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        bold \u003d isItemTextBold(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionBoldStyle \u003d\u003d null) {\n                        selectionBoldStyle \u003d bold;\n                    } else if (bold \u003d\u003d null || !selectionBoldStyle.equals(bold)) {\n                        selectionBoldStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionBoldStyle !\u003d null \u0026\u0026 selectionBoldStyle;\n            }\n\n            private boolean isItemTextBold(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isBold();\n            }\n        };\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all italic or not\n                Boolean selectionItalicStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean italic;\n                    if (item instanceof Label) {\n                        italic \u003d isItemTextItalic(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        italic \u003d isItemTextItalic(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        italic \u003d isItemTextItalic(room, room.getNameStyle());\n                        if (italic !\u003d isItemTextItalic(room, room.getAreaStyle())) {\n                            italic \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        italic \u003d isItemTextItalic(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionItalicStyle \u003d\u003d null) {\n                        selectionItalicStyle \u003d italic;\n                    } else if (italic \u003d\u003d null || !selectionItalicStyle.equals(italic)) {\n                        selectionItalicStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionItalicStyle !\u003d null \u0026\u0026 selectionItalicStyle;\n            }\n\n            private boolean isItemTextItalic(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isItalic();\n            }\n        };\n    }\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action importBackgroundImageAction \u003d actionMap.get(ActionType.IMPORT_BACKGROUND_IMAGE);\n        Action modifyBackgroundImageAction \u003d actionMap.get(ActionType.MODIFY_BACKGROUND_IMAGE);\n        if (importBackgroundImageAction !\u003d null \u0026\u0026 importBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 modifyBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem importModifyBackgroundImageMenuItem \u003d new JMenuItem(createImportModifyBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    importModifyBackgroundImageMenuItem.setAction(createImportModifyBackgroundImageAction(home, popup));\n                }\n            });\n            return importModifyBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener) {\n        home.addPropertyChangeListener(Home.Property.BACKGROUND_IMAGE, listener);\n        home.addPropertyChangeListener(Home.Property.SELECTED_LEVEL, listener);\n        final PropertyChangeListener levelChangeListener \u003d new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                if (Level.Property.BACKGROUND_IMAGE.name().equals(ev.getPropertyName())) {\n                    listener.propertyChange(ev);\n                }\n            }\n        };\n        for (Level level : this.home.getLevels()) {\n            level.addPropertyChangeListener(levelChangeListener);\n        }\n        this.home.addLevelsListener(new CollectionListener\u003cLevel\u003e() {\n\n            public void collectionChanged(CollectionEvent\u003cLevel\u003e ev) {\n                switch(ev.getType()) {\n                    case ADD:\n                        ev.getItem().addPropertyChangeListener(levelChangeListener);\n                        break;\n                    case DELETE:\n                        ev.getItem().removePropertyChangeListener(levelChangeListener);\n                        break;\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null ? ActionType.IMPORT_BACKGROUND_IMAGE : ActionType.MODIFY_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action hideBackgroundImageAction \u003d actionMap.get(ActionType.HIDE_BACKGROUND_IMAGE);\n        Action showBackgroundImageAction \u003d actionMap.get(ActionType.SHOW_BACKGROUND_IMAGE);\n        if (hideBackgroundImageAction !\u003d null \u0026\u0026 hideBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 showBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem hideShowBackgroundImageMenuItem \u003d new JMenuItem(createHideShowBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    hideShowBackgroundImageMenuItem.setAction(createHideShowBackgroundImageAction(home, popup));\n                }\n            });\n            return hideShowBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null || backgroundImage.isVisible() ? ActionType.HIDE_BACKGROUND_IMAGE : ActionType.SHOW_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller) {\n        Action goToPointOfViewAction \u003d this.menuActionMap.get(MenuActionType.GO_TO_POINT_OF_VIEW);\n        if (goToPointOfViewAction.getValue(Action.NAME) !\u003d null) {\n            final JMenu goToPointOfViewMenu \u003d new JMenu(goToPointOfViewAction);\n            updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n            home.addPropertyChangeListener(Home.Property.STORED_CAMERAS, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n                }\n            });\n            return goToPointOfViewMenu;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller) {\n        List\u003cCamera\u003e storedCameras \u003d home.getStoredCameras();\n        goToPointOfViewMenu.removeAll();\n        if (storedCameras.isEmpty()) {\n            goToPointOfViewMenu.setEnabled(false);\n            goToPointOfViewMenu.add(new ResourceAction(preferences, HomePane.class, \"NoStoredPointOfView\", false));\n        } else {\n            goToPointOfViewMenu.setEnabled(true);\n            for (final Camera camera : storedCameras) {\n                goToPointOfViewMenu.add(new AbstractAction(camera.getName()) {\n\n                    public void actionPerformed(ActionEvent e) {\n                        controller.getHomeController3D().goToCamera(camera);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action display3DViewInSeparateWindowAction \u003d actionMap.get(ActionType.DETACH_3D_VIEW);\n        Action display3DViewInMainWindowAction \u003d actionMap.get(ActionType.ATTACH_3D_VIEW);\n        if (display3DViewInSeparateWindowAction !\u003d null \u0026\u0026 display3DViewInSeparateWindowAction.getValue(Action.NAME) !\u003d null \u0026\u0026 display3DViewInMainWindowAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem attachDetach3DViewMenuItem \u003d new JMenuItem(createAttachDetach3DViewAction(controller, popup));\n            // Add a listener to 3D view to switch action when its parent changes\n            JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n            view3D.addAncestorListener(new AncestorListener() {\n\n                public void ancestorAdded(AncestorEvent ev) {\n                    attachDetach3DViewMenuItem.setAction(createAttachDetach3DViewAction(controller, popup));\n                }\n\n                public void ancestorRemoved(AncestorEvent ev) {\n                }\n\n                public void ancestorMoved(AncestorEvent ev) {\n                }\n            });\n            return attachDetach3DViewMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup) {\n        JRootPane view3DRootPane \u003d SwingUtilities.getRootPane((JComponent) controller.getHomeController3D().getView());\n        ActionType display3DViewActionType \u003d view3DRootPane \u003d\u003d this ? ActionType.DETACH_3D_VIEW : ActionType.ATTACH_3D_VIEW;\n        Action backgroundImageAction \u003d getActionMap().get(display3DViewActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Updates \u003ccode\u003eopenRecentHomeMenu\u003c/code\u003e from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller) {\n        openRecentHomeMenu.removeAll();\n        for (final String homeName : controller.getRecentHomes()) {\n            openRecentHomeMenu.add(new AbstractAction(controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D)) {\n\n                public void actionPerformed(ActionEvent e) {\n                    controller.open(homeName);\n                }\n            });\n        }\n        if (openRecentHomeMenu.getMenuComponentCount() \u003e 0) {\n            openRecentHomeMenu.addSeparator();\n        }\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n    }\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home) {\n        final JToolBar toolBar \u003d new UnfocusableToolBar();\n        addActionToToolBar(ActionType.NEW_HOME, toolBar);\n        addActionToToolBar(ActionType.OPEN, toolBar);\n        addActionToToolBar(ActionType.SAVE, toolBar);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToToolBar(ActionType.PREFERENCES, toolBar);\n        }\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.UNDO, toolBar);\n        addActionToToolBar(ActionType.REDO, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.CUT, toolBar);\n        addActionToToolBar(ActionType.COPY, toolBar);\n        addActionToToolBar(ActionType.PASTE, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.ADD_HOME_FURNITURE, toolBar);\n        toolBar.addSeparator();\n        addToggleActionToToolBar(ActionType.SELECT, toolBar);\n        addToggleActionToToolBar(ActionType.PAN, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_WALLS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_ROOMS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_DIMENSION_LINES, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_LABELS, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.INCREASE_TEXT_SIZE, toolBar);\n        addActionToToolBar(ActionType.DECREASE_TEXT_SIZE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_BOLD_STYLE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_ITALIC_STYLE, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.ZOOM_IN, toolBar);\n        addActionToToolBar(ActionType.ZOOM_OUT, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.CREATE_PHOTO, toolBar);\n        addActionToToolBar(ActionType.CREATE_VIDEO, toolBar);\n        toolBar.addSeparator();\n        // Add plugin actions buttons\n        boolean pluginActionsAdded \u003d false;\n        for (Action pluginAction : this.pluginActions) {\n            if (Boolean.TRUE.equals(pluginAction.getValue(PluginAction.Property.TOOL_BAR.name()))) {\n                toolBar.add(new ResourceAction.ToolBarAction(pluginAction));\n                pluginActionsAdded \u003d true;\n            }\n        }\n        if (pluginActionsAdded) {\n            toolBar.addSeparator();\n        }\n        addActionToToolBar(ActionType.HELP, toolBar);\n        // Remove useless separators\n        for (int i \u003d toolBar.getComponentCount() - 1; i \u003e 0; i--) {\n            Component child \u003d toolBar.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d toolBar.getComponentCount() - 1 || toolBar.getComponent(i - 1) instanceof JSeparator)) {\n                toolBar.remove(i);\n            }\n        }\n        return toolBar;\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            Action toolBarAction \u003d new ResourceAction.ToolBarAction(action);\n            JToggleButton toggleButton \u003d new JToggleButton(toolBarAction);\n            toggleButton.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n            toolBar.add(toggleButton);\n        }\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            toolBar.add(new ResourceAction.ToolBarAction(action));\n        }\n    }\n\n    /**\n     * Enables or disables the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            action.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText) {\n        setNameAndShortDescription(ActionType.UNDO, undoText);\n        setNameAndShortDescription(ActionType.REDO, redoText);\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * matching \u003ccode\u003eactionType\u003c/code\u003e. If \u003ccode\u003ename\u003c/code\u003e is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            if (name \u003d\u003d null) {\n                name \u003d (String) action.getValue(Action.DEFAULT);\n            }\n            action.putValue(Action.NAME, name);\n            action.putValue(Action.SHORT_DESCRIPTION, name);\n        }\n    }\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled) {\n        boolean dragAndDropWithTransferHandlerSupported;\n        try {\n            // Don\u0027t use transfer handlers for drag and drop with Plugin2 under Mac OS X or when in an unsigned applet\n            dragAndDropWithTransferHandlerSupported \u003d !Boolean.getBoolean(\"com.eteks.sweethome3d.dragAndDropWithoutTransferHandler\");\n        } catch (AccessControlException ex) {\n            dragAndDropWithTransferHandlerSupported \u003d false;\n        }\n        JComponent catalogView \u003d (JComponent) this.controller.getFurnitureCatalogController().getView();\n        JComponent furnitureView \u003d (JComponent) this.controller.getFurnitureController().getView();\n        JComponent planView \u003d (JComponent) this.controller.getPlanController().getView();\n        if (enabled) {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(this.catalogTransferHandler);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(this.furnitureTransferHandler);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(this.furnitureTransferHandler);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(this.planTransferHandler);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    // Check if furniture catalog is handled by a subcomponent\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    if (this.furnitureCatalogDragAndDropListener \u003d\u003d null) {\n                        this.furnitureCatalogDragAndDropListener \u003d createFurnitureCatalogMouseListener();\n                    }\n                    catalogComponent.addMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.addMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        } else {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(null);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(null);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(null);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(null);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    catalogComponent.removeMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.removeMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        }\n        this.transferHandlerEnabled \u003d enabled;\n    }\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener() {\n        return new MouseInputAdapter() {\n\n            private CatalogPieceOfFurniture selectedPiece;\n\n            private TransferHandler transferHandler;\n\n            private boolean autoscrolls;\n\n            private Cursor previousCursor;\n\n            private View previousView;\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev)) {\n                    List\u003cCatalogPieceOfFurniture\u003e selectedFurniture \u003d controller.getFurnitureCatalogController().getSelectedFurniture();\n                    if (selectedFurniture.size() \u003e 0) {\n                        JComponent source \u003d (JComponent) ev.getSource();\n                        this.transferHandler \u003d source.getTransferHandler();\n                        source.setTransferHandler(null);\n                        this.autoscrolls \u003d source.getAutoscrolls();\n                        source.setAutoscrolls(false);\n                        this.selectedPiece \u003d selectedFurniture.get(0);\n                        this.previousCursor \u003d null;\n                        this.previousView \u003d null;\n                    }\n                }\n            }\n\n            @Override\n            public void mouseDragged(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    // Force selection again\n                    List\u003cCatalogPieceOfFurniture\u003e emptyList \u003d Collections.emptyList();\n                    controller.getFurnitureCatalogController().setSelectedFurniture(emptyList);\n                    controller.getFurnitureCatalogController().setSelectedFurniture(Arrays.asList(new CatalogPieceOfFurniture[] { this.selectedPiece }));\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (this.previousView !\u003d view) {\n                        if (this.previousView !\u003d null) {\n                            if (this.previousView \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().stopDraggedItems();\n                            }\n                            ((JComponent) this.previousView).setCursor(this.previousCursor);\n                            this.previousCursor \u003d null;\n                            this.previousView \u003d null;\n                        }\n                        if (view !\u003d null) {\n                            JComponent component \u003d (JComponent) view;\n                            this.previousCursor \u003d component.getCursor();\n                            this.previousView \u003d view;\n                            component.setCursor(DragSource.DefaultCopyDrop);\n                            if (component.getParent() instanceof JViewport) {\n                                ((JViewport) component.getParent()).setCursor(DragSource.DefaultCopyDrop);\n                            }\n                            if (view \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().startDraggedItems(transferredFurniture, pointInView[0], pointInView[1]);\n                            }\n                        }\n                    } else if (pointInView !\u003d null) {\n                        controller.getPlanController().moveMouse(pointInView[0], pointInView[1]);\n                    }\n                }\n            }\n\n            private float[] getPointInPlanView(MouseEvent ev, List\u003cSelectable\u003e transferredFurniture) {\n                PlanView planView \u003d controller.getPlanController().getView();\n                if (planView !\u003d null) {\n                    JComponent planComponent \u003d (JComponent) planView;\n                    Point pointInPlanComponent \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent);\n                    if (planComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) planComponent.getParent()).contains(SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent.getParent())) || !(planComponent.getParent() instanceof JViewport) \u0026\u0026 planView.canImportDraggedItems(transferredFurniture, pointInPlanComponent.x, pointInPlanComponent.y)) {\n                        return new float[] { planView.convertXPixelToModel(pointInPlanComponent.x), planView.convertYPixelToModel(pointInPlanComponent.y) };\n                    }\n                }\n                return null;\n            }\n\n            private float[] getPointInFurnitureView(MouseEvent ev) {\n                View furnitureView \u003d controller.getFurnitureController().getView();\n                if (furnitureView !\u003d null) {\n                    JComponent furnitureComponent \u003d (JComponent) furnitureView;\n                    Point point \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getX(), ev.getY(), furnitureComponent.getParent() instanceof JViewport ? furnitureComponent.getParent() : furnitureComponent);\n                    if (furnitureComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) furnitureComponent.getParent()).contains(point) || !(furnitureComponent.getParent() instanceof JViewport) \u0026\u0026 furnitureComponent.contains(point)) {\n                        return new float[] { 0, 0 };\n                    }\n                }\n                return null;\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        controller.getPlanController().stopDraggedItems();\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (pointInView !\u003d null) {\n                        controller.drop(transferredFurniture, view, pointInView[0], pointInView[1]);\n                        ((JComponent) this.previousView).setCursor(this.previousCursor);\n                    }\n                    this.selectedPiece \u003d null;\n                    JComponent source \u003d (JComponent) ev.getSource();\n                    source.setTransferHandler(this.transferHandler);\n                    source.setAutoscrolls(this.autoscrolls);\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller) {\n        final JComponent catalogFurniturePane \u003d createCatalogFurniturePane(home, preferences, controller);\n        final JComponent planView3DPane \u003d createPlanView3DPane(home, preferences, controller);\n        if (catalogFurniturePane \u003d\u003d null) {\n            return planView3DPane;\n        } else if (planView3DPane \u003d\u003d null) {\n            return catalogFurniturePane;\n        } else {\n            final JSplitPane mainPane \u003d new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, catalogFurniturePane, planView3DPane);\n            // Set default divider location\n            mainPane.setDividerLocation(360);\n            configureSplitPane(mainPane, home, MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.3, true, controller);\n            return mainPane;\n        }\n    }\n\n    /**\n     * Configures \u003ccode\u003esplitPane\u003c/code\u003e divider location.\n     * If \u003ccode\u003edividerLocationProperty\u003c/code\u003e visual property exists in \u003ccode\u003ehome\u003c/code\u003e,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller) {\n        splitPane.setContinuousLayout(true);\n        splitPane.setOneTouchExpandable(true);\n        splitPane.setResizeWeight(defaultResizeWeight);\n        if (!showBorder) {\n            splitPane.setBorder(null);\n        }\n        // Restore divider location previously set\n        Integer dividerLocation \u003d (Integer) home.getVisualProperty(dividerLocationProperty);\n        if (dividerLocation !\u003d null) {\n            splitPane.setDividerLocation(dividerLocation);\n        }\n        splitPane.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, new PropertyChangeListener() {\n\n            public void propertyChange(final PropertyChangeEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        Component focusOwner \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();\n                        if (focusOwner !\u003d null \u0026\u0026 isChildComponentInvisible(splitPane, focusOwner)) {\n                            FocusTraversalPolicy focusTraversalPolicy \u003d getFocusTraversalPolicy();\n                            Component focusedComponent \u003d focusTraversalPolicy.getComponentAfter(HomePane.this, focusOwner);\n                            if (focusedComponent \u003d\u003d null) {\n                                focusedComponent \u003d focusTraversalPolicy.getComponentBefore(HomePane.this, focusOwner);\n                            }\n                            if (focusedComponent !\u003d null) {\n                                focusedComponent.requestFocusInWindow();\n                            }\n                        }\n                        controller.setVisualProperty(dividerLocationProperty, ev.getNewValue());\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent catalogView \u003d (JComponent) controller.getFurnitureCatalogController().getView();\n        if (catalogView !\u003d null) {\n            // Create catalog view popup menu\n            JPopupMenu catalogViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.COPY, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_HOME_FURNITURE, catalogViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.IMPORT_FURNITURE, catalogViewPopup);\n            SwingTools.hideDisabledMenuItems(catalogViewPopup);\n            catalogView.setComponentPopupMenu(catalogViewPopup);\n            preferences.addPropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, new FurnitureCatalogViewChangeListener(this, catalogView));\n            if (catalogView instanceof Scrollable) {\n                catalogView \u003d SwingTools.createScrollPane(catalogView);\n            }\n        }\n        // Configure furniture view\n        JComponent furnitureView \u003d (JComponent) controller.getFurnitureController().getView();\n        if (furnitureView !\u003d null) {\n            // Set default traversal keys of furniture view\n            KeyboardFocusManager focusManager \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager();\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS));\n            // Create furniture view popup menu\n            JPopupMenu furnitureViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.REDO, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.COPY, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.SELECT_ALL, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, furnitureViewPopup);\n            furnitureViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            furnitureViewPopup.addSeparator();\n            furnitureViewPopup.add(createFurnitureSortMenu(home, preferences));\n            furnitureViewPopup.add(createFurnitureDisplayPropertyMenu(home, preferences));\n            SwingTools.hideDisabledMenuItems(furnitureViewPopup);\n            furnitureView.setComponentPopupMenu(furnitureViewPopup);\n            if (furnitureView instanceof Scrollable) {\n                JScrollPane furnitureScrollPane \u003d SwingTools.createScrollPane(furnitureView);\n                // Add a mouse listener that gives focus to furniture view when\n                // user clicks in its viewport (tables don\u0027t spread vertically if their row count is too small)\n                final JViewport viewport \u003d furnitureScrollPane.getViewport();\n                viewport.addMouseListener(new MouseAdapter() {\n\n                    @Override\n                    public void mouseClicked(MouseEvent ev) {\n                        viewport.getView().requestFocusInWindow();\n                    }\n                });\n                Integer viewportY \u003d (Integer) home.getVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(0, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        controller.setVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY, viewport.getViewPosition().y);\n                    }\n                });\n                ((JViewport) furnitureView.getParent()).setComponentPopupMenu(furnitureViewPopup);\n                furnitureView \u003d furnitureScrollPane;\n            }\n        }\n        if (catalogView \u003d\u003d null) {\n            return furnitureView;\n        } else if (furnitureView \u003d\u003d null) {\n            return catalogView;\n        } else {\n            // Create a split pane that displays both components\n            JSplitPane catalogFurniturePane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, catalogView, furnitureView);\n            catalogFurniturePane.setBorder(null);\n            catalogFurniturePane.setMinimumSize(new Dimension());\n            configureSplitPane(catalogFurniturePane, home, CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n            return catalogFurniturePane;\n        }\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJComponent\u003e furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView \u003d this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView !\u003d null) {\n                    boolean transferHandlerEnabled \u003d homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView \u003d (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent \u003d SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent planView \u003d (JComponent) controller.getPlanController().getView();\n        if (planView !\u003d null) {\n            // Create plan view popup menu\n            JPopupMenu planViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, planViewPopup);\n            addActionToPopupMenu(ActionType.REDO, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, planViewPopup);\n            addActionToPopupMenu(ActionType.COPY, planViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, planViewPopup);\n            Action selectObjectAction \u003d this.menuActionMap.get(MenuActionType.SELECT_OBJECT_MENU);\n            JMenu selectObjectMenu;\n            if (selectObjectAction.getValue(Action.NAME) !\u003d null) {\n                selectObjectMenu \u003d new JMenu(selectObjectAction);\n                planViewPopup.add(selectObjectMenu);\n            } else {\n                selectObjectMenu \u003d null;\n            }\n            addActionToPopupMenu(ActionType.SELECT_ALL, planViewPopup);\n            planViewPopup.addSeparator();\n            addToggleActionToPopupMenu(ActionType.SELECT, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.PAN, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_WALLS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_ROOMS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_DIMENSION_LINES, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_LABELS, true, planViewPopup);\n            planViewPopup.addSeparator();\n            JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, true);\n            if (lockUnlockBasePlanMenuItem !\u003d null) {\n                planViewPopup.add(lockUnlockBasePlanMenuItem);\n            }\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, planViewPopup);\n            planViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            addActionToPopupMenu(ActionType.MODIFY_COMPASS, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.REVERSE_WALL_DIRECTION, planViewPopup);\n            addActionToPopupMenu(ActionType.SPLIT_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_ROOM, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LABEL, planViewPopup);\n            planViewPopup.add(createTextStyleMenu(home, preferences, true));\n            planViewPopup.addSeparator();\n            JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, true);\n            if (importModifyBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(importModifyBackgroundImageMenuItem);\n            }\n            JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, true);\n            if (hideShowBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(hideShowBackgroundImageMenuItem);\n            }\n            addActionToPopupMenu(ActionType.DELETE_BACKGROUND_IMAGE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.DELETE_LEVEL, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ZOOM_OUT, planViewPopup);\n            addActionToPopupMenu(ActionType.ZOOM_IN, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_SVG, planViewPopup);\n            SwingTools.hideDisabledMenuItems(planViewPopup);\n            if (selectObjectMenu !\u003d null) {\n                // Add a second popup listener to manage Select object sub menu before the menu is hidden when empty\n                addSelectObjectMenuItems(selectObjectMenu, controller.getPlanController(), preferences);\n            }\n            planView.setComponentPopupMenu(planViewPopup);\n            final JScrollPane planScrollPane;\n            if (planView instanceof Scrollable) {\n                planView \u003d planScrollPane \u003d SwingTools.createScrollPane(planView);\n            } else {\n                List\u003cJScrollPane\u003e scrollPanes \u003d SwingTools.findChildren(planView, JScrollPane.class);\n                if (scrollPanes.size() \u003d\u003d 1) {\n                    planScrollPane \u003d scrollPanes.get(0);\n                } else {\n                    planScrollPane \u003d null;\n                }\n            }\n            if (planScrollPane !\u003d null) {\n                setPlanRulersVisible(planScrollPane, controller, preferences.isRulersVisible());\n                if (planScrollPane.getCorner(JScrollPane.UPPER_LEADING_CORNER) \u003d\u003d null) {\n                    final JComponent lockUnlockBasePlanButton \u003d createLockUnlockBasePlanButton(home);\n                    if (lockUnlockBasePlanButton !\u003d null) {\n                        planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                        planScrollPane.addPropertyChangeListener(\"componentOrientation\", new PropertyChangeListener() {\n\n                            public void propertyChange(PropertyChangeEvent ev) {\n                                if (lockUnlockBasePlanButton.getParent() !\u003d null) {\n                                    planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                                }\n                            }\n                        });\n                    }\n                }\n                // Add a listener to update rulers visibility in preferences\n                preferences.addPropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, new RulersVisibilityChangeListener(this, planScrollPane, controller));\n                // Restore viewport position if it exists\n                final JViewport viewport \u003d planScrollPane.getViewport();\n                Integer viewportX \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY);\n                Integer viewportY \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportX !\u003d null \u0026\u0026 viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(viewportX, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        Point viewportPosition \u003d viewport.getViewPosition();\n                        controller.setVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY, viewportPosition.x);\n                        controller.setVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY, viewportPosition.y);\n                    }\n                });\n            }\n        }\n        // Configure 3D view\n        JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n        if (view3D !\u003d null) {\n            view3D.setPreferredSize(planView !\u003d null ? planView.getPreferredSize() : new Dimension(400, 400));\n            view3D.setMinimumSize(new Dimension());\n            // Create 3D view popup menu\n            JPopupMenu view3DPopup \u003d new JPopupMenu();\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_TOP, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_OBSERVER, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_OBSERVER, view3DPopup);\n            addActionToPopupMenu(ActionType.STORE_POINT_OF_VIEW, view3DPopup);\n            JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n            if (goToPointOfViewMenu !\u003d null) {\n                view3DPopup.add(goToPointOfViewMenu);\n            }\n            view3DPopup.addSeparator();\n            JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, true);\n            if (attachDetach3DViewMenuItem !\u003d null) {\n                view3DPopup.add(attachDetach3DViewMenuItem);\n            }\n            addToggleActionToPopupMenu(ActionType.DISPLAY_ALL_LEVELS, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_3D_ATTRIBUTES, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CREATE_PHOTO, view3DPopup);\n            addActionToPopupMenu(ActionType.CREATE_VIDEO, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_OBJ, view3DPopup);\n            SwingTools.hideDisabledMenuItems(view3DPopup);\n            view3D.setComponentPopupMenu(view3DPopup);\n            if (view3D instanceof Scrollable) {\n                view3D \u003d SwingTools.createScrollPane(view3D);\n            }\n            JComponent planView3DPane;\n            if (planView !\u003d null) {\n                // Create a split pane that displays both components\n                final JSplitPane planView3DSplitPane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, planView, view3D);\n                planView3DSplitPane.setMinimumSize(new Dimension());\n                configureSplitPane((JSplitPane) planView3DSplitPane, home, PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n                final Integer dividerLocation \u003d (Integer) home.getVisualProperty(PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                if (OperatingSystem.isMacOSX() \u0026\u0026 dividerLocation !\u003d null \u0026\u0026 dividerLocation \u003e 2) {\n                    // Under Mac OS X, ensure that the 3D view of an existing home will be displayed during a while\n                    // to avoid a freeze when the 3D view was saved as hidden and then the window displaying the 3D view is enlarged\n                    planView3DSplitPane.addAncestorListener(new AncestorListener() {\n\n                        public void ancestorAdded(AncestorEvent event) {\n                            planView3DSplitPane.removeAncestorListener(this);\n                            if (planView3DSplitPane.getRightComponent().getHeight() \u003d\u003d 0) {\n                                // If the 3D view is invisible, make it appear during a while\n                                planView3DSplitPane.setDividerLocation(dividerLocation - 2);\n                                Executors.newSingleThreadScheduledExecutor().schedule(new Runnable() {\n\n                                    public void run() {\n                                        EventQueue.invokeLater(new Runnable() {\n\n                                            public void run() {\n                                                planView3DSplitPane.setDividerLocation(dividerLocation);\n                                            }\n                                        });\n                                    }\n                                }, 1, TimeUnit.SECONDS);\n                            }\n                        }\n\n                        public void ancestorRemoved(AncestorEvent event) {\n                        }\n\n                        public void ancestorMoved(AncestorEvent event) {\n                        }\n                    });\n                }\n                planView3DPane \u003d planView3DSplitPane;\n            } else {\n                planView3DPane \u003d view3D;\n            }\n            // Detach 3D view if it was detached when saved and its dialog can be viewed in one of the screen devices\n            Boolean detachedView3D \u003d (Boolean) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY);\n            if (detachedView3D !\u003d null \u0026\u0026 detachedView3D.booleanValue()) {\n                // Check 3D view can be viewed in one of the available screens\n                final Integer dialogX \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n                final Integer dialogY \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY);\n                final Integer dialogWidth \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n                final Integer dialogHeight \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY);\n                if (dialogX !\u003d null \u0026\u0026 dialogY !\u003d null \u0026\u0026 dialogWidth !\u003d null \u0026\u0026 dialogHeight !\u003d null \u0026\u0026 SwingTools.isRectangleVisibleAtScreen(new Rectangle(dialogX, dialogY, dialogWidth, dialogHeight))) {\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            View view3D \u003d controller.getHomeController3D().getView();\n                            detachView(view3D, dialogX, dialogY, dialogWidth, dialogHeight);\n                        }\n                    });\n                    return planView3DPane;\n                }\n                if (planView3DPane instanceof JSplitPane) {\n                    ((JSplitPane) planView3DPane).setDividerLocation(0.5);\n                }\n                controller.setVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, null);\n            }\n            return planView3DPane;\n        } else {\n            return planView;\n        }\n    }\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences) {\n        JComponent planView \u003d (JComponent) planController.getView();\n        final Point lastMouseMoveLocation \u003d new Point(-1, -1);\n        ((JPopupMenu) selectObjectMenu.getParent()).addPopupMenuListener(new PopupMenuListener() {\n\n            @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n            public void popupMenuWillBecomeVisible(PopupMenuEvent ev) {\n                if (lastMouseMoveLocation.getX() \u003e\u003d 0 \u0026\u0026 !planController.isModificationState()) {\n                    final List\u003cSelectable\u003e items \u003d planController.getSelectableItemsAt(planController.getView().convertXPixelToModel(lastMouseMoveLocation.x), planController.getView().convertYPixelToModel(lastMouseMoveLocation.y));\n                    // Prepare localized formatters\n                    Map\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e formatters \u003d new HashMap\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e();\n                    formatters.put(Compass.class, new SelectableFormat\u003cCompass\u003e() {\n\n                        public String format(Compass compass) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.compass\");\n                        }\n                    });\n                    formatters.put(HomePieceOfFurniture.class, new SelectableFormat\u003cHomePieceOfFurniture\u003e() {\n\n                        public String format(HomePieceOfFurniture piece) {\n                            if (piece.getName().length() \u003e 0) {\n                                return piece.getName();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.furniture\");\n                            }\n                        }\n                    });\n                    formatters.put(Wall.class, new SelectableFormat\u003cWall\u003e() {\n\n                        public String format(Wall wall) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.wall\", preferences.getLengthUnit().getFormatWithUnit().format(wall.getLength()));\n                        }\n                    });\n                    formatters.put(Room.class, new SelectableFormat\u003cRoom\u003e() {\n\n                        public String format(Room room) {\n                            String roomInfo \u003d room.getName() !\u003d null \u0026\u0026 room.getName().length() \u003e 0 ? room.getName() : (room.isAreaVisible() ? preferences.getLengthUnit().getAreaFormatWithUnit().format(room.getArea()) : \"\");\n                            if (room.isFloorVisible() \u0026\u0026 !room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.floor\", roomInfo);\n                            } else if (!room.isFloorVisible() \u0026\u0026 room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.ceiling\", roomInfo);\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.room\", roomInfo);\n                            }\n                        }\n                    });\n                    formatters.put(DimensionLine.class, new SelectableFormat\u003cDimensionLine\u003e() {\n\n                        public String format(DimensionLine dimensionLine) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.dimensionLine\", preferences.getLengthUnit().getFormatWithUnit().format(dimensionLine.getLength()));\n                        }\n                    });\n                    formatters.put(Label.class, new SelectableFormat\u003cLabel\u003e() {\n\n                        public String format(Label label) {\n                            if (label.getText().length() \u003e 0) {\n                                return label.getText();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.label\");\n                            }\n                        }\n                    });\n                    for (final Selectable item : items) {\n                        String format \u003d null;\n                        for (Map.Entry\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e entry : formatters.entrySet()) {\n                            if (entry.getKey().isInstance(item)) {\n                                format \u003d entry.getValue().format(item);\n                                break;\n                            }\n                        }\n                        if (format !\u003d null) {\n                            selectObjectMenu.add(new JMenuItem(new AbstractAction(format) {\n\n                                public void actionPerformed(ActionEvent ev) {\n                                    planController.selectItem(item);\n                                }\n                            }));\n                        }\n                    }\n                }\n            }\n\n            public void popupMenuWillBecomeInvisible(PopupMenuEvent ev) {\n                selectObjectMenu.removeAll();\n            }\n\n            public void popupMenuCanceled(PopupMenuEvent ev) {\n            }\n        });\n        planView.addMouseMotionListener(new MouseMotionAdapter() {\n\n            @Override\n            public void mouseMoved(MouseEvent ev) {\n                lastMouseMoveLocation.setLocation(ev.getPoint());\n            }\n        });\n        planView.addMouseListener(new MouseAdapter() {\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                lastMouseMoveLocation.x \u003d -1;\n            }\n        });\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJScrollPane\u003e planScrollPane;\n\n        private WeakReference\u003cHomeController\u003e controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.planScrollPane \u003d new WeakReference\u003cJScrollPane\u003e(planScrollPane);\n            this.controller \u003d new WeakReference\u003cHomeController\u003e(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            JScrollPane planScrollPane \u003d this.planScrollPane.get();\n            HomeController controller \u003d this.controller.get();\n            if (homePane \u003d\u003d null || planScrollPane \u003d\u003d null || controller \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible) {\n        if (visible) {\n            // Change column and row header views\n            planScrollPane.setColumnHeaderView((JComponent) controller.getPlanController().getHorizontalRulerView());\n            planScrollPane.setRowHeaderView((JComponent) controller.getPlanController().getVerticalRulerView());\n        } else {\n            planScrollPane.setColumnHeaderView(null);\n            planScrollPane.setRowHeaderView(null);\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003eview\u003c/code\u003e a mouse listener that disables all menu items of\n     * \u003ccode\u003emenuBar\u003c/code\u003e during a drag and drop operation in \u003ccode\u003eview\u003c/code\u003e.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar) {\n        class MouseAndFocusListener extends MouseAdapter implements FocusListener {\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), false);\n                        }\n                    }\n                });\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            private void enableMenuItems(final JMenuBar menuBar) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), true);\n                        }\n                    }\n                });\n            }\n\n            private void setMenuItemsEnabled(JMenu menu, boolean enabled) {\n                for (int i \u003d 0, n \u003d menu.getItemCount(); i \u003c n; i++) {\n                    JMenuItem item \u003d menu.getItem(i);\n                    if (item instanceof JMenu) {\n                        setMenuItemsEnabled((JMenu) item, enabled);\n                    } else if (item !\u003d null) {\n                        item.setEnabled(enabled ? item.getAction().isEnabled() : false);\n                    }\n                }\n            }\n\n            // Need to take into account focus events because a mouse released event\n            // isn\u0027t dispatched when the component loses focus\n            public void focusGained(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            public void focusLost(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n        }\n        ;\n        MouseAndFocusListener listener \u003d new MouseAndFocusListener();\n        if (view !\u003d null) {\n            ((JComponent) view).addMouseListener(listener);\n            ((JComponent) view).addFocusListener(listener);\n        }\n    }\n\n    /**\n     * Detaches the given \u003ccode\u003eview\u003c/code\u003e from home view.\n     */\n    public void detachView(final View view) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        float dividerLocation;\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            if (splitPane.getOrientation() \u003d\u003d JSplitPane.VERTICAL_SPLIT) {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getHeight() - splitPane.getDividerSize());\n            } else {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getWidth() - splitPane.getDividerSize());\n            }\n        } else {\n            dividerLocation \u003d -1;\n        }\n        Integer dialogX \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n        Integer dialogWidth \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n        if (dialogX !\u003d null \u0026\u0026 dialogWidth !\u003d null) {\n            detachView(view, dialogX, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY), dialogWidth, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY));\n        } else {\n            Point componentLocation \u003d new Point();\n            Dimension componentSize \u003d component.getSize();\n            SwingUtilities.convertPointToScreen(componentLocation, component);\n            Insets insets \u003d new JDialog().getInsets();\n            detachView(view, componentLocation.x - insets.left, componentLocation.y - insets.top, componentSize.width + insets.left + insets.right, componentSize.height + insets.top + insets.bottom);\n        }\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY, dividerLocation);\n    }\n\n    /**\n     * Detaches a \u003ccode\u003eview\u003c/code\u003e at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        // Replace component by a dummy label to find easily where to attach back the component\n        JLabel dummyLabel \u003d new JLabel();\n        dummyLabel.setMaximumSize(new Dimension());\n        dummyLabel.setName(view.getClass().getName());\n        dummyLabel.setBorder(component.getBorder());\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            splitPane.setDividerSize(0);\n            if (splitPane.getLeftComponent() \u003d\u003d component) {\n                splitPane.setLeftComponent(dummyLabel);\n                splitPane.setDividerLocation(0f);\n            } else {\n                splitPane.setRightComponent(dummyLabel);\n                splitPane.setDividerLocation(1f);\n            }\n        } else {\n            int componentIndex \u003d parent.getComponentZOrder(component);\n            parent.remove(componentIndex);\n            parent.add(dummyLabel, componentIndex);\n        }\n        // Display view in a separate non modal dialog\n        Window window \u003d SwingUtilities.getWindowAncestor(this);\n        if (!(window instanceof JFrame)) {\n            window \u003d JOptionPane.getRootFrame();\n        }\n        JFrame defaultFrame \u003d (JFrame) window;\n        // Create a dialog with the same title as home frame\n        final JDialog separateDialog \u003d new JDialog(defaultFrame, defaultFrame.getTitle(), false);\n        separateDialog.setResizable(true);\n        defaultFrame.addPropertyChangeListener(\"title\", new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                separateDialog.setTitle((String) ev.getNewValue());\n            }\n        });\n        // Use same document modified indicator\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"Window.documentModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"Window.documentModified\", ev.getNewValue());\n                }\n            });\n        } else if (OperatingSystem.isMacOSX()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"windowModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"windowModified\", ev.getNewValue());\n                }\n            });\n        }\n        separateDialog.setContentPane(component);\n        separateDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\n        separateDialog.addWindowListener(new WindowAdapter() {\n\n            @Override\n            public void windowClosing(WindowEvent ev) {\n                controller.attachView(view);\n            }\n        });\n        separateDialog.addComponentListener(new ComponentAdapter() {\n\n            @Override\n            public void componentResized(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY, separateDialog.getWidth());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY, separateDialog.getHeight());\n            }\n\n            @Override\n            public void componentMoved(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, separateDialog.getX());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY, separateDialog.getY());\n            }\n        });\n        separateDialog.setBounds(x, y, width, height);\n        separateDialog.setLocationByPlatform(!SwingTools.isRectangleVisibleAtScreen(separateDialog.getBounds()));\n        separateDialog.setVisible(true);\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, true);\n    }\n\n    /**\n     * Attaches the given \u003ccode\u003eview\u003c/code\u003e to home view.\n     */\n    public void attachView(View view) {\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, false);\n        JComponent dummyComponent \u003d (JComponent) findChild(this, view.getClass().getName());\n        if (dummyComponent !\u003d null) {\n            JComponent component \u003d (JComponent) view;\n            Window window \u003d SwingUtilities.getWindowAncestor(component);\n            component.setBorder(dummyComponent.getBorder());\n            Container parent \u003d dummyComponent.getParent();\n            if (parent instanceof JSplitPane) {\n                JSplitPane splitPane \u003d (JSplitPane) parent;\n                float dividerLocation \u003d (Float) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                splitPane.setDividerSize(UIManager.getInt(\"SplitPane.dividerSize\"));\n                splitPane.setDividerLocation(dividerLocation);\n                if (splitPane.getLeftComponent() \u003d\u003d dummyComponent) {\n                    splitPane.setLeftComponent(component);\n                } else {\n                    splitPane.setRightComponent(component);\n                }\n            } else {\n                int componentIndex \u003d parent.getComponentZOrder(dummyComponent);\n                parent.remove(componentIndex);\n                parent.add(component, componentIndex);\n            }\n            window.dispose();\n        }\n    }\n\n    /**\n     * Returns among \u003ccode\u003eparent\u003c/code\u003e children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName) {\n        for (int i \u003d 0; i \u003c parent.getComponentCount(); i++) {\n            Component child \u003d parent.getComponent(i);\n            if (childName.equals(child.getName())) {\n                return child;\n            } else if (child instanceof Container) {\n                child \u003d findChild((Container) child, childName);\n                if (child !\u003d null) {\n                    return child;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"openHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D);\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importLanguageLibraryDialog.title\"), ContentManager.ContentType.LANGUAGE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.message\", new File(languageLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importFurnitureLibraryDialog.title\"), ContentManager.ContentType.FURNITURE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.message\", new File(furnitureLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importTexturesLibraryDialog.title\"), ContentManager.ContentType.TEXTURES_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.message\", new File(texturesLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.message\", new File(pluginName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"saveHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D, homeName);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in an error message box.\n     */\n    public void showError(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"error.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in a message box.\n     */\n    public void showMessage(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"message.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);\n    }\n\n    /**\n     * Displays the tip matching \u003ccode\u003eactionTipKey\u003c/code\u003e and\n     * returns \u003ccode\u003etrue\u003c/code\u003e if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipTitle\");\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipMessage\");\n        if (message.length() \u003e 0) {\n            JPanel tipPanel \u003d new JPanel(new GridBagLayout());\n            JLabel messageLabel \u003d new JLabel(message);\n            tipPanel.add(messageLabel, new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            // Add a check box that lets user choose whether he wants to display again the tip or not\n            JCheckBox doNotDisplayTipCheckBox \u003d new JCheckBox(SwingTools.getLocalizedLabelText(this.preferences, HomePane.class, \"doNotDisplayTipCheckBox.text\"));\n            if (!OperatingSystem.isMacOSX()) {\n                doNotDisplayTipCheckBox.setMnemonic(KeyStroke.getKeyStroke(this.preferences.getLocalizedString(HomePane.class, \"doNotDisplayTipCheckBox.mnemonic\")).getKeyCode());\n            }\n            tipPanel.add(doNotDisplayTipCheckBox, new GridBagConstraints(0, 1, 1, 1, 0, 1, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));\n            SwingTools.showMessageDialog(this, tipPanel, title, JOptionPane.INFORMATION_MESSAGE, doNotDisplayTipCheckBox);\n            return doNotDisplayTipCheckBox.isSelected();\n        } else {\n            // Ignore untranslated tips\n            return true;\n        }\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn\u0027t want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn\u0027t want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName) {\n        // Retrieve displayed text in buttons and message\n        String message;\n        if (homeName !\u003d null) {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\\\"\" + this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D) + \"\\\"\");\n        } else {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\");\n        }\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.doNotSave\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.cancel\");\n        switch(JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave, cancel }, save)) {\n            // Convert showOptionDialog answer to SaveAnswer enum constants\n            case JOptionPane.YES_OPTION:\n                return SaveAnswer.SAVE;\n            case JOptionPane.NO_OPTION:\n                return SaveAnswer.DO_NOT_SAVE;\n            default:\n                return SaveAnswer.CANCEL;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName) {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.message\", this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D));\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.doNotSave\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave }, doNotSave) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to exit.\n     */\n    public boolean confirmExit() {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.title\");\n        String quit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.quit\");\n        String doNotQuit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.doNotQuit\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { quit, doNotQuit }, doNotQuit) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog() {\n        String messageFormat \u003d this.preferences.getLocalizedString(HomePane.class, \"about.message\");\n        String aboutVersion \u003d this.controller.getVersion();\n        String message \u003d String.format(messageFormat, aboutVersion, System.getProperty(\"java.version\"));\n        // Use an uneditable editor pane to let user select text in dialog\n        JEditorPane messagePane \u003d new JEditorPane(\"text/html\", message);\n        messagePane.setOpaque(false);\n        messagePane.setEditable(false);\n        // Add a listener that displays hyperlinks content in browser\n        messagePane.addHyperlinkListener(new HyperlinkListener() {\n\n            public void hyperlinkUpdate(HyperlinkEvent ev) {\n                if (ev.getEventType() \u003d\u003d HyperlinkEvent.EventType.ACTIVATED) {\n                    SwingTools.showDocumentInBrowser(ev.getURL());\n                }\n            }\n        });\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"about.title\");\n        Icon icon \u003d new ImageIcon(HomePane.class.getResource(this.preferences.getLocalizedString(HomePane.class, \"about.icon\")));\n        JOptionPane.showMessageDialog(this, messagePane, title, JOptionPane.INFORMATION_MESSAGE, icon);\n    }\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or \u003ccode\u003enull\u003c/code\u003e if the user canceled print.\n     *    The \u003ccode\u003ecall\u003c/code\u003e method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable\u003cVoid\u003e showPrintDialog() {\n        PageFormat pageFormat \u003d HomePrintableComponent.getPageFormat(this.home.getPrint());\n        final PrinterJob printerJob \u003d PrinterJob.getPrinterJob();\n        printerJob.setPrintable(new HomePrintableComponent(this.home, this.controller, getFont()), pageFormat);\n        String jobName \u003d this.preferences.getLocalizedString(HomePane.class, \"print.jobName\");\n        if (this.home.getName() !\u003d null) {\n            jobName +\u003d \" - \" + this.controller.getContentManager().getPresentationName(this.home.getName(), ContentManager.ContentType.SWEET_HOME_3D);\n        }\n        printerJob.setJobName(jobName);\n        if (printerJob.printDialog()) {\n            return new Callable\u003cVoid\u003e() {\n\n                public Void call() throws RecorderException {\n                    try {\n                        printerJob.print();\n                        return null;\n                    } catch (InterruptedPrinterException ex) {\n                        throw new InterruptedRecorderException(\"Print interrupted\");\n                    } catch (PrinterException ex) {\n                        throw new RecorderException(\"Couldn\u0027t print\", ex);\n                    }\n                }\n            };\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"printToPDFDialog.title\"), ContentManager.ContentType.PDF, homeName);\n    }\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException {\n        OutputStream outputStream \u003d null;\n        boolean printInterrupted \u003d false;\n        try {\n            outputStream \u003d new FileOutputStream(pdfFile);\n            new HomePDFPrinter(this.home, this.preferences, this.controller, getFont()).write(outputStream);\n        } catch (InterruptedIOException ex) {\n            printInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Print interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n        } finally {\n            try {\n                if (outputStream !\u003d null) {\n                    outputStream.close();\n                }\n                // Delete the file if printing is interrupted\n                if (printInterrupted) {\n                    new File(pdfFile).delete();\n                }\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToSVGDialog.title\"), ContentManager.ContentType.SVG, homeName);\n    }\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException {\n        View planView \u003d this.controller.getPlanController().getView();\n        PlanComponent planComponent;\n        if (planView instanceof PlanComponent) {\n            planComponent \u003d (PlanComponent) planView;\n        } else {\n            planComponent \u003d new PlanComponent(this.home, this.preferences, null);\n        }\n        OutputStream outputStream \u003d null;\n        boolean exportInterrupted \u003d false;\n        try {\n            outputStream \u003d new BufferedOutputStream(new FileOutputStream(svgFile));\n            planComponent.exportToSVG(outputStream);\n        } catch (InterruptedIOException ex) {\n            exportInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Export to \" + svgFile + \" interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n        } finally {\n            if (outputStream !\u003d null) {\n                try {\n                    outputStream.close();\n                    // Delete the file if exporting is interrupted\n                    if (exportInterrupted) {\n                        new File(svgFile).delete();\n                    }\n                } catch (IOException ex) {\n                    throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n                }\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToOBJDialog.title\"), ContentManager.ContentType.OBJ, homeName);\n    }\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException {\n        String header \u003d this.preferences !\u003d null ? this.preferences.getLocalizedString(HomePane.class, \"exportToOBJ.header\", new Date()) : \"\";\n        // Use a clone of home to ignore selection\n        OBJExporter.exportHomeToFile(this.home.clone(), objFile, header);\n    }\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer \u003d null;\n            boolean exportInterrupted \u003d false;\n            try {\n                writer \u003d new OBJWriter(objFile, header, -1);\n                List\u003cSelectable\u003e emptySelection \u003d Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() \u003e 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds \u003d getExportedHomeBounds(home);\n                    Ground3D groundNode \u003d new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i \u003d 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode \u003d new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i \u003d 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode \u003d new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i \u003d 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode \u003d new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted \u003d true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer !\u003d null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns \u003ccode\u003ehome\u003c/code\u003e bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds \u003d updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds \u003d\u003d null) {\n                        homeBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given \u003ccode\u003efurniture\u003c/code\u003e.\n         */\n        private static List\u003cHomePieceOfFurniture\u003e getVisibleFurniture(List\u003cHomePieceOfFurniture\u003e furniture) {\n            List\u003cHomePieceOfFurniture\u003e visibleFurniture \u003d new ArrayList\u003cHomePieceOfFurniture\u003e(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() \u0026\u0026 (piece.getLevel() \u003d\u003d null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates \u003ccode\u003eobjectBounds\u003c/code\u003e to include the bounds of \u003ccode\u003eitems\u003c/code\u003e.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection\u003c? extends Selectable\u003e items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() \u003d\u003d null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds \u003d\u003d null) {\n                            objectBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection() {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.title\");\n        String delete \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.delete\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.cancel\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { delete, cancel }, cancel) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or \u003ccode\u003enull\u003c/code\u003e if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName) {\n        // Retrieve displayed text in dialog\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.title\");\n        List\u003cCamera\u003e storedCameras \u003d this.home.getStoredCameras();\n        JComponent cameraNameChooser;\n        JTextComponent cameraNameTextComponent;\n        if (storedCameras.isEmpty()) {\n            cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n        } else {\n            // If cameras are already stored in home propose an editable combo box to user\n            // to let him choose more easily an existing one if he want to overwrite it\n            String[] storedCameraNames \u003d new String[storedCameras.size()];\n            for (int i \u003d 0; i \u003c storedCameraNames.length; i++) {\n                storedCameraNames[i] \u003d storedCameras.get(i).getName();\n            }\n            JComboBox cameraNameComboBox \u003d new JComboBox(storedCameraNames);\n            cameraNameComboBox.setEditable(true);\n            cameraNameComboBox.getEditor().setItem(cameraName);\n            Component editorComponent \u003d cameraNameComboBox.getEditor().getEditorComponent();\n            if (editorComponent instanceof JTextComponent) {\n                cameraNameTextComponent \u003d (JTextComponent) editorComponent;\n                cameraNameChooser \u003d cameraNameComboBox;\n            } else {\n                cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n            }\n        }\n        JPanel cameraNamePanel \u003d new JPanel(new BorderLayout(2, 2));\n        cameraNamePanel.add(new JLabel(message), BorderLayout.NORTH);\n        cameraNamePanel.add(cameraNameChooser, BorderLayout.SOUTH);\n        if (SwingTools.showConfirmDialog(this, cameraNamePanel, title, cameraNameTextComponent) \u003d\u003d JOptionPane.OK_OPTION) {\n            return cameraNameTextComponent.getText();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty() {\n        try {\n            Clipboard clipboard \u003d getToolkit().getSystemClipboard();\n            return !(clipboard.isDataFlavorAvailable(HomeTransferableList.HOME_FLAVOR) || getToolkit().getSystemClipboard().isDataFlavorAvailable(DataFlavor.javaFileListFlavor));\n        } catch (AccessControlException ex) {\n            // AWT uses a private clipboard that won\u0027t be empty as soon as a copy action will be done\n            return this.clipboardEmpty;\n        }\n    }\n\n    /**\n     * Execute \u003ccode\u003erunnable\u003c/code\u003e asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable) {\n        EventQueue.invokeLater(runnable);\n    }\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction \u003d pluginAction;\n            this.propertyChangeSupport \u003d new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName \u003d ev.getPropertyName();\n                    Object oldValue \u003d ev.getOldValue();\n                    Object newValue \u003d ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don\u0027t check new value is null !)\n                        if (newValue !\u003d null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue !\u003d null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue !\u003d null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon \u003d (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon !\u003d null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic \u003d (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic !\u003d null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat\u003cT extends Selectable\u003e {\n\n        public abstract String format(T item);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "HomePane",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_13Test.java",
    "test_prompt": "// HomePane_13Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains ten unit test cases for the {@link HomePane#showPrintDialog()} method.\n*/\nclass HomePane_13Test {",
    "method_signature": "showPrintDialog()",
    "suffix": "13"
  },
  {
    "numberTests": "ten",
    "original_code": "// HomePane.java\n/*\n * HomePane.java 15 mai 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\n\n/**\n * The MVC view that edits a home.\n * @author Emmanuel Puybaret\n */\npublic class HomePane extends JRootPane implements HomeView {\n\n    private enum MenuActionType {\n\n        FILE_MENU,\n        EDIT_MENU,\n        FURNITURE_MENU,\n        PLAN_MENU,\n        VIEW_3D_MENU,\n        HELP_MENU,\n        OPEN_RECENT_HOME_MENU,\n        ALIGN_OR_DISTRIBUTE_MENU,\n        SORT_HOME_FURNITURE_MENU,\n        DISPLAY_HOME_FURNITURE_PROPERTY_MENU,\n        MODIFY_TEXT_STYLE,\n        GO_TO_POINT_OF_VIEW,\n        SELECT_OBJECT_MENU\n    }\n\n    private static final String MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.MainPaneDividerLocation\";\n\n    private static final String CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.CatalogPaneDividerLocation\";\n\n    private static final String PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanPaneDividerLocation\";\n\n    private static final String PLAN_VIEWPORT_X_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportX\";\n\n    private static final String PLAN_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.PlanViewportY\";\n\n    private static final String FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY \u003d \"com.eteks.sweethome3d.SweetHome3D.FurnitureViewportY\";\n\n    private static final String DETACHED_VIEW_VISUAL_PROPERTY \u003d \".detachedView\";\n\n    private static final String DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY \u003d \".detachedViewDividerLocation\";\n\n    private static final String DETACHED_VIEW_X_VISUAL_PROPERTY \u003d \".detachedViewX\";\n\n    private static final String DETACHED_VIEW_Y_VISUAL_PROPERTY \u003d \".detachedViewY\";\n\n    private static final String DETACHED_VIEW_WIDTH_VISUAL_PROPERTY \u003d \".detachedViewWidth\";\n\n    private static final String DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY \u003d \".detachedViewHeight\";\n\n    private static final int DEFAULT_SMALL_ICON_HEIGHT \u003d 16;\n\n    private final Home home;\n\n    private final UserPreferences preferences;\n\n    private final HomeController controller;\n\n    private JComponent lastFocusedComponent;\n\n    private PlanController.Mode previousPlanControllerMode;\n\n    private TransferHandler catalogTransferHandler;\n\n    private TransferHandler furnitureTransferHandler;\n\n    private TransferHandler planTransferHandler;\n\n    private boolean transferHandlerEnabled;\n\n    private MouseInputAdapter furnitureCatalogDragAndDropListener;\n\n    private boolean clipboardEmpty \u003d true;\n\n    private ActionMap menuActionMap;\n\n    private List\u003cAction\u003e pluginActions;\n\n    /**\n     * Creates home view associated with its controller.\n     */\n    public HomePane(Home home, UserPreferences preferences, final HomeController controller) {\n        this.home \u003d home;\n        this.preferences \u003d preferences;\n        this.controller \u003d controller;\n        JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n        ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);\n        createActions(home, preferences, controller);\n        createMenuActions(preferences, controller);\n        createPluginActions(controller instanceof HomePluginController ? ((HomePluginController) controller).getPlugins() : null);\n        createTransferHandlers(home, controller);\n        addHomeListener(home);\n        addLevelVisibilityListener(home);\n        addLanguageListener(preferences);\n        addPlanControllerListener(controller.getPlanController());\n        addFocusListener();\n        updateFocusTraversalPolicy();\n        JMenuBar homeMenuBar \u003d createMenuBar(home, preferences, controller);\n        setJMenuBar(homeMenuBar);\n        Container contentPane \u003d getContentPane();\n        contentPane.add(createToolBar(home), BorderLayout.NORTH);\n        contentPane.add(createMainPane(home, preferences, controller));\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            // Under Mac OS X 10.5, add some dummy labels at left and right borders\n            // to avoid the tool bar to be attached on these borders\n            // (segmented buttons created on this system aren\u0027t properly rendered\n            // when they are aligned vertically)\n            contentPane.add(new JLabel(), BorderLayout.WEST);\n            contentPane.add(new JLabel(), BorderLayout.EAST);\n        }\n        disableMenuItemsDuringDragAndDrop(controller.getPlanController().getView(), homeMenuBar);\n        // Change component orientation\n        applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));\n    }\n\n    /**\n     * Create the actions map of this component.\n     */\n    private void createActions(Home home, UserPreferences preferences, final HomeController controller) {\n        createAction(ActionType.NEW_HOME, preferences, controller, \"newHome\");\n        createAction(ActionType.OPEN, preferences, controller, \"open\");\n        createAction(ActionType.DELETE_RECENT_HOMES, preferences, controller, \"deleteRecentHomes\");\n        createAction(ActionType.CLOSE, preferences, controller, \"close\");\n        createAction(ActionType.SAVE, preferences, controller, \"save\");\n        createAction(ActionType.SAVE_AS, preferences, controller, \"saveAs\");\n        createAction(ActionType.SAVE_AND_COMPRESS, preferences, controller, \"saveAndCompress\");\n        createAction(ActionType.PAGE_SETUP, preferences, controller, \"setupPage\");\n        createAction(ActionType.PRINT_PREVIEW, preferences, controller, \"previewPrint\");\n        createAction(ActionType.PRINT, preferences, controller, \"print\");\n        createAction(ActionType.PRINT_TO_PDF, preferences, controller, \"printToPDF\");\n        createAction(ActionType.PREFERENCES, preferences, controller, \"editPreferences\");\n        createAction(ActionType.EXIT, preferences, controller, \"exit\");\n        createAction(ActionType.UNDO, preferences, controller, \"undo\");\n        createAction(ActionType.REDO, preferences, controller, \"redo\");\n        createClipboardAction(ActionType.CUT, preferences, TransferHandler.getCutAction(), true);\n        createClipboardAction(ActionType.COPY, preferences, TransferHandler.getCopyAction(), true);\n        createClipboardAction(ActionType.PASTE, preferences, TransferHandler.getPasteAction(), false);\n        createAction(ActionType.DELETE, preferences, controller, \"delete\");\n        createAction(ActionType.SELECT_ALL, preferences, controller, \"selectAll\");\n        createAction(ActionType.ADD_HOME_FURNITURE, preferences, controller, \"addHomeFurniture\");\n        FurnitureController furnitureController \u003d controller.getFurnitureController();\n        createAction(ActionType.DELETE_HOME_FURNITURE, preferences, furnitureController, \"deleteSelection\");\n        createAction(ActionType.MODIFY_FURNITURE, preferences, controller, \"modifySelectedFurniture\");\n        createAction(ActionType.GROUP_FURNITURE, preferences, furnitureController, \"groupSelectedFurniture\");\n        createAction(ActionType.UNGROUP_FURNITURE, preferences, furnitureController, \"ungroupSelectedFurniture\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_TOP, preferences, furnitureController, \"alignSelectedFurnitureOnTop\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BOTTOM, preferences, furnitureController, \"alignSelectedFurnitureOnBottom\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT, preferences, furnitureController, \"alignSelectedFurnitureOnLeft\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT, preferences, furnitureController, \"alignSelectedFurnitureOnRight\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnFrontSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnBackSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnLeftSide\");\n        createAction(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, preferences, furnitureController, \"alignSelectedFurnitureOnRightSide\");\n        createAction(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, preferences, furnitureController, \"alignSelectedFurnitureSideBySide\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, preferences, furnitureController, \"distributeSelectedFurnitureHorizontally\");\n        createAction(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, preferences, furnitureController, \"distributeSelectedFurnitureVertically\");\n        final HomeController3D homeController3D \u003d controller.getHomeController3D();\n        if (homeController3D.getView() !\u003d null) {\n            createAction(ActionType.IMPORT_FURNITURE, preferences, controller, \"importFurniture\");\n        }\n        createAction(ActionType.IMPORT_FURNITURE_LIBRARY, preferences, controller, \"importFurnitureLibrary\");\n        createAction(ActionType.IMPORT_TEXTURES_LIBRARY, preferences, controller, \"importTexturesLibrary\");\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_NAME, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_X, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_Y, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_COLOR, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_TYPE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureSort\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        createAction(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER, preferences, furnitureController, \"toggleFurnitureSortOrder\");\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_NAME, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.NAME);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.WIDTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DEPTH);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.HEIGHT);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_X, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.X);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_Y, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.Y);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ELEVATION);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.ANGLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.LEVEL);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_COLOR, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.COLOR);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.TEXTURE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.MOVABLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VISIBLE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n        createAction(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, preferences, furnitureController, \"toggleFurnitureVisibleProperty\", HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        PlanController planController \u003d controller.getPlanController();\n        if (planController.getView() !\u003d null) {\n            ButtonGroup modeGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.SELECT, planController.getMode() \u003d\u003d PlanController.Mode.SELECTION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.SELECTION);\n            createToggleAction(ActionType.PAN, planController.getMode() \u003d\u003d PlanController.Mode.PANNING, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.PANNING);\n            createToggleAction(ActionType.CREATE_WALLS, planController.getMode() \u003d\u003d PlanController.Mode.WALL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.WALL_CREATION);\n            createToggleAction(ActionType.CREATE_ROOMS, planController.getMode() \u003d\u003d PlanController.Mode.ROOM_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.ROOM_CREATION);\n            createToggleAction(ActionType.CREATE_DIMENSION_LINES, planController.getMode() \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.DIMENSION_LINE_CREATION);\n            createToggleAction(ActionType.CREATE_LABELS, planController.getMode() \u003d\u003d PlanController.Mode.LABEL_CREATION, modeGroup, preferences, controller, \"setMode\", PlanController.Mode.LABEL_CREATION);\n            createAction(ActionType.DELETE_SELECTION, preferences, planController, \"deleteSelection\");\n            createAction(ActionType.LOCK_BASE_PLAN, preferences, planController, \"lockBasePlan\");\n            createAction(ActionType.UNLOCK_BASE_PLAN, preferences, planController, \"unlockBasePlan\");\n            createAction(ActionType.MODIFY_COMPASS, preferences, planController, \"modifyCompass\");\n            createAction(ActionType.MODIFY_WALL, preferences, planController, \"modifySelectedWalls\");\n            createAction(ActionType.MODIFY_ROOM, preferences, planController, \"modifySelectedRooms\");\n            createAction(ActionType.MODIFY_LABEL, preferences, planController, \"modifySelectedLabels\");\n            createAction(ActionType.INCREASE_TEXT_SIZE, preferences, planController, \"increaseTextSize\");\n            createAction(ActionType.DECREASE_TEXT_SIZE, preferences, planController, \"decreaseTextSize\");\n            // Use special toggle models for bold and italic check box menu items and tool bar buttons\n            // that are selected texts in home selected items are all bold or italic\n            Action toggleBoldAction \u003d createAction(ActionType.TOGGLE_BOLD_STYLE, preferences, planController, \"toggleBoldStyle\");\n            toggleBoldAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createBoldStyleToggleModel(home, preferences));\n            Action toggleItalicAction \u003d createAction(ActionType.TOGGLE_ITALIC_STYLE, preferences, planController, \"toggleItalicStyle\");\n            toggleItalicAction.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, createItalicStyleToggleModel(home, preferences));\n            createAction(ActionType.REVERSE_WALL_DIRECTION, preferences, planController, \"reverseSelectedWallsDirection\");\n            createAction(ActionType.SPLIT_WALL, preferences, planController, \"splitSelectedWall\");\n            createAction(ActionType.IMPORT_BACKGROUND_IMAGE, preferences, controller, \"importBackgroundImage\");\n            createAction(ActionType.MODIFY_BACKGROUND_IMAGE, preferences, controller, \"modifyBackgroundImage\");\n            createAction(ActionType.HIDE_BACKGROUND_IMAGE, preferences, controller, \"hideBackgroundImage\");\n            createAction(ActionType.SHOW_BACKGROUND_IMAGE, preferences, controller, \"showBackgroundImage\");\n            createAction(ActionType.DELETE_BACKGROUND_IMAGE, preferences, controller, \"deleteBackgroundImage\");\n            createAction(ActionType.ADD_LEVEL, preferences, planController, \"addLevel\");\n            createAction(ActionType.MODIFY_LEVEL, preferences, planController, \"modifySelectedLevel\");\n            createAction(ActionType.DELETE_LEVEL, preferences, planController, \"deleteSelectedLevel\");\n            createAction(ActionType.ZOOM_IN, preferences, controller, \"zoomIn\");\n            createAction(ActionType.ZOOM_OUT, preferences, controller, \"zoomOut\");\n            createAction(ActionType.EXPORT_TO_SVG, preferences, controller, \"exportToSVG\");\n        }\n        if (homeController3D.getView() !\u003d null) {\n            ButtonGroup viewGroup \u003d new ButtonGroup();\n            createToggleAction(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera(), viewGroup, preferences, homeController3D, \"viewFromTop\");\n            createToggleAction(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera(), viewGroup, preferences, homeController3D, \"viewFromObserver\");\n            createAction(ActionType.MODIFY_OBSERVER, preferences, planController, \"modifyObserverCamera\");\n            createAction(ActionType.STORE_POINT_OF_VIEW, preferences, controller, \"storeCamera\");\n            getActionMap().put(ActionType.DETACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.DETACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.detachView(homeController3D.getView());\n                }\n            });\n            getActionMap().put(ActionType.ATTACH_3D_VIEW, new ResourceAction(preferences, HomePane.class, ActionType.ATTACH_3D_VIEW.name()) {\n\n                @Override\n                public void actionPerformed(ActionEvent ev) {\n                    controller.attachView(homeController3D.getView());\n                }\n            });\n            ButtonGroup displayLevelGroup \u003d new ButtonGroup();\n            boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n            createToggleAction(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displayAllLevels\");\n            createToggleAction(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible, displayLevelGroup, preferences, homeController3D, \"displaySelectedLevel\");\n            createAction(ActionType.MODIFY_3D_ATTRIBUTES, preferences, homeController3D, \"modifyAttributes\");\n            createAction(ActionType.CREATE_PHOTO, preferences, controller, \"createPhoto\");\n            createAction(ActionType.CREATE_VIDEO, preferences, controller, \"createVideo\");\n            createAction(ActionType.EXPORT_TO_OBJ, preferences, controller, \"exportToOBJ\");\n        }\n        createAction(ActionType.HELP, preferences, controller, \"help\");\n        createAction(ActionType.ABOUT, preferences, controller, \"about\");\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object that calls on \u003ccode\u003econtroller\u003c/code\u003e a given\n     * \u003ccode\u003emethod\u003c/code\u003e with its \u003ccode\u003eparameters\u003c/code\u003e. This action is added to the action map of this component.\n     */\n    private Action createAction(ActionType actionType, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        try {\n            ControllerAction action \u003d new ControllerAction(preferences, HomePane.class, actionType.name(), controller, method, parameters);\n            getActionMap().put(actionType, action);\n            return action;\n        } catch (NoSuchMethodException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * Returns a new \u003ccode\u003eControllerAction\u003c/code\u003e object associated with a \u003ccode\u003eToggleButtonModel\u003c/code\u003e instance\n     * set as selected or not.\n     */\n    private Action createToggleAction(ActionType actionType, boolean selected, ButtonGroup group, UserPreferences preferences, Object controller, String method, Object... parameters) {\n        Action action \u003d createAction(actionType, preferences, controller, method, parameters);\n        JToggleButton.ToggleButtonModel toggleButtonModel \u003d new JToggleButton.ToggleButtonModel();\n        toggleButtonModel.setSelected(selected);\n        if (group !\u003d null) {\n            toggleButtonModel.setGroup(group);\n        }\n        action.putValue(ResourceAction.TOGGLE_BUTTON_MODEL, toggleButtonModel);\n        return action;\n    }\n\n    /**\n     * Creates a \u003ccode\u003eReourceAction\u003c/code\u003e object that calls\n     * \u003ccode\u003eactionPerfomed\u003c/code\u003e method on a given\n     * existing \u003ccode\u003eclipboardAction\u003c/code\u003e with a source equal to focused component.\n     */\n    private void createClipboardAction(ActionType actionType, UserPreferences preferences, final Action clipboardAction, final boolean copyAction) {\n        getActionMap().put(actionType, new ResourceAction(preferences, HomePane.class, actionType.name()) {\n\n            public void actionPerformed(ActionEvent ev) {\n                if (copyAction) {\n                    clipboardEmpty \u003d false;\n                }\n                ev \u003d new ActionEvent(lastFocusedComponent, ActionEvent.ACTION_PERFORMED, null);\n                clipboardAction.actionPerformed(ev);\n            }\n        });\n    }\n\n    /**\n     * Create the actions map used to create menus of this component.\n     */\n    private void createMenuActions(UserPreferences preferences, HomeController controller) {\n        this.menuActionMap \u003d new ActionMap();\n        createMenuAction(preferences, MenuActionType.FILE_MENU);\n        createMenuAction(preferences, MenuActionType.EDIT_MENU);\n        createMenuAction(preferences, MenuActionType.FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.PLAN_MENU);\n        createMenuAction(preferences, MenuActionType.VIEW_3D_MENU);\n        createMenuAction(preferences, MenuActionType.HELP_MENU);\n        createMenuAction(preferences, MenuActionType.OPEN_RECENT_HOME_MENU);\n        createMenuAction(preferences, MenuActionType.SORT_HOME_FURNITURE_MENU);\n        createMenuAction(preferences, MenuActionType.ALIGN_OR_DISTRIBUTE_MENU);\n        createMenuAction(preferences, MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU);\n        createMenuAction(preferences, MenuActionType.MODIFY_TEXT_STYLE);\n        createMenuAction(preferences, MenuActionType.GO_TO_POINT_OF_VIEW);\n        createMenuAction(preferences, MenuActionType.SELECT_OBJECT_MENU);\n    }\n\n    /**\n     * Creates a \u003ccode\u003eResourceAction\u003c/code\u003e object stored in menu action map.\n     */\n    private void createMenuAction(UserPreferences preferences, MenuActionType action) {\n        this.menuActionMap.put(action, new ResourceAction(preferences, HomePane.class, action.name(), true));\n    }\n\n    /**\n     * Creates the Swing actions matching each actions available in \u003ccode\u003eplugins\u003c/code\u003e.\n     */\n    private void createPluginActions(List\u003cPlugin\u003e plugins) {\n        this.pluginActions \u003d new ArrayList\u003cAction\u003e();\n        if (plugins !\u003d null) {\n            for (Plugin plugin : plugins) {\n                for (final PluginAction pluginAction : plugin.getActions()) {\n                    // Create a Swing action adapter to plug-in action\n                    this.pluginActions.add(new ActionAdapter(pluginAction));\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates components transfer handlers.\n     */\n    private void createTransferHandlers(Home home, HomeController controller) {\n        this.catalogTransferHandler \u003d new FurnitureCatalogTransferHandler(controller.getContentManager(), controller.getFurnitureCatalogController(), controller.getFurnitureController());\n        this.furnitureTransferHandler \u003d new FurnitureTransferHandler(home, controller.getContentManager(), controller);\n        this.planTransferHandler \u003d new PlanTransferHandler(home, controller.getContentManager(), controller);\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * View from top and View from observer toggle models according to used camera.\n     */\n    private void addHomeListener(final Home home) {\n        home.addPropertyChangeListener(Home.Property.CAMERA, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_TOP, home.getCamera() \u003d\u003d home.getTopCamera());\n                setToggleButtonModelSelected(ActionType.VIEW_FROM_OBSERVER, home.getCamera() \u003d\u003d home.getObserverCamera());\n            }\n        });\n    }\n\n    /**\n     * Changes the selection of the toggle model matching the given action.\n     */\n    private void setToggleButtonModelSelected(ActionType actionType, boolean selected) {\n        ((JToggleButton.ToggleButtonModel) getActionMap().get(actionType).getValue(ResourceAction.TOGGLE_BUTTON_MODEL)).setSelected(selected);\n    }\n\n    /**\n     * Adds listener to \u003ccode\u003ehome\u003c/code\u003e to update\n     * Display all levels and Display selected level toggle models\n     * according their visibility.\n     */\n    private void addLevelVisibilityListener(final Home home) {\n        home.getEnvironment().addPropertyChangeListener(HomeEnvironment.Property.ALL_LEVELS_VISIBLE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                boolean allLevelsVisible \u003d home.getEnvironment().isAllLevelsVisible();\n                setToggleButtonModelSelected(ActionType.DISPLAY_ALL_LEVELS, allLevelsVisible);\n                setToggleButtonModelSelected(ActionType.DISPLAY_SELECTED_LEVEL, !allLevelsVisible);\n            }\n        });\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003epreferences\u003c/code\u003e to update\n     * actions when preferred language changes.\n     */\n    private void addLanguageListener(UserPreferences preferences) {\n        preferences.addPropertyChangeListener(UserPreferences.Property.LANGUAGE, new LanguageChangeListener(this));\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class LanguageChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        public LanguageChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.LANGUAGE, this);\n            } else {\n                SwingTools.updateSwingResourceLanguage((UserPreferences) ev.getSource());\n            }\n        }\n    }\n\n    /**\n     * Adds a property change listener to \u003ccode\u003eplanController\u003c/code\u003e to update\n     * Select and Create walls toggle models according to current mode.\n     */\n    private void addPlanControllerListener(final PlanController planController) {\n        planController.addPropertyChangeListener(PlanController.Property.MODE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                Mode mode \u003d planController.getMode();\n                setToggleButtonModelSelected(ActionType.SELECT, mode \u003d\u003d PlanController.Mode.SELECTION);\n                setToggleButtonModelSelected(ActionType.PAN, mode \u003d\u003d PlanController.Mode.PANNING);\n                setToggleButtonModelSelected(ActionType.CREATE_WALLS, mode \u003d\u003d PlanController.Mode.WALL_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_ROOMS, mode \u003d\u003d PlanController.Mode.ROOM_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_DIMENSION_LINES, mode \u003d\u003d PlanController.Mode.DIMENSION_LINE_CREATION);\n                setToggleButtonModelSelected(ActionType.CREATE_LABELS, mode \u003d\u003d PlanController.Mode.LABEL_CREATION);\n            }\n        });\n    }\n\n    /**\n     * Adds a focus change listener to report to controller focus changes.\n     */\n    private void addFocusListener() {\n        KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"currentFocusCycleRoot\", new FocusCycleRootChangeListener(this));\n    }\n\n    /**\n     * Property listener bound to this component with a weak reference to avoid\n     * strong link between KeyboardFocusManager and this component.\n     */\n    private static class FocusCycleRootChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private PropertyChangeListener focusChangeListener;\n\n        public FocusCycleRootChangeListener(HomePane homePane) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from KeyboardFocusManager\n            final HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(\"currentFocusCycleRoot\", this);\n            } else {\n                if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getOldValue())) {\n                    this.focusChangeListener \u003d null;\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                } else if (SwingUtilities.isDescendingFrom(homePane, (Component) ev.getNewValue())) {\n                    this.focusChangeListener \u003d new PropertyChangeListener() {\n\n                        public void propertyChange(PropertyChangeEvent ev) {\n                            if (homePane.lastFocusedComponent !\u003d null) {\n                                // Update component which lost focused\n                                JComponent lostFocusedComponent \u003d homePane.lastFocusedComponent;\n                                if (SwingUtilities.isDescendingFrom(lostFocusedComponent, SwingUtilities.getWindowAncestor(homePane))) {\n                                    lostFocusedComponent.removeKeyListener(homePane.specialKeysListener);\n                                    // Restore previous plan mode if plan view had focus and window is deactivated\n                                    if (homePane.previousPlanControllerMode !\u003d null \u0026\u0026 (lostFocusedComponent \u003d\u003d homePane.controller.getPlanController().getView() || ev.getNewValue() \u003d\u003d null)) {\n                                        homePane.controller.getPlanController().setMode(homePane.previousPlanControllerMode);\n                                        homePane.previousPlanControllerMode \u003d null;\n                                    }\n                                }\n                            }\n                            if (ev.getNewValue() !\u003d null) {\n                                // Retrieve component which gained focused\n                                Component gainedFocusedComponent \u003d (Component) ev.getNewValue();\n                                if (SwingUtilities.isDescendingFrom(gainedFocusedComponent, SwingUtilities.getWindowAncestor(homePane)) \u0026\u0026 gainedFocusedComponent instanceof JComponent) {\n                                    View[] focusableViews \u003d { homePane.controller.getFurnitureCatalogController().getView(), homePane.controller.getFurnitureController().getView(), homePane.controller.getPlanController().getView(), homePane.controller.getHomeController3D().getView() };\n                                    // Notify controller that active view changed\n                                    for (View view : focusableViews) {\n                                        if (view !\u003d null \u0026\u0026 SwingUtilities.isDescendingFrom(gainedFocusedComponent, (JComponent) view)) {\n                                            homePane.controller.focusedViewChanged(view);\n                                            gainedFocusedComponent.addKeyListener(homePane.specialKeysListener);\n                                            // Update the component used by clipboard actions\n                                            homePane.lastFocusedComponent \u003d (JComponent) gainedFocusedComponent;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(\"focusOwner\", this.focusChangeListener);\n                }\n            }\n        }\n    }\n\n    private KeyListener specialKeysListener \u003d new KeyAdapter() {\n\n        public void keyPressed(KeyEvent ev) {\n            // Temporarily toggle plan controller mode to panning mode when space bar is pressed\n            PlanController planController \u003d controller.getPlanController();\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 (ev.getModifiers() \u0026 (KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) \u003d\u003d 0 \u0026\u0026 getActionMap().get(ActionType.PAN).getValue(Action.NAME) !\u003d null \u0026\u0026 planController.getMode() !\u003d PlanController.Mode.PANNING \u0026\u0026 !planController.isModificationState() \u0026\u0026 SwingUtilities.isDescendingFrom(lastFocusedComponent, HomePane.this) \u0026\u0026 !isSpaceUsedByComponent(lastFocusedComponent)) {\n                previousPlanControllerMode \u003d planController.getMode();\n                planController.setMode(PlanController.Mode.PANNING);\n                ev.consume();\n            }\n        }\n\n        private boolean isSpaceUsedByComponent(JComponent component) {\n            return component instanceof JTextComponent || component instanceof JComboBox;\n        }\n\n        public void keyReleased(KeyEvent ev) {\n            if (ev.getKeyCode() \u003d\u003d KeyEvent.VK_SPACE \u0026\u0026 previousPlanControllerMode !\u003d null) {\n                controller.getPlanController().setMode(previousPlanControllerMode);\n                previousPlanControllerMode \u003d null;\n                ev.consume();\n            }\n        }\n\n        @Override\n        public void keyTyped(KeyEvent ev) {\n            // This listener manages accelerator keys that may require the use of shift key\n            // depending on keyboard layout (like + - or ?)\n            ActionMap actionMap \u003d getActionMap();\n            Action[] specialKeyActions \u003d { actionMap.get(ActionType.ZOOM_IN), actionMap.get(ActionType.ZOOM_OUT), actionMap.get(ActionType.INCREASE_TEXT_SIZE), actionMap.get(ActionType.DECREASE_TEXT_SIZE), actionMap.get(ActionType.HELP) };\n            int modifiersMask \u003d KeyEvent.ALT_MASK | KeyEvent.CTRL_MASK | KeyEvent.META_MASK;\n            for (Action specialKeyAction : specialKeyActions) {\n                KeyStroke actionKeyStroke \u003d (KeyStroke) specialKeyAction.getValue(Action.ACCELERATOR_KEY);\n                if (ev.getKeyChar() \u003d\u003d actionKeyStroke.getKeyChar() \u0026\u0026 (ev.getModifiers() \u0026 modifiersMask) \u003d\u003d (actionKeyStroke.getModifiers() \u0026 modifiersMask) \u0026\u0026 specialKeyAction.isEnabled()) {\n                    specialKeyAction.actionPerformed(new ActionEvent(HomePane.this, ActionEvent.ACTION_PERFORMED, (String) specialKeyAction.getValue(Action.ACTION_COMMAND_KEY)));\n                    ev.consume();\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets a focus traversal policy that ignores invisible split pane components.\n     */\n    private void updateFocusTraversalPolicy() {\n        setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {\n\n            @Override\n            protected boolean accept(Component component) {\n                if (super.accept(component)) {\n                    for (JSplitPane splitPane; (splitPane \u003d (JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, component)) !\u003d null; component \u003d splitPane) {\n                        if (isChildComponentInvisible(splitPane, component)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n        setFocusTraversalPolicyProvider(true);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the top or the bottom component of the \u003ccode\u003esplitPane\u003c/code\u003e\n     * is a parent of the given child component and is too small enough to show it.\n     */\n    private boolean isChildComponentInvisible(JSplitPane splitPane, Component childComponent) {\n        return (SwingUtilities.isDescendingFrom(childComponent, splitPane.getTopComponent()) \u0026\u0026 (splitPane.getTopComponent().getWidth() \u003d\u003d 0 || splitPane.getTopComponent().getHeight() \u003d\u003d 0)) || (SwingUtilities.isDescendingFrom(childComponent, splitPane.getBottomComponent()) \u0026\u0026 (splitPane.getBottomComponent().getWidth() \u003d\u003d 0 || splitPane.getBottomComponent().getHeight() \u003d\u003d 0));\n    }\n\n    /**\n     * Returns the menu bar displayed in this pane.\n     */\n    private JMenuBar createMenuBar(final Home home, UserPreferences preferences, final HomeController controller) {\n        // Create File menu\n        JMenu fileMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FILE_MENU));\n        addActionToMenu(ActionType.NEW_HOME, fileMenu);\n        addActionToMenu(ActionType.OPEN, fileMenu);\n        final JMenu openRecentHomeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.OPEN_RECENT_HOME_MENU));\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n        openRecentHomeMenu.addMenuListener(new MenuListener() {\n\n            public void menuSelected(MenuEvent ev) {\n                updateOpenRecentHomeMenu(openRecentHomeMenu, controller);\n            }\n\n            public void menuCanceled(MenuEvent ev) {\n            }\n\n            public void menuDeselected(MenuEvent ev) {\n            }\n        });\n        fileMenu.add(openRecentHomeMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.CLOSE, fileMenu);\n        addActionToMenu(ActionType.SAVE, fileMenu);\n        addActionToMenu(ActionType.SAVE_AS, fileMenu);\n        addActionToMenu(ActionType.SAVE_AND_COMPRESS, fileMenu);\n        fileMenu.addSeparator();\n        addActionToMenu(ActionType.PAGE_SETUP, fileMenu);\n        addActionToMenu(ActionType.PRINT_PREVIEW, fileMenu);\n        addActionToMenu(ActionType.PRINT, fileMenu);\n        // Don\u0027t add PRINT_TO_PDF, PREFERENCES and EXIT menu items under Mac OS X,\n        // because PREFERENCES and EXIT items are displayed in application menu\n        // and PRINT_TO_PDF is available in standard Mac OS X Print dialog\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.PRINT_TO_PDF, fileMenu);\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.PREFERENCES, fileMenu);\n        }\n        // Create Edit menu\n        JMenu editMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.EDIT_MENU));\n        addActionToMenu(ActionType.UNDO, editMenu);\n        addActionToMenu(ActionType.REDO, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.CUT, editMenu);\n        addActionToMenu(ActionType.COPY, editMenu);\n        addActionToMenu(ActionType.PASTE, editMenu);\n        editMenu.addSeparator();\n        addActionToMenu(ActionType.DELETE, editMenu);\n        addActionToMenu(ActionType.SELECT_ALL, editMenu);\n        // Create Furniture menu\n        JMenu furnitureMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.FURNITURE_MENU));\n        addActionToMenu(ActionType.ADD_HOME_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.MODIFY_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.GROUP_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.UNGROUP_FURNITURE, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, furnitureMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        addActionToMenu(ActionType.IMPORT_FURNITURE, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_FURNITURE_LIBRARY, furnitureMenu);\n        addActionToMenu(ActionType.IMPORT_TEXTURES_LIBRARY, furnitureMenu);\n        furnitureMenu.addSeparator();\n        furnitureMenu.add(createFurnitureSortMenu(home, preferences));\n        furnitureMenu.add(createFurnitureDisplayPropertyMenu(home, preferences));\n        // Create Plan menu\n        JMenu planMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.PLAN_MENU));\n        addToggleActionToMenu(ActionType.SELECT, true, planMenu);\n        addToggleActionToMenu(ActionType.PAN, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_WALLS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_ROOMS, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_DIMENSION_LINES, true, planMenu);\n        addToggleActionToMenu(ActionType.CREATE_LABELS, true, planMenu);\n        planMenu.addSeparator();\n        JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, false);\n        if (lockUnlockBasePlanMenuItem !\u003d null) {\n            planMenu.add(lockUnlockBasePlanMenuItem);\n        }\n        addActionToMenu(ActionType.MODIFY_COMPASS, planMenu);\n        addActionToMenu(ActionType.MODIFY_WALL, planMenu);\n        addActionToMenu(ActionType.REVERSE_WALL_DIRECTION, planMenu);\n        addActionToMenu(ActionType.SPLIT_WALL, planMenu);\n        addActionToMenu(ActionType.MODIFY_ROOM, planMenu);\n        addActionToMenu(ActionType.MODIFY_LABEL, planMenu);\n        planMenu.add(createTextStyleMenu(home, preferences, false));\n        planMenu.addSeparator();\n        JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, false);\n        if (importModifyBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(importModifyBackgroundImageMenuItem);\n        }\n        JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, false);\n        if (hideShowBackgroundImageMenuItem !\u003d null) {\n            planMenu.add(hideShowBackgroundImageMenuItem);\n        }\n        addActionToMenu(ActionType.DELETE_BACKGROUND_IMAGE, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ADD_LEVEL, planMenu);\n        addActionToMenu(ActionType.MODIFY_LEVEL, planMenu);\n        addActionToMenu(ActionType.DELETE_LEVEL, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.ZOOM_IN, planMenu);\n        addActionToMenu(ActionType.ZOOM_OUT, planMenu);\n        planMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_SVG, planMenu);\n        // Create 3D Preview menu\n        JMenu preview3DMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.VIEW_3D_MENU));\n        addToggleActionToMenu(ActionType.VIEW_FROM_TOP, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.VIEW_FROM_OBSERVER, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_OBSERVER, preview3DMenu);\n        addActionToMenu(ActionType.STORE_POINT_OF_VIEW, preview3DMenu);\n        JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n        if (goToPointOfViewMenu !\u003d null) {\n            preview3DMenu.add(goToPointOfViewMenu);\n        }\n        preview3DMenu.addSeparator();\n        JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, false);\n        if (attachDetach3DViewMenuItem !\u003d null) {\n            preview3DMenu.add(attachDetach3DViewMenuItem);\n        }\n        addToggleActionToMenu(ActionType.DISPLAY_ALL_LEVELS, true, preview3DMenu);\n        addToggleActionToMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, preview3DMenu);\n        addActionToMenu(ActionType.MODIFY_3D_ATTRIBUTES, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.CREATE_PHOTO, preview3DMenu);\n        addActionToMenu(ActionType.CREATE_VIDEO, preview3DMenu);\n        preview3DMenu.addSeparator();\n        addActionToMenu(ActionType.EXPORT_TO_OBJ, preview3DMenu);\n        // Create Help menu\n        JMenu helpMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.HELP_MENU));\n        addActionToMenu(ActionType.HELP, helpMenu);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToMenu(ActionType.ABOUT, helpMenu);\n        }\n        // Add menus to menu bar\n        JMenuBar menuBar \u003d new JMenuBar();\n        menuBar.add(fileMenu);\n        menuBar.add(editMenu);\n        menuBar.add(furnitureMenu);\n        if (controller.getPlanController().getView() !\u003d null) {\n            menuBar.add(planMenu);\n        }\n        if (controller.getHomeController3D().getView() !\u003d null) {\n            menuBar.add(preview3DMenu);\n        }\n        menuBar.add(helpMenu);\n        // Add plugin actions menu items\n        for (Action pluginAction : this.pluginActions) {\n            String pluginMenu \u003d (String) pluginAction.getValue(PluginAction.Property.MENU.name());\n            if (pluginMenu !\u003d null) {\n                boolean pluginActionAdded \u003d false;\n                for (int i \u003d 0; i \u003c menuBar.getMenuCount(); i++) {\n                    JMenu menu \u003d menuBar.getMenu(i);\n                    if (menu.getText().equals(pluginMenu)) {\n                        // Add menu item to existing menu\n                        menu.addSeparator();\n                        menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                        pluginActionAdded \u003d true;\n                        break;\n                    }\n                }\n                if (!pluginActionAdded) {\n                    // Create missing menu before last menu\n                    JMenu menu \u003d new JMenu(pluginMenu);\n                    menu.add(new ResourceAction.MenuItemAction(pluginAction));\n                    menuBar.add(menu, menuBar.getMenuCount() - 1);\n                }\n            }\n        }\n        // Add EXIT action at end to ensure it\u0027s the last item of file menu\n        if (!OperatingSystem.isMacOSX()) {\n            fileMenu.addSeparator();\n            addActionToMenu(ActionType.EXIT, fileMenu);\n        }\n        removeUselessSeparatorsAndEmptyMenus(menuBar);\n        return menuBar;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, JMenu menu) {\n        addActionToMenu(actionType, false, menu);\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToMenu(ActionType actionType, boolean popup, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean radioButton, JMenu menu) {\n        addToggleActionToMenu(actionType, false, radioButton, menu);\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addToggleActionToMenu(ActionType actionType, boolean popup, boolean radioButton, JMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, popup, radioButton));\n        }\n    }\n\n    /**\n     * Creates a menu item for a toggle action.\n     */\n    private JMenuItem createToggleMenuItem(Action action, boolean popup, boolean radioButton) {\n        JMenuItem menuItem;\n        if (radioButton) {\n            menuItem \u003d new JRadioButtonMenuItem();\n        } else {\n            menuItem \u003d new JCheckBoxMenuItem();\n        }\n        // Configure model\n        menuItem.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n        // Configure menu item action after setting its model to avoid losing its mnemonic\n        menuItem.setAction(popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action));\n        return menuItem;\n    }\n\n    /**\n     * Adds the given action to \u003ccode\u003emenu\u003c/code\u003e.\n     */\n    private void addActionToPopupMenu(ActionType actionType, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(new ResourceAction.PopupMenuItemAction(action));\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003emenu\u003c/code\u003e the menu item matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToPopupMenu(ActionType actionType, boolean radioButton, JPopupMenu menu) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            menu.add(createToggleMenuItem(action, true, radioButton));\n        }\n    }\n\n    /**\n     * Removes the useless separators and empty menus among children of component.\n     */\n    private void removeUselessSeparatorsAndEmptyMenus(JComponent component) {\n        for (int i \u003d component.getComponentCount() - 1; i \u003e\u003d 0; i--) {\n            Component child \u003d component.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d component.getComponentCount() - 1 || component.getComponent(i - 1) instanceof JSeparator)) {\n                component.remove(i);\n            } else if (child instanceof JMenu) {\n                removeUselessSeparatorsAndEmptyMenus(((JMenu) child).getPopupMenu());\n            }\n            if (child instanceof JMenu \u0026\u0026 (((JMenu) child).getMenuComponentCount() \u003d\u003d 0 || ((JMenu) child).getMenuComponentCount() \u003d\u003d 1 \u0026\u0026 ((JMenu) child).getMenuComponent(0) instanceof JSeparator)) {\n                component.remove(i);\n            }\n        }\n        // Don\u0027t let a menu start with a separator\n        if (component.getComponentCount() \u003e 0 \u0026\u0026 component.getComponent(0) instanceof JSeparator) {\n            component.remove(0);\n        }\n    }\n\n    /**\n     * Returns align or distribute menu.\n     */\n    private JMenu createAlignOrDistributeMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu alignOrDistributeMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.ALIGN_OR_DISTRIBUTE_MENU));\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_TOP, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BOTTOM, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, popup, alignOrDistributeMenu);\n        addActionToMenu(ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, popup, alignOrDistributeMenu);\n        return alignOrDistributeMenu;\n    }\n\n    /**\n     * Returns furniture sort menu.\n     */\n    private JMenu createFurnitureSortMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Sort submenu\n        JMenu sortMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.SORT_HOME_FURNITURE_MENU));\n        // Map sort furniture properties to sort actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e sortActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, sortActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_NAME, sortActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_WIDTH, sortActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_DEPTH, sortActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, sortActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_X, sortActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_Y, sortActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, sortActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_ANGLE, sortActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_LEVEL, sortActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_COLOR, sortActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, sortActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, sortActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_TYPE, sortActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, sortActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE, sortActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, sortActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, sortActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu and make them share the same radio button group\n        ButtonGroup sortButtonGroup \u003d new ButtonGroup();\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : sortActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action sortAction \u003d entry.getValue();\n            JRadioButtonMenuItem sortMenuItem \u003d new JRadioButtonMenuItem();\n            // Use a special model for sort radio button menu item that is selected if\n            // home is sorted on furnitureProperty criterion\n            sortMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return furnitureProperty \u003d\u003d home.getFurnitureSortedProperty();\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            sortMenuItem.setAction(new ResourceAction.MenuItemAction(sortAction));\n            sortMenu.add(sortMenuItem);\n            sortButtonGroup.add(sortMenuItem);\n        }\n        Action sortOrderAction \u003d getActionMap().get(ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER);\n        if (sortOrderAction.getValue(Action.NAME) !\u003d null) {\n            sortMenu.addSeparator();\n            JCheckBoxMenuItem sortOrderCheckBoxMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for sort order check box menu item that is selected depending on\n            // home sort order property\n            sortOrderCheckBoxMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.isFurnitureDescendingSorted();\n                }\n            });\n            sortOrderCheckBoxMenuItem.setAction(new ResourceAction.MenuItemAction(sortOrderAction));\n            sortMenu.add(sortOrderCheckBoxMenuItem);\n        }\n        return sortMenu;\n    }\n\n    /**\n     * Adds to \u003ccode\u003eactions\u003c/code\u003e the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToMap(ActionType actionType, Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e actions, HomePieceOfFurniture.SortableProperty key) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            actions.put(key, action);\n        }\n    }\n\n    /**\n     * Returns furniture display property menu.\n     */\n    private JMenu createFurnitureDisplayPropertyMenu(final Home home, UserPreferences preferences) {\n        // Create Furniture Display property submenu\n        JMenu displayPropertyMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.DISPLAY_HOME_FURNITURE_PROPERTY_MENU));\n        // Map displayProperty furniture properties to displayProperty actions\n        Map\u003cHomePieceOfFurniture.SortableProperty, Action\u003e displayPropertyActions \u003d new LinkedHashMap\u003cHomePieceOfFurniture.SortableProperty, Action\u003e();\n        // Use catalog id if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, displayPropertyActions, HomePieceOfFurniture.SortableProperty.CATALOG_ID);\n        }\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_NAME, displayPropertyActions, HomePieceOfFurniture.SortableProperty.NAME);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_WIDTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.WIDTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DEPTH, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DEPTH);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, displayPropertyActions, HomePieceOfFurniture.SortableProperty.HEIGHT);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_X, displayPropertyActions, HomePieceOfFurniture.SortableProperty.X);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_Y, displayPropertyActions, HomePieceOfFurniture.SortableProperty.Y);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ELEVATION);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_ANGLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.ANGLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_LEVEL, displayPropertyActions, HomePieceOfFurniture.SortableProperty.LEVEL);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_COLOR, displayPropertyActions, HomePieceOfFurniture.SortableProperty.COLOR);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.TEXTURE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.MOVABLE);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, displayPropertyActions, HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW);\n        addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VISIBLE);\n        // Use prices if currency isn\u0027t null\n        if (preferences.getCurrency() !\u003d null) {\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, displayPropertyActions, HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX);\n            addActionToMap(ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, displayPropertyActions, HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED);\n        }\n        // Add radio button menu items to sub menu\n        for (Map.Entry\u003cHomePieceOfFurniture.SortableProperty, Action\u003e entry : displayPropertyActions.entrySet()) {\n            final HomePieceOfFurniture.SortableProperty furnitureProperty \u003d entry.getKey();\n            Action displayPropertyAction \u003d entry.getValue();\n            JCheckBoxMenuItem displayPropertyMenuItem \u003d new JCheckBoxMenuItem();\n            // Use a special model for displayProperty check box menu item that is selected if\n            // home furniture visible properties contains furnitureProperty\n            displayPropertyMenuItem.setModel(new JToggleButton.ToggleButtonModel() {\n\n                @Override\n                public boolean isSelected() {\n                    return home.getFurnitureVisibleProperties().contains(furnitureProperty);\n                }\n            });\n            // Configure check box menu item action after setting its model to avoid losing its mnemonic\n            displayPropertyMenuItem.setAction(displayPropertyAction);\n            displayPropertyMenu.add(displayPropertyMenuItem);\n        }\n        return displayPropertyMenu;\n    }\n\n    /**\n     * Returns Lock / Unlock base plan menu item.\n     */\n    private JMenuItem createLockUnlockBasePlanMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem lockUnlockBasePlanMenuItem \u003d new JMenuItem(createLockUnlockBasePlanAction(home, popup));\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanMenuItem.setAction(createLockUnlockBasePlanAction(home, popup));\n                }\n            });\n            return lockUnlockBasePlanMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Lock / Unlock base plan menu item.\n     */\n    private Action createLockUnlockBasePlanAction(Home home, boolean popup) {\n        ActionType actionType \u003d home.isBasePlanLocked() ? ActionType.UNLOCK_BASE_PLAN : ActionType.LOCK_BASE_PLAN;\n        Action action \u003d getActionMap().get(actionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(action) : new ResourceAction.MenuItemAction(action);\n    }\n\n    /**\n     * Returns Lock / Unlock base plan button.\n     */\n    private JComponent createLockUnlockBasePlanButton(final Home home) {\n        ActionMap actionMap \u003d getActionMap();\n        final Action unlockBasePlanAction \u003d actionMap.get(ActionType.UNLOCK_BASE_PLAN);\n        final Action lockBasePlanAction \u003d actionMap.get(ActionType.LOCK_BASE_PLAN);\n        if (unlockBasePlanAction !\u003d null \u0026\u0026 unlockBasePlanAction.getValue(Action.NAME) !\u003d null \u0026\u0026 lockBasePlanAction.getValue(Action.NAME) !\u003d null) {\n            final JButton lockUnlockBasePlanButton \u003d new JButton(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n            lockUnlockBasePlanButton.setBorderPainted(false);\n            lockUnlockBasePlanButton.setContentAreaFilled(false);\n            lockUnlockBasePlanButton.setFocusable(false);\n            // Add a listener to home on basePlanLocked property change to\n            // switch action according to basePlanLocked change\n            home.addPropertyChangeListener(Home.Property.BASE_PLAN_LOCKED, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    lockUnlockBasePlanButton.setAction(new ResourceAction.ToolBarAction(home.isBasePlanLocked() ? unlockBasePlanAction : lockBasePlanAction));\n                }\n            });\n            return lockUnlockBasePlanButton;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns text style menu.\n     */\n    private JMenu createTextStyleMenu(final Home home, final UserPreferences preferences, boolean popup) {\n        JMenu modifyTextStyleMenu \u003d new JMenu(this.menuActionMap.get(MenuActionType.MODIFY_TEXT_STYLE));\n        addActionToMenu(ActionType.INCREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        addActionToMenu(ActionType.DECREASE_TEXT_SIZE, popup, modifyTextStyleMenu);\n        modifyTextStyleMenu.addSeparator();\n        addToggleActionToMenu(ActionType.TOGGLE_BOLD_STYLE, popup, false, modifyTextStyleMenu);\n        addToggleActionToMenu(ActionType.TOGGLE_ITALIC_STYLE, popup, false, modifyTextStyleMenu);\n        return modifyTextStyleMenu;\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use bold style.\n     */\n    private JToggleButton.ToggleButtonModel createBoldStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all bold or not\n                Boolean selectionBoldStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean bold;\n                    if (item instanceof Label) {\n                        bold \u003d isItemTextBold(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        bold \u003d isItemTextBold(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        bold \u003d isItemTextBold(room, room.getNameStyle());\n                        if (bold !\u003d isItemTextBold(room, room.getAreaStyle())) {\n                            bold \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        bold \u003d isItemTextBold(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionBoldStyle \u003d\u003d null) {\n                        selectionBoldStyle \u003d bold;\n                    } else if (bold \u003d\u003d null || !selectionBoldStyle.equals(bold)) {\n                        selectionBoldStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionBoldStyle !\u003d null \u0026\u0026 selectionBoldStyle;\n            }\n\n            private boolean isItemTextBold(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isBold();\n            }\n        };\n    }\n\n    /**\n     * Creates a toggle button model that is selected when all the text of the\n     * selected items in \u003ccode\u003ehome\u003c/code\u003e use italic style.\n     */\n    private JToggleButton.ToggleButtonModel createItalicStyleToggleModel(final Home home, final UserPreferences preferences) {\n        return new JToggleButton.ToggleButtonModel() {\n\n            {\n                home.addSelectionListener(new SelectionListener() {\n\n                    public void selectionChanged(SelectionEvent ev) {\n                        fireStateChanged();\n                    }\n                });\n            }\n\n            @Override\n            public boolean isSelected() {\n                // Find if selected items are all italic or not\n                Boolean selectionItalicStyle \u003d null;\n                for (Selectable item : home.getSelectedItems()) {\n                    Boolean italic;\n                    if (item instanceof Label) {\n                        italic \u003d isItemTextItalic(item, ((Label) item).getStyle());\n                    } else if (item instanceof HomePieceOfFurniture \u0026\u0026 ((HomePieceOfFurniture) item).isVisible()) {\n                        italic \u003d isItemTextItalic(item, ((HomePieceOfFurniture) item).getNameStyle());\n                    } else if (item instanceof Room) {\n                        Room room \u003d (Room) item;\n                        italic \u003d isItemTextItalic(room, room.getNameStyle());\n                        if (italic !\u003d isItemTextItalic(room, room.getAreaStyle())) {\n                            italic \u003d null;\n                        }\n                    } else if (item instanceof DimensionLine) {\n                        italic \u003d isItemTextItalic(item, ((DimensionLine) item).getLengthStyle());\n                    } else {\n                        continue;\n                    }\n                    if (selectionItalicStyle \u003d\u003d null) {\n                        selectionItalicStyle \u003d italic;\n                    } else if (italic \u003d\u003d null || !selectionItalicStyle.equals(italic)) {\n                        selectionItalicStyle \u003d null;\n                        break;\n                    }\n                }\n                return selectionItalicStyle !\u003d null \u0026\u0026 selectionItalicStyle;\n            }\n\n            private boolean isItemTextItalic(Selectable item, TextStyle textStyle) {\n                if (textStyle \u003d\u003d null) {\n                    textStyle \u003d preferences.getDefaultTextStyle(item.getClass());\n                }\n                return textStyle.isItalic();\n            }\n        };\n    }\n\n    /**\n     * Returns Import / Modify background image menu item.\n     */\n    private JMenuItem createImportModifyBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action importBackgroundImageAction \u003d actionMap.get(ActionType.IMPORT_BACKGROUND_IMAGE);\n        Action modifyBackgroundImageAction \u003d actionMap.get(ActionType.MODIFY_BACKGROUND_IMAGE);\n        if (importBackgroundImageAction !\u003d null \u0026\u0026 importBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 modifyBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem importModifyBackgroundImageMenuItem \u003d new JMenuItem(createImportModifyBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    importModifyBackgroundImageMenuItem.setAction(createImportModifyBackgroundImageAction(home, popup));\n                }\n            });\n            return importModifyBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Adds to home and levels the given listener to follow background image changes.\n     */\n    private void addBackgroundImageChangeListener(final Home home, final PropertyChangeListener listener) {\n        home.addPropertyChangeListener(Home.Property.BACKGROUND_IMAGE, listener);\n        home.addPropertyChangeListener(Home.Property.SELECTED_LEVEL, listener);\n        final PropertyChangeListener levelChangeListener \u003d new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                if (Level.Property.BACKGROUND_IMAGE.name().equals(ev.getPropertyName())) {\n                    listener.propertyChange(ev);\n                }\n            }\n        };\n        for (Level level : this.home.getLevels()) {\n            level.addPropertyChangeListener(levelChangeListener);\n        }\n        this.home.addLevelsListener(new CollectionListener\u003cLevel\u003e() {\n\n            public void collectionChanged(CollectionEvent\u003cLevel\u003e ev) {\n                switch(ev.getType()) {\n                    case ADD:\n                        ev.getItem().addPropertyChangeListener(levelChangeListener);\n                        break;\n                    case DELETE:\n                        ev.getItem().removePropertyChangeListener(levelChangeListener);\n                        break;\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the action active on Import / Modify menu item.\n     */\n    private Action createImportModifyBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null ? ActionType.IMPORT_BACKGROUND_IMAGE : ActionType.MODIFY_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Hide / Show background image menu item.\n     */\n    private JMenuItem createHideShowBackgroundImageMenuItem(final Home home, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action hideBackgroundImageAction \u003d actionMap.get(ActionType.HIDE_BACKGROUND_IMAGE);\n        Action showBackgroundImageAction \u003d actionMap.get(ActionType.SHOW_BACKGROUND_IMAGE);\n        if (hideBackgroundImageAction !\u003d null \u0026\u0026 hideBackgroundImageAction.getValue(Action.NAME) !\u003d null \u0026\u0026 showBackgroundImageAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem hideShowBackgroundImageMenuItem \u003d new JMenuItem(createHideShowBackgroundImageAction(home, popup));\n            // Add a listener to home and levels on backgroundImage property change to\n            // switch action according to backgroundImage change\n            addBackgroundImageChangeListener(home, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    hideShowBackgroundImageMenuItem.setAction(createHideShowBackgroundImageAction(home, popup));\n                }\n            });\n            return hideShowBackgroundImageMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action active on Hide / Show menu item.\n     */\n    private Action createHideShowBackgroundImageAction(Home home, boolean popup) {\n        BackgroundImage backgroundImage \u003d home.getSelectedLevel() !\u003d null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();\n        ActionType backgroundImageActionType \u003d backgroundImage \u003d\u003d null || backgroundImage.isVisible() ? ActionType.HIDE_BACKGROUND_IMAGE : ActionType.SHOW_BACKGROUND_IMAGE;\n        Action backgroundImageAction \u003d getActionMap().get(backgroundImageActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Returns Go to point of view menu.\n     */\n    private JMenu createGoToPointOfViewMenu(final Home home, UserPreferences preferences, final HomeController controller) {\n        Action goToPointOfViewAction \u003d this.menuActionMap.get(MenuActionType.GO_TO_POINT_OF_VIEW);\n        if (goToPointOfViewAction.getValue(Action.NAME) !\u003d null) {\n            final JMenu goToPointOfViewMenu \u003d new JMenu(goToPointOfViewAction);\n            updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n            home.addPropertyChangeListener(Home.Property.STORED_CAMERAS, new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    updateGoToPointOfViewMenu(goToPointOfViewMenu, home, controller);\n                }\n            });\n            return goToPointOfViewMenu;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Updates Go to point of view menu items from the cameras stored in home.\n     */\n    private void updateGoToPointOfViewMenu(JMenu goToPointOfViewMenu, Home home, final HomeController controller) {\n        List\u003cCamera\u003e storedCameras \u003d home.getStoredCameras();\n        goToPointOfViewMenu.removeAll();\n        if (storedCameras.isEmpty()) {\n            goToPointOfViewMenu.setEnabled(false);\n            goToPointOfViewMenu.add(new ResourceAction(preferences, HomePane.class, \"NoStoredPointOfView\", false));\n        } else {\n            goToPointOfViewMenu.setEnabled(true);\n            for (final Camera camera : storedCameras) {\n                goToPointOfViewMenu.add(new AbstractAction(camera.getName()) {\n\n                    public void actionPerformed(ActionEvent e) {\n                        controller.getHomeController3D().goToCamera(camera);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns Attach / Detach menu item for the 3D view.\n     */\n    private JMenuItem createAttachDetach3DViewMenuItem(final HomeController controller, final boolean popup) {\n        ActionMap actionMap \u003d getActionMap();\n        Action display3DViewInSeparateWindowAction \u003d actionMap.get(ActionType.DETACH_3D_VIEW);\n        Action display3DViewInMainWindowAction \u003d actionMap.get(ActionType.ATTACH_3D_VIEW);\n        if (display3DViewInSeparateWindowAction !\u003d null \u0026\u0026 display3DViewInSeparateWindowAction.getValue(Action.NAME) !\u003d null \u0026\u0026 display3DViewInMainWindowAction.getValue(Action.NAME) !\u003d null) {\n            final JMenuItem attachDetach3DViewMenuItem \u003d new JMenuItem(createAttachDetach3DViewAction(controller, popup));\n            // Add a listener to 3D view to switch action when its parent changes\n            JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n            view3D.addAncestorListener(new AncestorListener() {\n\n                public void ancestorAdded(AncestorEvent ev) {\n                    attachDetach3DViewMenuItem.setAction(createAttachDetach3DViewAction(controller, popup));\n                }\n\n                public void ancestorRemoved(AncestorEvent ev) {\n                }\n\n                public void ancestorMoved(AncestorEvent ev) {\n                }\n            });\n            return attachDetach3DViewMenuItem;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the action Attach / Detach menu item.\n     */\n    private Action createAttachDetach3DViewAction(HomeController controller, boolean popup) {\n        JRootPane view3DRootPane \u003d SwingUtilities.getRootPane((JComponent) controller.getHomeController3D().getView());\n        ActionType display3DViewActionType \u003d view3DRootPane \u003d\u003d this ? ActionType.DETACH_3D_VIEW : ActionType.ATTACH_3D_VIEW;\n        Action backgroundImageAction \u003d getActionMap().get(display3DViewActionType);\n        return popup ? new ResourceAction.PopupMenuItemAction(backgroundImageAction) : new ResourceAction.MenuItemAction(backgroundImageAction);\n    }\n\n    /**\n     * Updates \u003ccode\u003eopenRecentHomeMenu\u003c/code\u003e from current recent homes in preferences.\n     */\n    protected void updateOpenRecentHomeMenu(JMenu openRecentHomeMenu, final HomeController controller) {\n        openRecentHomeMenu.removeAll();\n        for (final String homeName : controller.getRecentHomes()) {\n            openRecentHomeMenu.add(new AbstractAction(controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D)) {\n\n                public void actionPerformed(ActionEvent e) {\n                    controller.open(homeName);\n                }\n            });\n        }\n        if (openRecentHomeMenu.getMenuComponentCount() \u003e 0) {\n            openRecentHomeMenu.addSeparator();\n        }\n        addActionToMenu(ActionType.DELETE_RECENT_HOMES, openRecentHomeMenu);\n    }\n\n    /**\n     * Returns the tool bar displayed in this pane.\n     */\n    private JToolBar createToolBar(Home home) {\n        final JToolBar toolBar \u003d new UnfocusableToolBar();\n        addActionToToolBar(ActionType.NEW_HOME, toolBar);\n        addActionToToolBar(ActionType.OPEN, toolBar);\n        addActionToToolBar(ActionType.SAVE, toolBar);\n        if (!OperatingSystem.isMacOSX()) {\n            addActionToToolBar(ActionType.PREFERENCES, toolBar);\n        }\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.UNDO, toolBar);\n        addActionToToolBar(ActionType.REDO, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.CUT, toolBar);\n        addActionToToolBar(ActionType.COPY, toolBar);\n        addActionToToolBar(ActionType.PASTE, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.ADD_HOME_FURNITURE, toolBar);\n        toolBar.addSeparator();\n        addToggleActionToToolBar(ActionType.SELECT, toolBar);\n        addToggleActionToToolBar(ActionType.PAN, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_WALLS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_ROOMS, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_DIMENSION_LINES, toolBar);\n        addToggleActionToToolBar(ActionType.CREATE_LABELS, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.INCREASE_TEXT_SIZE, toolBar);\n        addActionToToolBar(ActionType.DECREASE_TEXT_SIZE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_BOLD_STYLE, toolBar);\n        addToggleActionToToolBar(ActionType.TOGGLE_ITALIC_STYLE, toolBar);\n        toolBar.add(Box.createRigidArea(new Dimension(2, 2)));\n        addActionToToolBar(ActionType.ZOOM_IN, toolBar);\n        addActionToToolBar(ActionType.ZOOM_OUT, toolBar);\n        toolBar.addSeparator();\n        addActionToToolBar(ActionType.CREATE_PHOTO, toolBar);\n        addActionToToolBar(ActionType.CREATE_VIDEO, toolBar);\n        toolBar.addSeparator();\n        // Add plugin actions buttons\n        boolean pluginActionsAdded \u003d false;\n        for (Action pluginAction : this.pluginActions) {\n            if (Boolean.TRUE.equals(pluginAction.getValue(PluginAction.Property.TOOL_BAR.name()))) {\n                toolBar.add(new ResourceAction.ToolBarAction(pluginAction));\n                pluginActionsAdded \u003d true;\n            }\n        }\n        if (pluginActionsAdded) {\n            toolBar.addSeparator();\n        }\n        addActionToToolBar(ActionType.HELP, toolBar);\n        // Remove useless separators\n        for (int i \u003d toolBar.getComponentCount() - 1; i \u003e 0; i--) {\n            Component child \u003d toolBar.getComponent(i);\n            if (child instanceof JSeparator \u0026\u0026 (i \u003d\u003d toolBar.getComponentCount() - 1 || toolBar.getComponent(i - 1) instanceof JSeparator)) {\n                toolBar.remove(i);\n            }\n        }\n        return toolBar;\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e\n     * and returns \u003ccode\u003etrue\u003c/code\u003e if it was added.\n     */\n    private void addToggleActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            Action toolBarAction \u003d new ResourceAction.ToolBarAction(action);\n            JToggleButton toggleButton \u003d new JToggleButton(toolBarAction);\n            toggleButton.setModel((JToggleButton.ToggleButtonModel) action.getValue(ResourceAction.TOGGLE_BUTTON_MODEL));\n            toolBar.add(toggleButton);\n        }\n    }\n\n    /**\n     * Adds to tool bar the button matching the given \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    private void addActionToToolBar(ActionType actionType, JToolBar toolBar) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null \u0026\u0026 action.getValue(Action.NAME) !\u003d null) {\n            toolBar.add(new ResourceAction.ToolBarAction(action));\n        }\n    }\n\n    /**\n     * Enables or disables the action matching \u003ccode\u003eactionType\u003c/code\u003e.\n     */\n    public void setEnabled(ActionType actionType, boolean enabled) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            action.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * of undo and redo actions. If a parameter is null,\n     * the properties will be reset to their initial values.\n     */\n    public void setUndoRedoName(String undoText, String redoText) {\n        setNameAndShortDescription(ActionType.UNDO, undoText);\n        setNameAndShortDescription(ActionType.REDO, redoText);\n    }\n\n    /**\n     * Sets the \u003ccode\u003eNAME\u003c/code\u003e and \u003ccode\u003eSHORT_DESCRIPTION\u003c/code\u003e properties value\n     * matching \u003ccode\u003eactionType\u003c/code\u003e. If \u003ccode\u003ename\u003c/code\u003e is null,\n     * the properties will be reset to their initial values.\n     */\n    private void setNameAndShortDescription(ActionType actionType, String name) {\n        Action action \u003d getActionMap().get(actionType);\n        if (action !\u003d null) {\n            if (name \u003d\u003d null) {\n                name \u003d (String) action.getValue(Action.DEFAULT);\n            }\n            action.putValue(Action.NAME, name);\n            action.putValue(Action.SHORT_DESCRIPTION, name);\n        }\n    }\n\n    /**\n     * Enables or disables transfer between components.\n     */\n    public void setTransferEnabled(boolean enabled) {\n        boolean dragAndDropWithTransferHandlerSupported;\n        try {\n            // Don\u0027t use transfer handlers for drag and drop with Plugin2 under Mac OS X or when in an unsigned applet\n            dragAndDropWithTransferHandlerSupported \u003d !Boolean.getBoolean(\"com.eteks.sweethome3d.dragAndDropWithoutTransferHandler\");\n        } catch (AccessControlException ex) {\n            dragAndDropWithTransferHandlerSupported \u003d false;\n        }\n        JComponent catalogView \u003d (JComponent) this.controller.getFurnitureCatalogController().getView();\n        JComponent furnitureView \u003d (JComponent) this.controller.getFurnitureController().getView();\n        JComponent planView \u003d (JComponent) this.controller.getPlanController().getView();\n        if (enabled) {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(this.catalogTransferHandler);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(this.furnitureTransferHandler);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(this.furnitureTransferHandler);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(this.planTransferHandler);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    // Check if furniture catalog is handled by a subcomponent\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    if (this.furnitureCatalogDragAndDropListener \u003d\u003d null) {\n                        this.furnitureCatalogDragAndDropListener \u003d createFurnitureCatalogMouseListener();\n                    }\n                    catalogComponent.addMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.addMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        } else {\n            if (catalogView !\u003d null) {\n                catalogView.setTransferHandler(null);\n            }\n            if (furnitureView !\u003d null) {\n                furnitureView.setTransferHandler(null);\n                if (furnitureView instanceof Scrollable) {\n                    ((JViewport) furnitureView.getParent()).setTransferHandler(null);\n                }\n            }\n            if (planView !\u003d null) {\n                planView.setTransferHandler(null);\n            }\n            if (!dragAndDropWithTransferHandlerSupported) {\n                if (catalogView !\u003d null) {\n                    List\u003cJViewport\u003e viewports \u003d SwingTools.findChildren(catalogView, JViewport.class);\n                    JComponent catalogComponent;\n                    if (viewports.size() \u003e 0) {\n                        catalogComponent \u003d (JComponent) viewports.get(0).getView();\n                    } else {\n                        catalogComponent \u003d catalogView;\n                    }\n                    catalogComponent.removeMouseListener(this.furnitureCatalogDragAndDropListener);\n                    catalogComponent.removeMouseMotionListener(this.furnitureCatalogDragAndDropListener);\n                }\n            }\n        }\n        this.transferHandlerEnabled \u003d enabled;\n    }\n\n    /**\n     * Returns a mouse listener for catalog that acts as catalog view, furniture view and plan transfer handlers\n     * for drag and drop operations.\n     */\n    private MouseInputAdapter createFurnitureCatalogMouseListener() {\n        return new MouseInputAdapter() {\n\n            private CatalogPieceOfFurniture selectedPiece;\n\n            private TransferHandler transferHandler;\n\n            private boolean autoscrolls;\n\n            private Cursor previousCursor;\n\n            private View previousView;\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev)) {\n                    List\u003cCatalogPieceOfFurniture\u003e selectedFurniture \u003d controller.getFurnitureCatalogController().getSelectedFurniture();\n                    if (selectedFurniture.size() \u003e 0) {\n                        JComponent source \u003d (JComponent) ev.getSource();\n                        this.transferHandler \u003d source.getTransferHandler();\n                        source.setTransferHandler(null);\n                        this.autoscrolls \u003d source.getAutoscrolls();\n                        source.setAutoscrolls(false);\n                        this.selectedPiece \u003d selectedFurniture.get(0);\n                        this.previousCursor \u003d null;\n                        this.previousView \u003d null;\n                    }\n                }\n            }\n\n            @Override\n            public void mouseDragged(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    // Force selection again\n                    List\u003cCatalogPieceOfFurniture\u003e emptyList \u003d Collections.emptyList();\n                    controller.getFurnitureCatalogController().setSelectedFurniture(emptyList);\n                    controller.getFurnitureCatalogController().setSelectedFurniture(Arrays.asList(new CatalogPieceOfFurniture[] { this.selectedPiece }));\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (this.previousView !\u003d view) {\n                        if (this.previousView !\u003d null) {\n                            if (this.previousView \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().stopDraggedItems();\n                            }\n                            ((JComponent) this.previousView).setCursor(this.previousCursor);\n                            this.previousCursor \u003d null;\n                            this.previousView \u003d null;\n                        }\n                        if (view !\u003d null) {\n                            JComponent component \u003d (JComponent) view;\n                            this.previousCursor \u003d component.getCursor();\n                            this.previousView \u003d view;\n                            component.setCursor(DragSource.DefaultCopyDrop);\n                            if (component.getParent() instanceof JViewport) {\n                                ((JViewport) component.getParent()).setCursor(DragSource.DefaultCopyDrop);\n                            }\n                            if (view \u003d\u003d controller.getPlanController().getView()) {\n                                controller.getPlanController().startDraggedItems(transferredFurniture, pointInView[0], pointInView[1]);\n                            }\n                        }\n                    } else if (pointInView !\u003d null) {\n                        controller.getPlanController().moveMouse(pointInView[0], pointInView[1]);\n                    }\n                }\n            }\n\n            private float[] getPointInPlanView(MouseEvent ev, List\u003cSelectable\u003e transferredFurniture) {\n                PlanView planView \u003d controller.getPlanController().getView();\n                if (planView !\u003d null) {\n                    JComponent planComponent \u003d (JComponent) planView;\n                    Point pointInPlanComponent \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent);\n                    if (planComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) planComponent.getParent()).contains(SwingUtilities.convertPoint(ev.getComponent(), ev.getPoint(), planComponent.getParent())) || !(planComponent.getParent() instanceof JViewport) \u0026\u0026 planView.canImportDraggedItems(transferredFurniture, pointInPlanComponent.x, pointInPlanComponent.y)) {\n                        return new float[] { planView.convertXPixelToModel(pointInPlanComponent.x), planView.convertYPixelToModel(pointInPlanComponent.y) };\n                    }\n                }\n                return null;\n            }\n\n            private float[] getPointInFurnitureView(MouseEvent ev) {\n                View furnitureView \u003d controller.getFurnitureController().getView();\n                if (furnitureView !\u003d null) {\n                    JComponent furnitureComponent \u003d (JComponent) furnitureView;\n                    Point point \u003d SwingUtilities.convertPoint(ev.getComponent(), ev.getX(), ev.getY(), furnitureComponent.getParent() instanceof JViewport ? furnitureComponent.getParent() : furnitureComponent);\n                    if (furnitureComponent.getParent() instanceof JViewport \u0026\u0026 ((JViewport) furnitureComponent.getParent()).contains(point) || !(furnitureComponent.getParent() instanceof JViewport) \u0026\u0026 furnitureComponent.contains(point)) {\n                        return new float[] { 0, 0 };\n                    }\n                }\n                return null;\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                if (SwingUtilities.isLeftMouseButton(ev) \u0026\u0026 this.selectedPiece !\u003d null) {\n                    List\u003cSelectable\u003e transferredFurniture \u003d Arrays.asList(new Selectable[] { controller.getFurnitureController().createHomePieceOfFurniture(this.selectedPiece) });\n                    View view;\n                    float[] pointInView \u003d getPointInPlanView(ev, transferredFurniture);\n                    if (pointInView !\u003d null) {\n                        controller.getPlanController().stopDraggedItems();\n                        view \u003d controller.getPlanController().getView();\n                    } else {\n                        view \u003d controller.getFurnitureController().getView();\n                        pointInView \u003d getPointInFurnitureView(ev);\n                    }\n                    if (pointInView !\u003d null) {\n                        controller.drop(transferredFurniture, view, pointInView[0], pointInView[1]);\n                        ((JComponent) this.previousView).setCursor(this.previousCursor);\n                    }\n                    this.selectedPiece \u003d null;\n                    JComponent source \u003d (JComponent) ev.getSource();\n                    source.setTransferHandler(this.transferHandler);\n                    source.setAutoscrolls(this.autoscrolls);\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the main pane with catalog tree, furniture table and plan pane.\n     */\n    private JComponent createMainPane(Home home, UserPreferences preferences, HomeController controller) {\n        final JComponent catalogFurniturePane \u003d createCatalogFurniturePane(home, preferences, controller);\n        final JComponent planView3DPane \u003d createPlanView3DPane(home, preferences, controller);\n        if (catalogFurniturePane \u003d\u003d null) {\n            return planView3DPane;\n        } else if (planView3DPane \u003d\u003d null) {\n            return catalogFurniturePane;\n        } else {\n            final JSplitPane mainPane \u003d new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, catalogFurniturePane, planView3DPane);\n            // Set default divider location\n            mainPane.setDividerLocation(360);\n            configureSplitPane(mainPane, home, MAIN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.3, true, controller);\n            return mainPane;\n        }\n    }\n\n    /**\n     * Configures \u003ccode\u003esplitPane\u003c/code\u003e divider location.\n     * If \u003ccode\u003edividerLocationProperty\u003c/code\u003e visual property exists in \u003ccode\u003ehome\u003c/code\u003e,\n     * its value will be used, otherwise the given resize weight will be used.\n     */\n    private void configureSplitPane(final JSplitPane splitPane, Home home, final String dividerLocationProperty, final double defaultResizeWeight, boolean showBorder, final HomeController controller) {\n        splitPane.setContinuousLayout(true);\n        splitPane.setOneTouchExpandable(true);\n        splitPane.setResizeWeight(defaultResizeWeight);\n        if (!showBorder) {\n            splitPane.setBorder(null);\n        }\n        // Restore divider location previously set\n        Integer dividerLocation \u003d (Integer) home.getVisualProperty(dividerLocationProperty);\n        if (dividerLocation !\u003d null) {\n            splitPane.setDividerLocation(dividerLocation);\n        }\n        splitPane.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, new PropertyChangeListener() {\n\n            public void propertyChange(final PropertyChangeEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        Component focusOwner \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();\n                        if (focusOwner !\u003d null \u0026\u0026 isChildComponentInvisible(splitPane, focusOwner)) {\n                            FocusTraversalPolicy focusTraversalPolicy \u003d getFocusTraversalPolicy();\n                            Component focusedComponent \u003d focusTraversalPolicy.getComponentAfter(HomePane.this, focusOwner);\n                            if (focusedComponent \u003d\u003d null) {\n                                focusedComponent \u003d focusTraversalPolicy.getComponentBefore(HomePane.this, focusOwner);\n                            }\n                            if (focusedComponent !\u003d null) {\n                                focusedComponent.requestFocusInWindow();\n                            }\n                        }\n                        controller.setVisualProperty(dividerLocationProperty, ev.getNewValue());\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the catalog tree and furniture table pane.\n     */\n    private JComponent createCatalogFurniturePane(Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent catalogView \u003d (JComponent) controller.getFurnitureCatalogController().getView();\n        if (catalogView !\u003d null) {\n            // Create catalog view popup menu\n            JPopupMenu catalogViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.COPY, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_HOME_FURNITURE, catalogViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, catalogViewPopup);\n            catalogViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.IMPORT_FURNITURE, catalogViewPopup);\n            SwingTools.hideDisabledMenuItems(catalogViewPopup);\n            catalogView.setComponentPopupMenu(catalogViewPopup);\n            preferences.addPropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, new FurnitureCatalogViewChangeListener(this, catalogView));\n            if (catalogView instanceof Scrollable) {\n                catalogView \u003d SwingTools.createScrollPane(catalogView);\n            }\n        }\n        // Configure furniture view\n        JComponent furnitureView \u003d (JComponent) controller.getFurnitureController().getView();\n        if (furnitureView !\u003d null) {\n            // Set default traversal keys of furniture view\n            KeyboardFocusManager focusManager \u003d KeyboardFocusManager.getCurrentKeyboardFocusManager();\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n            furnitureView.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS));\n            // Create furniture view popup menu\n            JPopupMenu furnitureViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.REDO, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.COPY, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.SELECT_ALL, furnitureViewPopup);\n            furnitureViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, furnitureViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, furnitureViewPopup);\n            furnitureViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            furnitureViewPopup.addSeparator();\n            furnitureViewPopup.add(createFurnitureSortMenu(home, preferences));\n            furnitureViewPopup.add(createFurnitureDisplayPropertyMenu(home, preferences));\n            SwingTools.hideDisabledMenuItems(furnitureViewPopup);\n            furnitureView.setComponentPopupMenu(furnitureViewPopup);\n            if (furnitureView instanceof Scrollable) {\n                JScrollPane furnitureScrollPane \u003d SwingTools.createScrollPane(furnitureView);\n                // Add a mouse listener that gives focus to furniture view when\n                // user clicks in its viewport (tables don\u0027t spread vertically if their row count is too small)\n                final JViewport viewport \u003d furnitureScrollPane.getViewport();\n                viewport.addMouseListener(new MouseAdapter() {\n\n                    @Override\n                    public void mouseClicked(MouseEvent ev) {\n                        viewport.getView().requestFocusInWindow();\n                    }\n                });\n                Integer viewportY \u003d (Integer) home.getVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(0, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        controller.setVisualProperty(FURNITURE_VIEWPORT_Y_VISUAL_PROPERTY, viewport.getViewPosition().y);\n                    }\n                });\n                ((JViewport) furnitureView.getParent()).setComponentPopupMenu(furnitureViewPopup);\n                furnitureView \u003d furnitureScrollPane;\n            }\n        }\n        if (catalogView \u003d\u003d null) {\n            return furnitureView;\n        } else if (furnitureView \u003d\u003d null) {\n            return catalogView;\n        } else {\n            // Create a split pane that displays both components\n            JSplitPane catalogFurniturePane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, catalogView, furnitureView);\n            catalogFurniturePane.setBorder(null);\n            catalogFurniturePane.setMinimumSize(new Dimension());\n            configureSplitPane(catalogFurniturePane, home, CATALOG_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n            return catalogFurniturePane;\n        }\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class FurnitureCatalogViewChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJComponent\u003e furnitureCatalogView;\n\n        public FurnitureCatalogViewChangeListener(HomePane homePane, JComponent furnitureCatalogView) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(furnitureCatalogView);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            if (homePane \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.FURNITURE_CATALOG_VIEWED_IN_TREE, this);\n            } else {\n                // Replace previous furniture catalog view by the new one\n                JComponent oldFurnitureCatalogView \u003d this.furnitureCatalogView.get();\n                if (oldFurnitureCatalogView !\u003d null) {\n                    boolean transferHandlerEnabled \u003d homePane.transferHandlerEnabled;\n                    homePane.setTransferEnabled(false);\n                    JComponent newFurnitureCatalogView \u003d (JComponent) homePane.controller.getFurnitureCatalogController().getView();\n                    newFurnitureCatalogView.setComponentPopupMenu(oldFurnitureCatalogView.getComponentPopupMenu());\n                    homePane.setTransferEnabled(transferHandlerEnabled);\n                    JComponent splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    if (newFurnitureCatalogView instanceof Scrollable) {\n                        splitPaneTopComponent \u003d SwingTools.createScrollPane(newFurnitureCatalogView);\n                    } else {\n                        splitPaneTopComponent \u003d newFurnitureCatalogView;\n                    }\n                    ((JSplitPane) SwingUtilities.getAncestorOfClass(JSplitPane.class, oldFurnitureCatalogView)).setTopComponent(splitPaneTopComponent);\n                    this.furnitureCatalogView \u003d new WeakReference\u003cJComponent\u003e(newFurnitureCatalogView);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the plan view and 3D view pane.\n     */\n    private JComponent createPlanView3DPane(final Home home, UserPreferences preferences, final HomeController controller) {\n        JComponent planView \u003d (JComponent) controller.getPlanController().getView();\n        if (planView !\u003d null) {\n            // Create plan view popup menu\n            JPopupMenu planViewPopup \u003d new JPopupMenu();\n            addActionToPopupMenu(ActionType.UNDO, planViewPopup);\n            addActionToPopupMenu(ActionType.REDO, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CUT, planViewPopup);\n            addActionToPopupMenu(ActionType.COPY, planViewPopup);\n            addActionToPopupMenu(ActionType.PASTE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.DELETE, planViewPopup);\n            Action selectObjectAction \u003d this.menuActionMap.get(MenuActionType.SELECT_OBJECT_MENU);\n            JMenu selectObjectMenu;\n            if (selectObjectAction.getValue(Action.NAME) !\u003d null) {\n                selectObjectMenu \u003d new JMenu(selectObjectAction);\n                planViewPopup.add(selectObjectMenu);\n            } else {\n                selectObjectMenu \u003d null;\n            }\n            addActionToPopupMenu(ActionType.SELECT_ALL, planViewPopup);\n            planViewPopup.addSeparator();\n            addToggleActionToPopupMenu(ActionType.SELECT, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.PAN, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_WALLS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_ROOMS, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_DIMENSION_LINES, true, planViewPopup);\n            addToggleActionToPopupMenu(ActionType.CREATE_LABELS, true, planViewPopup);\n            planViewPopup.addSeparator();\n            JMenuItem lockUnlockBasePlanMenuItem \u003d createLockUnlockBasePlanMenuItem(home, true);\n            if (lockUnlockBasePlanMenuItem !\u003d null) {\n                planViewPopup.add(lockUnlockBasePlanMenuItem);\n            }\n            addActionToPopupMenu(ActionType.MODIFY_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.GROUP_FURNITURE, planViewPopup);\n            addActionToPopupMenu(ActionType.UNGROUP_FURNITURE, planViewPopup);\n            planViewPopup.add(createAlignOrDistributeMenu(home, preferences, true));\n            addActionToPopupMenu(ActionType.MODIFY_COMPASS, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.REVERSE_WALL_DIRECTION, planViewPopup);\n            addActionToPopupMenu(ActionType.SPLIT_WALL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_ROOM, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LABEL, planViewPopup);\n            planViewPopup.add(createTextStyleMenu(home, preferences, true));\n            planViewPopup.addSeparator();\n            JMenuItem importModifyBackgroundImageMenuItem \u003d createImportModifyBackgroundImageMenuItem(home, true);\n            if (importModifyBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(importModifyBackgroundImageMenuItem);\n            }\n            JMenuItem hideShowBackgroundImageMenuItem \u003d createHideShowBackgroundImageMenuItem(home, true);\n            if (hideShowBackgroundImageMenuItem !\u003d null) {\n                planViewPopup.add(hideShowBackgroundImageMenuItem);\n            }\n            addActionToPopupMenu(ActionType.DELETE_BACKGROUND_IMAGE, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ADD_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.MODIFY_LEVEL, planViewPopup);\n            addActionToPopupMenu(ActionType.DELETE_LEVEL, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.ZOOM_OUT, planViewPopup);\n            addActionToPopupMenu(ActionType.ZOOM_IN, planViewPopup);\n            planViewPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_SVG, planViewPopup);\n            SwingTools.hideDisabledMenuItems(planViewPopup);\n            if (selectObjectMenu !\u003d null) {\n                // Add a second popup listener to manage Select object sub menu before the menu is hidden when empty\n                addSelectObjectMenuItems(selectObjectMenu, controller.getPlanController(), preferences);\n            }\n            planView.setComponentPopupMenu(planViewPopup);\n            final JScrollPane planScrollPane;\n            if (planView instanceof Scrollable) {\n                planView \u003d planScrollPane \u003d SwingTools.createScrollPane(planView);\n            } else {\n                List\u003cJScrollPane\u003e scrollPanes \u003d SwingTools.findChildren(planView, JScrollPane.class);\n                if (scrollPanes.size() \u003d\u003d 1) {\n                    planScrollPane \u003d scrollPanes.get(0);\n                } else {\n                    planScrollPane \u003d null;\n                }\n            }\n            if (planScrollPane !\u003d null) {\n                setPlanRulersVisible(planScrollPane, controller, preferences.isRulersVisible());\n                if (planScrollPane.getCorner(JScrollPane.UPPER_LEADING_CORNER) \u003d\u003d null) {\n                    final JComponent lockUnlockBasePlanButton \u003d createLockUnlockBasePlanButton(home);\n                    if (lockUnlockBasePlanButton !\u003d null) {\n                        planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                        planScrollPane.addPropertyChangeListener(\"componentOrientation\", new PropertyChangeListener() {\n\n                            public void propertyChange(PropertyChangeEvent ev) {\n                                if (lockUnlockBasePlanButton.getParent() !\u003d null) {\n                                    planScrollPane.setCorner(JScrollPane.UPPER_LEADING_CORNER, lockUnlockBasePlanButton);\n                                }\n                            }\n                        });\n                    }\n                }\n                // Add a listener to update rulers visibility in preferences\n                preferences.addPropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, new RulersVisibilityChangeListener(this, planScrollPane, controller));\n                // Restore viewport position if it exists\n                final JViewport viewport \u003d planScrollPane.getViewport();\n                Integer viewportX \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY);\n                Integer viewportY \u003d (Integer) home.getVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY);\n                if (viewportX !\u003d null \u0026\u0026 viewportY !\u003d null) {\n                    viewport.setViewPosition(new Point(viewportX, viewportY));\n                }\n                viewport.addChangeListener(new ChangeListener() {\n\n                    public void stateChanged(ChangeEvent ev) {\n                        Point viewportPosition \u003d viewport.getViewPosition();\n                        controller.setVisualProperty(PLAN_VIEWPORT_X_VISUAL_PROPERTY, viewportPosition.x);\n                        controller.setVisualProperty(PLAN_VIEWPORT_Y_VISUAL_PROPERTY, viewportPosition.y);\n                    }\n                });\n            }\n        }\n        // Configure 3D view\n        JComponent view3D \u003d (JComponent) controller.getHomeController3D().getView();\n        if (view3D !\u003d null) {\n            view3D.setPreferredSize(planView !\u003d null ? planView.getPreferredSize() : new Dimension(400, 400));\n            view3D.setMinimumSize(new Dimension());\n            // Create 3D view popup menu\n            JPopupMenu view3DPopup \u003d new JPopupMenu();\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_TOP, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.VIEW_FROM_OBSERVER, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_OBSERVER, view3DPopup);\n            addActionToPopupMenu(ActionType.STORE_POINT_OF_VIEW, view3DPopup);\n            JMenu goToPointOfViewMenu \u003d createGoToPointOfViewMenu(home, preferences, controller);\n            if (goToPointOfViewMenu !\u003d null) {\n                view3DPopup.add(goToPointOfViewMenu);\n            }\n            view3DPopup.addSeparator();\n            JMenuItem attachDetach3DViewMenuItem \u003d createAttachDetach3DViewMenuItem(controller, true);\n            if (attachDetach3DViewMenuItem !\u003d null) {\n                view3DPopup.add(attachDetach3DViewMenuItem);\n            }\n            addToggleActionToPopupMenu(ActionType.DISPLAY_ALL_LEVELS, true, view3DPopup);\n            addToggleActionToPopupMenu(ActionType.DISPLAY_SELECTED_LEVEL, true, view3DPopup);\n            addActionToPopupMenu(ActionType.MODIFY_3D_ATTRIBUTES, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.CREATE_PHOTO, view3DPopup);\n            addActionToPopupMenu(ActionType.CREATE_VIDEO, view3DPopup);\n            view3DPopup.addSeparator();\n            addActionToPopupMenu(ActionType.EXPORT_TO_OBJ, view3DPopup);\n            SwingTools.hideDisabledMenuItems(view3DPopup);\n            view3D.setComponentPopupMenu(view3DPopup);\n            if (view3D instanceof Scrollable) {\n                view3D \u003d SwingTools.createScrollPane(view3D);\n            }\n            JComponent planView3DPane;\n            if (planView !\u003d null) {\n                // Create a split pane that displays both components\n                final JSplitPane planView3DSplitPane \u003d new JSplitPane(JSplitPane.VERTICAL_SPLIT, planView, view3D);\n                planView3DSplitPane.setMinimumSize(new Dimension());\n                configureSplitPane((JSplitPane) planView3DSplitPane, home, PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY, 0.5, false, controller);\n                final Integer dividerLocation \u003d (Integer) home.getVisualProperty(PLAN_PANE_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                if (OperatingSystem.isMacOSX() \u0026\u0026 dividerLocation !\u003d null \u0026\u0026 dividerLocation \u003e 2) {\n                    // Under Mac OS X, ensure that the 3D view of an existing home will be displayed during a while\n                    // to avoid a freeze when the 3D view was saved as hidden and then the window displaying the 3D view is enlarged\n                    planView3DSplitPane.addAncestorListener(new AncestorListener() {\n\n                        public void ancestorAdded(AncestorEvent event) {\n                            planView3DSplitPane.removeAncestorListener(this);\n                            if (planView3DSplitPane.getRightComponent().getHeight() \u003d\u003d 0) {\n                                // If the 3D view is invisible, make it appear during a while\n                                planView3DSplitPane.setDividerLocation(dividerLocation - 2);\n                                Executors.newSingleThreadScheduledExecutor().schedule(new Runnable() {\n\n                                    public void run() {\n                                        EventQueue.invokeLater(new Runnable() {\n\n                                            public void run() {\n                                                planView3DSplitPane.setDividerLocation(dividerLocation);\n                                            }\n                                        });\n                                    }\n                                }, 1, TimeUnit.SECONDS);\n                            }\n                        }\n\n                        public void ancestorRemoved(AncestorEvent event) {\n                        }\n\n                        public void ancestorMoved(AncestorEvent event) {\n                        }\n                    });\n                }\n                planView3DPane \u003d planView3DSplitPane;\n            } else {\n                planView3DPane \u003d view3D;\n            }\n            // Detach 3D view if it was detached when saved and its dialog can be viewed in one of the screen devices\n            Boolean detachedView3D \u003d (Boolean) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY);\n            if (detachedView3D !\u003d null \u0026\u0026 detachedView3D.booleanValue()) {\n                // Check 3D view can be viewed in one of the available screens\n                final Integer dialogX \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n                final Integer dialogY \u003d (Integer) this.home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY);\n                final Integer dialogWidth \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n                final Integer dialogHeight \u003d (Integer) home.getVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY);\n                if (dialogX !\u003d null \u0026\u0026 dialogY !\u003d null \u0026\u0026 dialogWidth !\u003d null \u0026\u0026 dialogHeight !\u003d null \u0026\u0026 SwingTools.isRectangleVisibleAtScreen(new Rectangle(dialogX, dialogY, dialogWidth, dialogHeight))) {\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            View view3D \u003d controller.getHomeController3D().getView();\n                            detachView(view3D, dialogX, dialogY, dialogWidth, dialogHeight);\n                        }\n                    });\n                    return planView3DPane;\n                }\n                if (planView3DPane instanceof JSplitPane) {\n                    ((JSplitPane) planView3DPane).setDividerLocation(0.5);\n                }\n                controller.setVisualProperty(view3D.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, null);\n            }\n            return planView3DPane;\n        } else {\n            return planView;\n        }\n    }\n\n    /**\n     * Adds to the menu a listener that will update the menu items able to select\n     * the selectable items in plan at the location where the menu will be triggered.\n     */\n    private void addSelectObjectMenuItems(final JMenu selectObjectMenu, final PlanController planController, final UserPreferences preferences) {\n        JComponent planView \u003d (JComponent) planController.getView();\n        final Point lastMouseMoveLocation \u003d new Point(-1, -1);\n        ((JPopupMenu) selectObjectMenu.getParent()).addPopupMenuListener(new PopupMenuListener() {\n\n            @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n            public void popupMenuWillBecomeVisible(PopupMenuEvent ev) {\n                if (lastMouseMoveLocation.getX() \u003e\u003d 0 \u0026\u0026 !planController.isModificationState()) {\n                    final List\u003cSelectable\u003e items \u003d planController.getSelectableItemsAt(planController.getView().convertXPixelToModel(lastMouseMoveLocation.x), planController.getView().convertYPixelToModel(lastMouseMoveLocation.y));\n                    // Prepare localized formatters\n                    Map\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e formatters \u003d new HashMap\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e();\n                    formatters.put(Compass.class, new SelectableFormat\u003cCompass\u003e() {\n\n                        public String format(Compass compass) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.compass\");\n                        }\n                    });\n                    formatters.put(HomePieceOfFurniture.class, new SelectableFormat\u003cHomePieceOfFurniture\u003e() {\n\n                        public String format(HomePieceOfFurniture piece) {\n                            if (piece.getName().length() \u003e 0) {\n                                return piece.getName();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.furniture\");\n                            }\n                        }\n                    });\n                    formatters.put(Wall.class, new SelectableFormat\u003cWall\u003e() {\n\n                        public String format(Wall wall) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.wall\", preferences.getLengthUnit().getFormatWithUnit().format(wall.getLength()));\n                        }\n                    });\n                    formatters.put(Room.class, new SelectableFormat\u003cRoom\u003e() {\n\n                        public String format(Room room) {\n                            String roomInfo \u003d room.getName() !\u003d null \u0026\u0026 room.getName().length() \u003e 0 ? room.getName() : (room.isAreaVisible() ? preferences.getLengthUnit().getAreaFormatWithUnit().format(room.getArea()) : \"\");\n                            if (room.isFloorVisible() \u0026\u0026 !room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.floor\", roomInfo);\n                            } else if (!room.isFloorVisible() \u0026\u0026 room.isCeilingVisible()) {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.ceiling\", roomInfo);\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.room\", roomInfo);\n                            }\n                        }\n                    });\n                    formatters.put(DimensionLine.class, new SelectableFormat\u003cDimensionLine\u003e() {\n\n                        public String format(DimensionLine dimensionLine) {\n                            return preferences.getLocalizedString(HomePane.class, \"selectObject.dimensionLine\", preferences.getLengthUnit().getFormatWithUnit().format(dimensionLine.getLength()));\n                        }\n                    });\n                    formatters.put(Label.class, new SelectableFormat\u003cLabel\u003e() {\n\n                        public String format(Label label) {\n                            if (label.getText().length() \u003e 0) {\n                                return label.getText();\n                            } else {\n                                return preferences.getLocalizedString(HomePane.class, \"selectObject.label\");\n                            }\n                        }\n                    });\n                    for (final Selectable item : items) {\n                        String format \u003d null;\n                        for (Map.Entry\u003cClass\u003c? extends Selectable\u003e, SelectableFormat\u003e entry : formatters.entrySet()) {\n                            if (entry.getKey().isInstance(item)) {\n                                format \u003d entry.getValue().format(item);\n                                break;\n                            }\n                        }\n                        if (format !\u003d null) {\n                            selectObjectMenu.add(new JMenuItem(new AbstractAction(format) {\n\n                                public void actionPerformed(ActionEvent ev) {\n                                    planController.selectItem(item);\n                                }\n                            }));\n                        }\n                    }\n                }\n            }\n\n            public void popupMenuWillBecomeInvisible(PopupMenuEvent ev) {\n                selectObjectMenu.removeAll();\n            }\n\n            public void popupMenuCanceled(PopupMenuEvent ev) {\n            }\n        });\n        planView.addMouseMotionListener(new MouseMotionAdapter() {\n\n            @Override\n            public void mouseMoved(MouseEvent ev) {\n                lastMouseMoveLocation.setLocation(ev.getPoint());\n            }\n        });\n        planView.addMouseListener(new MouseAdapter() {\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                lastMouseMoveLocation.x \u003d -1;\n            }\n        });\n    }\n\n    /**\n     * Preferences property listener bound to this component with a weak reference to avoid\n     * strong link between preferences and this component.\n     */\n    private static class RulersVisibilityChangeListener implements PropertyChangeListener {\n\n        private WeakReference\u003cHomePane\u003e homePane;\n\n        private WeakReference\u003cJScrollPane\u003e planScrollPane;\n\n        private WeakReference\u003cHomeController\u003e controller;\n\n        public RulersVisibilityChangeListener(HomePane homePane, JScrollPane planScrollPane, HomeController controller) {\n            this.homePane \u003d new WeakReference\u003cHomePane\u003e(homePane);\n            this.planScrollPane \u003d new WeakReference\u003cJScrollPane\u003e(planScrollPane);\n            this.controller \u003d new WeakReference\u003cHomeController\u003e(controller);\n        }\n\n        public void propertyChange(PropertyChangeEvent ev) {\n            // If home pane was garbage collected, remove this listener from preferences\n            HomePane homePane \u003d this.homePane.get();\n            JScrollPane planScrollPane \u003d this.planScrollPane.get();\n            HomeController controller \u003d this.controller.get();\n            if (homePane \u003d\u003d null || planScrollPane \u003d\u003d null || controller \u003d\u003d null) {\n                ((UserPreferences) ev.getSource()).removePropertyChangeListener(UserPreferences.Property.RULERS_VISIBLE, this);\n            } else {\n                homePane.setPlanRulersVisible(planScrollPane, controller, (Boolean) ev.getNewValue());\n            }\n        }\n    }\n\n    /**\n     * Sets the rulers visible in plan view.\n     */\n    private void setPlanRulersVisible(JScrollPane planScrollPane, HomeController controller, boolean visible) {\n        if (visible) {\n            // Change column and row header views\n            planScrollPane.setColumnHeaderView((JComponent) controller.getPlanController().getHorizontalRulerView());\n            planScrollPane.setRowHeaderView((JComponent) controller.getPlanController().getVerticalRulerView());\n        } else {\n            planScrollPane.setColumnHeaderView(null);\n            planScrollPane.setRowHeaderView(null);\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003eview\u003c/code\u003e a mouse listener that disables all menu items of\n     * \u003ccode\u003emenuBar\u003c/code\u003e during a drag and drop operation in \u003ccode\u003eview\u003c/code\u003e.\n     */\n    private void disableMenuItemsDuringDragAndDrop(View view, final JMenuBar menuBar) {\n        class MouseAndFocusListener extends MouseAdapter implements FocusListener {\n\n            @Override\n            public void mousePressed(MouseEvent ev) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), false);\n                        }\n                    }\n                });\n            }\n\n            @Override\n            public void mouseReleased(MouseEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            private void enableMenuItems(final JMenuBar menuBar) {\n                EventQueue.invokeLater(new Runnable() {\n\n                    public void run() {\n                        for (int i \u003d 0, n \u003d menuBar.getMenuCount(); i \u003c n; i++) {\n                            setMenuItemsEnabled(menuBar.getMenu(i), true);\n                        }\n                    }\n                });\n            }\n\n            private void setMenuItemsEnabled(JMenu menu, boolean enabled) {\n                for (int i \u003d 0, n \u003d menu.getItemCount(); i \u003c n; i++) {\n                    JMenuItem item \u003d menu.getItem(i);\n                    if (item instanceof JMenu) {\n                        setMenuItemsEnabled((JMenu) item, enabled);\n                    } else if (item !\u003d null) {\n                        item.setEnabled(enabled ? item.getAction().isEnabled() : false);\n                    }\n                }\n            }\n\n            // Need to take into account focus events because a mouse released event\n            // isn\u0027t dispatched when the component loses focus\n            public void focusGained(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n\n            public void focusLost(FocusEvent ev) {\n                enableMenuItems(menuBar);\n            }\n        }\n        ;\n        MouseAndFocusListener listener \u003d new MouseAndFocusListener();\n        if (view !\u003d null) {\n            ((JComponent) view).addMouseListener(listener);\n            ((JComponent) view).addFocusListener(listener);\n        }\n    }\n\n    /**\n     * Detaches the given \u003ccode\u003eview\u003c/code\u003e from home view.\n     */\n    public void detachView(final View view) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        float dividerLocation;\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            if (splitPane.getOrientation() \u003d\u003d JSplitPane.VERTICAL_SPLIT) {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getHeight() - splitPane.getDividerSize());\n            } else {\n                dividerLocation \u003d (float) splitPane.getDividerLocation() / (splitPane.getWidth() - splitPane.getDividerSize());\n            }\n        } else {\n            dividerLocation \u003d -1;\n        }\n        Integer dialogX \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY);\n        Integer dialogWidth \u003d (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY);\n        if (dialogX !\u003d null \u0026\u0026 dialogWidth !\u003d null) {\n            detachView(view, dialogX, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY), dialogWidth, (Integer) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY));\n        } else {\n            Point componentLocation \u003d new Point();\n            Dimension componentSize \u003d component.getSize();\n            SwingUtilities.convertPointToScreen(componentLocation, component);\n            Insets insets \u003d new JDialog().getInsets();\n            detachView(view, componentLocation.x - insets.left, componentLocation.y - insets.top, componentSize.width + insets.left + insets.right, componentSize.height + insets.top + insets.bottom);\n        }\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY, dividerLocation);\n    }\n\n    /**\n     * Detaches a \u003ccode\u003eview\u003c/code\u003e at the given location and size.\n     */\n    private void detachView(final View view, int x, int y, int width, int height) {\n        JComponent component \u003d (JComponent) view;\n        Container parent \u003d component.getParent();\n        if (parent instanceof JViewport) {\n            component \u003d (JComponent) parent.getParent();\n            parent \u003d component.getParent();\n        }\n        // Replace component by a dummy label to find easily where to attach back the component\n        JLabel dummyLabel \u003d new JLabel();\n        dummyLabel.setMaximumSize(new Dimension());\n        dummyLabel.setName(view.getClass().getName());\n        dummyLabel.setBorder(component.getBorder());\n        if (parent instanceof JSplitPane) {\n            JSplitPane splitPane \u003d (JSplitPane) parent;\n            splitPane.setDividerSize(0);\n            if (splitPane.getLeftComponent() \u003d\u003d component) {\n                splitPane.setLeftComponent(dummyLabel);\n                splitPane.setDividerLocation(0f);\n            } else {\n                splitPane.setRightComponent(dummyLabel);\n                splitPane.setDividerLocation(1f);\n            }\n        } else {\n            int componentIndex \u003d parent.getComponentZOrder(component);\n            parent.remove(componentIndex);\n            parent.add(dummyLabel, componentIndex);\n        }\n        // Display view in a separate non modal dialog\n        Window window \u003d SwingUtilities.getWindowAncestor(this);\n        if (!(window instanceof JFrame)) {\n            window \u003d JOptionPane.getRootFrame();\n        }\n        JFrame defaultFrame \u003d (JFrame) window;\n        // Create a dialog with the same title as home frame\n        final JDialog separateDialog \u003d new JDialog(defaultFrame, defaultFrame.getTitle(), false);\n        separateDialog.setResizable(true);\n        defaultFrame.addPropertyChangeListener(\"title\", new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                separateDialog.setTitle((String) ev.getNewValue());\n            }\n        });\n        // Use same document modified indicator\n        if (OperatingSystem.isMacOSXLeopardOrSuperior()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"Window.documentModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"Window.documentModified\", ev.getNewValue());\n                }\n            });\n        } else if (OperatingSystem.isMacOSX()) {\n            defaultFrame.getRootPane().addPropertyChangeListener(\"windowModified\", new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    separateDialog.getRootPane().putClientProperty(\"windowModified\", ev.getNewValue());\n                }\n            });\n        }\n        separateDialog.setContentPane(component);\n        separateDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\n        separateDialog.addWindowListener(new WindowAdapter() {\n\n            @Override\n            public void windowClosing(WindowEvent ev) {\n                controller.attachView(view);\n            }\n        });\n        separateDialog.addComponentListener(new ComponentAdapter() {\n\n            @Override\n            public void componentResized(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_WIDTH_VISUAL_PROPERTY, separateDialog.getWidth());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_HEIGHT_VISUAL_PROPERTY, separateDialog.getHeight());\n            }\n\n            @Override\n            public void componentMoved(ComponentEvent ev) {\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_X_VISUAL_PROPERTY, separateDialog.getX());\n                controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_Y_VISUAL_PROPERTY, separateDialog.getY());\n            }\n        });\n        separateDialog.setBounds(x, y, width, height);\n        separateDialog.setLocationByPlatform(!SwingTools.isRectangleVisibleAtScreen(separateDialog.getBounds()));\n        separateDialog.setVisible(true);\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, true);\n    }\n\n    /**\n     * Attaches the given \u003ccode\u003eview\u003c/code\u003e to home view.\n     */\n    public void attachView(View view) {\n        this.controller.setVisualProperty(view.getClass().getName() + DETACHED_VIEW_VISUAL_PROPERTY, false);\n        JComponent dummyComponent \u003d (JComponent) findChild(this, view.getClass().getName());\n        if (dummyComponent !\u003d null) {\n            JComponent component \u003d (JComponent) view;\n            Window window \u003d SwingUtilities.getWindowAncestor(component);\n            component.setBorder(dummyComponent.getBorder());\n            Container parent \u003d dummyComponent.getParent();\n            if (parent instanceof JSplitPane) {\n                JSplitPane splitPane \u003d (JSplitPane) parent;\n                float dividerLocation \u003d (Float) this.home.getVisualProperty(view.getClass().getName() + DETACHED_VIEW_DIVIDER_LOCATION_VISUAL_PROPERTY);\n                splitPane.setDividerSize(UIManager.getInt(\"SplitPane.dividerSize\"));\n                splitPane.setDividerLocation(dividerLocation);\n                if (splitPane.getLeftComponent() \u003d\u003d dummyComponent) {\n                    splitPane.setLeftComponent(component);\n                } else {\n                    splitPane.setRightComponent(component);\n                }\n            } else {\n                int componentIndex \u003d parent.getComponentZOrder(dummyComponent);\n                parent.remove(componentIndex);\n                parent.add(component, componentIndex);\n            }\n            window.dispose();\n        }\n    }\n\n    /**\n     * Returns among \u003ccode\u003eparent\u003c/code\u003e children the first child with the given name.\n     */\n    private Component findChild(Container parent, String childName) {\n        for (int i \u003d 0; i \u003c parent.getComponentCount(); i++) {\n            Component child \u003d parent.getComponent(i);\n            if (childName.equals(child.getName())) {\n                return child;\n            } else if (child instanceof Container) {\n                child \u003d findChild((Container) child, childName);\n                if (child !\u003d null) {\n                    return child;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose the name of a home.\n     */\n    public String showOpenDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"openHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D);\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a language library.\n     */\n    public String showImportLanguageLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importLanguageLibraryDialog.title\"), ContentManager.ContentType.LANGUAGE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing language library or not.\n     */\n    public boolean confirmReplaceLanguageLibrary(String languageLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.message\", new File(languageLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceLanguageLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a furniture library.\n     */\n    public String showImportFurnitureLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importFurnitureLibraryDialog.title\"), ContentManager.ContentType.FURNITURE_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing furniture library or not.\n     */\n    public boolean confirmReplaceFurnitureLibrary(String furnitureLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.message\", new File(furnitureLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceFurnitureLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser open dialog to choose a textures library.\n     */\n    public String showImportTexturesLibraryDialog() {\n        return this.controller.getContentManager().showOpenDialog(this, this.preferences.getLocalizedString(HomePane.class, \"importTexturesLibraryDialog.title\"), ContentManager.ContentType.TEXTURES_LIBRARY);\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing textures library or not.\n     */\n    public boolean confirmReplaceTexturesLibrary(String texturesLibraryName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.message\", new File(texturesLibraryName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplaceTexturesLibrary.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to overwrite\n     * an existing plug-in or not.\n     */\n    public boolean confirmReplacePlugin(String pluginName) {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.message\", new File(pluginName).getName());\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.title\");\n        String replace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.replace\");\n        String doNotReplace \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmReplacePlugin.doNotReplace\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { replace, doNotReplace }, doNotReplace) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a content chooser save dialog to choose the name of a home.\n     */\n    public String showSaveDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"saveHomeDialog.title\"), ContentManager.ContentType.SWEET_HOME_3D, homeName);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in an error message box.\n     */\n    public void showError(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"error.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);\n    }\n\n    /**\n     * Displays \u003ccode\u003emessage\u003c/code\u003e in a message box.\n     */\n    public void showMessage(String message) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"message.title\");\n        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);\n    }\n\n    /**\n     * Displays the tip matching \u003ccode\u003eactionTipKey\u003c/code\u003e and\n     * returns \u003ccode\u003etrue\u003c/code\u003e if the user chose not to display again the tip.\n     */\n    public boolean showActionTipMessage(String actionTipKey) {\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipTitle\");\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, actionTipKey + \".tipMessage\");\n        if (message.length() \u003e 0) {\n            JPanel tipPanel \u003d new JPanel(new GridBagLayout());\n            JLabel messageLabel \u003d new JLabel(message);\n            tipPanel.add(messageLabel, new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.NONE, new Insets(0, 0, 10, 0), 0, 0));\n            // Add a check box that lets user choose whether he wants to display again the tip or not\n            JCheckBox doNotDisplayTipCheckBox \u003d new JCheckBox(SwingTools.getLocalizedLabelText(this.preferences, HomePane.class, \"doNotDisplayTipCheckBox.text\"));\n            if (!OperatingSystem.isMacOSX()) {\n                doNotDisplayTipCheckBox.setMnemonic(KeyStroke.getKeyStroke(this.preferences.getLocalizedString(HomePane.class, \"doNotDisplayTipCheckBox.mnemonic\")).getKeyCode());\n            }\n            tipPanel.add(doNotDisplayTipCheckBox, new GridBagConstraints(0, 1, 1, 1, 0, 1, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));\n            SwingTools.showMessageDialog(this, tipPanel, title, JOptionPane.INFORMATION_MESSAGE, doNotDisplayTipCheckBox);\n            return doNotDisplayTipCheckBox.isSelected();\n        } else {\n            // Ignore untranslated tips\n            return true;\n        }\n    }\n\n    /**\n     * Displays a dialog that lets user choose whether he wants to save\n     * the current home or not.\n     * @return {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#SAVE}\n     * if the user chose to save home,\n     * {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#DO_NOT_SAVE}\n     * if he doesn\u0027t want to save home,\n     * or {@link com.eteks.sweethome3d.viewcontroller.HomeView.SaveAnswer#CANCEL}\n     * if he doesn\u0027t want to continue current operation.\n     */\n    public SaveAnswer confirmSave(String homeName) {\n        // Retrieve displayed text in buttons and message\n        String message;\n        if (homeName !\u003d null) {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\\\"\" + this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D) + \"\\\"\");\n        } else {\n            message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.message\", \"\");\n        }\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.doNotSave\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSave.cancel\");\n        switch(JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave, cancel }, save)) {\n            // Convert showOptionDialog answer to SaveAnswer enum constants\n            case JOptionPane.YES_OPTION:\n                return SaveAnswer.SAVE;\n            case JOptionPane.NO_OPTION:\n                return SaveAnswer.DO_NOT_SAVE;\n            default:\n                return SaveAnswer.CANCEL;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to save\n     * a home that was created with a newer version of Sweet Home 3D.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to save.\n     */\n    public boolean confirmSaveNewerHome(String homeName) {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.message\", this.controller.getContentManager().getPresentationName(homeName, ContentManager.ContentType.SWEET_HOME_3D));\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.title\");\n        String save \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.save\");\n        String doNotSave \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmSaveNewerHome.doNotSave\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { save, doNotSave }, doNotSave) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to exit\n     * application or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to exit.\n     */\n    public boolean confirmExit() {\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.title\");\n        String quit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.quit\");\n        String doNotQuit \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmExit.doNotQuit\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { quit, doNotQuit }, doNotQuit) \u003d\u003d JOptionPane.YES_OPTION;\n    }\n\n    /**\n     * Displays an about dialog.\n     */\n    public void showAboutDialog() {\n        String messageFormat \u003d this.preferences.getLocalizedString(HomePane.class, \"about.message\");\n        String aboutVersion \u003d this.controller.getVersion();\n        String message \u003d String.format(messageFormat, aboutVersion, System.getProperty(\"java.version\"));\n        // Use an uneditable editor pane to let user select text in dialog\n        JEditorPane messagePane \u003d new JEditorPane(\"text/html\", message);\n        messagePane.setOpaque(false);\n        messagePane.setEditable(false);\n        // Add a listener that displays hyperlinks content in browser\n        messagePane.addHyperlinkListener(new HyperlinkListener() {\n\n            public void hyperlinkUpdate(HyperlinkEvent ev) {\n                if (ev.getEventType() \u003d\u003d HyperlinkEvent.EventType.ACTIVATED) {\n                    SwingTools.showDocumentInBrowser(ev.getURL());\n                }\n            }\n        });\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"about.title\");\n        Icon icon \u003d new ImageIcon(HomePane.class.getResource(this.preferences.getLocalizedString(HomePane.class, \"about.icon\")));\n        JOptionPane.showMessageDialog(this, messagePane, title, JOptionPane.INFORMATION_MESSAGE, icon);\n    }\n\n    /**\n     * Shows a print dialog to print the home displayed by this pane.\n     * @return a print task to execute or \u003ccode\u003enull\u003c/code\u003e if the user canceled print.\n     *    The \u003ccode\u003ecall\u003c/code\u003e method of the returned task may throw a\n     *    {@link RecorderException RecorderException} exception if print failed\n     *    or an {@link InterruptedRecorderException InterruptedRecorderException}\n     *    exception if it was interrupted.\n     */\n    public Callable\u003cVoid\u003e showPrintDialog() {\n        PageFormat pageFormat \u003d HomePrintableComponent.getPageFormat(this.home.getPrint());\n        final PrinterJob printerJob \u003d PrinterJob.getPrinterJob();\n        printerJob.setPrintable(new HomePrintableComponent(this.home, this.controller, getFont()), pageFormat);\n        String jobName \u003d this.preferences.getLocalizedString(HomePane.class, \"print.jobName\");\n        if (this.home.getName() !\u003d null) {\n            jobName +\u003d \" - \" + this.controller.getContentManager().getPresentationName(this.home.getName(), ContentManager.ContentType.SWEET_HOME_3D);\n        }\n        printerJob.setJobName(jobName);\n        if (printerJob.printDialog()) {\n            return new Callable\u003cVoid\u003e() {\n\n                public Void call() throws RecorderException {\n                    try {\n                        printerJob.print();\n                        return null;\n                    } catch (InterruptedPrinterException ex) {\n                        throw new InterruptedRecorderException(\"Print interrupted\");\n                    } catch (PrinterException ex) {\n                        throw new RecorderException(\"Couldn\u0027t print\", ex);\n                    }\n                }\n            };\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to print a home in a PDF file.\n     */\n    public String showPrintToPDFDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"printToPDFDialog.title\"), ContentManager.ContentType.PDF, homeName);\n    }\n\n    /**\n     * Prints a home to a given PDF file. This method may be overridden\n     * to write to another kind of output stream.\n     */\n    public void printToPDF(String pdfFile) throws RecorderException {\n        OutputStream outputStream \u003d null;\n        boolean printInterrupted \u003d false;\n        try {\n            outputStream \u003d new FileOutputStream(pdfFile);\n            new HomePDFPrinter(this.home, this.preferences, this.controller, getFont()).write(outputStream);\n        } catch (InterruptedIOException ex) {\n            printInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Print interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n        } finally {\n            try {\n                if (outputStream !\u003d null) {\n                    outputStream.close();\n                }\n                // Delete the file if printing is interrupted\n                if (printInterrupted) {\n                    new File(pdfFile).delete();\n                }\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to PDF\", ex);\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a home plan in a SVG file.\n     */\n    public String showExportToSVGDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToSVGDialog.title\"), ContentManager.ContentType.SVG, homeName);\n    }\n\n    /**\n     * Exports the plan objects to a given SVG file.\n     */\n    public void exportToSVG(String svgFile) throws RecorderException {\n        View planView \u003d this.controller.getPlanController().getView();\n        PlanComponent planComponent;\n        if (planView instanceof PlanComponent) {\n            planComponent \u003d (PlanComponent) planView;\n        } else {\n            planComponent \u003d new PlanComponent(this.home, this.preferences, null);\n        }\n        OutputStream outputStream \u003d null;\n        boolean exportInterrupted \u003d false;\n        try {\n            outputStream \u003d new BufferedOutputStream(new FileOutputStream(svgFile));\n            planComponent.exportToSVG(outputStream);\n        } catch (InterruptedIOException ex) {\n            exportInterrupted \u003d true;\n            throw new InterruptedRecorderException(\"Export to \" + svgFile + \" interrupted\");\n        } catch (IOException ex) {\n            throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n        } finally {\n            if (outputStream !\u003d null) {\n                try {\n                    outputStream.close();\n                    // Delete the file if exporting is interrupted\n                    if (exportInterrupted) {\n                        new File(svgFile).delete();\n                    }\n                } catch (IOException ex) {\n                    throw new RecorderException(\"Couldn\u0027t export to SVG in \" + svgFile, ex);\n                }\n            }\n        }\n    }\n\n    /**\n     * Shows a content chooser save dialog to export a 3D home in a OBJ file.\n     */\n    public String showExportToOBJDialog(String homeName) {\n        return this.controller.getContentManager().showSaveDialog(this, this.preferences.getLocalizedString(HomePane.class, \"exportToOBJDialog.title\"), ContentManager.ContentType.OBJ, homeName);\n    }\n\n    /**\n     * Exports the objects of the 3D view to the given OBJ file.\n     */\n    public void exportToOBJ(String objFile) throws RecorderException {\n        String header \u003d this.preferences !\u003d null ? this.preferences.getLocalizedString(HomePane.class, \"exportToOBJ.header\", new Date()) : \"\";\n        // Use a clone of home to ignore selection\n        OBJExporter.exportHomeToFile(this.home.clone(), objFile, header);\n    }\n\n    /**\n     * Export to OBJ in a separate class to be able to run HomePane without Java 3D classes.\n     */\n    private static class OBJExporter {\n\n        public static void exportHomeToFile(Home home, String objFile, String header) throws RecorderException {\n            OBJWriter writer \u003d null;\n            boolean exportInterrupted \u003d false;\n            try {\n                writer \u003d new OBJWriter(objFile, header, -1);\n                List\u003cSelectable\u003e emptySelection \u003d Collections.emptyList();\n                home.setSelectedItems(emptySelection);\n                if (home.getWalls().size() \u003e 0) {\n                    // Create a not alive new ground to be able to explore its coordinates without setting capabilities\n                    Rectangle2D homeBounds \u003d getExportedHomeBounds(home);\n                    Ground3D groundNode \u003d new Ground3D(home, (float) homeBounds.getX(), (float) homeBounds.getY(), (float) homeBounds.getWidth(), (float) homeBounds.getHeight(), true);\n                    writer.writeNode(groundNode, \"ground\");\n                }\n                // Write 3D walls\n                int i \u003d 0;\n                for (Wall wall : home.getWalls()) {\n                    // Create a not alive new wall to be able to explore its coordinates without setting capabilities\n                    Wall3D wallNode \u003d new Wall3D(wall, home, true, true);\n                    writer.writeNode(wallNode, \"wall_\" + ++i);\n                }\n                // Write 3D furniture\n                i \u003d 0;\n                for (HomePieceOfFurniture piece : home.getFurniture()) {\n                    if (piece.isVisible()) {\n                        // Create a not alive new piece to be able to explore its coordinates without setting capabilities\n                        HomePieceOfFurniture3D pieceNode \u003d new HomePieceOfFurniture3D(piece, home, true, true);\n                        writer.writeNode(pieceNode);\n                    }\n                }\n                // Write 3D rooms\n                i \u003d 0;\n                for (Room room : home.getRooms()) {\n                    // Create a not alive new room to be able to explore its coordinates without setting capabilities\n                    Room3D roomNode \u003d new Room3D(room, home, false, true, true);\n                    writer.writeNode(roomNode, \"room_\" + ++i);\n                }\n            } catch (InterruptedIOException ex) {\n                exportInterrupted \u003d true;\n                throw new InterruptedRecorderException(\"Export to \" + objFile + \" interrupted\");\n            } catch (IOException ex) {\n                throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n            } finally {\n                if (writer !\u003d null) {\n                    try {\n                        writer.close();\n                        // Delete the file if exporting is interrupted\n                        if (exportInterrupted) {\n                            new File(objFile).delete();\n                        }\n                    } catch (IOException ex) {\n                        throw new RecorderException(\"Couldn\u0027t export to OBJ in \" + objFile, ex);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Returns \u003ccode\u003ehome\u003c/code\u003e bounds.\n         */\n        private static Rectangle2D getExportedHomeBounds(Home home) {\n            // Compute bounds that include walls and furniture\n            Rectangle2D homeBounds \u003d updateObjectsBounds(null, home.getWalls());\n            for (HomePieceOfFurniture piece : getVisibleFurniture(home.getFurniture())) {\n                for (float[] point : piece.getPoints()) {\n                    if (homeBounds \u003d\u003d null) {\n                        homeBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                    } else {\n                        homeBounds.add(point[0], point[1]);\n                    }\n                }\n            }\n            return updateObjectsBounds(homeBounds, home.getRooms());\n        }\n\n        /**\n         * Returns all the visible pieces in the given \u003ccode\u003efurniture\u003c/code\u003e.\n         */\n        private static List\u003cHomePieceOfFurniture\u003e getVisibleFurniture(List\u003cHomePieceOfFurniture\u003e furniture) {\n            List\u003cHomePieceOfFurniture\u003e visibleFurniture \u003d new ArrayList\u003cHomePieceOfFurniture\u003e(furniture.size());\n            for (HomePieceOfFurniture piece : furniture) {\n                if (piece.isVisible() \u0026\u0026 (piece.getLevel() \u003d\u003d null || piece.getLevel().isVisible())) {\n                    if (piece instanceof HomeFurnitureGroup) {\n                        visibleFurniture.addAll(getVisibleFurniture(((HomeFurnitureGroup) piece).getFurniture()));\n                    } else {\n                        visibleFurniture.add(piece);\n                    }\n                }\n            }\n            return visibleFurniture;\n        }\n\n        /**\n         * Updates \u003ccode\u003eobjectBounds\u003c/code\u003e to include the bounds of \u003ccode\u003eitems\u003c/code\u003e.\n         */\n        private static Rectangle2D updateObjectsBounds(Rectangle2D objectBounds, Collection\u003c? extends Selectable\u003e items) {\n            for (Selectable item : items) {\n                if (!(item instanceof Elevatable) || ((Elevatable) item).getLevel() \u003d\u003d null || ((Elevatable) item).getLevel().isVisible()) {\n                    for (float[] point : item.getPoints()) {\n                        if (objectBounds \u003d\u003d null) {\n                            objectBounds \u003d new Rectangle2D.Float(point[0], point[1], 0, 0);\n                        } else {\n                            objectBounds.add(point[0], point[1]);\n                        }\n                    }\n                }\n            }\n            return objectBounds;\n        }\n    }\n\n    /**\n     * Displays a dialog that let user choose whether he wants to delete\n     * the selected furniture from catalog or not.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if user confirmed to delete.\n     */\n    public boolean confirmDeleteCatalogSelection() {\n        // Retrieve displayed text in buttons and message\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.title\");\n        String delete \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.delete\");\n        String cancel \u003d this.preferences.getLocalizedString(HomePane.class, \"confirmDeleteCatalogSelection.cancel\");\n        return JOptionPane.showOptionDialog(this, message, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] { delete, cancel }, cancel) \u003d\u003d JOptionPane.OK_OPTION;\n    }\n\n    /**\n     * Displays a dialog that lets the user choose a name for the current camera.\n     * @return the chosen name or \u003ccode\u003enull\u003c/code\u003e if the user canceled.\n     */\n    public String showStoreCameraDialog(String cameraName) {\n        // Retrieve displayed text in dialog\n        String message \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.message\");\n        String title \u003d this.preferences.getLocalizedString(HomePane.class, \"showStoreCameraDialog.title\");\n        List\u003cCamera\u003e storedCameras \u003d this.home.getStoredCameras();\n        JComponent cameraNameChooser;\n        JTextComponent cameraNameTextComponent;\n        if (storedCameras.isEmpty()) {\n            cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n        } else {\n            // If cameras are already stored in home propose an editable combo box to user\n            // to let him choose more easily an existing one if he want to overwrite it\n            String[] storedCameraNames \u003d new String[storedCameras.size()];\n            for (int i \u003d 0; i \u003c storedCameraNames.length; i++) {\n                storedCameraNames[i] \u003d storedCameras.get(i).getName();\n            }\n            JComboBox cameraNameComboBox \u003d new JComboBox(storedCameraNames);\n            cameraNameComboBox.setEditable(true);\n            cameraNameComboBox.getEditor().setItem(cameraName);\n            Component editorComponent \u003d cameraNameComboBox.getEditor().getEditorComponent();\n            if (editorComponent instanceof JTextComponent) {\n                cameraNameTextComponent \u003d (JTextComponent) editorComponent;\n                cameraNameChooser \u003d cameraNameComboBox;\n            } else {\n                cameraNameChooser \u003d cameraNameTextComponent \u003d new JTextField(cameraName, 20);\n            }\n        }\n        JPanel cameraNamePanel \u003d new JPanel(new BorderLayout(2, 2));\n        cameraNamePanel.add(new JLabel(message), BorderLayout.NORTH);\n        cameraNamePanel.add(cameraNameChooser, BorderLayout.SOUTH);\n        if (SwingTools.showConfirmDialog(this, cameraNamePanel, title, cameraNameTextComponent) \u003d\u003d JOptionPane.OK_OPTION) {\n            return cameraNameTextComponent.getText();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if clipboard contains data that\n     * components are able to handle.\n     */\n    public boolean isClipboardEmpty() {\n        try {\n            Clipboard clipboard \u003d getToolkit().getSystemClipboard();\n            return !(clipboard.isDataFlavorAvailable(HomeTransferableList.HOME_FLAVOR) || getToolkit().getSystemClipboard().isDataFlavorAvailable(DataFlavor.javaFileListFlavor));\n        } catch (AccessControlException ex) {\n            // AWT uses a private clipboard that won\u0027t be empty as soon as a copy action will be done\n            return this.clipboardEmpty;\n        }\n    }\n\n    /**\n     * Execute \u003ccode\u003erunnable\u003c/code\u003e asynchronously in the thread\n     * that manages toolkit events.\n     */\n    public void invokeLater(Runnable runnable) {\n        EventQueue.invokeLater(runnable);\n    }\n\n    /**\n     * A Swing action adapter to a plug-in action.\n     */\n    private class ActionAdapter implements Action {\n\n        private PluginAction pluginAction;\n\n        private SwingPropertyChangeSupport propertyChangeSupport;\n\n        private ActionAdapter(PluginAction pluginAction) {\n            this.pluginAction \u003d pluginAction;\n            this.propertyChangeSupport \u003d new SwingPropertyChangeSupport(this);\n            this.pluginAction.addPropertyChangeListener(new PropertyChangeListener() {\n\n                public void propertyChange(PropertyChangeEvent ev) {\n                    String propertyName \u003d ev.getPropertyName();\n                    Object oldValue \u003d ev.getOldValue();\n                    Object newValue \u003d ev.getNewValue();\n                    if (PluginAction.Property.ENABLED.name().equals(propertyName)) {\n                        propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), \"enabled\", oldValue, newValue));\n                    } else {\n                        // In case a property value changes, fire the new value decorated in subclasses\n                        // unless new value is null (most Swing listeners don\u0027t check new value is null !)\n                        if (newValue !\u003d null) {\n                            if (PluginAction.Property.NAME.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.NAME, oldValue, newValue));\n                            } else if (PluginAction.Property.SHORT_DESCRIPTION.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SHORT_DESCRIPTION, oldValue, newValue));\n                            } else if (PluginAction.Property.MNEMONIC.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.MNEMONIC_KEY, oldValue !\u003d null ? new Integer((Character) oldValue) : null, newValue));\n                            } else if (PluginAction.Property.SMALL_ICON.name().equals(propertyName)) {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), Action.SMALL_ICON, oldValue !\u003d null ? IconManager.getInstance().getIcon((Content) oldValue, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null, newValue));\n                            } else {\n                                propertyChangeSupport.firePropertyChange(new PropertyChangeEvent(ev.getSource(), propertyName, oldValue, newValue));\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        public void actionPerformed(ActionEvent ev) {\n            this.pluginAction.execute();\n        }\n\n        public void addPropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.addPropertyChangeListener(listener);\n        }\n\n        public void removePropertyChangeListener(PropertyChangeListener listener) {\n            this.propertyChangeSupport.removePropertyChangeListener(listener);\n        }\n\n        public Object getValue(String key) {\n            if (NAME.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.NAME);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.SHORT_DESCRIPTION);\n            } else if (SMALL_ICON.equals(key)) {\n                Content smallIcon \u003d (Content) this.pluginAction.getPropertyValue(PluginAction.Property.SMALL_ICON);\n                return smallIcon !\u003d null ? IconManager.getInstance().getIcon(smallIcon, DEFAULT_SMALL_ICON_HEIGHT, HomePane.this) : null;\n            } else if (MNEMONIC_KEY.equals(key)) {\n                Character mnemonic \u003d (Character) this.pluginAction.getPropertyValue(PluginAction.Property.MNEMONIC);\n                return mnemonic !\u003d null ? new Integer(mnemonic) : null;\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.TOOL_BAR);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                return this.pluginAction.getPropertyValue(PluginAction.Property.MENU);\n            } else {\n                return null;\n            }\n        }\n\n        public void putValue(String key, Object value) {\n            if (NAME.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.NAME, value);\n            } else if (SHORT_DESCRIPTION.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.SHORT_DESCRIPTION, value);\n            } else if (SMALL_ICON.equals(key)) {\n                // Ignore icon change\n            } else if (MNEMONIC_KEY.equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MNEMONIC, new Character((char) ((Integer) value).intValue()));\n            } else if (PluginAction.Property.TOOL_BAR.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.TOOL_BAR, value);\n            } else if (PluginAction.Property.MENU.name().equals(key)) {\n                this.pluginAction.putPropertyValue(PluginAction.Property.MENU, value);\n            }\n        }\n\n        public boolean isEnabled() {\n            return this.pluginAction.isEnabled();\n        }\n\n        public void setEnabled(boolean enabled) {\n            this.pluginAction.setEnabled(enabled);\n        }\n    }\n\n    /**\n     * An object able to format a selectable item.\n     */\n    private abstract interface SelectableFormat\u003cT extends Selectable\u003e {\n\n        public abstract String format(T item);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "HomePane",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane_17Test.java",
    "test_prompt": "// HomePane_17Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.ComponentOrientation;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.Window;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.dnd.DragSource;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionAdapter;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport java.awt.print.PrinterJob;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStream;\nimport java.lang.ref.WeakReference;\nimport java.security.AccessControlException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.ActionMap;\nimport javax.swing.Box;\nimport javax.swing.ButtonGroup;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JEditorPane;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JRootPane;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSeparator;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTextField;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.JViewport;\nimport javax.swing.KeyStroke;\nimport javax.swing.LayoutFocusTraversalPolicy;\nimport javax.swing.Scrollable;\nimport javax.swing.SwingUtilities;\nimport javax.swing.ToolTipManager;\nimport javax.swing.TransferHandler;\nimport javax.swing.UIManager;\nimport javax.swing.event.AncestorEvent;\nimport javax.swing.event.AncestorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.event.HyperlinkEvent;\nimport javax.swing.event.HyperlinkListener;\nimport javax.swing.event.MenuEvent;\nimport javax.swing.event.MenuListener;\nimport javax.swing.event.MouseInputAdapter;\nimport javax.swing.event.PopupMenuEvent;\nimport javax.swing.event.PopupMenuListener;\nimport javax.swing.event.SwingPropertyChangeSupport;\nimport javax.swing.text.JTextComponent;\nimport com.eteks.sweethome3d.j3d.Ground3D;\nimport com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;\nimport com.eteks.sweethome3d.j3d.OBJWriter;\nimport com.eteks.sweethome3d.j3d.Room3D;\nimport com.eteks.sweethome3d.j3d.Wall3D;\nimport com.eteks.sweethome3d.model.BackgroundImage;\nimport com.eteks.sweethome3d.model.Camera;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CollectionEvent;\nimport com.eteks.sweethome3d.model.CollectionListener;\nimport com.eteks.sweethome3d.model.Compass;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.DimensionLine;\nimport com.eteks.sweethome3d.model.Elevatable;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.model.HomeEnvironment;\nimport com.eteks.sweethome3d.model.HomeFurnitureGroup;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.model.InterruptedRecorderException;\nimport com.eteks.sweethome3d.model.Label;\nimport com.eteks.sweethome3d.model.Level;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Room;\nimport com.eteks.sweethome3d.model.Selectable;\nimport com.eteks.sweethome3d.model.SelectionEvent;\nimport com.eteks.sweethome3d.model.SelectionListener;\nimport com.eteks.sweethome3d.model.TextStyle;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.model.Wall;\nimport com.eteks.sweethome3d.plugin.HomePluginController;\nimport com.eteks.sweethome3d.plugin.Plugin;\nimport com.eteks.sweethome3d.plugin.PluginAction;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.viewcontroller.ContentManager;\nimport com.eteks.sweethome3d.viewcontroller.FurnitureController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController;\nimport com.eteks.sweethome3d.viewcontroller.HomeController3D;\nimport com.eteks.sweethome3d.viewcontroller.HomeView;\nimport com.eteks.sweethome3d.viewcontroller.PlanController;\nimport com.eteks.sweethome3d.viewcontroller.PlanController.Mode;\nimport com.eteks.sweethome3d.viewcontroller.PlanView;\nimport com.eteks.sweethome3d.viewcontroller.View;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HomePane}.\n* It contains ten unit test cases for the {@link HomePane#confirmDeleteCatalogSelection()} method.\n*/\nclass HomePane_17Test {",
    "method_signature": "confirmDeleteCatalogSelection()",
    "suffix": "17"
  },
  {
    "numberTests": "ten",
    "original_code": "// IconManager.java\n/*\n * IconManager.java 2 mai 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\n\n/**\n * Singleton managing icons cache.\n * @author Emmanuel Puybaret\n */\npublic class IconManager {\n\n    private static IconManager instance;\n\n    // Icon used if an image content couldn\u0027t be loaded\n    private final Content errorIconContent;\n\n    // Icon used while an image content is loaded\n    private final Content waitIconContent;\n\n    // Map storing loaded icons\n    private final Map\u003cContent, Map\u003cInteger, Icon\u003e\u003e icons;\n\n    // Executor used by IconProxy to load images\n    private ExecutorService iconsLoader;\n\n    private IconManager() {\n        this.errorIconContent \u003d new ResourceURLContent(IconManager.class, \"resources/icons/tango/image-missing.png\");\n        this.waitIconContent \u003d new ResourceURLContent(IconManager.class, \"resources/icons/tango/image-loading.png\");\n        this.icons \u003d Collections.synchronizedMap(new WeakHashMap\u003cContent, Map\u003cInteger, Icon\u003e\u003e());\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static IconManager getInstance() {\n        if (instance \u003d\u003d null) {\n            instance \u003d new IconManager();\n        }\n        return instance;\n    }\n\n    /**\n     * Clears the loaded resources cache and shutdowns the multithreaded service\n     * that loads icons.\n     */\n    public void clear() {\n        if (this.iconsLoader !\u003d null) {\n            this.iconsLoader.shutdownNow();\n            this.iconsLoader \u003d null;\n        }\n        this.icons.clear();\n    }\n\n    /**\n     * Returns the icon displayed for wrong content resized at a given height.\n     */\n    public Icon getErrorIcon(int height) {\n        return getIcon(this.errorIconContent, height, null);\n    }\n\n    /**\n     * Returns the icon displayed for wrong content.\n     */\n    public Icon getErrorIcon() {\n        return getIcon(this.errorIconContent, -1, null);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given \u003ccode\u003eicon\u003c/code\u003e is the error icon\n     * used by this manager to indicate it couldn\u0027t load an icon.\n     */\n    public boolean isErrorIcon(Icon icon) {\n        Map\u003cInteger, Icon\u003e errorIcons \u003d this.icons.get(this.errorIconContent);\n        return errorIcons !\u003d null \u0026\u0026 (errorIcons.containsValue(icon) || icon instanceof IconProxy \u0026\u0026 errorIcons.containsValue(((IconProxy) icon).getIcon()));\n    }\n\n    /**\n     * Returns the icon displayed while a content is loaded resized at a given height.\n     */\n    public Icon getWaitIcon(int height) {\n        return getIcon(this.waitIconContent, height, null);\n    }\n\n    /**\n     * Returns the icon displayed while a content is loaded.\n     */\n    public Icon getWaitIcon() {\n        return getIcon(this.waitIconContent, -1, null);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given \u003ccode\u003eicon\u003c/code\u003e is the wait icon\n     * used by this manager to indicate it\u0027s currently loading an icon.\n     */\n    public boolean isWaitIcon(Icon icon) {\n        Map\u003cInteger, Icon\u003e waitIcons \u003d this.icons.get(this.waitIconContent);\n        return waitIcons !\u003d null \u0026\u0026 (waitIcons.containsValue(icon) || icon instanceof IconProxy \u0026\u0026 waitIcons.containsValue(((IconProxy) icon).getIcon()));\n    }\n\n    /**\n     * Returns an icon read from \u003ccode\u003econtent\u003c/code\u003e.\n     * @param content an object containing an image\n     * @param waitingComponent a waiting component. If \u003ccode\u003enull\u003c/code\u003e, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, Component waitingComponent) {\n        return getIcon(content, -1, waitingComponent);\n    }\n\n    /**\n     * Returns an icon read from \u003ccode\u003econtent\u003c/code\u003e and rescaled at a given \u003ccode\u003eheight\u003c/code\u003e.\n     * @param content an object containing an image\n     * @param height  the desired height of the returned icon\n     * @param waitingComponent a waiting component. If \u003ccode\u003enull\u003c/code\u003e, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, final int height, Component waitingComponent) {\n        Map\u003cInteger, Icon\u003e contentIcons \u003d this.icons.get(content);\n        if (contentIcons \u003d\u003d null) {\n            contentIcons \u003d Collections.synchronizedMap(new HashMap\u003cInteger, Icon\u003e());\n            this.icons.put(content, contentIcons);\n        }\n        Icon icon \u003d contentIcons.get(height);\n        if (icon \u003d\u003d null) {\n            // Tolerate null content\n            if (content \u003d\u003d null) {\n                icon \u003d new Icon() {\n\n                    public void paintIcon(Component c, Graphics g, int x, int y) {\n                    }\n\n                    public int getIconWidth() {\n                        return Math.max(0, height);\n                    }\n\n                    public int getIconHeight() {\n                        return Math.max(0, height);\n                    }\n                };\n            } else if (content \u003d\u003d this.errorIconContent || content \u003d\u003d this.waitIconContent) {\n                // Load error and wait icons immediately in this thread\n                icon \u003d createIcon(content, height, null);\n            } else if (waitingComponent \u003d\u003d null) {\n                // Load icon immediately in this thread\n                icon \u003d createIcon(content, height, getIcon(this.errorIconContent, height, null));\n            } else {\n                // For content different from error icon and wait icon,\n                // load it in a different thread with a virtual proxy\n                icon \u003d new IconProxy(content, height, waitingComponent, getIcon(this.errorIconContent, height, null), getIcon(this.waitIconContent, height, null));\n            }\n            // Store the icon in icons map\n            contentIcons.put(height, icon);\n        }\n        return icon;\n    }\n\n    /**\n     * Returns an icon created and scaled from its content.\n     * @param content the content from which the icon image is read\n     * @param height  the desired height of the returned icon\n     * @param errorIcon the returned icon in case of error\n     */\n    private Icon createIcon(Content content, int height, Icon errorIcon) {\n        try {\n            // Read the icon of the piece\n            InputStream contentStream \u003d content.openStream();\n            BufferedImage image \u003d ImageIO.read(contentStream);\n            contentStream.close();\n            if (image !\u003d null) {\n                if (height !\u003d -1 \u0026\u0026 height !\u003d image.getHeight()) {\n                    int width \u003d image.getWidth() * height / image.getHeight();\n                    // Create a scaled image not bound to original image to let the original image being garbage collected\n                    BufferedImage scaledImage \u003d new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n                    Graphics g \u003d scaledImage.getGraphics();\n                    g.drawImage(image.getScaledInstance(width, height, Image.SCALE_SMOOTH), 0, 0, null);\n                    g.dispose();\n                    return new ImageIcon(scaledImage);\n                } else {\n                    return new ImageIcon(image);\n                }\n            }\n        } catch (IOException ex) {\n            // Too bad, we\u0027ll use errorIcon\n        }\n        return errorIcon;\n    }\n\n    /**\n     * Proxy icon that displays a temporary icon while waiting\n     * image loading completion.\n     */\n    private class IconProxy implements Icon {\n\n        private Icon icon;\n\n        public IconProxy(final Content content, final int height, final Component waitingComponent, final Icon errorIcon, Icon waitIcon) {\n            this.icon \u003d waitIcon;\n            if (iconsLoader \u003d\u003d null) {\n                iconsLoader \u003d Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);\n            }\n            // Load the icon in a different thread\n            iconsLoader.execute(new Runnable() {\n\n                public void run() {\n                    icon \u003d createIcon(content, height, errorIcon);\n                    waitingComponent.repaint();\n                }\n            });\n        }\n\n        public int getIconWidth() {\n            return this.icon.getIconWidth();\n        }\n\n        public int getIconHeight() {\n            return this.icon.getIconHeight();\n        }\n\n        public void paintIcon(Component c, Graphics g, int x, int y) {\n            this.icon.paintIcon(c, g, x, y);\n        }\n\n        public Icon getIcon() {\n            return this.icon;\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "IconManager",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/IconManager_0Test.java",
    "test_prompt": "// IconManager_0Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IconManager}.\n* It contains ten unit test cases for the {@link IconManager#getInstance()} method.\n*/\nclass IconManager_0Test {",
    "method_signature": "getInstance()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// IconManager.java\n/*\n * IconManager.java 2 mai 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\n\n/**\n * Singleton managing icons cache.\n * @author Emmanuel Puybaret\n */\npublic class IconManager {\n\n    private static IconManager instance;\n\n    // Icon used if an image content couldn\u0027t be loaded\n    private final Content errorIconContent;\n\n    // Icon used while an image content is loaded\n    private final Content waitIconContent;\n\n    // Map storing loaded icons\n    private final Map\u003cContent, Map\u003cInteger, Icon\u003e\u003e icons;\n\n    // Executor used by IconProxy to load images\n    private ExecutorService iconsLoader;\n\n    private IconManager() {\n        this.errorIconContent \u003d new ResourceURLContent(IconManager.class, \"resources/icons/tango/image-missing.png\");\n        this.waitIconContent \u003d new ResourceURLContent(IconManager.class, \"resources/icons/tango/image-loading.png\");\n        this.icons \u003d Collections.synchronizedMap(new WeakHashMap\u003cContent, Map\u003cInteger, Icon\u003e\u003e());\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static IconManager getInstance() {\n        if (instance \u003d\u003d null) {\n            instance \u003d new IconManager();\n        }\n        return instance;\n    }\n\n    /**\n     * Clears the loaded resources cache and shutdowns the multithreaded service\n     * that loads icons.\n     */\n    public void clear() {\n        if (this.iconsLoader !\u003d null) {\n            this.iconsLoader.shutdownNow();\n            this.iconsLoader \u003d null;\n        }\n        this.icons.clear();\n    }\n\n    /**\n     * Returns the icon displayed for wrong content resized at a given height.\n     */\n    public Icon getErrorIcon(int height) {\n        return getIcon(this.errorIconContent, height, null);\n    }\n\n    /**\n     * Returns the icon displayed for wrong content.\n     */\n    public Icon getErrorIcon() {\n        return getIcon(this.errorIconContent, -1, null);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given \u003ccode\u003eicon\u003c/code\u003e is the error icon\n     * used by this manager to indicate it couldn\u0027t load an icon.\n     */\n    public boolean isErrorIcon(Icon icon) {\n        Map\u003cInteger, Icon\u003e errorIcons \u003d this.icons.get(this.errorIconContent);\n        return errorIcons !\u003d null \u0026\u0026 (errorIcons.containsValue(icon) || icon instanceof IconProxy \u0026\u0026 errorIcons.containsValue(((IconProxy) icon).getIcon()));\n    }\n\n    /**\n     * Returns the icon displayed while a content is loaded resized at a given height.\n     */\n    public Icon getWaitIcon(int height) {\n        return getIcon(this.waitIconContent, height, null);\n    }\n\n    /**\n     * Returns the icon displayed while a content is loaded.\n     */\n    public Icon getWaitIcon() {\n        return getIcon(this.waitIconContent, -1, null);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given \u003ccode\u003eicon\u003c/code\u003e is the wait icon\n     * used by this manager to indicate it\u0027s currently loading an icon.\n     */\n    public boolean isWaitIcon(Icon icon) {\n        Map\u003cInteger, Icon\u003e waitIcons \u003d this.icons.get(this.waitIconContent);\n        return waitIcons !\u003d null \u0026\u0026 (waitIcons.containsValue(icon) || icon instanceof IconProxy \u0026\u0026 waitIcons.containsValue(((IconProxy) icon).getIcon()));\n    }\n\n    /**\n     * Returns an icon read from \u003ccode\u003econtent\u003c/code\u003e.\n     * @param content an object containing an image\n     * @param waitingComponent a waiting component. If \u003ccode\u003enull\u003c/code\u003e, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, Component waitingComponent) {\n        return getIcon(content, -1, waitingComponent);\n    }\n\n    /**\n     * Returns an icon read from \u003ccode\u003econtent\u003c/code\u003e and rescaled at a given \u003ccode\u003eheight\u003c/code\u003e.\n     * @param content an object containing an image\n     * @param height  the desired height of the returned icon\n     * @param waitingComponent a waiting component. If \u003ccode\u003enull\u003c/code\u003e, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, final int height, Component waitingComponent) {\n        Map\u003cInteger, Icon\u003e contentIcons \u003d this.icons.get(content);\n        if (contentIcons \u003d\u003d null) {\n            contentIcons \u003d Collections.synchronizedMap(new HashMap\u003cInteger, Icon\u003e());\n            this.icons.put(content, contentIcons);\n        }\n        Icon icon \u003d contentIcons.get(height);\n        if (icon \u003d\u003d null) {\n            // Tolerate null content\n            if (content \u003d\u003d null) {\n                icon \u003d new Icon() {\n\n                    public void paintIcon(Component c, Graphics g, int x, int y) {\n                    }\n\n                    public int getIconWidth() {\n                        return Math.max(0, height);\n                    }\n\n                    public int getIconHeight() {\n                        return Math.max(0, height);\n                    }\n                };\n            } else if (content \u003d\u003d this.errorIconContent || content \u003d\u003d this.waitIconContent) {\n                // Load error and wait icons immediately in this thread\n                icon \u003d createIcon(content, height, null);\n            } else if (waitingComponent \u003d\u003d null) {\n                // Load icon immediately in this thread\n                icon \u003d createIcon(content, height, getIcon(this.errorIconContent, height, null));\n            } else {\n                // For content different from error icon and wait icon,\n                // load it in a different thread with a virtual proxy\n                icon \u003d new IconProxy(content, height, waitingComponent, getIcon(this.errorIconContent, height, null), getIcon(this.waitIconContent, height, null));\n            }\n            // Store the icon in icons map\n            contentIcons.put(height, icon);\n        }\n        return icon;\n    }\n\n    /**\n     * Returns an icon created and scaled from its content.\n     * @param content the content from which the icon image is read\n     * @param height  the desired height of the returned icon\n     * @param errorIcon the returned icon in case of error\n     */\n    private Icon createIcon(Content content, int height, Icon errorIcon) {\n        try {\n            // Read the icon of the piece\n            InputStream contentStream \u003d content.openStream();\n            BufferedImage image \u003d ImageIO.read(contentStream);\n            contentStream.close();\n            if (image !\u003d null) {\n                if (height !\u003d -1 \u0026\u0026 height !\u003d image.getHeight()) {\n                    int width \u003d image.getWidth() * height / image.getHeight();\n                    // Create a scaled image not bound to original image to let the original image being garbage collected\n                    BufferedImage scaledImage \u003d new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n                    Graphics g \u003d scaledImage.getGraphics();\n                    g.drawImage(image.getScaledInstance(width, height, Image.SCALE_SMOOTH), 0, 0, null);\n                    g.dispose();\n                    return new ImageIcon(scaledImage);\n                } else {\n                    return new ImageIcon(image);\n                }\n            }\n        } catch (IOException ex) {\n            // Too bad, we\u0027ll use errorIcon\n        }\n        return errorIcon;\n    }\n\n    /**\n     * Proxy icon that displays a temporary icon while waiting\n     * image loading completion.\n     */\n    private class IconProxy implements Icon {\n\n        private Icon icon;\n\n        public IconProxy(final Content content, final int height, final Component waitingComponent, final Icon errorIcon, Icon waitIcon) {\n            this.icon \u003d waitIcon;\n            if (iconsLoader \u003d\u003d null) {\n                iconsLoader \u003d Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);\n            }\n            // Load the icon in a different thread\n            iconsLoader.execute(new Runnable() {\n\n                public void run() {\n                    icon \u003d createIcon(content, height, errorIcon);\n                    waitingComponent.repaint();\n                }\n            });\n        }\n\n        public int getIconWidth() {\n            return this.icon.getIconWidth();\n        }\n\n        public int getIconHeight() {\n            return this.icon.getIconHeight();\n        }\n\n        public void paintIcon(Component c, Graphics g, int x, int y) {\n            this.icon.paintIcon(c, g, x, y);\n        }\n\n        public Icon getIcon() {\n            return this.icon;\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "IconManager",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/IconManager_5Test.java",
    "test_prompt": "// IconManager_5Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IconManager}.\n* It contains ten unit test cases for the {@link IconManager#getIcon(Content, Component)} method.\n*/\nclass IconManager_5Test {",
    "method_signature": "getIcon(Content, Component)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// IconManager.java\n/*\n * IconManager.java 2 mai 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\n\n/**\n * Singleton managing icons cache.\n * @author Emmanuel Puybaret\n */\npublic class IconManager {\n\n    private static IconManager instance;\n\n    // Icon used if an image content couldn\u0027t be loaded\n    private final Content errorIconContent;\n\n    // Icon used while an image content is loaded\n    private final Content waitIconContent;\n\n    // Map storing loaded icons\n    private final Map\u003cContent, Map\u003cInteger, Icon\u003e\u003e icons;\n\n    // Executor used by IconProxy to load images\n    private ExecutorService iconsLoader;\n\n    private IconManager() {\n        this.errorIconContent \u003d new ResourceURLContent(IconManager.class, \"resources/icons/tango/image-missing.png\");\n        this.waitIconContent \u003d new ResourceURLContent(IconManager.class, \"resources/icons/tango/image-loading.png\");\n        this.icons \u003d Collections.synchronizedMap(new WeakHashMap\u003cContent, Map\u003cInteger, Icon\u003e\u003e());\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static IconManager getInstance() {\n        if (instance \u003d\u003d null) {\n            instance \u003d new IconManager();\n        }\n        return instance;\n    }\n\n    /**\n     * Clears the loaded resources cache and shutdowns the multithreaded service\n     * that loads icons.\n     */\n    public void clear() {\n        if (this.iconsLoader !\u003d null) {\n            this.iconsLoader.shutdownNow();\n            this.iconsLoader \u003d null;\n        }\n        this.icons.clear();\n    }\n\n    /**\n     * Returns the icon displayed for wrong content resized at a given height.\n     */\n    public Icon getErrorIcon(int height) {\n        return getIcon(this.errorIconContent, height, null);\n    }\n\n    /**\n     * Returns the icon displayed for wrong content.\n     */\n    public Icon getErrorIcon() {\n        return getIcon(this.errorIconContent, -1, null);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given \u003ccode\u003eicon\u003c/code\u003e is the error icon\n     * used by this manager to indicate it couldn\u0027t load an icon.\n     */\n    public boolean isErrorIcon(Icon icon) {\n        Map\u003cInteger, Icon\u003e errorIcons \u003d this.icons.get(this.errorIconContent);\n        return errorIcons !\u003d null \u0026\u0026 (errorIcons.containsValue(icon) || icon instanceof IconProxy \u0026\u0026 errorIcons.containsValue(((IconProxy) icon).getIcon()));\n    }\n\n    /**\n     * Returns the icon displayed while a content is loaded resized at a given height.\n     */\n    public Icon getWaitIcon(int height) {\n        return getIcon(this.waitIconContent, height, null);\n    }\n\n    /**\n     * Returns the icon displayed while a content is loaded.\n     */\n    public Icon getWaitIcon() {\n        return getIcon(this.waitIconContent, -1, null);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given \u003ccode\u003eicon\u003c/code\u003e is the wait icon\n     * used by this manager to indicate it\u0027s currently loading an icon.\n     */\n    public boolean isWaitIcon(Icon icon) {\n        Map\u003cInteger, Icon\u003e waitIcons \u003d this.icons.get(this.waitIconContent);\n        return waitIcons !\u003d null \u0026\u0026 (waitIcons.containsValue(icon) || icon instanceof IconProxy \u0026\u0026 waitIcons.containsValue(((IconProxy) icon).getIcon()));\n    }\n\n    /**\n     * Returns an icon read from \u003ccode\u003econtent\u003c/code\u003e.\n     * @param content an object containing an image\n     * @param waitingComponent a waiting component. If \u003ccode\u003enull\u003c/code\u003e, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, Component waitingComponent) {\n        return getIcon(content, -1, waitingComponent);\n    }\n\n    /**\n     * Returns an icon read from \u003ccode\u003econtent\u003c/code\u003e and rescaled at a given \u003ccode\u003eheight\u003c/code\u003e.\n     * @param content an object containing an image\n     * @param height  the desired height of the returned icon\n     * @param waitingComponent a waiting component. If \u003ccode\u003enull\u003c/code\u003e, the returned icon will\n     *            be read immediately in the current thread.\n     */\n    public Icon getIcon(Content content, final int height, Component waitingComponent) {\n        Map\u003cInteger, Icon\u003e contentIcons \u003d this.icons.get(content);\n        if (contentIcons \u003d\u003d null) {\n            contentIcons \u003d Collections.synchronizedMap(new HashMap\u003cInteger, Icon\u003e());\n            this.icons.put(content, contentIcons);\n        }\n        Icon icon \u003d contentIcons.get(height);\n        if (icon \u003d\u003d null) {\n            // Tolerate null content\n            if (content \u003d\u003d null) {\n                icon \u003d new Icon() {\n\n                    public void paintIcon(Component c, Graphics g, int x, int y) {\n                    }\n\n                    public int getIconWidth() {\n                        return Math.max(0, height);\n                    }\n\n                    public int getIconHeight() {\n                        return Math.max(0, height);\n                    }\n                };\n            } else if (content \u003d\u003d this.errorIconContent || content \u003d\u003d this.waitIconContent) {\n                // Load error and wait icons immediately in this thread\n                icon \u003d createIcon(content, height, null);\n            } else if (waitingComponent \u003d\u003d null) {\n                // Load icon immediately in this thread\n                icon \u003d createIcon(content, height, getIcon(this.errorIconContent, height, null));\n            } else {\n                // For content different from error icon and wait icon,\n                // load it in a different thread with a virtual proxy\n                icon \u003d new IconProxy(content, height, waitingComponent, getIcon(this.errorIconContent, height, null), getIcon(this.waitIconContent, height, null));\n            }\n            // Store the icon in icons map\n            contentIcons.put(height, icon);\n        }\n        return icon;\n    }\n\n    /**\n     * Returns an icon created and scaled from its content.\n     * @param content the content from which the icon image is read\n     * @param height  the desired height of the returned icon\n     * @param errorIcon the returned icon in case of error\n     */\n    private Icon createIcon(Content content, int height, Icon errorIcon) {\n        try {\n            // Read the icon of the piece\n            InputStream contentStream \u003d content.openStream();\n            BufferedImage image \u003d ImageIO.read(contentStream);\n            contentStream.close();\n            if (image !\u003d null) {\n                if (height !\u003d -1 \u0026\u0026 height !\u003d image.getHeight()) {\n                    int width \u003d image.getWidth() * height / image.getHeight();\n                    // Create a scaled image not bound to original image to let the original image being garbage collected\n                    BufferedImage scaledImage \u003d new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n                    Graphics g \u003d scaledImage.getGraphics();\n                    g.drawImage(image.getScaledInstance(width, height, Image.SCALE_SMOOTH), 0, 0, null);\n                    g.dispose();\n                    return new ImageIcon(scaledImage);\n                } else {\n                    return new ImageIcon(image);\n                }\n            }\n        } catch (IOException ex) {\n            // Too bad, we\u0027ll use errorIcon\n        }\n        return errorIcon;\n    }\n\n    /**\n     * Proxy icon that displays a temporary icon while waiting\n     * image loading completion.\n     */\n    private class IconProxy implements Icon {\n\n        private Icon icon;\n\n        public IconProxy(final Content content, final int height, final Component waitingComponent, final Icon errorIcon, Icon waitIcon) {\n            this.icon \u003d waitIcon;\n            if (iconsLoader \u003d\u003d null) {\n                iconsLoader \u003d Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);\n            }\n            // Load the icon in a different thread\n            iconsLoader.execute(new Runnable() {\n\n                public void run() {\n                    icon \u003d createIcon(content, height, errorIcon);\n                    waitingComponent.repaint();\n                }\n            });\n        }\n\n        public int getIconWidth() {\n            return this.icon.getIconWidth();\n        }\n\n        public int getIconHeight() {\n            return this.icon.getIconHeight();\n        }\n\n        public void paintIcon(Component c, Graphics g, int x, int y) {\n            this.icon.paintIcon(c, g, x, y);\n        }\n\n        public Icon getIcon() {\n            return this.icon;\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.swing",
    "classname": "IconManager",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/IconManager_6Test.java",
    "test_prompt": "// IconManager_6Test.java\npackage com.eteks.sweethome3d.swing;\n\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.ResourceURLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IconManager}.\n* It contains ten unit test cases for the {@link IconManager#getIcon(Content, int, Component)} method.\n*/\nclass IconManager_6Test {",
    "method_signature": "getIcon(Content, int, Component)",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultHomeInputStream.java\n/*\n * DefaultHomeInputStream.java 13 Oct 2008\n *\n * Sweet Home 3D, Copyright (c) 2008 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.io;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InterruptedIOException;\nimport java.io.ObjectInputStream;\nimport java.io.OutputStream;\nimport java.net.URL;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.URLContent;\n\n/**\n * An \u003ccode\u003eInputStream\u003c/code\u003e filter that reads a home from a stream\n * at .sh3d file format.\n * @see DefaultHomeOutputStream\n */\npublic class DefaultHomeInputStream extends FilterInputStream {\n\n    private final ContentRecording contentRecording;\n\n    private File tempFile;\n\n    /**\n     * Creates a home input stream filter able to read a home and its content\n     * from \u003ccode\u003ein\u003c/code\u003e.\n     */\n    public DefaultHomeInputStream(InputStream in) throws IOException {\n        this(in, ContentRecording.INCLUDE_ALL_CONTENT);\n    }\n\n    /**\n     * Creates a home input stream filter able to read a home and its content\n     * from \u003ccode\u003ein\u003c/code\u003e.\n     */\n    public DefaultHomeInputStream(InputStream in, ContentRecording contentRecording) throws IOException {\n        super(in);\n        this.contentRecording \u003d contentRecording;\n    }\n\n    /**\n     * Throws an \u003ccode\u003eInterruptedRecorderException\u003c/code\u003e exception\n     * if current thread is interrupted. The interrupted status of the current thread\n     * is cleared when an exception is thrown.\n     */\n    private static void checkCurrentThreadIsntInterrupted() throws InterruptedIOException {\n        if (Thread.interrupted()) {\n            throw new InterruptedIOException();\n        }\n    }\n\n    /**\n     * Reads home from a zipped stream.\n     */\n    public Home readHome() throws IOException, ClassNotFoundException {\n        if (this.contentRecording !\u003d ContentRecording.INCLUDE_NO_CONTENT) {\n            // Copy home stream in a temporary file\n            this.tempFile \u003d OperatingSystem.createTemporaryFile(\"open\", \".sweethome3d\");\n            checkCurrentThreadIsntInterrupted();\n            OutputStream tempOut \u003d null;\n            try {\n                tempOut \u003d new FileOutputStream(this.tempFile);\n                byte[] buffer \u003d new byte[8192];\n                int size;\n                while ((size \u003d this.in.read(buffer)) !\u003d -1) {\n                    tempOut.write(buffer, 0, size);\n                }\n            } finally {\n                if (tempOut !\u003d null) {\n                    tempOut.close();\n                }\n            }\n        }\n        ZipInputStream zipIn \u003d null;\n        try {\n            // Open a zip input from temp file\n            zipIn \u003d new ZipInputStream(this.contentRecording \u003d\u003d ContentRecording.INCLUDE_NO_CONTENT ? this.in : new FileInputStream(this.tempFile));\n            // Read Home entry\n            ZipEntry entry;\n            while ((entry \u003d zipIn.getNextEntry()) !\u003d null \u0026\u0026 !\"Home\".equals(entry.getName())) {\n            }\n            if (entry \u003d\u003d null) {\n                throw new IOException(\"Missing entry \\\"Home\\\"\");\n            }\n            checkCurrentThreadIsntInterrupted();\n            // Use an ObjectInputStream that replaces temporary URLs of Content objects\n            // by URLs relative to file\n            ObjectInputStream objectStream \u003d new HomeObjectInputStream(zipIn);\n            return (Home) objectStream.readObject();\n        } finally {\n            if (zipIn !\u003d null) {\n                zipIn.close();\n            }\n        }\n    }\n\n    /**\n     * \u003ccode\u003eObjectInputStream\u003c/code\u003e that replaces temporary \u003ccode\u003eURLContent\u003c/code\u003e\n     * objects by \u003ccode\u003eURLContent\u003c/code\u003e objects that points to file.\n     */\n    private class HomeObjectInputStream extends ObjectInputStream {\n\n        public HomeObjectInputStream(InputStream in) throws IOException {\n            super(in);\n            if (contentRecording !\u003d ContentRecording.INCLUDE_NO_CONTENT) {\n                enableResolveObject(true);\n            }\n        }\n\n        @Override\n        protected Object resolveObject(Object obj) throws IOException {\n            if (obj instanceof URLContent) {\n                URL tmpURL \u003d ((URLContent) obj).getURL();\n                String url \u003d tmpURL.toString();\n                if (url.startsWith(\"jar:file:temp!/\")) {\n                    // Replace \"temp\" in URL by current temporary file\n                    String entryName \u003d url.substring(url.indexOf(\u0027!\u0027) + 2);\n                    URL fileURL \u003d new URL(\"jar:file:\" + tempFile.toString() + \"!/\" + entryName);\n                    try {\n                        // Check entry exists\n                        fileURL.openStream().close();\n                    } catch (IOException ex) {\n                        throw new IOException(\"Missing entry \\\"\" + entryName + \"\\\"\");\n                    }\n                    return new HomeURLContent(fileURL);\n                } else {\n                    return obj;\n                }\n            } else {\n                return obj;\n            }\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.io",
    "classname": "DefaultHomeInputStream",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/io/DefaultHomeInputStream.java",
    "test_prompt": "// DefaultHomeInputStreamTest.java\npackage com.eteks.sweethome3d.io;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InterruptedIOException;\nimport java.io.ObjectInputStream;\nimport java.io.OutputStream;\nimport java.net.URL;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.Home;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultHomeInputStream}.\n* It contains ten unit test cases for the {@link DefaultHomeInputStream#readHome()} method.\n*/\nclass DefaultHomeInputStreamTest {",
    "method_signature": "readHome()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FileUserPreferences.java\n/*\n * FileUserPreferences.java 18 sept 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.io;\n\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.prefs.AbstractPreferences;\nimport java.util.prefs.BackingStoreException;\nimport java.util.prefs.Preferences;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.CatalogDoorOrWindow;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.FurnitureCatalog;\nimport com.eteks.sweethome3d.model.FurnitureCategory;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.PatternsCatalog;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Sash;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\n\n/**\n * User preferences initialized from\n * {@link com.eteks.sweethome3d.io.DefaultUserPreferences default user preferences}\n * and stored in user preferences on local file system.\n * @author Emmanuel Puybaret\n */\npublic class FileUserPreferences extends UserPreferences {\n\n    private static final String LANGUAGE \u003d \"language\";\n\n    private static final String UNIT \u003d \"unit\";\n\n    private static final String FURNITURE_CATALOG_VIEWED_IN_TREE \u003d \"furnitureCatalogViewedInTree\";\n\n    private static final String NAVIGATION_PANEL_VISIBLE \u003d \"navigationPanelVisible\";\n\n    private static final String MAGNETISM_ENABLED \u003d \"magnetismEnabled\";\n\n    private static final String RULERS_VISIBLE \u003d \"rulersVisible\";\n\n    private static final String GRID_VISIBLE \u003d \"gridVisible\";\n\n    private static final String FURNITURE_VIEWED_FROM_TOP \u003d \"furnitureViewedFromTop\";\n\n    private static final String ROOM_FLOOR_COLORED_OR_TEXTURED \u003d \"roomFloorColoredOrTextured\";\n\n    private static final String WALL_PATTERN \u003d \"wallPattern\";\n\n    private static final String NEW_WALL_HEIGHT \u003d \"newHomeWallHeight\";\n\n    private static final String NEW_WALL_THICKNESS \u003d \"newWallThickness\";\n\n    private static final String NEW_FLOOR_THICKNESS \u003d \"newFloorThickness\";\n\n    private static final String AUTO_SAVE_DELAY_FOR_RECOVERY \u003d \"autoSaveDelayForRecovery\";\n\n    private static final String AUTO_COMPLETION_PROPERTY \u003d \"autoCompletionProperty#\";\n\n    private static final String AUTO_COMPLETION_STRINGS \u003d \"autoCompletionStrings#\";\n\n    private static final String RECENT_HOMES \u003d \"recentHomes#\";\n\n    private static final String IGNORED_ACTION_TIP \u003d \"ignoredActionTip#\";\n\n    private static final String FURNITURE_NAME \u003d \"furnitureName#\";\n\n    private static final String FURNITURE_CATEGORY \u003d \"furnitureCategory#\";\n\n    private static final String FURNITURE_ICON \u003d \"furnitureIcon#\";\n\n    private static final String FURNITURE_MODEL \u003d \"furnitureModel#\";\n\n    private static final String FURNITURE_WIDTH \u003d \"furnitureWidth#\";\n\n    private static final String FURNITURE_DEPTH \u003d \"furnitureDepth#\";\n\n    private static final String FURNITURE_HEIGHT \u003d \"furnitureHeight#\";\n\n    private static final String FURNITURE_MOVABLE \u003d \"furnitureMovable#\";\n\n    private static final String FURNITURE_DOOR_OR_WINDOW \u003d \"furnitureDoorOrWindow#\";\n\n    private static final String FURNITURE_ELEVATION \u003d \"furnitureElevation#\";\n\n    private static final String FURNITURE_COLOR \u003d \"furnitureColor#\";\n\n    private static final String FURNITURE_MODEL_ROTATION \u003d \"furnitureModelRotation#\";\n\n    private static final String FURNITURE_STAIRCASE_CUT_OUT_SHAPE \u003d \"furnitureStaircaseCutOutShape#\";\n\n    private static final String FURNITURE_BACK_FACE_SHOWN \u003d \"furnitureBackFaceShown#\";\n\n    private static final String FURNITURE_ICON_YAW \u003d \"furnitureIconYaw#\";\n\n    private static final String FURNITURE_PROPORTIONAL \u003d \"furnitureProportional#\";\n\n    private static final String TEXTURE_NAME \u003d \"textureName#\";\n\n    private static final String TEXTURE_CATEGORY \u003d \"textureCategory#\";\n\n    private static final String TEXTURE_IMAGE \u003d \"textureImage#\";\n\n    private static final String TEXTURE_WIDTH \u003d \"textureWidth#\";\n\n    private static final String TEXTURE_HEIGHT \u003d \"textureHeight#\";\n\n    private static final String FURNITURE_CONTENT_PREFIX \u003d \"Furniture-3-\";\n\n    private static final String TEXTURE_CONTENT_PREFIX \u003d \"Texture-3-\";\n\n    private static final String LANGUAGE_LIBRARIES_PLUGIN_SUB_FOLDER \u003d \"languages\";\n\n    private static final String FURNITURE_LIBRARIES_PLUGIN_SUB_FOLDER \u003d \"furniture\";\n\n    private static final String TEXTURES_LIBRARIES_PLUGIN_SUB_FOLDER \u003d \"textures\";\n\n    private static final Content DUMMY_CONTENT;\n\n    private final Map\u003cString, Boolean\u003e ignoredActionTips \u003d new HashMap\u003cString, Boolean\u003e();\n\n    private List\u003cClassLoader\u003e resourceClassLoaders;\n\n    private final File preferencesFolder;\n\n    private final File[] applicationFolders;\n\n    private Preferences preferences;\n\n    private Executor catalogsLoader;\n\n    private Executor updater;\n\n    static {\n        Content dummyURLContent \u003d null;\n        try {\n            dummyURLContent \u003d new URLContent(new URL(\"file:/dummySweetHome3DContent\"));\n        } catch (MalformedURLException ex) {\n        }\n        DUMMY_CONTENT \u003d dummyURLContent;\n    }\n\n    /**\n     * Creates user preferences read from user preferences in file system,\n     * and from resource files.\n     */\n    public FileUserPreferences() {\n        this(null, null);\n    }\n\n    /**\n     * Creates user preferences stored in the folders given in parameter.\n     * @param preferencesFolder the folder where preferences files are stored\n     *    or \u003ccode\u003enull\u003c/code\u003e if this folder is the default one.\n     * @param applicationFolders the folders where application private files are stored\n     *    or \u003ccode\u003enull\u003c/code\u003e if it\u0027s the default one. As the first application folder\n     *    is used as the folder where plug-ins files are imported by the user, it should\n     *    have write access otherwise the user won\u0027t be able to import them.\n     */\n    public FileUserPreferences(File preferencesFolder, File[] applicationFolders) {\n        this(preferencesFolder, applicationFolders, null);\n    }\n\n    /**\n     * Creates user preferences stored in the folders given in parameter.\n     * @param preferencesFolder the folder where preferences files are stored\n     *    or \u003ccode\u003enull\u003c/code\u003e if this folder is the default one.\n     * @param applicationFolders  the folders where application private files are stored\n     *    or \u003ccode\u003enull\u003c/code\u003e if it\u0027s the default one. As the first application folder\n     *    is used as the folder where plug-ins files are imported by the user, it should\n     *    have write access otherwise the user won\u0027t be able to import them.\n     * @param updater  an executor that will be used to update user preferences for lengthy\n     *    operations. If \u003ccode\u003enull\u003c/code\u003e, then these operations and\n     *    updates will be executed in the current thread.\n     */\n    public FileUserPreferences(File preferencesFolder, File[] applicationFolders, Executor updater) {\n        this.preferencesFolder \u003d preferencesFolder;\n        this.applicationFolders \u003d applicationFolders;\n        Executor defaultExecutor \u003d new Executor() {\n\n            public void execute(Runnable command) {\n                command.run();\n            }\n        };\n        if (updater \u003d\u003d null) {\n            this.catalogsLoader \u003d this.updater \u003d defaultExecutor;\n        } else {\n            this.catalogsLoader \u003d Executors.newSingleThreadExecutor();\n            this.updater \u003d updater;\n        }\n        updateSupportedLanguages();\n        final Preferences preferences;\n        // From version 3.0 use portable preferences\n        PortablePreferences portablePreferences \u003d new PortablePreferences();\n        // If portable preferences storage doesn\u0027t exist and default preferences folder is used\n        if (!portablePreferences.exist() \u0026\u0026 preferencesFolder \u003d\u003d null) {\n            // Retrieve preferences from pre version 3.0\n            preferences \u003d getPreferences();\n        } else {\n            preferences \u003d portablePreferences;\n        }\n        String language \u003d preferences.get(LANGUAGE, getLanguage());\n        // Check language is still supported\n        if (!Arrays.asList(getSupportedLanguages()).contains(language)) {\n            language \u003d Locale.ENGLISH.getLanguage();\n        }\n        setLanguage(language);\n        setFurnitureCatalog(new FurnitureCatalog());\n        // Fill default furniture catalog\n        updateFurnitureDefaultCatalog(defaultExecutor, defaultExecutor);\n        // Read additional furniture\n        readModifiableFurnitureCatalog(preferences);\n        setTexturesCatalog(new TexturesCatalog());\n        // Fill default textures catalog\n        updateTexturesDefaultCatalog(defaultExecutor, defaultExecutor);\n        // Read additional textures\n        readModifiableTexturesCatalog(preferences);\n        DefaultUserPreferences defaultPreferences \u003d new DefaultUserPreferences(false, this);\n        // Fill default patterns catalog\n        PatternsCatalog patternsCatalog \u003d defaultPreferences.getPatternsCatalog();\n        setPatternsCatalog(patternsCatalog);\n        // Read other preferences\n        setUnit(LengthUnit.valueOf(preferences.get(UNIT, defaultPreferences.getLengthUnit().name())));\n        setFurnitureCatalogViewedInTree(preferences.getBoolean(FURNITURE_CATALOG_VIEWED_IN_TREE, defaultPreferences.isFurnitureCatalogViewedInTree()));\n        setNavigationPanelVisible(preferences.getBoolean(NAVIGATION_PANEL_VISIBLE, defaultPreferences.isNavigationPanelVisible()));\n        setMagnetismEnabled(preferences.getBoolean(MAGNETISM_ENABLED, true));\n        setRulersVisible(preferences.getBoolean(RULERS_VISIBLE, defaultPreferences.isRulersVisible()));\n        setGridVisible(preferences.getBoolean(GRID_VISIBLE, defaultPreferences.isGridVisible()));\n        setFurnitureViewedFromTop(preferences.getBoolean(FURNITURE_VIEWED_FROM_TOP, defaultPreferences.isFurnitureViewedFromTop()));\n        setFloorColoredOrTextured(preferences.getBoolean(ROOM_FLOOR_COLORED_OR_TEXTURED, defaultPreferences.isRoomFloorColoredOrTextured()));\n        try {\n            setWallPattern(patternsCatalog.getPattern(preferences.get(WALL_PATTERN, defaultPreferences.getWallPattern().getName())));\n        } catch (IllegalArgumentException ex) {\n            // Ensure wall pattern always exists even if new patterns are added in future versions\n            setWallPattern(defaultPreferences.getWallPattern());\n        }\n        setNewWallThickness(preferences.getFloat(NEW_WALL_THICKNESS, defaultPreferences.getNewWallThickness()));\n        setNewWallHeight(preferences.getFloat(NEW_WALL_HEIGHT, defaultPreferences.getNewWallHeight()));\n        setNewFloorThickness(preferences.getFloat(NEW_FLOOR_THICKNESS, defaultPreferences.getNewFloorThickness()));\n        setAutoSaveDelayForRecovery(preferences.getInt(AUTO_SAVE_DELAY_FOR_RECOVERY, defaultPreferences.getAutoSaveDelayForRecovery()));\n        setCurrency(defaultPreferences.getCurrency());\n        // Read recent homes list\n        List\u003cString\u003e recentHomes \u003d new ArrayList\u003cString\u003e();\n        for (int i \u003d 1; i \u003c\u003d getRecentHomesMaxCount(); i++) {\n            String recentHome \u003d preferences.get(RECENT_HOMES + i, null);\n            if (recentHome !\u003d null) {\n                recentHomes.add(recentHome);\n            }\n        }\n        setRecentHomes(recentHomes);\n        // Read ignored action tips\n        for (int i \u003d 1; ; i++) {\n            String ignoredActionTip \u003d preferences.get(IGNORED_ACTION_TIP + i, \"\");\n            if (ignoredActionTip.length() \u003d\u003d 0) {\n                break;\n            } else {\n                this.ignoredActionTips.put(ignoredActionTip, true);\n            }\n        }\n        // Get default auto completion strings\n        for (String property : defaultPreferences.getAutoCompletedProperties()) {\n            setAutoCompletionStrings(property, defaultPreferences.getAutoCompletionStrings(property));\n        }\n        // Read auto completion strings list\n        for (int i \u003d 1; ; i++) {\n            String autoCompletionProperty \u003d preferences.get(AUTO_COMPLETION_PROPERTY + i, null);\n            String autoCompletionStrings \u003d preferences.get(AUTO_COMPLETION_STRINGS + i, null);\n            if (autoCompletionProperty !\u003d null \u0026\u0026 autoCompletionStrings !\u003d null) {\n                setAutoCompletionStrings(autoCompletionProperty, Arrays.asList(autoCompletionStrings.split(\",\")));\n            } else {\n                break;\n            }\n        }\n        addPropertyChangeListener(Property.LANGUAGE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                // Update catalogs with new default locale\n                updateFurnitureDefaultCatalog(catalogsLoader, FileUserPreferences.this.updater);\n                updateTexturesDefaultCatalog(catalogsLoader, FileUserPreferences.this.updater);\n                updateAutoCompletionStrings();\n            }\n        });\n        if (preferences !\u003d portablePreferences) {\n            // Switch to portable preferences now that all preferences are read\n            this.preferences \u003d portablePreferences;\n        } else {\n            this.preferences \u003d preferences;\n        }\n    }\n\n    /**\n     * Updates the default supported languages with languages available in plugin folder.\n     */\n    private void updateSupportedLanguages() {\n        List\u003cClassLoader\u003e resourceClassLoaders \u003d new ArrayList\u003cClassLoader\u003e();\n        String[] defaultSupportedLanguages \u003d getDefaultSupportedLanguages();\n        Set\u003cString\u003e supportedLanguages \u003d new TreeSet\u003cString\u003e(Arrays.asList(defaultSupportedLanguages));\n        File[] languageLibrariesPluginFolders \u003d getLanguageLibrariesPluginFolders();\n        if (languageLibrariesPluginFolders !\u003d null) {\n            for (File languageLibrariesPluginFolder : languageLibrariesPluginFolders) {\n                // Try to load sh3l files from language plugin folder\n                File[] pluginLanguageLibraryFiles \u003d languageLibrariesPluginFolder.listFiles(new FileFilter() {\n\n                    public boolean accept(File pathname) {\n                        return pathname.isFile();\n                    }\n                });\n                if (pluginLanguageLibraryFiles !\u003d null) {\n                    // Treat language files in reverse order so file named with a date or a version\n                    // will be taken into account from most recent to least recent\n                    Arrays.sort(pluginLanguageLibraryFiles, Collections.reverseOrder());\n                    for (File pluginLanguageLibraryFile : pluginLanguageLibraryFiles) {\n                        try {\n                            Set\u003cString\u003e languages \u003d getLanguages(pluginLanguageLibraryFile);\n                            if (!languages.isEmpty()) {\n                                supportedLanguages.addAll(languages);\n                                URL pluginFurnitureCatalogUrl \u003d pluginLanguageLibraryFile.toURI().toURL();\n                                resourceClassLoaders.add(new URLClassLoader(new URL[] { pluginFurnitureCatalogUrl }));\n                            }\n                        } catch (IOException ex) {\n                            // Ignore malformed files\n                        }\n                    }\n                }\n            }\n        }\n        // Give less priority to default class loader\n        resourceClassLoaders.addAll(super.getResourceClassLoaders());\n        this.resourceClassLoaders \u003d Collections.unmodifiableList(resourceClassLoaders);\n        if (defaultSupportedLanguages.length \u003c supportedLanguages.size()) {\n            setSupportedLanguages(supportedLanguages.toArray(new String[supportedLanguages.size()]));\n        }\n    }\n\n    /**\n     * Returns the languages included in the given language library file.\n     */\n    private Set\u003cString\u003e getLanguages(File languageLibraryFile) throws IOException {\n        Set\u003cString\u003e languages \u003d new LinkedHashSet\u003cString\u003e();\n        ZipInputStream zipIn \u003d null;\n        try {\n            // Search if zip file contains some *_xx.properties or *_xx_xx.properties files\n            zipIn \u003d new ZipInputStream(new FileInputStream(languageLibraryFile));\n            for (ZipEntry entry; (entry \u003d zipIn.getNextEntry()) !\u003d null; ) {\n                String zipEntryName \u003d entry.getName();\n                int underscoreIndex \u003d zipEntryName.indexOf(\u0027_\u0027);\n                if (underscoreIndex !\u003d -1) {\n                    int extensionIndex \u003d zipEntryName.lastIndexOf(\".properties\");\n                    if (extensionIndex !\u003d -1 \u0026\u0026 underscoreIndex \u003c extensionIndex - 2) {\n                        String language \u003d zipEntryName.substring(underscoreIndex + 1, extensionIndex);\n                        int countrySeparator \u003d language.indexOf(\u0027_\u0027);\n                        if (countrySeparator \u003d\u003d 2 \u0026\u0026 language.length() \u003d\u003d 5) {\n                            languages.add(language);\n                        } else if (language.length() \u003d\u003d 2) {\n                            languages.add(language);\n                        }\n                    }\n                }\n            }\n            return languages;\n        } finally {\n            if (zipIn !\u003d null) {\n                zipIn.close();\n            }\n        }\n    }\n\n    /**\n     * Returns the default class loader of user preferences and the class loaders that\n     * give access to resources in language libraries plugin folder.\n     */\n    @Override\n    public List\u003cClassLoader\u003e getResourceClassLoaders() {\n        return this.resourceClassLoaders;\n    }\n\n    /**\n     * Reloads furniture default catalogs.\n     */\n    private void updateFurnitureDefaultCatalog(Executor furnitureCatalogLoader, final Executor updater) {\n        // Delete default pieces of current furniture catalog\n        final FurnitureCatalog furnitureCatalog \u003d getFurnitureCatalog();\n        for (FurnitureCategory category : furnitureCatalog.getCategories()) {\n            for (CatalogPieceOfFurniture piece : category.getFurniture()) {\n                if (!piece.isModifiable()) {\n                    furnitureCatalog.delete(piece);\n                }\n            }\n        }\n        // Read default furniture catalog\n        furnitureCatalogLoader.execute(new Runnable() {\n\n            public void run() {\n                // Fill default furniture catalog\n                DefaultFurnitureCatalog defaultFurnitureCatalog \u003d new DefaultFurnitureCatalog(FileUserPreferences.this, getFurnitureLibrariesPluginFolders());\n                for (final FurnitureCategory category : defaultFurnitureCatalog.getCategories()) {\n                    for (final CatalogPieceOfFurniture piece : category.getFurniture()) {\n                        updater.execute(new Runnable() {\n\n                            public void run() {\n                                furnitureCatalog.add(category, piece);\n                            }\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Reloads textures default catalog.\n     */\n    private void updateTexturesDefaultCatalog(Executor texturesCatalogLoader, final Executor updater) {\n        // Delete default textures of current textures catalog\n        final TexturesCatalog texturesCatalog \u003d getTexturesCatalog();\n        for (TexturesCategory category : texturesCatalog.getCategories()) {\n            for (CatalogTexture texture : category.getTextures()) {\n                if (!texture.isModifiable()) {\n                    texturesCatalog.delete(texture);\n                }\n            }\n        }\n        // Read default textures catalog\n        texturesCatalogLoader.execute(new Runnable() {\n\n            public void run() {\n                TexturesCatalog defaultTexturesCatalog \u003d new DefaultTexturesCatalog(FileUserPreferences.this, getTexturesLibrariesPluginFolders());\n                for (final TexturesCategory category : defaultTexturesCatalog.getCategories()) {\n                    for (final CatalogTexture texture : category.getTextures()) {\n                        updater.execute(new Runnable() {\n\n                            public void run() {\n                                texturesCatalog.add(category, texture);\n                            }\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Adds to auto completion strings the default strings of the new chosen language.\n     */\n    private void updateAutoCompletionStrings() {\n        DefaultUserPreferences defaultPreferences \u003d new DefaultUserPreferences(false, this);\n        for (String property : defaultPreferences.getAutoCompletedProperties()) {\n            for (String autoCompletionString : defaultPreferences.getAutoCompletionStrings(property)) {\n                addAutoCompletionString(property, autoCompletionString);\n            }\n        }\n    }\n\n    /**\n     * Read modifiable furniture catalog from preferences.\n     */\n    private void readModifiableFurnitureCatalog(Preferences preferences) {\n        for (int i \u003d 1; ; i++) {\n            String name \u003d preferences.get(FURNITURE_NAME + i, null);\n            if (name \u003d\u003d null) {\n                // Stop the loop when a key furnitureName# doesn\u0027t exist\n                break;\n            }\n            String category \u003d preferences.get(FURNITURE_CATEGORY + i, \"\");\n            Content icon \u003d getContent(preferences, FURNITURE_ICON + i);\n            Content model \u003d getContent(preferences, FURNITURE_MODEL + i);\n            float width \u003d preferences.getFloat(FURNITURE_WIDTH + i, 0.1f);\n            float depth \u003d preferences.getFloat(FURNITURE_DEPTH + i, 0.1f);\n            float height \u003d preferences.getFloat(FURNITURE_HEIGHT + i, 0.1f);\n            boolean movable \u003d preferences.getBoolean(FURNITURE_MOVABLE + i, false);\n            boolean doorOrWindow \u003d preferences.getBoolean(FURNITURE_DOOR_OR_WINDOW + i, false);\n            float elevation \u003d preferences.getFloat(FURNITURE_ELEVATION + i, 0);\n            String colorString \u003d preferences.get(FURNITURE_COLOR + i, null);\n            Integer color \u003d colorString !\u003d null ? Integer.valueOf(colorString) : null;\n            float[][] modelRotation \u003d getModelRotation(preferences, FURNITURE_MODEL_ROTATION + i);\n            String staircaseCutOutShape \u003d preferences.get(FURNITURE_STAIRCASE_CUT_OUT_SHAPE + i, null);\n            boolean backFaceShown \u003d preferences.getBoolean(FURNITURE_BACK_FACE_SHOWN + i, false);\n            float iconYaw \u003d preferences.getFloat(FURNITURE_ICON_YAW + i, 0);\n            boolean proportional \u003d preferences.getBoolean(FURNITURE_PROPORTIONAL + i, true);\n            final FurnitureCategory pieceCategory \u003d new FurnitureCategory(category);\n            final CatalogPieceOfFurniture piece;\n            if (doorOrWindow) {\n                piece \u003d new CatalogDoorOrWindow(name, icon, model, width, depth, height, elevation, movable, 1, 0, new Sash[0], color, modelRotation, backFaceShown, iconYaw, proportional);\n            } else {\n                piece \u003d new CatalogPieceOfFurniture(name, icon, model, width, depth, height, elevation, movable, staircaseCutOutShape, color, modelRotation, backFaceShown, iconYaw, proportional);\n            }\n            getFurnitureCatalog().add(pieceCategory, piece);\n        }\n    }\n\n    /**\n     * Returns model rotation parsed from key value.\n     */\n    private float[][] getModelRotation(Preferences preferences, String key) {\n        String modelRotationString \u003d preferences.get(key, null);\n        if (modelRotationString \u003d\u003d null) {\n            return new float[][] { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };\n        } else {\n            String[] values \u003d modelRotationString.split(\" \", 9);\n            if (values.length !\u003d 9) {\n                return new float[][] { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };\n            } else {\n                try {\n                    return new float[][] { { Float.parseFloat(values[0]), Float.parseFloat(values[1]), Float.parseFloat(values[2]) }, { Float.parseFloat(values[3]), Float.parseFloat(values[4]), Float.parseFloat(values[5]) }, { Float.parseFloat(values[6]), Float.parseFloat(values[7]), Float.parseFloat(values[8]) } };\n                } catch (NumberFormatException ex) {\n                    return new float[][] { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns a content instance from the resource file value of key.\n     */\n    private Content getContent(Preferences preferences, String key) {\n        String content \u003d preferences.get(key, null);\n        if (content !\u003d null) {\n            try {\n                String preferencesFolderUrl \u003d getPreferencesFolder().toURI().toURL().toString();\n                if (content.startsWith(preferencesFolderUrl) || content.startsWith(\"jar:\" + preferencesFolderUrl)) {\n                    return new URLContent(new URL(content));\n                } else {\n                    return new URLContent(new URL(content.replace(\"file:\", preferencesFolderUrl)));\n                }\n            } catch (IOException ex) {\n                // Return DUMMY_CONTENT for incorrect URL\n            }\n        }\n        return DUMMY_CONTENT;\n    }\n\n    /**\n     * Read modifiable textures catalog from preferences.\n     */\n    private void readModifiableTexturesCatalog(Preferences preferences) {\n        for (int i \u003d 1; ; i++) {\n            String name \u003d preferences.get(TEXTURE_NAME + i, null);\n            if (name \u003d\u003d null) {\n                // Stop the loop when a key textureName# doesn\u0027t exist\n                break;\n            }\n            String category \u003d preferences.get(TEXTURE_CATEGORY + i, \"\");\n            Content image \u003d getContent(preferences, TEXTURE_IMAGE + i);\n            float width \u003d preferences.getFloat(TEXTURE_WIDTH + i, 0.1f);\n            float height \u003d preferences.getFloat(TEXTURE_HEIGHT + i, 0.1f);\n            final TexturesCategory textureCategory \u003d new TexturesCategory(category);\n            final CatalogTexture texture \u003d new CatalogTexture(name, image, width, height, true);\n            getTexturesCatalog().add(textureCategory, texture);\n        }\n    }\n\n    /**\n     * Writes user preferences in current user preferences in system.\n     */\n    @Override\n    public void write() throws RecorderException {\n        Preferences preferences \u003d getPreferences();\n        writeModifiableFurnitureCatalog(preferences);\n        writeModifiableTexturesCatalog(preferences);\n        // Write other preferences\n        preferences.put(LANGUAGE, getLanguage());\n        preferences.put(UNIT, getLengthUnit().name());\n        preferences.putBoolean(FURNITURE_CATALOG_VIEWED_IN_TREE, isFurnitureCatalogViewedInTree());\n        preferences.putBoolean(NAVIGATION_PANEL_VISIBLE, isNavigationPanelVisible());\n        preferences.putBoolean(MAGNETISM_ENABLED, isMagnetismEnabled());\n        preferences.putBoolean(RULERS_VISIBLE, isRulersVisible());\n        preferences.putBoolean(GRID_VISIBLE, isGridVisible());\n        preferences.putBoolean(FURNITURE_VIEWED_FROM_TOP, isFurnitureViewedFromTop());\n        preferences.putBoolean(ROOM_FLOOR_COLORED_OR_TEXTURED, isRoomFloorColoredOrTextured());\n        preferences.put(WALL_PATTERN, getWallPattern().getName());\n        preferences.putFloat(NEW_WALL_THICKNESS, getNewWallThickness());\n        preferences.putFloat(NEW_WALL_HEIGHT, getNewWallHeight());\n        preferences.putFloat(NEW_FLOOR_THICKNESS, getNewFloorThickness());\n        preferences.putInt(AUTO_SAVE_DELAY_FOR_RECOVERY, getAutoSaveDelayForRecovery());\n        // Write recent homes list\n        int i \u003d 1;\n        for (Iterator\u003cString\u003e it \u003d getRecentHomes().iterator(); it.hasNext() \u0026\u0026 i \u003c\u003d getRecentHomesMaxCount(); i++) {\n            preferences.put(RECENT_HOMES + i, it.next());\n        }\n        // Remove obsolete keys\n        for (; i \u003c\u003d getRecentHomesMaxCount(); i++) {\n            preferences.remove(RECENT_HOMES + i);\n        }\n        // Write ignored action tips\n        i \u003d 1;\n        for (Iterator\u003cMap.Entry\u003cString, Boolean\u003e\u003e it \u003d this.ignoredActionTips.entrySet().iterator(); it.hasNext(); ) {\n            Entry\u003cString, Boolean\u003e ignoredActionTipEntry \u003d it.next();\n            if (ignoredActionTipEntry.getValue()) {\n                preferences.put(IGNORED_ACTION_TIP + i++, ignoredActionTipEntry.getKey());\n            }\n        }\n        // Remove obsolete keys\n        for (; i \u003c\u003d this.ignoredActionTips.size(); i++) {\n            preferences.remove(IGNORED_ACTION_TIP + i);\n        }\n        // Write auto completion strings lists\n        i \u003d 1;\n        for (String property : getAutoCompletedProperties()) {\n            StringBuilder autoCompletionStrings \u003d new StringBuilder();\n            Iterator\u003cString\u003e it \u003d getAutoCompletionStrings(property).iterator();\n            for (int j \u003d 0; j \u003c 1000 \u0026\u0026 it.hasNext(); j++) {\n                String autoCompletionString \u003d it.next();\n                // As strings are comma separated, accept only the ones without a comma\n                if (autoCompletionString.indexOf(\u0027,\u0027) \u003c 0) {\n                    if (autoCompletionStrings.length() \u003e 0) {\n                        autoCompletionStrings.append(\",\");\n                    }\n                    autoCompletionStrings.append(autoCompletionString);\n                }\n            }\n            preferences.put(AUTO_COMPLETION_PROPERTY + i, property);\n            preferences.put(AUTO_COMPLETION_STRINGS + i++, autoCompletionStrings.toString());\n        }\n        for (; preferences.get(AUTO_COMPLETION_PROPERTY + i, null) !\u003d null; i++) {\n            preferences.remove(AUTO_COMPLETION_PROPERTY + i);\n            preferences.remove(AUTO_COMPLETION_STRINGS + i);\n        }\n        try {\n            // Write preferences\n            preferences.flush();\n        } catch (BackingStoreException ex) {\n            throw new RecorderException(\"Couldn\u0027t write preferences\", ex);\n        }\n    }\n\n    /**\n     * Writes modifiable furniture in \u003ccode\u003epreferences\u003c/code\u003e.\n     */\n    private void writeModifiableFurnitureCatalog(Preferences preferences) throws RecorderException {\n        final Set\u003cURL\u003e furnitureContentURLs \u003d new HashSet\u003cURL\u003e();\n        int i \u003d 1;\n        for (FurnitureCategory category : getFurnitureCatalog().getCategories()) {\n            for (CatalogPieceOfFurniture piece : category.getFurniture()) {\n                if (piece.isModifiable()) {\n                    preferences.put(FURNITURE_NAME + i, piece.getName());\n                    preferences.put(FURNITURE_CATEGORY + i, category.getName());\n                    putContent(preferences, FURNITURE_ICON + i, piece.getIcon(), FURNITURE_CONTENT_PREFIX, furnitureContentURLs);\n                    putContent(preferences, FURNITURE_MODEL + i, piece.getModel(), FURNITURE_CONTENT_PREFIX, furnitureContentURLs);\n                    preferences.putFloat(FURNITURE_WIDTH + i, piece.getWidth());\n                    preferences.putFloat(FURNITURE_DEPTH + i, piece.getDepth());\n                    preferences.putFloat(FURNITURE_HEIGHT + i, piece.getHeight());\n                    preferences.putBoolean(FURNITURE_MOVABLE + i, piece.isMovable());\n                    preferences.putBoolean(FURNITURE_DOOR_OR_WINDOW + i, piece.isDoorOrWindow());\n                    preferences.putFloat(FURNITURE_ELEVATION + i, piece.getElevation());\n                    if (piece.getColor() \u003d\u003d null) {\n                        preferences.remove(FURNITURE_COLOR + i);\n                    } else {\n                        preferences.put(FURNITURE_COLOR + i, String.valueOf(piece.getColor()));\n                    }\n                    float[][] modelRotation \u003d piece.getModelRotation();\n                    preferences.put(FURNITURE_MODEL_ROTATION + i, floatToString(modelRotation[0][0]) + \" \" + floatToString(modelRotation[0][1]) + \" \" + floatToString(modelRotation[0][2]) + \" \" + floatToString(modelRotation[1][0]) + \" \" + floatToString(modelRotation[1][1]) + \" \" + floatToString(modelRotation[1][2]) + \" \" + floatToString(modelRotation[2][0]) + \" \" + floatToString(modelRotation[2][1]) + \" \" + floatToString(modelRotation[2][2]));\n                    if (piece.getStaircaseCutOutShape() !\u003d null) {\n                        preferences.put(FURNITURE_STAIRCASE_CUT_OUT_SHAPE + i, piece.getStaircaseCutOutShape());\n                    }\n                    preferences.putBoolean(FURNITURE_BACK_FACE_SHOWN + i, piece.isBackFaceShown());\n                    preferences.putFloat(FURNITURE_ICON_YAW + i, piece.getIconYaw());\n                    preferences.putBoolean(FURNITURE_PROPORTIONAL + i, piece.isProportional());\n                    i++;\n                }\n            }\n        }\n        // Remove obsolete keys\n        for (; preferences.get(FURNITURE_NAME + i, null) !\u003d null; i++) {\n            preferences.remove(FURNITURE_NAME + i);\n            preferences.remove(FURNITURE_CATEGORY + i);\n            preferences.remove(FURNITURE_ICON + i);\n            preferences.remove(FURNITURE_MODEL + i);\n            preferences.remove(FURNITURE_WIDTH + i);\n            preferences.remove(FURNITURE_DEPTH + i);\n            preferences.remove(FURNITURE_HEIGHT + i);\n            preferences.remove(FURNITURE_MOVABLE + i);\n            preferences.remove(FURNITURE_DOOR_OR_WINDOW + i);\n            preferences.remove(FURNITURE_ELEVATION + i);\n            preferences.remove(FURNITURE_COLOR + i);\n            preferences.remove(FURNITURE_MODEL_ROTATION + i);\n            preferences.remove(FURNITURE_STAIRCASE_CUT_OUT_SHAPE + i);\n            preferences.remove(FURNITURE_BACK_FACE_SHOWN + i);\n            preferences.remove(FURNITURE_ICON_YAW + i);\n            preferences.remove(FURNITURE_PROPORTIONAL + i);\n        }\n        deleteObsoleteContent(furnitureContentURLs, FURNITURE_CONTENT_PREFIX);\n    }\n\n    /**\n     * Returns the string value of the given float, except for -1.0, 1.0 or 0.0 where -1, 1 and 0 is returned.\n     */\n    private String floatToString(float f) {\n        if (Math.abs(f) \u003c 1E-6) {\n            return \"0\";\n        } else if (Math.abs(f - 1f) \u003c 1E-6) {\n            return \"1\";\n        } else if (Math.abs(f + 1f) \u003c 1E-6) {\n            return \"-1\";\n        } else {\n            return String.valueOf(f);\n        }\n    }\n\n    /**\n     * Writes modifiable textures catalog in \u003ccode\u003epreferences\u003c/code\u003e.\n     */\n    private void writeModifiableTexturesCatalog(Preferences preferences) throws RecorderException {\n        final Set\u003cURL\u003e texturesContentURLs \u003d new HashSet\u003cURL\u003e();\n        int i \u003d 1;\n        for (TexturesCategory category : getTexturesCatalog().getCategories()) {\n            for (CatalogTexture texture : category.getTextures()) {\n                if (texture.isModifiable()) {\n                    preferences.put(TEXTURE_NAME + i, texture.getName());\n                    preferences.put(TEXTURE_CATEGORY + i, category.getName());\n                    putContent(preferences, TEXTURE_IMAGE + i, texture.getImage(), TEXTURE_CONTENT_PREFIX, texturesContentURLs);\n                    preferences.putFloat(TEXTURE_WIDTH + i, texture.getWidth());\n                    preferences.putFloat(TEXTURE_HEIGHT + i, texture.getHeight());\n                    i++;\n                }\n            }\n        }\n        // Remove obsolete keys\n        for (; preferences.get(TEXTURE_NAME + i, null) !\u003d null; i++) {\n            preferences.remove(TEXTURE_NAME + i);\n            preferences.remove(TEXTURE_CATEGORY + i);\n            preferences.remove(TEXTURE_IMAGE + i);\n            preferences.remove(TEXTURE_WIDTH + i);\n            preferences.remove(TEXTURE_HEIGHT + i);\n        }\n        deleteObsoleteContent(texturesContentURLs, TEXTURE_CONTENT_PREFIX);\n    }\n\n    /**\n     * Writes \u003ccode\u003ekey\u003c/code\u003e \u003ccode\u003econtent\u003c/code\u003e in \u003ccode\u003epreferences\u003c/code\u003e.\n     */\n    private void putContent(Preferences preferences, String key, Content content, String contentPrefix, Set\u003cURL\u003e furnitureContentURLs) throws RecorderException {\n        if (content instanceof TemporaryURLContent) {\n            URLContent urlContent \u003d (URLContent) content;\n            URLContent copiedContent;\n            if (urlContent.isJAREntry()) {\n                try {\n                    // If content is a JAR entry copy the content of its URL and rebuild a new URL content from\n                    // this copy and the entry name\n                    copiedContent \u003d copyToPreferencesURLContent(new URLContent(urlContent.getJAREntryURL()), contentPrefix);\n                    copiedContent \u003d new URLContent(new URL(\"jar:\" + copiedContent.getURL() + \"!/\" + urlContent.getJAREntryName()));\n                } catch (MalformedURLException ex) {\n                    // Shouldn\u0027t happen\n                    throw new RecorderException(\"Can\u0027t build URL\", ex);\n                }\n            } else {\n                copiedContent \u003d copyToPreferencesURLContent(urlContent, contentPrefix);\n            }\n            putContent(preferences, key, copiedContent, contentPrefix, furnitureContentURLs);\n        } else if (content instanceof URLContent) {\n            URLContent urlContent \u003d (URLContent) content;\n            try {\n                preferences.put(key, urlContent.getURL().toString().replace(getPreferencesFolder().toURI().toURL().toString(), \"file:\"));\n            } catch (IOException ex) {\n                throw new RecorderException(\"Can\u0027t save content\", ex);\n            }\n            // Add to furnitureContentURLs the URL to the application file\n            if (urlContent.isJAREntry()) {\n                furnitureContentURLs.add(urlContent.getJAREntryURL());\n            } else {\n                furnitureContentURLs.add(urlContent.getURL());\n            }\n        } else {\n            putContent(preferences, key, copyToPreferencesURLContent(content, contentPrefix), contentPrefix, furnitureContentURLs);\n        }\n    }\n\n    /**\n     * Returns a content object that references a copy of \u003ccode\u003econtent\u003c/code\u003e in\n     * user preferences folder.\n     */\n    private URLContent copyToPreferencesURLContent(Content content, String contentPrefix) throws RecorderException {\n        InputStream tempIn \u003d null;\n        OutputStream tempOut \u003d null;\n        try {\n            File preferencesFile \u003d createPreferencesFile(contentPrefix);\n            tempIn \u003d content.openStream();\n            tempOut \u003d new FileOutputStream(preferencesFile);\n            byte[] buffer \u003d new byte[8192];\n            int size;\n            while ((size \u003d tempIn.read(buffer)) !\u003d -1) {\n                tempOut.write(buffer, 0, size);\n            }\n            return new URLContent(preferencesFile.toURI().toURL());\n        } catch (IOException ex) {\n            throw new RecorderException(\"Can\u0027t save content\", ex);\n        } finally {\n            try {\n                if (tempIn !\u003d null) {\n                    tempIn.close();\n                }\n                if (tempOut !\u003d null) {\n                    tempOut.close();\n                }\n            } catch (IOException ex) {\n                throw new RecorderException(\"Can\u0027t close files\", ex);\n            }\n        }\n    }\n\n    /**\n     * Returns the folder where language libraries files must be placed\n     * or \u003ccode\u003enull\u003c/code\u003e if that folder can\u0027t be retrieved.\n     */\n    private File[] getLanguageLibrariesPluginFolders() {\n        try {\n            return getApplicationSubfolders(LANGUAGE_LIBRARIES_PLUGIN_SUB_FOLDER);\n        } catch (IOException ex) {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the folder where furniture catalog files must be placed\n     * or \u003ccode\u003enull\u003c/code\u003e if that folder can\u0027t be retrieved.\n     */\n    private File[] getFurnitureLibrariesPluginFolders() {\n        try {\n            return getApplicationSubfolders(FURNITURE_LIBRARIES_PLUGIN_SUB_FOLDER);\n        } catch (IOException ex) {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the folder where texture catalog files must be placed\n     * or \u003ccode\u003enull\u003c/code\u003e if that folder can\u0027t be retrieved.\n     */\n    private File[] getTexturesLibrariesPluginFolders() {\n        try {\n            return getApplicationSubfolders(TEXTURES_LIBRARIES_PLUGIN_SUB_FOLDER);\n        } catch (IOException ex) {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the first Sweet Home 3D application folder.\n     */\n    public File getApplicationFolder() throws IOException {\n        File[] applicationFolders \u003d getApplicationFolders();\n        if (applicationFolders.length \u003d\u003d 0) {\n            throw new IOException(\"No application folder defined\");\n        } else {\n            return applicationFolders[0];\n        }\n    }\n\n    /**\n     * Returns Sweet Home 3D application folders.\n     */\n    public File[] getApplicationFolders() throws IOException {\n        if (this.applicationFolders !\u003d null) {\n            return this.applicationFolders;\n        } else {\n            return new File[] { OperatingSystem.getDefaultApplicationFolder() };\n        }\n    }\n\n    /**\n     * Returns subfolders of Sweet Home 3D application folders of a given name.\n     */\n    public File[] getApplicationSubfolders(String subfolder) throws IOException {\n        File[] applicationFolders \u003d getApplicationFolders();\n        File[] applicationSubfolders \u003d new File[applicationFolders.length];\n        for (int i \u003d 0; i \u003c applicationFolders.length; i++) {\n            applicationSubfolders[i] \u003d new File(applicationFolders[i], subfolder);\n        }\n        return applicationSubfolders;\n    }\n\n    /**\n     * Returns a new file in user preferences folder.\n     */\n    private File createPreferencesFile(String filePrefix) throws IOException {\n        checkPreferencesFolder();\n        // Return a new file in preferences folder\n        return File.createTempFile(filePrefix, \".pref\", getPreferencesFolder());\n    }\n\n    /**\n     * Creates preferences folder and its sub folders if it doesn\u0027t exist.\n     */\n    private void checkPreferencesFolder() throws IOException {\n        File preferencesFolder \u003d getPreferencesFolder();\n        // Create preferences folder if it doesn\u0027t exist\n        if (!preferencesFolder.exists() \u0026\u0026 !preferencesFolder.mkdirs()) {\n            throw new IOException(\"Couldn\u0027t create \" + preferencesFolder);\n        }\n        checkPreferencesSubFolder(getLanguageLibrariesPluginFolders());\n        checkPreferencesSubFolder(getFurnitureLibrariesPluginFolders());\n        checkPreferencesSubFolder(getTexturesLibrariesPluginFolders());\n    }\n\n    /**\n     * Creates the first folder in the given folders.\n     */\n    private void checkPreferencesSubFolder(File[] librariesPluginFolders) {\n        if (librariesPluginFolders !\u003d null \u0026\u0026 librariesPluginFolders.length \u003e 0 \u0026\u0026 !librariesPluginFolders[0].exists()) {\n            librariesPluginFolders[0].mkdirs();\n        }\n    }\n\n    /**\n     * Deletes from application folder the content files starting by \u003ccode\u003econtentPrefix\u003c/code\u003e\n     * that don\u0027t belong to \u003ccode\u003econtentURLs\u003c/code\u003e.\n     */\n    private void deleteObsoleteContent(final Set\u003cURL\u003e contentURLs, final String contentPrefix) throws RecorderException {\n        // Search obsolete contents\n        File applicationFolder;\n        try {\n            applicationFolder \u003d getPreferencesFolder();\n        } catch (IOException ex) {\n            throw new RecorderException(\"Can\u0027t access to application folder\");\n        }\n        File[] obsoleteContentFiles \u003d applicationFolder.listFiles(new FileFilter() {\n\n            public boolean accept(File applicationFile) {\n                try {\n                    URL toURL \u003d applicationFile.toURI().toURL();\n                    return applicationFile.getName().startsWith(contentPrefix) \u0026\u0026 !contentURLs.contains(toURL);\n                } catch (MalformedURLException ex) {\n                    return false;\n                }\n            }\n        });\n        if (obsoleteContentFiles !\u003d null) {\n            // Delete obsolete contents at program exit to ensure removed contents\n            // can still be saved in homes that reference them\n            for (File file : obsoleteContentFiles) {\n                file.deleteOnExit();\n            }\n        }\n    }\n\n    /**\n     * Returns the folder where files depending on preferences are stored.\n     */\n    private File getPreferencesFolder() throws IOException {\n        if (this.preferencesFolder !\u003d null) {\n            return this.preferencesFolder;\n        } else {\n            return OperatingSystem.getDefaultApplicationFolder();\n        }\n    }\n\n    /**\n     * Returns default Java preferences for current system user.\n     * Caution : This method is called once in constructor so overriding implementations\n     * shouldn\u0027t be based on the state of their fields.\n     */\n    protected Preferences getPreferences() {\n        if (this.preferences !\u003d null) {\n            return this.preferences;\n        } else {\n            return Preferences.userNodeForPackage(FileUserPreferences.class);\n        }\n    }\n\n    /**\n     * Sets which action tip should be ignored.\n     */\n    @Override\n    public void setActionTipIgnored(String actionKey) {\n        this.ignoredActionTips.put(actionKey, true);\n        super.setActionTipIgnored(actionKey);\n    }\n\n    /**\n     * Returns whether an action tip should be ignored or not.\n     */\n    @Override\n    public boolean isActionTipIgnored(String actionKey) {\n        Boolean ignoredActionTip \u003d this.ignoredActionTips.get(actionKey);\n        return ignoredActionTip !\u003d null \u0026\u0026 ignoredActionTip.booleanValue();\n    }\n\n    /**\n     * Resets the display flag of action tips.\n     */\n    @Override\n    public void resetIgnoredActionTips() {\n        for (Iterator\u003cMap.Entry\u003cString, Boolean\u003e\u003e it \u003d this.ignoredActionTips.entrySet().iterator(); it.hasNext(); ) {\n            Entry\u003cString, Boolean\u003e ignoredActionTipEntry \u003d it.next();\n            ignoredActionTipEntry.setValue(false);\n        }\n        super.resetIgnoredActionTips();\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given language library exists in the first\n     * language libraries folder.\n     */\n    public boolean languageLibraryExists(String name) throws RecorderException {\n        File[] languageLibrariesPluginFolders \u003d getLanguageLibrariesPluginFolders();\n        if (languageLibrariesPluginFolders \u003d\u003d null || languageLibrariesPluginFolders.length \u003d\u003d 0) {\n            throw new RecorderException(\"Can\u0027t access to language libraries plugin folder\");\n        } else {\n            String libraryFileName \u003d new File(name).getName();\n            return new File(languageLibrariesPluginFolders[0], libraryFileName).exists();\n        }\n    }\n\n    /**\n     * Adds \u003ccode\u003elanguageLibraryName\u003c/code\u003e to the first language libraries folder\n     * to make the language library it contains available to supported languages.\n     */\n    public void addLanguageLibrary(String languageLibraryName) throws RecorderException {\n        try {\n            File[] languageLibrariesPluginFolders \u003d getLanguageLibrariesPluginFolders();\n            if (languageLibrariesPluginFolders \u003d\u003d null || languageLibrariesPluginFolders.length \u003d\u003d 0) {\n                throw new RecorderException(\"Can\u0027t access to language libraries plugin folder\");\n            }\n            File languageLibraryFile \u003d new File(languageLibraryName);\n            copyToLibraryFolder(languageLibraryFile, languageLibrariesPluginFolders[0]);\n            updateSupportedLanguages();\n        } catch (IOException ex) {\n            throw new RecorderException(\"Can\u0027t write \" + languageLibraryName + \" in language libraries plugin folder\", ex);\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given furniture library file exists in the first\n     * furniture libraries folder.\n     * @param name the name of the resource to check\n     */\n    @Override\n    public boolean furnitureLibraryExists(String name) throws RecorderException {\n        File[] furnitureLibrariesPluginFolders \u003d getFurnitureLibrariesPluginFolders();\n        if (furnitureLibrariesPluginFolders \u003d\u003d null || furnitureLibrariesPluginFolders.length \u003d\u003d 0) {\n            throw new RecorderException(\"Can\u0027t access to furniture libraries plugin folder\");\n        } else {\n            String libraryFileName \u003d new File(name).getName();\n            return new File(furnitureLibrariesPluginFolders[0], libraryFileName).exists();\n        }\n    }\n\n    /**\n     * Adds the file \u003ccode\u003efurnitureLibraryName\u003c/code\u003e to the first furniture libraries folder\n     * to make the furniture library available to catalog.\n     */\n    @Override\n    public void addFurnitureLibrary(String furnitureLibraryName) throws RecorderException {\n        try {\n            File[] furnitureLibrariesPluginFolders \u003d getFurnitureLibrariesPluginFolders();\n            if (furnitureLibrariesPluginFolders \u003d\u003d null || furnitureLibrariesPluginFolders.length \u003d\u003d 0) {\n                throw new RecorderException(\"Can\u0027t access to furniture libraries plugin folder\");\n            }\n            copyToLibraryFolder(new File(furnitureLibraryName), furnitureLibrariesPluginFolders[0]);\n            updateFurnitureDefaultCatalog(this.catalogsLoader, this.updater);\n        } catch (IOException ex) {\n            throw new RecorderException(\"Can\u0027t write \" + furnitureLibraryName + \" in furniture libraries plugin folder\", ex);\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given textures library file exists in the first textures libraries folder.\n     * @param name the name of the resource to check\n     */\n    @Override\n    public boolean texturesLibraryExists(String name) throws RecorderException {\n        File[] texturesLibrariesPluginFolders \u003d getTexturesLibrariesPluginFolders();\n        if (texturesLibrariesPluginFolders \u003d\u003d null || texturesLibrariesPluginFolders.length \u003d\u003d 0) {\n            throw new RecorderException(\"Can\u0027t access to textures libraries plugin folder\");\n        } else {\n            String libraryFileName \u003d new File(name).getName();\n            return new File(texturesLibrariesPluginFolders[0], libraryFileName).exists();\n        }\n    }\n\n    /**\n     * Adds the file \u003ccode\u003etexturesLibraryName\u003c/code\u003e to the first textures libraries folder\n     * to make the textures library available to catalog.\n     */\n    @Override\n    public void addTexturesLibrary(String texturesLibraryName) throws RecorderException {\n        try {\n            File[] texturesLibrariesPluginFolders \u003d getTexturesLibrariesPluginFolders();\n            if (texturesLibrariesPluginFolders \u003d\u003d null || texturesLibrariesPluginFolders.length \u003d\u003d 0) {\n                throw new RecorderException(\"Can\u0027t access to textures libraries plugin folder\");\n            }\n            copyToLibraryFolder(new File(texturesLibraryName), texturesLibrariesPluginFolders[0]);\n            updateTexturesDefaultCatalog(this.catalogsLoader, this.updater);\n        } catch (IOException ex) {\n            throw new RecorderException(\"Can\u0027t write \" + texturesLibraryName + \" in textures libraries plugin folder\", ex);\n        }\n    }\n\n    /**\n     * Copies a library file to a folder.\n     */\n    private void copyToLibraryFolder(File libraryFile, File folder) throws IOException {\n        String libraryFileName \u003d libraryFile.getName();\n        File destinationFile \u003d new File(folder, libraryFileName);\n        if (destinationFile.exists()) {\n            // Delete file to reinitialize handlers\n            destinationFile.delete();\n        }\n        InputStream tempIn \u003d null;\n        OutputStream tempOut \u003d null;\n        try {\n            tempIn \u003d new BufferedInputStream(new FileInputStream(libraryFile));\n            // Create folder if it doesn\u0027t exist\n            folder.mkdirs();\n            tempOut \u003d new FileOutputStream(destinationFile);\n            byte[] buffer \u003d new byte[8192];\n            int size;\n            while ((size \u003d tempIn.read(buffer)) !\u003d -1) {\n                tempOut.write(buffer, 0, size);\n            }\n        } finally {\n            if (tempIn !\u003d null) {\n                tempIn.close();\n            }\n            if (tempOut !\u003d null) {\n                tempOut.close();\n            }\n        }\n    }\n\n    /**\n     * Preferences based on the \u003ccode\u003epreferences.xml\u003c/code\u003e file\n     * stored in a preferences folder.\n     * @author Emmanuel Puybaret\n     */\n    private class PortablePreferences extends AbstractPreferences {\n\n        private static final String PREFERENCES_FILE \u003d \"preferences.xml\";\n\n        private Properties preferencesProperties;\n\n        private boolean exist;\n\n        private PortablePreferences() {\n            super(null, \"\");\n            this.preferencesProperties \u003d new Properties();\n            this.exist \u003d readPreferences();\n        }\n\n        public boolean exist() {\n            return this.exist;\n        }\n\n        @Override\n        protected void syncSpi() throws BackingStoreException {\n            this.preferencesProperties.clear();\n            this.exist \u003d readPreferences();\n        }\n\n        @Override\n        protected void removeSpi(String key) {\n            this.preferencesProperties.remove(key);\n        }\n\n        @Override\n        protected void putSpi(String key, String value) {\n            this.preferencesProperties.put(key, value);\n        }\n\n        @Override\n        protected String[] keysSpi() throws BackingStoreException {\n            return this.preferencesProperties.keySet().toArray(new String[0]);\n        }\n\n        @Override\n        protected String getSpi(String key) {\n            return (String) this.preferencesProperties.get(key);\n        }\n\n        @Override\n        protected void flushSpi() throws BackingStoreException {\n            try {\n                writePreferences();\n            } catch (IOException ex) {\n                throw new BackingStoreException(ex);\n            }\n        }\n\n        @Override\n        protected void removeNodeSpi() throws BackingStoreException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        protected String[] childrenNamesSpi() throws BackingStoreException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        protected AbstractPreferences childSpi(String name) {\n            throw new UnsupportedOperationException();\n        }\n\n        /**\n         * Reads user preferences.\n         */\n        private boolean readPreferences() {\n            InputStream in \u003d null;\n            try {\n                in \u003d new FileInputStream(new File(getPreferencesFolder(), PREFERENCES_FILE));\n                this.preferencesProperties.loadFromXML(in);\n                return true;\n            } catch (IOException ex) {\n                // Preferences don\u0027t exist\n                return false;\n            } finally {\n                try {\n                    if (in !\u003d null) {\n                        in.close();\n                    }\n                } catch (IOException ex) {\n                    // Let default preferences unchanged\n                }\n            }\n        }\n\n        /**\n         * Writes user preferences.\n         */\n        private void writePreferences() throws IOException {\n            OutputStream out \u003d null;\n            try {\n                checkPreferencesFolder();\n                out \u003d new FileOutputStream(new File(getPreferencesFolder(), PREFERENCES_FILE));\n                this.preferencesProperties.storeToXML(out, \"Portable user preferences 3.0\");\n            } finally {\n                if (out !\u003d null) {\n                    out.close();\n                    this.exist \u003d true;\n                }\n            }\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.io",
    "classname": "FileUserPreferences",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/io/FileUserPreferences_3Test.java",
    "test_prompt": "// FileUserPreferences_3Test.java\npackage com.eteks.sweethome3d.io;\n\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.prefs.AbstractPreferences;\nimport java.util.prefs.BackingStoreException;\nimport java.util.prefs.Preferences;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.CatalogDoorOrWindow;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.FurnitureCatalog;\nimport com.eteks.sweethome3d.model.FurnitureCategory;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.PatternsCatalog;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Sash;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileUserPreferences}.\n* It contains ten unit test cases for the {@link FileUserPreferences#furnitureLibraryExists(String)} method.\n*/\nclass FileUserPreferences_3Test {",
    "method_signature": "furnitureLibraryExists(String)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// FileUserPreferences.java\n/*\n * FileUserPreferences.java 18 sept 2006\n *\n * Sweet Home 3D, Copyright (c) 2006 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.io;\n\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.prefs.AbstractPreferences;\nimport java.util.prefs.BackingStoreException;\nimport java.util.prefs.Preferences;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.CatalogDoorOrWindow;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.FurnitureCatalog;\nimport com.eteks.sweethome3d.model.FurnitureCategory;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.PatternsCatalog;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Sash;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\n\n/**\n * User preferences initialized from\n * {@link com.eteks.sweethome3d.io.DefaultUserPreferences default user preferences}\n * and stored in user preferences on local file system.\n * @author Emmanuel Puybaret\n */\npublic class FileUserPreferences extends UserPreferences {\n\n    private static final String LANGUAGE \u003d \"language\";\n\n    private static final String UNIT \u003d \"unit\";\n\n    private static final String FURNITURE_CATALOG_VIEWED_IN_TREE \u003d \"furnitureCatalogViewedInTree\";\n\n    private static final String NAVIGATION_PANEL_VISIBLE \u003d \"navigationPanelVisible\";\n\n    private static final String MAGNETISM_ENABLED \u003d \"magnetismEnabled\";\n\n    private static final String RULERS_VISIBLE \u003d \"rulersVisible\";\n\n    private static final String GRID_VISIBLE \u003d \"gridVisible\";\n\n    private static final String FURNITURE_VIEWED_FROM_TOP \u003d \"furnitureViewedFromTop\";\n\n    private static final String ROOM_FLOOR_COLORED_OR_TEXTURED \u003d \"roomFloorColoredOrTextured\";\n\n    private static final String WALL_PATTERN \u003d \"wallPattern\";\n\n    private static final String NEW_WALL_HEIGHT \u003d \"newHomeWallHeight\";\n\n    private static final String NEW_WALL_THICKNESS \u003d \"newWallThickness\";\n\n    private static final String NEW_FLOOR_THICKNESS \u003d \"newFloorThickness\";\n\n    private static final String AUTO_SAVE_DELAY_FOR_RECOVERY \u003d \"autoSaveDelayForRecovery\";\n\n    private static final String AUTO_COMPLETION_PROPERTY \u003d \"autoCompletionProperty#\";\n\n    private static final String AUTO_COMPLETION_STRINGS \u003d \"autoCompletionStrings#\";\n\n    private static final String RECENT_HOMES \u003d \"recentHomes#\";\n\n    private static final String IGNORED_ACTION_TIP \u003d \"ignoredActionTip#\";\n\n    private static final String FURNITURE_NAME \u003d \"furnitureName#\";\n\n    private static final String FURNITURE_CATEGORY \u003d \"furnitureCategory#\";\n\n    private static final String FURNITURE_ICON \u003d \"furnitureIcon#\";\n\n    private static final String FURNITURE_MODEL \u003d \"furnitureModel#\";\n\n    private static final String FURNITURE_WIDTH \u003d \"furnitureWidth#\";\n\n    private static final String FURNITURE_DEPTH \u003d \"furnitureDepth#\";\n\n    private static final String FURNITURE_HEIGHT \u003d \"furnitureHeight#\";\n\n    private static final String FURNITURE_MOVABLE \u003d \"furnitureMovable#\";\n\n    private static final String FURNITURE_DOOR_OR_WINDOW \u003d \"furnitureDoorOrWindow#\";\n\n    private static final String FURNITURE_ELEVATION \u003d \"furnitureElevation#\";\n\n    private static final String FURNITURE_COLOR \u003d \"furnitureColor#\";\n\n    private static final String FURNITURE_MODEL_ROTATION \u003d \"furnitureModelRotation#\";\n\n    private static final String FURNITURE_STAIRCASE_CUT_OUT_SHAPE \u003d \"furnitureStaircaseCutOutShape#\";\n\n    private static final String FURNITURE_BACK_FACE_SHOWN \u003d \"furnitureBackFaceShown#\";\n\n    private static final String FURNITURE_ICON_YAW \u003d \"furnitureIconYaw#\";\n\n    private static final String FURNITURE_PROPORTIONAL \u003d \"furnitureProportional#\";\n\n    private static final String TEXTURE_NAME \u003d \"textureName#\";\n\n    private static final String TEXTURE_CATEGORY \u003d \"textureCategory#\";\n\n    private static final String TEXTURE_IMAGE \u003d \"textureImage#\";\n\n    private static final String TEXTURE_WIDTH \u003d \"textureWidth#\";\n\n    private static final String TEXTURE_HEIGHT \u003d \"textureHeight#\";\n\n    private static final String FURNITURE_CONTENT_PREFIX \u003d \"Furniture-3-\";\n\n    private static final String TEXTURE_CONTENT_PREFIX \u003d \"Texture-3-\";\n\n    private static final String LANGUAGE_LIBRARIES_PLUGIN_SUB_FOLDER \u003d \"languages\";\n\n    private static final String FURNITURE_LIBRARIES_PLUGIN_SUB_FOLDER \u003d \"furniture\";\n\n    private static final String TEXTURES_LIBRARIES_PLUGIN_SUB_FOLDER \u003d \"textures\";\n\n    private static final Content DUMMY_CONTENT;\n\n    private final Map\u003cString, Boolean\u003e ignoredActionTips \u003d new HashMap\u003cString, Boolean\u003e();\n\n    private List\u003cClassLoader\u003e resourceClassLoaders;\n\n    private final File preferencesFolder;\n\n    private final File[] applicationFolders;\n\n    private Preferences preferences;\n\n    private Executor catalogsLoader;\n\n    private Executor updater;\n\n    static {\n        Content dummyURLContent \u003d null;\n        try {\n            dummyURLContent \u003d new URLContent(new URL(\"file:/dummySweetHome3DContent\"));\n        } catch (MalformedURLException ex) {\n        }\n        DUMMY_CONTENT \u003d dummyURLContent;\n    }\n\n    /**\n     * Creates user preferences read from user preferences in file system,\n     * and from resource files.\n     */\n    public FileUserPreferences() {\n        this(null, null);\n    }\n\n    /**\n     * Creates user preferences stored in the folders given in parameter.\n     * @param preferencesFolder the folder where preferences files are stored\n     *    or \u003ccode\u003enull\u003c/code\u003e if this folder is the default one.\n     * @param applicationFolders the folders where application private files are stored\n     *    or \u003ccode\u003enull\u003c/code\u003e if it\u0027s the default one. As the first application folder\n     *    is used as the folder where plug-ins files are imported by the user, it should\n     *    have write access otherwise the user won\u0027t be able to import them.\n     */\n    public FileUserPreferences(File preferencesFolder, File[] applicationFolders) {\n        this(preferencesFolder, applicationFolders, null);\n    }\n\n    /**\n     * Creates user preferences stored in the folders given in parameter.\n     * @param preferencesFolder the folder where preferences files are stored\n     *    or \u003ccode\u003enull\u003c/code\u003e if this folder is the default one.\n     * @param applicationFolders  the folders where application private files are stored\n     *    or \u003ccode\u003enull\u003c/code\u003e if it\u0027s the default one. As the first application folder\n     *    is used as the folder where plug-ins files are imported by the user, it should\n     *    have write access otherwise the user won\u0027t be able to import them.\n     * @param updater  an executor that will be used to update user preferences for lengthy\n     *    operations. If \u003ccode\u003enull\u003c/code\u003e, then these operations and\n     *    updates will be executed in the current thread.\n     */\n    public FileUserPreferences(File preferencesFolder, File[] applicationFolders, Executor updater) {\n        this.preferencesFolder \u003d preferencesFolder;\n        this.applicationFolders \u003d applicationFolders;\n        Executor defaultExecutor \u003d new Executor() {\n\n            public void execute(Runnable command) {\n                command.run();\n            }\n        };\n        if (updater \u003d\u003d null) {\n            this.catalogsLoader \u003d this.updater \u003d defaultExecutor;\n        } else {\n            this.catalogsLoader \u003d Executors.newSingleThreadExecutor();\n            this.updater \u003d updater;\n        }\n        updateSupportedLanguages();\n        final Preferences preferences;\n        // From version 3.0 use portable preferences\n        PortablePreferences portablePreferences \u003d new PortablePreferences();\n        // If portable preferences storage doesn\u0027t exist and default preferences folder is used\n        if (!portablePreferences.exist() \u0026\u0026 preferencesFolder \u003d\u003d null) {\n            // Retrieve preferences from pre version 3.0\n            preferences \u003d getPreferences();\n        } else {\n            preferences \u003d portablePreferences;\n        }\n        String language \u003d preferences.get(LANGUAGE, getLanguage());\n        // Check language is still supported\n        if (!Arrays.asList(getSupportedLanguages()).contains(language)) {\n            language \u003d Locale.ENGLISH.getLanguage();\n        }\n        setLanguage(language);\n        setFurnitureCatalog(new FurnitureCatalog());\n        // Fill default furniture catalog\n        updateFurnitureDefaultCatalog(defaultExecutor, defaultExecutor);\n        // Read additional furniture\n        readModifiableFurnitureCatalog(preferences);\n        setTexturesCatalog(new TexturesCatalog());\n        // Fill default textures catalog\n        updateTexturesDefaultCatalog(defaultExecutor, defaultExecutor);\n        // Read additional textures\n        readModifiableTexturesCatalog(preferences);\n        DefaultUserPreferences defaultPreferences \u003d new DefaultUserPreferences(false, this);\n        // Fill default patterns catalog\n        PatternsCatalog patternsCatalog \u003d defaultPreferences.getPatternsCatalog();\n        setPatternsCatalog(patternsCatalog);\n        // Read other preferences\n        setUnit(LengthUnit.valueOf(preferences.get(UNIT, defaultPreferences.getLengthUnit().name())));\n        setFurnitureCatalogViewedInTree(preferences.getBoolean(FURNITURE_CATALOG_VIEWED_IN_TREE, defaultPreferences.isFurnitureCatalogViewedInTree()));\n        setNavigationPanelVisible(preferences.getBoolean(NAVIGATION_PANEL_VISIBLE, defaultPreferences.isNavigationPanelVisible()));\n        setMagnetismEnabled(preferences.getBoolean(MAGNETISM_ENABLED, true));\n        setRulersVisible(preferences.getBoolean(RULERS_VISIBLE, defaultPreferences.isRulersVisible()));\n        setGridVisible(preferences.getBoolean(GRID_VISIBLE, defaultPreferences.isGridVisible()));\n        setFurnitureViewedFromTop(preferences.getBoolean(FURNITURE_VIEWED_FROM_TOP, defaultPreferences.isFurnitureViewedFromTop()));\n        setFloorColoredOrTextured(preferences.getBoolean(ROOM_FLOOR_COLORED_OR_TEXTURED, defaultPreferences.isRoomFloorColoredOrTextured()));\n        try {\n            setWallPattern(patternsCatalog.getPattern(preferences.get(WALL_PATTERN, defaultPreferences.getWallPattern().getName())));\n        } catch (IllegalArgumentException ex) {\n            // Ensure wall pattern always exists even if new patterns are added in future versions\n            setWallPattern(defaultPreferences.getWallPattern());\n        }\n        setNewWallThickness(preferences.getFloat(NEW_WALL_THICKNESS, defaultPreferences.getNewWallThickness()));\n        setNewWallHeight(preferences.getFloat(NEW_WALL_HEIGHT, defaultPreferences.getNewWallHeight()));\n        setNewFloorThickness(preferences.getFloat(NEW_FLOOR_THICKNESS, defaultPreferences.getNewFloorThickness()));\n        setAutoSaveDelayForRecovery(preferences.getInt(AUTO_SAVE_DELAY_FOR_RECOVERY, defaultPreferences.getAutoSaveDelayForRecovery()));\n        setCurrency(defaultPreferences.getCurrency());\n        // Read recent homes list\n        List\u003cString\u003e recentHomes \u003d new ArrayList\u003cString\u003e();\n        for (int i \u003d 1; i \u003c\u003d getRecentHomesMaxCount(); i++) {\n            String recentHome \u003d preferences.get(RECENT_HOMES + i, null);\n            if (recentHome !\u003d null) {\n                recentHomes.add(recentHome);\n            }\n        }\n        setRecentHomes(recentHomes);\n        // Read ignored action tips\n        for (int i \u003d 1; ; i++) {\n            String ignoredActionTip \u003d preferences.get(IGNORED_ACTION_TIP + i, \"\");\n            if (ignoredActionTip.length() \u003d\u003d 0) {\n                break;\n            } else {\n                this.ignoredActionTips.put(ignoredActionTip, true);\n            }\n        }\n        // Get default auto completion strings\n        for (String property : defaultPreferences.getAutoCompletedProperties()) {\n            setAutoCompletionStrings(property, defaultPreferences.getAutoCompletionStrings(property));\n        }\n        // Read auto completion strings list\n        for (int i \u003d 1; ; i++) {\n            String autoCompletionProperty \u003d preferences.get(AUTO_COMPLETION_PROPERTY + i, null);\n            String autoCompletionStrings \u003d preferences.get(AUTO_COMPLETION_STRINGS + i, null);\n            if (autoCompletionProperty !\u003d null \u0026\u0026 autoCompletionStrings !\u003d null) {\n                setAutoCompletionStrings(autoCompletionProperty, Arrays.asList(autoCompletionStrings.split(\",\")));\n            } else {\n                break;\n            }\n        }\n        addPropertyChangeListener(Property.LANGUAGE, new PropertyChangeListener() {\n\n            public void propertyChange(PropertyChangeEvent ev) {\n                // Update catalogs with new default locale\n                updateFurnitureDefaultCatalog(catalogsLoader, FileUserPreferences.this.updater);\n                updateTexturesDefaultCatalog(catalogsLoader, FileUserPreferences.this.updater);\n                updateAutoCompletionStrings();\n            }\n        });\n        if (preferences !\u003d portablePreferences) {\n            // Switch to portable preferences now that all preferences are read\n            this.preferences \u003d portablePreferences;\n        } else {\n            this.preferences \u003d preferences;\n        }\n    }\n\n    /**\n     * Updates the default supported languages with languages available in plugin folder.\n     */\n    private void updateSupportedLanguages() {\n        List\u003cClassLoader\u003e resourceClassLoaders \u003d new ArrayList\u003cClassLoader\u003e();\n        String[] defaultSupportedLanguages \u003d getDefaultSupportedLanguages();\n        Set\u003cString\u003e supportedLanguages \u003d new TreeSet\u003cString\u003e(Arrays.asList(defaultSupportedLanguages));\n        File[] languageLibrariesPluginFolders \u003d getLanguageLibrariesPluginFolders();\n        if (languageLibrariesPluginFolders !\u003d null) {\n            for (File languageLibrariesPluginFolder : languageLibrariesPluginFolders) {\n                // Try to load sh3l files from language plugin folder\n                File[] pluginLanguageLibraryFiles \u003d languageLibrariesPluginFolder.listFiles(new FileFilter() {\n\n                    public boolean accept(File pathname) {\n                        return pathname.isFile();\n                    }\n                });\n                if (pluginLanguageLibraryFiles !\u003d null) {\n                    // Treat language files in reverse order so file named with a date or a version\n                    // will be taken into account from most recent to least recent\n                    Arrays.sort(pluginLanguageLibraryFiles, Collections.reverseOrder());\n                    for (File pluginLanguageLibraryFile : pluginLanguageLibraryFiles) {\n                        try {\n                            Set\u003cString\u003e languages \u003d getLanguages(pluginLanguageLibraryFile);\n                            if (!languages.isEmpty()) {\n                                supportedLanguages.addAll(languages);\n                                URL pluginFurnitureCatalogUrl \u003d pluginLanguageLibraryFile.toURI().toURL();\n                                resourceClassLoaders.add(new URLClassLoader(new URL[] { pluginFurnitureCatalogUrl }));\n                            }\n                        } catch (IOException ex) {\n                            // Ignore malformed files\n                        }\n                    }\n                }\n            }\n        }\n        // Give less priority to default class loader\n        resourceClassLoaders.addAll(super.getResourceClassLoaders());\n        this.resourceClassLoaders \u003d Collections.unmodifiableList(resourceClassLoaders);\n        if (defaultSupportedLanguages.length \u003c supportedLanguages.size()) {\n            setSupportedLanguages(supportedLanguages.toArray(new String[supportedLanguages.size()]));\n        }\n    }\n\n    /**\n     * Returns the languages included in the given language library file.\n     */\n    private Set\u003cString\u003e getLanguages(File languageLibraryFile) throws IOException {\n        Set\u003cString\u003e languages \u003d new LinkedHashSet\u003cString\u003e();\n        ZipInputStream zipIn \u003d null;\n        try {\n            // Search if zip file contains some *_xx.properties or *_xx_xx.properties files\n            zipIn \u003d new ZipInputStream(new FileInputStream(languageLibraryFile));\n            for (ZipEntry entry; (entry \u003d zipIn.getNextEntry()) !\u003d null; ) {\n                String zipEntryName \u003d entry.getName();\n                int underscoreIndex \u003d zipEntryName.indexOf(\u0027_\u0027);\n                if (underscoreIndex !\u003d -1) {\n                    int extensionIndex \u003d zipEntryName.lastIndexOf(\".properties\");\n                    if (extensionIndex !\u003d -1 \u0026\u0026 underscoreIndex \u003c extensionIndex - 2) {\n                        String language \u003d zipEntryName.substring(underscoreIndex + 1, extensionIndex);\n                        int countrySeparator \u003d language.indexOf(\u0027_\u0027);\n                        if (countrySeparator \u003d\u003d 2 \u0026\u0026 language.length() \u003d\u003d 5) {\n                            languages.add(language);\n                        } else if (language.length() \u003d\u003d 2) {\n                            languages.add(language);\n                        }\n                    }\n                }\n            }\n            return languages;\n        } finally {\n            if (zipIn !\u003d null) {\n                zipIn.close();\n            }\n        }\n    }\n\n    /**\n     * Returns the default class loader of user preferences and the class loaders that\n     * give access to resources in language libraries plugin folder.\n     */\n    @Override\n    public List\u003cClassLoader\u003e getResourceClassLoaders() {\n        return this.resourceClassLoaders;\n    }\n\n    /**\n     * Reloads furniture default catalogs.\n     */\n    private void updateFurnitureDefaultCatalog(Executor furnitureCatalogLoader, final Executor updater) {\n        // Delete default pieces of current furniture catalog\n        final FurnitureCatalog furnitureCatalog \u003d getFurnitureCatalog();\n        for (FurnitureCategory category : furnitureCatalog.getCategories()) {\n            for (CatalogPieceOfFurniture piece : category.getFurniture()) {\n                if (!piece.isModifiable()) {\n                    furnitureCatalog.delete(piece);\n                }\n            }\n        }\n        // Read default furniture catalog\n        furnitureCatalogLoader.execute(new Runnable() {\n\n            public void run() {\n                // Fill default furniture catalog\n                DefaultFurnitureCatalog defaultFurnitureCatalog \u003d new DefaultFurnitureCatalog(FileUserPreferences.this, getFurnitureLibrariesPluginFolders());\n                for (final FurnitureCategory category : defaultFurnitureCatalog.getCategories()) {\n                    for (final CatalogPieceOfFurniture piece : category.getFurniture()) {\n                        updater.execute(new Runnable() {\n\n                            public void run() {\n                                furnitureCatalog.add(category, piece);\n                            }\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Reloads textures default catalog.\n     */\n    private void updateTexturesDefaultCatalog(Executor texturesCatalogLoader, final Executor updater) {\n        // Delete default textures of current textures catalog\n        final TexturesCatalog texturesCatalog \u003d getTexturesCatalog();\n        for (TexturesCategory category : texturesCatalog.getCategories()) {\n            for (CatalogTexture texture : category.getTextures()) {\n                if (!texture.isModifiable()) {\n                    texturesCatalog.delete(texture);\n                }\n            }\n        }\n        // Read default textures catalog\n        texturesCatalogLoader.execute(new Runnable() {\n\n            public void run() {\n                TexturesCatalog defaultTexturesCatalog \u003d new DefaultTexturesCatalog(FileUserPreferences.this, getTexturesLibrariesPluginFolders());\n                for (final TexturesCategory category : defaultTexturesCatalog.getCategories()) {\n                    for (final CatalogTexture texture : category.getTextures()) {\n                        updater.execute(new Runnable() {\n\n                            public void run() {\n                                texturesCatalog.add(category, texture);\n                            }\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Adds to auto completion strings the default strings of the new chosen language.\n     */\n    private void updateAutoCompletionStrings() {\n        DefaultUserPreferences defaultPreferences \u003d new DefaultUserPreferences(false, this);\n        for (String property : defaultPreferences.getAutoCompletedProperties()) {\n            for (String autoCompletionString : defaultPreferences.getAutoCompletionStrings(property)) {\n                addAutoCompletionString(property, autoCompletionString);\n            }\n        }\n    }\n\n    /**\n     * Read modifiable furniture catalog from preferences.\n     */\n    private void readModifiableFurnitureCatalog(Preferences preferences) {\n        for (int i \u003d 1; ; i++) {\n            String name \u003d preferences.get(FURNITURE_NAME + i, null);\n            if (name \u003d\u003d null) {\n                // Stop the loop when a key furnitureName# doesn\u0027t exist\n                break;\n            }\n            String category \u003d preferences.get(FURNITURE_CATEGORY + i, \"\");\n            Content icon \u003d getContent(preferences, FURNITURE_ICON + i);\n            Content model \u003d getContent(preferences, FURNITURE_MODEL + i);\n            float width \u003d preferences.getFloat(FURNITURE_WIDTH + i, 0.1f);\n            float depth \u003d preferences.getFloat(FURNITURE_DEPTH + i, 0.1f);\n            float height \u003d preferences.getFloat(FURNITURE_HEIGHT + i, 0.1f);\n            boolean movable \u003d preferences.getBoolean(FURNITURE_MOVABLE + i, false);\n            boolean doorOrWindow \u003d preferences.getBoolean(FURNITURE_DOOR_OR_WINDOW + i, false);\n            float elevation \u003d preferences.getFloat(FURNITURE_ELEVATION + i, 0);\n            String colorString \u003d preferences.get(FURNITURE_COLOR + i, null);\n            Integer color \u003d colorString !\u003d null ? Integer.valueOf(colorString) : null;\n            float[][] modelRotation \u003d getModelRotation(preferences, FURNITURE_MODEL_ROTATION + i);\n            String staircaseCutOutShape \u003d preferences.get(FURNITURE_STAIRCASE_CUT_OUT_SHAPE + i, null);\n            boolean backFaceShown \u003d preferences.getBoolean(FURNITURE_BACK_FACE_SHOWN + i, false);\n            float iconYaw \u003d preferences.getFloat(FURNITURE_ICON_YAW + i, 0);\n            boolean proportional \u003d preferences.getBoolean(FURNITURE_PROPORTIONAL + i, true);\n            final FurnitureCategory pieceCategory \u003d new FurnitureCategory(category);\n            final CatalogPieceOfFurniture piece;\n            if (doorOrWindow) {\n                piece \u003d new CatalogDoorOrWindow(name, icon, model, width, depth, height, elevation, movable, 1, 0, new Sash[0], color, modelRotation, backFaceShown, iconYaw, proportional);\n            } else {\n                piece \u003d new CatalogPieceOfFurniture(name, icon, model, width, depth, height, elevation, movable, staircaseCutOutShape, color, modelRotation, backFaceShown, iconYaw, proportional);\n            }\n            getFurnitureCatalog().add(pieceCategory, piece);\n        }\n    }\n\n    /**\n     * Returns model rotation parsed from key value.\n     */\n    private float[][] getModelRotation(Preferences preferences, String key) {\n        String modelRotationString \u003d preferences.get(key, null);\n        if (modelRotationString \u003d\u003d null) {\n            return new float[][] { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };\n        } else {\n            String[] values \u003d modelRotationString.split(\" \", 9);\n            if (values.length !\u003d 9) {\n                return new float[][] { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };\n            } else {\n                try {\n                    return new float[][] { { Float.parseFloat(values[0]), Float.parseFloat(values[1]), Float.parseFloat(values[2]) }, { Float.parseFloat(values[3]), Float.parseFloat(values[4]), Float.parseFloat(values[5]) }, { Float.parseFloat(values[6]), Float.parseFloat(values[7]), Float.parseFloat(values[8]) } };\n                } catch (NumberFormatException ex) {\n                    return new float[][] { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns a content instance from the resource file value of key.\n     */\n    private Content getContent(Preferences preferences, String key) {\n        String content \u003d preferences.get(key, null);\n        if (content !\u003d null) {\n            try {\n                String preferencesFolderUrl \u003d getPreferencesFolder().toURI().toURL().toString();\n                if (content.startsWith(preferencesFolderUrl) || content.startsWith(\"jar:\" + preferencesFolderUrl)) {\n                    return new URLContent(new URL(content));\n                } else {\n                    return new URLContent(new URL(content.replace(\"file:\", preferencesFolderUrl)));\n                }\n            } catch (IOException ex) {\n                // Return DUMMY_CONTENT for incorrect URL\n            }\n        }\n        return DUMMY_CONTENT;\n    }\n\n    /**\n     * Read modifiable textures catalog from preferences.\n     */\n    private void readModifiableTexturesCatalog(Preferences preferences) {\n        for (int i \u003d 1; ; i++) {\n            String name \u003d preferences.get(TEXTURE_NAME + i, null);\n            if (name \u003d\u003d null) {\n                // Stop the loop when a key textureName# doesn\u0027t exist\n                break;\n            }\n            String category \u003d preferences.get(TEXTURE_CATEGORY + i, \"\");\n            Content image \u003d getContent(preferences, TEXTURE_IMAGE + i);\n            float width \u003d preferences.getFloat(TEXTURE_WIDTH + i, 0.1f);\n            float height \u003d preferences.getFloat(TEXTURE_HEIGHT + i, 0.1f);\n            final TexturesCategory textureCategory \u003d new TexturesCategory(category);\n            final CatalogTexture texture \u003d new CatalogTexture(name, image, width, height, true);\n            getTexturesCatalog().add(textureCategory, texture);\n        }\n    }\n\n    /**\n     * Writes user preferences in current user preferences in system.\n     */\n    @Override\n    public void write() throws RecorderException {\n        Preferences preferences \u003d getPreferences();\n        writeModifiableFurnitureCatalog(preferences);\n        writeModifiableTexturesCatalog(preferences);\n        // Write other preferences\n        preferences.put(LANGUAGE, getLanguage());\n        preferences.put(UNIT, getLengthUnit().name());\n        preferences.putBoolean(FURNITURE_CATALOG_VIEWED_IN_TREE, isFurnitureCatalogViewedInTree());\n        preferences.putBoolean(NAVIGATION_PANEL_VISIBLE, isNavigationPanelVisible());\n        preferences.putBoolean(MAGNETISM_ENABLED, isMagnetismEnabled());\n        preferences.putBoolean(RULERS_VISIBLE, isRulersVisible());\n        preferences.putBoolean(GRID_VISIBLE, isGridVisible());\n        preferences.putBoolean(FURNITURE_VIEWED_FROM_TOP, isFurnitureViewedFromTop());\n        preferences.putBoolean(ROOM_FLOOR_COLORED_OR_TEXTURED, isRoomFloorColoredOrTextured());\n        preferences.put(WALL_PATTERN, getWallPattern().getName());\n        preferences.putFloat(NEW_WALL_THICKNESS, getNewWallThickness());\n        preferences.putFloat(NEW_WALL_HEIGHT, getNewWallHeight());\n        preferences.putFloat(NEW_FLOOR_THICKNESS, getNewFloorThickness());\n        preferences.putInt(AUTO_SAVE_DELAY_FOR_RECOVERY, getAutoSaveDelayForRecovery());\n        // Write recent homes list\n        int i \u003d 1;\n        for (Iterator\u003cString\u003e it \u003d getRecentHomes().iterator(); it.hasNext() \u0026\u0026 i \u003c\u003d getRecentHomesMaxCount(); i++) {\n            preferences.put(RECENT_HOMES + i, it.next());\n        }\n        // Remove obsolete keys\n        for (; i \u003c\u003d getRecentHomesMaxCount(); i++) {\n            preferences.remove(RECENT_HOMES + i);\n        }\n        // Write ignored action tips\n        i \u003d 1;\n        for (Iterator\u003cMap.Entry\u003cString, Boolean\u003e\u003e it \u003d this.ignoredActionTips.entrySet().iterator(); it.hasNext(); ) {\n            Entry\u003cString, Boolean\u003e ignoredActionTipEntry \u003d it.next();\n            if (ignoredActionTipEntry.getValue()) {\n                preferences.put(IGNORED_ACTION_TIP + i++, ignoredActionTipEntry.getKey());\n            }\n        }\n        // Remove obsolete keys\n        for (; i \u003c\u003d this.ignoredActionTips.size(); i++) {\n            preferences.remove(IGNORED_ACTION_TIP + i);\n        }\n        // Write auto completion strings lists\n        i \u003d 1;\n        for (String property : getAutoCompletedProperties()) {\n            StringBuilder autoCompletionStrings \u003d new StringBuilder();\n            Iterator\u003cString\u003e it \u003d getAutoCompletionStrings(property).iterator();\n            for (int j \u003d 0; j \u003c 1000 \u0026\u0026 it.hasNext(); j++) {\n                String autoCompletionString \u003d it.next();\n                // As strings are comma separated, accept only the ones without a comma\n                if (autoCompletionString.indexOf(\u0027,\u0027) \u003c 0) {\n                    if (autoCompletionStrings.length() \u003e 0) {\n                        autoCompletionStrings.append(\",\");\n                    }\n                    autoCompletionStrings.append(autoCompletionString);\n                }\n            }\n            preferences.put(AUTO_COMPLETION_PROPERTY + i, property);\n            preferences.put(AUTO_COMPLETION_STRINGS + i++, autoCompletionStrings.toString());\n        }\n        for (; preferences.get(AUTO_COMPLETION_PROPERTY + i, null) !\u003d null; i++) {\n            preferences.remove(AUTO_COMPLETION_PROPERTY + i);\n            preferences.remove(AUTO_COMPLETION_STRINGS + i);\n        }\n        try {\n            // Write preferences\n            preferences.flush();\n        } catch (BackingStoreException ex) {\n            throw new RecorderException(\"Couldn\u0027t write preferences\", ex);\n        }\n    }\n\n    /**\n     * Writes modifiable furniture in \u003ccode\u003epreferences\u003c/code\u003e.\n     */\n    private void writeModifiableFurnitureCatalog(Preferences preferences) throws RecorderException {\n        final Set\u003cURL\u003e furnitureContentURLs \u003d new HashSet\u003cURL\u003e();\n        int i \u003d 1;\n        for (FurnitureCategory category : getFurnitureCatalog().getCategories()) {\n            for (CatalogPieceOfFurniture piece : category.getFurniture()) {\n                if (piece.isModifiable()) {\n                    preferences.put(FURNITURE_NAME + i, piece.getName());\n                    preferences.put(FURNITURE_CATEGORY + i, category.getName());\n                    putContent(preferences, FURNITURE_ICON + i, piece.getIcon(), FURNITURE_CONTENT_PREFIX, furnitureContentURLs);\n                    putContent(preferences, FURNITURE_MODEL + i, piece.getModel(), FURNITURE_CONTENT_PREFIX, furnitureContentURLs);\n                    preferences.putFloat(FURNITURE_WIDTH + i, piece.getWidth());\n                    preferences.putFloat(FURNITURE_DEPTH + i, piece.getDepth());\n                    preferences.putFloat(FURNITURE_HEIGHT + i, piece.getHeight());\n                    preferences.putBoolean(FURNITURE_MOVABLE + i, piece.isMovable());\n                    preferences.putBoolean(FURNITURE_DOOR_OR_WINDOW + i, piece.isDoorOrWindow());\n                    preferences.putFloat(FURNITURE_ELEVATION + i, piece.getElevation());\n                    if (piece.getColor() \u003d\u003d null) {\n                        preferences.remove(FURNITURE_COLOR + i);\n                    } else {\n                        preferences.put(FURNITURE_COLOR + i, String.valueOf(piece.getColor()));\n                    }\n                    float[][] modelRotation \u003d piece.getModelRotation();\n                    preferences.put(FURNITURE_MODEL_ROTATION + i, floatToString(modelRotation[0][0]) + \" \" + floatToString(modelRotation[0][1]) + \" \" + floatToString(modelRotation[0][2]) + \" \" + floatToString(modelRotation[1][0]) + \" \" + floatToString(modelRotation[1][1]) + \" \" + floatToString(modelRotation[1][2]) + \" \" + floatToString(modelRotation[2][0]) + \" \" + floatToString(modelRotation[2][1]) + \" \" + floatToString(modelRotation[2][2]));\n                    if (piece.getStaircaseCutOutShape() !\u003d null) {\n                        preferences.put(FURNITURE_STAIRCASE_CUT_OUT_SHAPE + i, piece.getStaircaseCutOutShape());\n                    }\n                    preferences.putBoolean(FURNITURE_BACK_FACE_SHOWN + i, piece.isBackFaceShown());\n                    preferences.putFloat(FURNITURE_ICON_YAW + i, piece.getIconYaw());\n                    preferences.putBoolean(FURNITURE_PROPORTIONAL + i, piece.isProportional());\n                    i++;\n                }\n            }\n        }\n        // Remove obsolete keys\n        for (; preferences.get(FURNITURE_NAME + i, null) !\u003d null; i++) {\n            preferences.remove(FURNITURE_NAME + i);\n            preferences.remove(FURNITURE_CATEGORY + i);\n            preferences.remove(FURNITURE_ICON + i);\n            preferences.remove(FURNITURE_MODEL + i);\n            preferences.remove(FURNITURE_WIDTH + i);\n            preferences.remove(FURNITURE_DEPTH + i);\n            preferences.remove(FURNITURE_HEIGHT + i);\n            preferences.remove(FURNITURE_MOVABLE + i);\n            preferences.remove(FURNITURE_DOOR_OR_WINDOW + i);\n            preferences.remove(FURNITURE_ELEVATION + i);\n            preferences.remove(FURNITURE_COLOR + i);\n            preferences.remove(FURNITURE_MODEL_ROTATION + i);\n            preferences.remove(FURNITURE_STAIRCASE_CUT_OUT_SHAPE + i);\n            preferences.remove(FURNITURE_BACK_FACE_SHOWN + i);\n            preferences.remove(FURNITURE_ICON_YAW + i);\n            preferences.remove(FURNITURE_PROPORTIONAL + i);\n        }\n        deleteObsoleteContent(furnitureContentURLs, FURNITURE_CONTENT_PREFIX);\n    }\n\n    /**\n     * Returns the string value of the given float, except for -1.0, 1.0 or 0.0 where -1, 1 and 0 is returned.\n     */\n    private String floatToString(float f) {\n        if (Math.abs(f) \u003c 1E-6) {\n            return \"0\";\n        } else if (Math.abs(f - 1f) \u003c 1E-6) {\n            return \"1\";\n        } else if (Math.abs(f + 1f) \u003c 1E-6) {\n            return \"-1\";\n        } else {\n            return String.valueOf(f);\n        }\n    }\n\n    /**\n     * Writes modifiable textures catalog in \u003ccode\u003epreferences\u003c/code\u003e.\n     */\n    private void writeModifiableTexturesCatalog(Preferences preferences) throws RecorderException {\n        final Set\u003cURL\u003e texturesContentURLs \u003d new HashSet\u003cURL\u003e();\n        int i \u003d 1;\n        for (TexturesCategory category : getTexturesCatalog().getCategories()) {\n            for (CatalogTexture texture : category.getTextures()) {\n                if (texture.isModifiable()) {\n                    preferences.put(TEXTURE_NAME + i, texture.getName());\n                    preferences.put(TEXTURE_CATEGORY + i, category.getName());\n                    putContent(preferences, TEXTURE_IMAGE + i, texture.getImage(), TEXTURE_CONTENT_PREFIX, texturesContentURLs);\n                    preferences.putFloat(TEXTURE_WIDTH + i, texture.getWidth());\n                    preferences.putFloat(TEXTURE_HEIGHT + i, texture.getHeight());\n                    i++;\n                }\n            }\n        }\n        // Remove obsolete keys\n        for (; preferences.get(TEXTURE_NAME + i, null) !\u003d null; i++) {\n            preferences.remove(TEXTURE_NAME + i);\n            preferences.remove(TEXTURE_CATEGORY + i);\n            preferences.remove(TEXTURE_IMAGE + i);\n            preferences.remove(TEXTURE_WIDTH + i);\n            preferences.remove(TEXTURE_HEIGHT + i);\n        }\n        deleteObsoleteContent(texturesContentURLs, TEXTURE_CONTENT_PREFIX);\n    }\n\n    /**\n     * Writes \u003ccode\u003ekey\u003c/code\u003e \u003ccode\u003econtent\u003c/code\u003e in \u003ccode\u003epreferences\u003c/code\u003e.\n     */\n    private void putContent(Preferences preferences, String key, Content content, String contentPrefix, Set\u003cURL\u003e furnitureContentURLs) throws RecorderException {\n        if (content instanceof TemporaryURLContent) {\n            URLContent urlContent \u003d (URLContent) content;\n            URLContent copiedContent;\n            if (urlContent.isJAREntry()) {\n                try {\n                    // If content is a JAR entry copy the content of its URL and rebuild a new URL content from\n                    // this copy and the entry name\n                    copiedContent \u003d copyToPreferencesURLContent(new URLContent(urlContent.getJAREntryURL()), contentPrefix);\n                    copiedContent \u003d new URLContent(new URL(\"jar:\" + copiedContent.getURL() + \"!/\" + urlContent.getJAREntryName()));\n                } catch (MalformedURLException ex) {\n                    // Shouldn\u0027t happen\n                    throw new RecorderException(\"Can\u0027t build URL\", ex);\n                }\n            } else {\n                copiedContent \u003d copyToPreferencesURLContent(urlContent, contentPrefix);\n            }\n            putContent(preferences, key, copiedContent, contentPrefix, furnitureContentURLs);\n        } else if (content instanceof URLContent) {\n            URLContent urlContent \u003d (URLContent) content;\n            try {\n                preferences.put(key, urlContent.getURL().toString().replace(getPreferencesFolder().toURI().toURL().toString(), \"file:\"));\n            } catch (IOException ex) {\n                throw new RecorderException(\"Can\u0027t save content\", ex);\n            }\n            // Add to furnitureContentURLs the URL to the application file\n            if (urlContent.isJAREntry()) {\n                furnitureContentURLs.add(urlContent.getJAREntryURL());\n            } else {\n                furnitureContentURLs.add(urlContent.getURL());\n            }\n        } else {\n            putContent(preferences, key, copyToPreferencesURLContent(content, contentPrefix), contentPrefix, furnitureContentURLs);\n        }\n    }\n\n    /**\n     * Returns a content object that references a copy of \u003ccode\u003econtent\u003c/code\u003e in\n     * user preferences folder.\n     */\n    private URLContent copyToPreferencesURLContent(Content content, String contentPrefix) throws RecorderException {\n        InputStream tempIn \u003d null;\n        OutputStream tempOut \u003d null;\n        try {\n            File preferencesFile \u003d createPreferencesFile(contentPrefix);\n            tempIn \u003d content.openStream();\n            tempOut \u003d new FileOutputStream(preferencesFile);\n            byte[] buffer \u003d new byte[8192];\n            int size;\n            while ((size \u003d tempIn.read(buffer)) !\u003d -1) {\n                tempOut.write(buffer, 0, size);\n            }\n            return new URLContent(preferencesFile.toURI().toURL());\n        } catch (IOException ex) {\n            throw new RecorderException(\"Can\u0027t save content\", ex);\n        } finally {\n            try {\n                if (tempIn !\u003d null) {\n                    tempIn.close();\n                }\n                if (tempOut !\u003d null) {\n                    tempOut.close();\n                }\n            } catch (IOException ex) {\n                throw new RecorderException(\"Can\u0027t close files\", ex);\n            }\n        }\n    }\n\n    /**\n     * Returns the folder where language libraries files must be placed\n     * or \u003ccode\u003enull\u003c/code\u003e if that folder can\u0027t be retrieved.\n     */\n    private File[] getLanguageLibrariesPluginFolders() {\n        try {\n            return getApplicationSubfolders(LANGUAGE_LIBRARIES_PLUGIN_SUB_FOLDER);\n        } catch (IOException ex) {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the folder where furniture catalog files must be placed\n     * or \u003ccode\u003enull\u003c/code\u003e if that folder can\u0027t be retrieved.\n     */\n    private File[] getFurnitureLibrariesPluginFolders() {\n        try {\n            return getApplicationSubfolders(FURNITURE_LIBRARIES_PLUGIN_SUB_FOLDER);\n        } catch (IOException ex) {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the folder where texture catalog files must be placed\n     * or \u003ccode\u003enull\u003c/code\u003e if that folder can\u0027t be retrieved.\n     */\n    private File[] getTexturesLibrariesPluginFolders() {\n        try {\n            return getApplicationSubfolders(TEXTURES_LIBRARIES_PLUGIN_SUB_FOLDER);\n        } catch (IOException ex) {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the first Sweet Home 3D application folder.\n     */\n    public File getApplicationFolder() throws IOException {\n        File[] applicationFolders \u003d getApplicationFolders();\n        if (applicationFolders.length \u003d\u003d 0) {\n            throw new IOException(\"No application folder defined\");\n        } else {\n            return applicationFolders[0];\n        }\n    }\n\n    /**\n     * Returns Sweet Home 3D application folders.\n     */\n    public File[] getApplicationFolders() throws IOException {\n        if (this.applicationFolders !\u003d null) {\n            return this.applicationFolders;\n        } else {\n            return new File[] { OperatingSystem.getDefaultApplicationFolder() };\n        }\n    }\n\n    /**\n     * Returns subfolders of Sweet Home 3D application folders of a given name.\n     */\n    public File[] getApplicationSubfolders(String subfolder) throws IOException {\n        File[] applicationFolders \u003d getApplicationFolders();\n        File[] applicationSubfolders \u003d new File[applicationFolders.length];\n        for (int i \u003d 0; i \u003c applicationFolders.length; i++) {\n            applicationSubfolders[i] \u003d new File(applicationFolders[i], subfolder);\n        }\n        return applicationSubfolders;\n    }\n\n    /**\n     * Returns a new file in user preferences folder.\n     */\n    private File createPreferencesFile(String filePrefix) throws IOException {\n        checkPreferencesFolder();\n        // Return a new file in preferences folder\n        return File.createTempFile(filePrefix, \".pref\", getPreferencesFolder());\n    }\n\n    /**\n     * Creates preferences folder and its sub folders if it doesn\u0027t exist.\n     */\n    private void checkPreferencesFolder() throws IOException {\n        File preferencesFolder \u003d getPreferencesFolder();\n        // Create preferences folder if it doesn\u0027t exist\n        if (!preferencesFolder.exists() \u0026\u0026 !preferencesFolder.mkdirs()) {\n            throw new IOException(\"Couldn\u0027t create \" + preferencesFolder);\n        }\n        checkPreferencesSubFolder(getLanguageLibrariesPluginFolders());\n        checkPreferencesSubFolder(getFurnitureLibrariesPluginFolders());\n        checkPreferencesSubFolder(getTexturesLibrariesPluginFolders());\n    }\n\n    /**\n     * Creates the first folder in the given folders.\n     */\n    private void checkPreferencesSubFolder(File[] librariesPluginFolders) {\n        if (librariesPluginFolders !\u003d null \u0026\u0026 librariesPluginFolders.length \u003e 0 \u0026\u0026 !librariesPluginFolders[0].exists()) {\n            librariesPluginFolders[0].mkdirs();\n        }\n    }\n\n    /**\n     * Deletes from application folder the content files starting by \u003ccode\u003econtentPrefix\u003c/code\u003e\n     * that don\u0027t belong to \u003ccode\u003econtentURLs\u003c/code\u003e.\n     */\n    private void deleteObsoleteContent(final Set\u003cURL\u003e contentURLs, final String contentPrefix) throws RecorderException {\n        // Search obsolete contents\n        File applicationFolder;\n        try {\n            applicationFolder \u003d getPreferencesFolder();\n        } catch (IOException ex) {\n            throw new RecorderException(\"Can\u0027t access to application folder\");\n        }\n        File[] obsoleteContentFiles \u003d applicationFolder.listFiles(new FileFilter() {\n\n            public boolean accept(File applicationFile) {\n                try {\n                    URL toURL \u003d applicationFile.toURI().toURL();\n                    return applicationFile.getName().startsWith(contentPrefix) \u0026\u0026 !contentURLs.contains(toURL);\n                } catch (MalformedURLException ex) {\n                    return false;\n                }\n            }\n        });\n        if (obsoleteContentFiles !\u003d null) {\n            // Delete obsolete contents at program exit to ensure removed contents\n            // can still be saved in homes that reference them\n            for (File file : obsoleteContentFiles) {\n                file.deleteOnExit();\n            }\n        }\n    }\n\n    /**\n     * Returns the folder where files depending on preferences are stored.\n     */\n    private File getPreferencesFolder() throws IOException {\n        if (this.preferencesFolder !\u003d null) {\n            return this.preferencesFolder;\n        } else {\n            return OperatingSystem.getDefaultApplicationFolder();\n        }\n    }\n\n    /**\n     * Returns default Java preferences for current system user.\n     * Caution : This method is called once in constructor so overriding implementations\n     * shouldn\u0027t be based on the state of their fields.\n     */\n    protected Preferences getPreferences() {\n        if (this.preferences !\u003d null) {\n            return this.preferences;\n        } else {\n            return Preferences.userNodeForPackage(FileUserPreferences.class);\n        }\n    }\n\n    /**\n     * Sets which action tip should be ignored.\n     */\n    @Override\n    public void setActionTipIgnored(String actionKey) {\n        this.ignoredActionTips.put(actionKey, true);\n        super.setActionTipIgnored(actionKey);\n    }\n\n    /**\n     * Returns whether an action tip should be ignored or not.\n     */\n    @Override\n    public boolean isActionTipIgnored(String actionKey) {\n        Boolean ignoredActionTip \u003d this.ignoredActionTips.get(actionKey);\n        return ignoredActionTip !\u003d null \u0026\u0026 ignoredActionTip.booleanValue();\n    }\n\n    /**\n     * Resets the display flag of action tips.\n     */\n    @Override\n    public void resetIgnoredActionTips() {\n        for (Iterator\u003cMap.Entry\u003cString, Boolean\u003e\u003e it \u003d this.ignoredActionTips.entrySet().iterator(); it.hasNext(); ) {\n            Entry\u003cString, Boolean\u003e ignoredActionTipEntry \u003d it.next();\n            ignoredActionTipEntry.setValue(false);\n        }\n        super.resetIgnoredActionTips();\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given language library exists in the first\n     * language libraries folder.\n     */\n    public boolean languageLibraryExists(String name) throws RecorderException {\n        File[] languageLibrariesPluginFolders \u003d getLanguageLibrariesPluginFolders();\n        if (languageLibrariesPluginFolders \u003d\u003d null || languageLibrariesPluginFolders.length \u003d\u003d 0) {\n            throw new RecorderException(\"Can\u0027t access to language libraries plugin folder\");\n        } else {\n            String libraryFileName \u003d new File(name).getName();\n            return new File(languageLibrariesPluginFolders[0], libraryFileName).exists();\n        }\n    }\n\n    /**\n     * Adds \u003ccode\u003elanguageLibraryName\u003c/code\u003e to the first language libraries folder\n     * to make the language library it contains available to supported languages.\n     */\n    public void addLanguageLibrary(String languageLibraryName) throws RecorderException {\n        try {\n            File[] languageLibrariesPluginFolders \u003d getLanguageLibrariesPluginFolders();\n            if (languageLibrariesPluginFolders \u003d\u003d null || languageLibrariesPluginFolders.length \u003d\u003d 0) {\n                throw new RecorderException(\"Can\u0027t access to language libraries plugin folder\");\n            }\n            File languageLibraryFile \u003d new File(languageLibraryName);\n            copyToLibraryFolder(languageLibraryFile, languageLibrariesPluginFolders[0]);\n            updateSupportedLanguages();\n        } catch (IOException ex) {\n            throw new RecorderException(\"Can\u0027t write \" + languageLibraryName + \" in language libraries plugin folder\", ex);\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given furniture library file exists in the first\n     * furniture libraries folder.\n     * @param name the name of the resource to check\n     */\n    @Override\n    public boolean furnitureLibraryExists(String name) throws RecorderException {\n        File[] furnitureLibrariesPluginFolders \u003d getFurnitureLibrariesPluginFolders();\n        if (furnitureLibrariesPluginFolders \u003d\u003d null || furnitureLibrariesPluginFolders.length \u003d\u003d 0) {\n            throw new RecorderException(\"Can\u0027t access to furniture libraries plugin folder\");\n        } else {\n            String libraryFileName \u003d new File(name).getName();\n            return new File(furnitureLibrariesPluginFolders[0], libraryFileName).exists();\n        }\n    }\n\n    /**\n     * Adds the file \u003ccode\u003efurnitureLibraryName\u003c/code\u003e to the first furniture libraries folder\n     * to make the furniture library available to catalog.\n     */\n    @Override\n    public void addFurnitureLibrary(String furnitureLibraryName) throws RecorderException {\n        try {\n            File[] furnitureLibrariesPluginFolders \u003d getFurnitureLibrariesPluginFolders();\n            if (furnitureLibrariesPluginFolders \u003d\u003d null || furnitureLibrariesPluginFolders.length \u003d\u003d 0) {\n                throw new RecorderException(\"Can\u0027t access to furniture libraries plugin folder\");\n            }\n            copyToLibraryFolder(new File(furnitureLibraryName), furnitureLibrariesPluginFolders[0]);\n            updateFurnitureDefaultCatalog(this.catalogsLoader, this.updater);\n        } catch (IOException ex) {\n            throw new RecorderException(\"Can\u0027t write \" + furnitureLibraryName + \" in furniture libraries plugin folder\", ex);\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given textures library file exists in the first textures libraries folder.\n     * @param name the name of the resource to check\n     */\n    @Override\n    public boolean texturesLibraryExists(String name) throws RecorderException {\n        File[] texturesLibrariesPluginFolders \u003d getTexturesLibrariesPluginFolders();\n        if (texturesLibrariesPluginFolders \u003d\u003d null || texturesLibrariesPluginFolders.length \u003d\u003d 0) {\n            throw new RecorderException(\"Can\u0027t access to textures libraries plugin folder\");\n        } else {\n            String libraryFileName \u003d new File(name).getName();\n            return new File(texturesLibrariesPluginFolders[0], libraryFileName).exists();\n        }\n    }\n\n    /**\n     * Adds the file \u003ccode\u003etexturesLibraryName\u003c/code\u003e to the first textures libraries folder\n     * to make the textures library available to catalog.\n     */\n    @Override\n    public void addTexturesLibrary(String texturesLibraryName) throws RecorderException {\n        try {\n            File[] texturesLibrariesPluginFolders \u003d getTexturesLibrariesPluginFolders();\n            if (texturesLibrariesPluginFolders \u003d\u003d null || texturesLibrariesPluginFolders.length \u003d\u003d 0) {\n                throw new RecorderException(\"Can\u0027t access to textures libraries plugin folder\");\n            }\n            copyToLibraryFolder(new File(texturesLibraryName), texturesLibrariesPluginFolders[0]);\n            updateTexturesDefaultCatalog(this.catalogsLoader, this.updater);\n        } catch (IOException ex) {\n            throw new RecorderException(\"Can\u0027t write \" + texturesLibraryName + \" in textures libraries plugin folder\", ex);\n        }\n    }\n\n    /**\n     * Copies a library file to a folder.\n     */\n    private void copyToLibraryFolder(File libraryFile, File folder) throws IOException {\n        String libraryFileName \u003d libraryFile.getName();\n        File destinationFile \u003d new File(folder, libraryFileName);\n        if (destinationFile.exists()) {\n            // Delete file to reinitialize handlers\n            destinationFile.delete();\n        }\n        InputStream tempIn \u003d null;\n        OutputStream tempOut \u003d null;\n        try {\n            tempIn \u003d new BufferedInputStream(new FileInputStream(libraryFile));\n            // Create folder if it doesn\u0027t exist\n            folder.mkdirs();\n            tempOut \u003d new FileOutputStream(destinationFile);\n            byte[] buffer \u003d new byte[8192];\n            int size;\n            while ((size \u003d tempIn.read(buffer)) !\u003d -1) {\n                tempOut.write(buffer, 0, size);\n            }\n        } finally {\n            if (tempIn !\u003d null) {\n                tempIn.close();\n            }\n            if (tempOut !\u003d null) {\n                tempOut.close();\n            }\n        }\n    }\n\n    /**\n     * Preferences based on the \u003ccode\u003epreferences.xml\u003c/code\u003e file\n     * stored in a preferences folder.\n     * @author Emmanuel Puybaret\n     */\n    private class PortablePreferences extends AbstractPreferences {\n\n        private static final String PREFERENCES_FILE \u003d \"preferences.xml\";\n\n        private Properties preferencesProperties;\n\n        private boolean exist;\n\n        private PortablePreferences() {\n            super(null, \"\");\n            this.preferencesProperties \u003d new Properties();\n            this.exist \u003d readPreferences();\n        }\n\n        public boolean exist() {\n            return this.exist;\n        }\n\n        @Override\n        protected void syncSpi() throws BackingStoreException {\n            this.preferencesProperties.clear();\n            this.exist \u003d readPreferences();\n        }\n\n        @Override\n        protected void removeSpi(String key) {\n            this.preferencesProperties.remove(key);\n        }\n\n        @Override\n        protected void putSpi(String key, String value) {\n            this.preferencesProperties.put(key, value);\n        }\n\n        @Override\n        protected String[] keysSpi() throws BackingStoreException {\n            return this.preferencesProperties.keySet().toArray(new String[0]);\n        }\n\n        @Override\n        protected String getSpi(String key) {\n            return (String) this.preferencesProperties.get(key);\n        }\n\n        @Override\n        protected void flushSpi() throws BackingStoreException {\n            try {\n                writePreferences();\n            } catch (IOException ex) {\n                throw new BackingStoreException(ex);\n            }\n        }\n\n        @Override\n        protected void removeNodeSpi() throws BackingStoreException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        protected String[] childrenNamesSpi() throws BackingStoreException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        protected AbstractPreferences childSpi(String name) {\n            throw new UnsupportedOperationException();\n        }\n\n        /**\n         * Reads user preferences.\n         */\n        private boolean readPreferences() {\n            InputStream in \u003d null;\n            try {\n                in \u003d new FileInputStream(new File(getPreferencesFolder(), PREFERENCES_FILE));\n                this.preferencesProperties.loadFromXML(in);\n                return true;\n            } catch (IOException ex) {\n                // Preferences don\u0027t exist\n                return false;\n            } finally {\n                try {\n                    if (in !\u003d null) {\n                        in.close();\n                    }\n                } catch (IOException ex) {\n                    // Let default preferences unchanged\n                }\n            }\n        }\n\n        /**\n         * Writes user preferences.\n         */\n        private void writePreferences() throws IOException {\n            OutputStream out \u003d null;\n            try {\n                checkPreferencesFolder();\n                out \u003d new FileOutputStream(new File(getPreferencesFolder(), PREFERENCES_FILE));\n                this.preferencesProperties.storeToXML(out, \"Portable user preferences 3.0\");\n            } finally {\n                if (out !\u003d null) {\n                    out.close();\n                    this.exist \u003d true;\n                }\n            }\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.io",
    "classname": "FileUserPreferences",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/io/FileUserPreferences_4Test.java",
    "test_prompt": "// FileUserPreferences_4Test.java\npackage com.eteks.sweethome3d.io;\n\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.prefs.AbstractPreferences;\nimport java.util.prefs.BackingStoreException;\nimport java.util.prefs.Preferences;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\nimport com.eteks.sweethome3d.model.CatalogDoorOrWindow;\nimport com.eteks.sweethome3d.model.CatalogPieceOfFurniture;\nimport com.eteks.sweethome3d.model.CatalogTexture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.FurnitureCatalog;\nimport com.eteks.sweethome3d.model.FurnitureCategory;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.PatternsCatalog;\nimport com.eteks.sweethome3d.model.RecorderException;\nimport com.eteks.sweethome3d.model.Sash;\nimport com.eteks.sweethome3d.model.TexturesCatalog;\nimport com.eteks.sweethome3d.model.TexturesCategory;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport com.eteks.sweethome3d.tools.OperatingSystem;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileUserPreferences}.\n* It contains ten unit test cases for the {@link FileUserPreferences#texturesLibraryExists(String)} method.\n*/\nclass FileUserPreferences_4Test {",
    "method_signature": "texturesLibraryExists(String)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// UserPreferencesController.java\n/*\n * UserPreferencesController.java 28 oct 2008\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.viewcontroller;\n\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.UserPreferences;\n\n/**\n * A MVC controller for user preferences view.\n * @author Emmanuel Puybaret\n */\npublic class UserPreferencesController implements Controller {\n\n    /**\n     * The properties that may be edited by the view associated to this controller.\n     */\n    public enum Property {\n\n        LANGUAGE,\n        UNIT,\n        MAGNETISM_ENABLED,\n        RULERS_VISIBLE,\n        GRID_VISIBLE,\n        FURNITURE_VIEWED_FROM_TOP,\n        ROOM_FLOOR_COLORED_OR_TEXTURED,\n        WALL_PATTERN,\n        NEW_WALL_THICKNESS,\n        NEW_WALL_HEIGHT,\n        NEW_FLOOR_THICKNESS,\n        FURNITURE_CATALOG_VIEWED_IN_TREE,\n        NAVIGATION_PANEL_VISIBLE,\n        AUTO_SAVE_DELAY_FOR_RECOVERY,\n        AUTO_SAVE_FOR_RECOVERY_ENABLED\n    }\n\n    private final UserPreferences preferences;\n\n    private final ViewFactory viewFactory;\n\n    private final HomeController homeController;\n\n    private final PropertyChangeSupport propertyChangeSupport;\n\n    private DialogView userPreferencesView;\n\n    private String language;\n\n    private LengthUnit unit;\n\n    private boolean furnitureCatalogViewedInTree;\n\n    private boolean navigationPanelVisible;\n\n    private boolean magnetismEnabled;\n\n    private boolean rulersVisible;\n\n    private boolean gridVisible;\n\n    private boolean furnitureViewedFromTop;\n\n    private boolean roomFloorColoredOrTextured;\n\n    private TextureImage wallPattern;\n\n    private float newWallThickness;\n\n    private float newWallHeight;\n\n    private float newFloorThickness;\n\n    private int autoSaveDelayForRecovery;\n\n    private boolean autoSaveForRecoveryEnabled;\n\n    /**\n     * Creates the controller of user preferences view.\n     */\n    public UserPreferencesController(UserPreferences preferences, ViewFactory viewFactory, ContentManager contentManager) {\n        this(preferences, viewFactory, contentManager, null);\n    }\n\n    /**\n     * Creates the controller of user preferences view.\n     */\n    public UserPreferencesController(UserPreferences preferences, ViewFactory viewFactory, ContentManager contentManager, HomeController homeController) {\n        this.preferences \u003d preferences;\n        this.viewFactory \u003d viewFactory;\n        this.homeController \u003d homeController;\n        this.propertyChangeSupport \u003d new PropertyChangeSupport(this);\n        updateProperties();\n    }\n\n    /**\n     * Returns the view associated with this controller.\n     */\n    public DialogView getView() {\n        // Create view lazily only once it\u0027s needed\n        if (this.userPreferencesView \u003d\u003d null) {\n            this.userPreferencesView \u003d this.viewFactory.createUserPreferencesView(this.preferences, this);\n        }\n        return this.userPreferencesView;\n    }\n\n    /**\n     * Displays the view controlled by this controller.\n     */\n    public void displayView(View parentView) {\n        getView().displayView(parentView);\n    }\n\n    /**\n     * Adds the property change \u003ccode\u003elistener\u003c/code\u003e in parameter to this controller.\n     */\n    public void addPropertyChangeListener(Property property, PropertyChangeListener listener) {\n        this.propertyChangeSupport.addPropertyChangeListener(property.name(), listener);\n    }\n\n    /**\n     * Removes the property change \u003ccode\u003elistener\u003c/code\u003e in parameter from this controller.\n     */\n    public void removePropertyChangeListener(Property property, PropertyChangeListener listener) {\n        this.propertyChangeSupport.removePropertyChangeListener(property.name(), listener);\n    }\n\n    /**\n     * Updates preferences properties edited by this controller.\n     */\n    protected void updateProperties() {\n        setLanguage(this.preferences.getLanguage());\n        setUnit(this.preferences.getLengthUnit());\n        setFurnitureCatalogViewedInTree(this.preferences.isFurnitureCatalogViewedInTree());\n        setNavigationPanelVisible(this.preferences.isNavigationPanelVisible());\n        setMagnetismEnabled(this.preferences.isMagnetismEnabled());\n        setGridVisible(this.preferences.isGridVisible());\n        setRulersVisible(this.preferences.isRulersVisible());\n        setFurnitureViewedFromTop(this.preferences.isFurnitureViewedFromTop());\n        setRoomFloorColoredOrTextured(this.preferences.isRoomFloorColoredOrTextured());\n        setWallPattern(this.preferences.getWallPattern());\n        float minimumLength \u003d getUnit().getMinimumLength();\n        float maximumLength \u003d getUnit().getMaximumLength();\n        setNewWallThickness(Math.min(Math.max(minimumLength, this.preferences.getNewWallThickness()), maximumLength / 10));\n        setNewWallHeight(Math.min(Math.max(minimumLength, this.preferences.getNewWallHeight()), maximumLength));\n        setNewFloorThickness(Math.min(Math.max(minimumLength, this.preferences.getNewFloorThickness()), maximumLength / 10));\n        setAutoSaveDelayForRecovery(this.preferences.getAutoSaveDelayForRecovery());\n        setAutoSaveForRecoveryEnabled(this.preferences.getAutoSaveDelayForRecovery() \u003e 0);\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the given \u003ccode\u003eproperty\u003c/code\u003e is editable.\n     * Depending on whether a property is editable or not, the view associated to this controller\n     * may render it differently.\n     * The implementation of this method always returns \u003ccode\u003etrue\u003c/code\u003e except for \u003ccode\u003eLANGUAGE\u003c/code\u003e if it\u0027s not editable.\n     */\n    public boolean isPropertyEditable(Property property) {\n        switch(property) {\n            case LANGUAGE:\n                return this.preferences.isLanguageEditable();\n            default:\n                return true;\n        }\n    }\n\n    /**\n     * Sets the edited language.\n     */\n    public void setLanguage(String language) {\n        if (language !\u003d this.language) {\n            String oldLanguage \u003d this.language;\n            this.language \u003d language;\n            this.propertyChangeSupport.firePropertyChange(Property.LANGUAGE.name(), oldLanguage, language);\n        }\n    }\n\n    /**\n     * Returns the edited language.\n     */\n    public String getLanguage() {\n        return this.language;\n    }\n\n    /**\n     * Sets the edited unit.\n     */\n    public void setUnit(LengthUnit unit) {\n        if (unit !\u003d this.unit) {\n            LengthUnit oldUnit \u003d this.unit;\n            this.unit \u003d unit;\n            this.propertyChangeSupport.firePropertyChange(Property.UNIT.name(), oldUnit, unit);\n        }\n    }\n\n    /**\n     * Returns the edited unit.\n     */\n    public LengthUnit getUnit() {\n        return this.unit;\n    }\n\n    /**\n     * Sets whether the furniture catalog should be viewed in a tree or a different way.\n     */\n    public void setFurnitureCatalogViewedInTree(boolean furnitureCatalogViewedInTree) {\n        if (this.furnitureCatalogViewedInTree !\u003d furnitureCatalogViewedInTree) {\n            this.furnitureCatalogViewedInTree \u003d furnitureCatalogViewedInTree;\n            this.propertyChangeSupport.firePropertyChange(Property.FURNITURE_CATALOG_VIEWED_IN_TREE.name(), !furnitureCatalogViewedInTree, furnitureCatalogViewedInTree);\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if furniture catalog should be viewed in a tree.\n     */\n    public boolean isFurnitureCatalogViewedInTree() {\n        return this.furnitureCatalogViewedInTree;\n    }\n\n    /**\n     * Sets whether the navigation panel should be displayed or not.\n     */\n    public void setNavigationPanelVisible(boolean navigationPanelVisible) {\n        if (this.navigationPanelVisible !\u003d navigationPanelVisible) {\n            this.navigationPanelVisible \u003d navigationPanelVisible;\n            this.propertyChangeSupport.firePropertyChange(Property.NAVIGATION_PANEL_VISIBLE.name(), !navigationPanelVisible, navigationPanelVisible);\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the navigation panel should be displayed.\n     */\n    public boolean isNavigationPanelVisible() {\n        return this.navigationPanelVisible;\n    }\n\n    /**\n     * Sets whether magnetism is enabled or not.\n     */\n    public void setMagnetismEnabled(boolean magnetismEnabled) {\n        if (magnetismEnabled !\u003d this.magnetismEnabled) {\n            this.magnetismEnabled \u003d magnetismEnabled;\n            this.propertyChangeSupport.firePropertyChange(Property.MAGNETISM_ENABLED.name(), !magnetismEnabled, magnetismEnabled);\n        }\n    }\n\n    /**\n     * Returns whether magnetism is enabled or not.\n     */\n    public boolean isMagnetismEnabled() {\n        return this.magnetismEnabled;\n    }\n\n    /**\n     * Sets whether rulers are visible or not.\n     */\n    public void setRulersVisible(boolean rulersVisible) {\n        if (rulersVisible !\u003d this.rulersVisible) {\n            this.rulersVisible \u003d rulersVisible;\n            this.propertyChangeSupport.firePropertyChange(Property.RULERS_VISIBLE.name(), !rulersVisible, rulersVisible);\n        }\n    }\n\n    /**\n     * Returns whether rulers are visible or not.\n     */\n    public boolean isRulersVisible() {\n        return this.rulersVisible;\n    }\n\n    /**\n     * Sets whether grid is visible or not.\n     */\n    public void setGridVisible(boolean gridVisible) {\n        if (gridVisible !\u003d this.gridVisible) {\n            this.gridVisible \u003d gridVisible;\n            this.propertyChangeSupport.firePropertyChange(Property.GRID_VISIBLE.name(), !gridVisible, gridVisible);\n        }\n    }\n\n    /**\n     * Returns whether grid is visible or not.\n     */\n    public boolean isGridVisible() {\n        return this.gridVisible;\n    }\n\n    /**\n     * Sets how furniture should be displayed in plan.\n     */\n    public void setFurnitureViewedFromTop(boolean furnitureViewedFromTop) {\n        if (this.furnitureViewedFromTop !\u003d furnitureViewedFromTop) {\n            this.furnitureViewedFromTop \u003d furnitureViewedFromTop;\n            this.propertyChangeSupport.firePropertyChange(Property.FURNITURE_VIEWED_FROM_TOP.name(), !furnitureViewedFromTop, furnitureViewedFromTop);\n        }\n    }\n\n    /**\n     * Returns how furniture should be displayed in plan.\n     */\n    public boolean isFurnitureViewedFromTop() {\n        return this.furnitureViewedFromTop;\n    }\n\n    /**\n     * Sets whether floor texture is visible in plan or not.\n     */\n    public void setRoomFloorColoredOrTextured(boolean floorTextureVisible) {\n        if (this.roomFloorColoredOrTextured !\u003d floorTextureVisible) {\n            this.roomFloorColoredOrTextured \u003d floorTextureVisible;\n            this.propertyChangeSupport.firePropertyChange(Property.ROOM_FLOOR_COLORED_OR_TEXTURED.name(), !floorTextureVisible, floorTextureVisible);\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if floor texture is visible in plan.\n     */\n    public boolean isRoomFloorColoredOrTextured() {\n        return this.roomFloorColoredOrTextured;\n    }\n\n    /**\n     * Sets how furniture should be displayed in plan, and notifies\n     * listeners of this change.\n     */\n    public void setWallPattern(TextureImage wallPattern) {\n        if (this.wallPattern !\u003d wallPattern) {\n            TextureImage oldWallPattern \u003d this.wallPattern;\n            this.wallPattern \u003d wallPattern;\n            this.propertyChangeSupport.firePropertyChange(Property.WALL_PATTERN.name(), oldWallPattern, wallPattern);\n        }\n    }\n\n    /**\n     * Returns the wall pattern in plan.\n     */\n    public TextureImage getWallPattern() {\n        return this.wallPattern;\n    }\n\n    /**\n     * Sets the edited new wall thickness.\n     */\n    public void setNewWallThickness(float newWallThickness) {\n        if (newWallThickness !\u003d this.newWallThickness) {\n            float oldNewWallThickness \u003d this.newWallThickness;\n            this.newWallThickness \u003d newWallThickness;\n            this.propertyChangeSupport.firePropertyChange(Property.NEW_WALL_THICKNESS.name(), oldNewWallThickness, newWallThickness);\n        }\n    }\n\n    /**\n     * Returns the edited new wall thickness.\n     */\n    public float getNewWallThickness() {\n        return this.newWallThickness;\n    }\n\n    /**\n     * Sets the edited new wall height.\n     */\n    public void setNewWallHeight(float newWallHeight) {\n        if (newWallHeight !\u003d this.newWallHeight) {\n            float oldNewWallHeight \u003d this.newWallHeight;\n            this.newWallHeight \u003d newWallHeight;\n            this.propertyChangeSupport.firePropertyChange(Property.NEW_WALL_HEIGHT.name(), oldNewWallHeight, newWallHeight);\n        }\n    }\n\n    /**\n     * Returns the edited new wall height.\n     */\n    public float getNewWallHeight() {\n        return this.newWallHeight;\n    }\n\n    /**\n     * Sets the edited new floor thickness.\n     */\n    public void setNewFloorThickness(float newFloorThickness) {\n        if (newFloorThickness !\u003d this.newFloorThickness) {\n            float oldNewFloorThickness \u003d this.newFloorThickness;\n            this.newFloorThickness \u003d newFloorThickness;\n            this.propertyChangeSupport.firePropertyChange(Property.NEW_FLOOR_THICKNESS.name(), oldNewFloorThickness, newFloorThickness);\n        }\n    }\n\n    /**\n     * Returns the edited new floor thickness.\n     */\n    public float getNewFloorThickness() {\n        return this.newFloorThickness;\n    }\n\n    /**\n     * Sets the edited auto recovery save delay.\n     */\n    public void setAutoSaveDelayForRecovery(int autoSaveDelayForRecovery) {\n        if (autoSaveDelayForRecovery !\u003d this.autoSaveDelayForRecovery) {\n            float oldAutoSaveDelayForRecovery \u003d this.autoSaveDelayForRecovery;\n            this.autoSaveDelayForRecovery \u003d autoSaveDelayForRecovery;\n            this.propertyChangeSupport.firePropertyChange(Property.AUTO_SAVE_DELAY_FOR_RECOVERY.name(), oldAutoSaveDelayForRecovery, autoSaveDelayForRecovery);\n        }\n    }\n\n    /**\n     * Returns the edited auto recovery save delay.\n     */\n    public int getAutoSaveDelayForRecovery() {\n        return this.autoSaveDelayForRecovery;\n    }\n\n    /**\n     * Sets whether auto recovery save is enabled or not.\n     */\n    public void setAutoSaveForRecoveryEnabled(boolean autoSaveForRecoveryEnabled) {\n        if (autoSaveForRecoveryEnabled !\u003d this.autoSaveForRecoveryEnabled) {\n            this.autoSaveForRecoveryEnabled \u003d autoSaveForRecoveryEnabled;\n            this.propertyChangeSupport.firePropertyChange(Property.AUTO_SAVE_FOR_RECOVERY_ENABLED.name(), !autoSaveForRecoveryEnabled, autoSaveForRecoveryEnabled);\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if auto recovery save is enabled.\n     */\n    public boolean isAutoSaveForRecoveryEnabled() {\n        return this.autoSaveForRecoveryEnabled;\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if language libraries can be imported.\n     */\n    public boolean mayImportLanguageLibrary() {\n        return this.homeController !\u003d null;\n    }\n\n    /**\n     * Imports a language library chosen by the user.\n     */\n    public void importLanguageLibrary() {\n        if (this.homeController !\u003d null) {\n            this.homeController.importLanguageLibrary();\n        }\n    }\n\n    /**\n     * Controls the modification of user preferences.\n     */\n    public void modifyUserPreferences() {\n        this.preferences.setLanguage(getLanguage());\n        this.preferences.setUnit(getUnit());\n        this.preferences.setFurnitureCatalogViewedInTree(isFurnitureCatalogViewedInTree());\n        this.preferences.setNavigationPanelVisible(isNavigationPanelVisible());\n        this.preferences.setMagnetismEnabled(isMagnetismEnabled());\n        this.preferences.setRulersVisible(isRulersVisible());\n        this.preferences.setGridVisible(isGridVisible());\n        this.preferences.setFurnitureViewedFromTop(isFurnitureViewedFromTop());\n        this.preferences.setFloorColoredOrTextured(isRoomFloorColoredOrTextured());\n        this.preferences.setWallPattern(getWallPattern());\n        this.preferences.setNewWallThickness(getNewWallThickness());\n        this.preferences.setNewWallHeight(getNewWallHeight());\n        this.preferences.setNewFloorThickness(getNewFloorThickness());\n        this.preferences.setAutoSaveDelayForRecovery(isAutoSaveForRecoveryEnabled() ? getAutoSaveDelayForRecovery() : 0);\n    }\n\n    /**\n     * Resets the displayed flags of action tips.\n     */\n    public void resetDisplayedActionTips() {\n        this.preferences.resetIgnoredActionTips();\n    }\n}\n",
    "package": "com.eteks.sweethome3d.viewcontroller",
    "classname": "UserPreferencesController",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/viewcontroller/UserPreferencesController_1Test.java",
    "test_prompt": "// UserPreferencesController_1Test.java\npackage com.eteks.sweethome3d.viewcontroller;\n\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\nimport com.eteks.sweethome3d.model.LengthUnit;\nimport com.eteks.sweethome3d.model.TextureImage;\nimport com.eteks.sweethome3d.model.UserPreferences;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserPreferencesController}.\n* It contains ten unit test cases for the {@link UserPreferencesController#mayImportLanguageLibrary()} method.\n*/\nclass UserPreferencesController_1Test {",
    "method_signature": "mayImportLanguageLibrary()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// TextureManager.java\n/*\n * TextureManager.java 2 oct 2007\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.Color;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.media.j3d.ImageComponent;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.Texture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.sun.j3d.utils.image.TextureLoader;\n\n/**\n * Singleton managing texture image cache.\n * @author Emmanuel Puybaret\n */\npublic class TextureManager {\n\n    private static TextureManager instance;\n\n    // Image used if an image content couldn\u0027t be loaded\n    private final Texture errorTexture;\n\n    // Image used while an image content is loaded\n    private final Texture waitTexture;\n\n    // Map storing loaded texture contents\n    private final Map\u003cContent, TextureKey\u003e contentTextureKeys;\n\n    // Map storing loaded textures\n    private final Map\u003cTextureKey, Texture\u003e textures;\n\n    // Map storing model nodes being loaded\n    private Map\u003cContent, List\u003cTextureObserver\u003e\u003e loadingTextureObservers;\n\n    // Executor used to load images\n    private ExecutorService texturesLoader;\n\n    private TextureManager() {\n        this.errorTexture \u003d getColoredImageTexture(Color.RED);\n        this.waitTexture \u003d getColoredImageTexture(Color.WHITE);\n        this.contentTextureKeys \u003d new WeakHashMap\u003cContent, TextureKey\u003e();\n        this.textures \u003d new WeakHashMap\u003cTextureKey, Texture\u003e();\n        this.loadingTextureObservers \u003d new HashMap\u003cContent, List\u003cTextureObserver\u003e\u003e();\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static TextureManager getInstance() {\n        if (instance \u003d\u003d null) {\n            instance \u003d new TextureManager();\n        }\n        return instance;\n    }\n\n    /**\n     * Shutdowns the multithreaded service that load textures.\n     */\n    public void clear() {\n        if (this.texturesLoader !\u003d null) {\n            this.texturesLoader.shutdownNow();\n            this.texturesLoader \u003d null;\n        }\n        synchronized (this.textures) {\n            this.contentTextureKeys.clear();\n            this.textures.clear();\n        }\n    }\n\n    /**\n     * Returns a texture image of one pixel of the given \u003ccode\u003ecolor\u003c/code\u003e.\n     */\n    private Texture getColoredImageTexture(Color color) {\n        BufferedImage image \u003d new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);\n        Graphics g \u003d image.getGraphics();\n        g.setColor(color);\n        g.drawLine(0, 0, 0, 0);\n        g.dispose();\n        Texture texture \u003d new TextureLoader(image).getTexture();\n        texture.setCapability(Texture.ALLOW_IMAGE_READ);\n        texture.setCapability(Texture.ALLOW_FORMAT_READ);\n        texture.getImage(0).setCapability(ImageComponent2D.ALLOW_IMAGE_READ);\n        texture.getImage(0).setCapability(ImageComponent2D.ALLOW_FORMAT_READ);\n        return texture;\n    }\n\n    /**\n     * Reads a texture image from \u003ccode\u003econtent\u003c/code\u003e notified to \u003ccode\u003etextureObserver\u003c/code\u003e\n     * If the texture isn\u0027t loaded in cache yet, a one pixel white image texture will be notified\n     * immediately to the given \u003ccode\u003etextureObserver\u003c/code\u003e, then a second notification will\n     * be given in Event Dispatch Thread once the image texture is loaded. If the texture is in cache,\n     * it will be notified immediately to the given \u003ccode\u003etextureObserver\u003c/code\u003e.\n     * @param content an object containing an image\n     * @param textureObserver the observer that will be notified once the texture is available\n     */\n    public void loadTexture(final Content content, final TextureObserver textureObserver) {\n        loadTexture(content, false, textureObserver);\n    }\n\n    /**\n     * Reads a texture image from \u003ccode\u003econtent\u003c/code\u003e notified to \u003ccode\u003etextureObserver\u003c/code\u003e.\n     * If the texture isn\u0027t loaded in cache yet and \u003ccode\u003esynchronous\u003c/code\u003e is false, a one pixel\n     * white image texture will be notified immediately to the given \u003ccode\u003etextureObserver\u003c/code\u003e,\n     * then a second notification will be given in Event Dispatch Thread once the image texture is loaded.\n     * If the texture is in cache, it will be notified immediately to the given \u003ccode\u003etextureObserver\u003c/code\u003e.\n     * @param content an object containing an image\n     * @param synchronous if \u003ccode\u003etrue\u003c/code\u003e, this method will return only once image content is loaded.\n     * @param textureObserver the observer that will be notified once the texture is available\n     * @throws IllegalStateException if synchronous is \u003ccode\u003efalse\u003c/code\u003e and the current thread isn\u0027t\n     *    the Event Dispatch Thread.\n     */\n    public void loadTexture(final Content content, boolean synchronous, final TextureObserver textureObserver) {\n        Texture texture;\n        TextureKey textureKey;\n        synchronized (this.textures) {\n            // Use one mutex for both maps\n            textureKey \u003d this.contentTextureKeys.get(content);\n            if (textureKey !\u003d null) {\n                texture \u003d this.textures.get(textureKey);\n            } else {\n                texture \u003d null;\n            }\n        }\n        if (texture \u003d\u003d null) {\n            if (synchronous) {\n                texture \u003d shareTexture(loadTexture(content), content);\n                // Notify loaded texture to observer\n                textureObserver.textureUpdated(texture);\n            } else if (!EventQueue.isDispatchThread()) {\n                throw new IllegalStateException(\"Asynchronous call out of Event Dispatch Thread\");\n            } else {\n                // Notify wait texture to observer\n                textureObserver.textureUpdated(this.waitTexture);\n                if (this.texturesLoader \u003d\u003d null) {\n                    this.texturesLoader \u003d Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n                }\n                List\u003cTextureObserver\u003e observers \u003d this.loadingTextureObservers.get(content);\n                if (observers !\u003d null) {\n                    // If observers list exists, content texture is already being loaded\n                    // register observer for future notification\n                    observers.add(textureObserver);\n                } else {\n                    // Create a list of observers that will be notified once content texture is loaded\n                    observers \u003d new ArrayList\u003cTextureObserver\u003e();\n                    observers.add(textureObserver);\n                    this.loadingTextureObservers.put(content, observers);\n                    // Load the image in a different thread\n                    this.texturesLoader.execute(new Runnable() {\n\n                        public void run() {\n                            final Texture texture \u003d shareTexture(loadTexture(content), content);\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    // Notify loaded texture to observer\n                                    for (TextureObserver observer : loadingTextureObservers.remove(content)) {\n                                        observer.textureUpdated(texture);\n                                    }\n                                }\n                            });\n                        }\n                    });\n                }\n            }\n        } else {\n            // Notify cached texture to observer\n            textureObserver.textureUpdated(texture);\n        }\n    }\n\n    /**\n     * Returns a texture created from the image from \u003ccode\u003econtent\u003c/code\u003e.\n     */\n    public Texture loadTexture(final Content content) {\n        BufferedImage image \u003d null;\n        try {\n            // Read the image\n            InputStream contentStream \u003d content.openStream();\n            image \u003d ImageIO.read(contentStream);\n            contentStream.close();\n        } catch (IOException ex) {\n            // Too bad, we\u0027ll use errorTexture\n        }\n        final Texture texture;\n        if (image \u003d\u003d null) {\n            texture \u003d errorTexture;\n        } else {\n            texture \u003d new TextureLoader(image).getTexture();\n            // Keep in user data the URL of the texture image\n            if (content instanceof URLContent) {\n                texture.setUserData(((URLContent) content).getURL());\n            }\n        }\n        return texture;\n    }\n\n    /**\n     * Returns either the \u003ccode\u003etexture\u003c/code\u003e in parameter or a shared texture\n     * if the same texture as the one in parameter is already shared.\n     */\n    public Texture shareTexture(Texture texture) {\n        return shareTexture(texture, null);\n    }\n\n    /**\n     * Returns the texture matching \u003ccode\u003econtent\u003c/code\u003e, either\n     * the \u003ccode\u003etexture\u003c/code\u003e in parameter or a shared texture if the\n     * same texture as the one in parameter is already shared.\n     */\n    private Texture shareTexture(final Texture texture, final Content content) {\n        TextureKey textureKey \u003d new TextureKey(texture);\n        Texture sharedTexture;\n        synchronized (this.textures) {\n            // Use one mutex for both maps\n            sharedTexture \u003d this.textures.get(textureKey);\n            if (sharedTexture \u003d\u003d null) {\n                sharedTexture \u003d texture;\n                setSharedTextureAttributesAndCapabilities(sharedTexture);\n                this.textures.put(textureKey, sharedTexture);\n            } else {\n                // Search which key matches sharedTexture to keep unique keys\n                for (TextureKey key : this.textures.keySet()) {\n                    if (key.getTexture() \u003d\u003d sharedTexture) {\n                        textureKey \u003d key;\n                        break;\n                    }\n                }\n            }\n            if (content !\u003d null) {\n                this.contentTextureKeys.put(content, textureKey);\n            }\n        }\n        return sharedTexture;\n    }\n\n    /**\n     * Sets the attributes and capabilities of a shared \u003ccode\u003etexture\u003c/code\u003e.\n     */\n    private void setSharedTextureAttributesAndCapabilities(Texture texture) {\n        if (!texture.isLive()) {\n            texture.setMinFilter(Texture.NICEST);\n            texture.setMagFilter(Texture.NICEST);\n            texture.setCapability(Texture.ALLOW_FORMAT_READ);\n            texture.setCapability(Texture.ALLOW_IMAGE_READ);\n            for (ImageComponent image : texture.getImages()) {\n                if (!image.isLive()) {\n                    image.setCapability(ImageComponent.ALLOW_FORMAT_READ);\n                    image.setCapability(ImageComponent.ALLOW_IMAGE_READ);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the texture is shared and its image contains\n     * at least one transparent pixel.\n     */\n    public boolean isTextureTransparent(Texture texture) {\n        synchronized (this.textures) {\n            // Use one mutex for both maps\n            // Search which key matches texture\n            for (TextureKey key : textures.keySet()) {\n                if (key.getTexture() \u003d\u003d texture) {\n                    return key.isTransparent();\n                }\n            }\n            return texture.getFormat() \u003d\u003d Texture.RGBA;\n        }\n    }\n\n    /**\n     * An observer that receives texture loading notifications.\n     */\n    public static interface TextureObserver {\n\n        public void textureUpdated(Texture texture);\n    }\n\n    /**\n     * Key used to ensure texture uniqueness in textures map.\n     * Image bits of the texture are stored in a weak reference to avoid grabbing memory uselessly.\n     */\n    private static class TextureKey {\n\n        private Texture texture;\n\n        private WeakReference\u003cint[]\u003e imageBits;\n\n        private int hashCodeCache;\n\n        private boolean hashCodeSet;\n\n        private boolean transparent;\n\n        public TextureKey(Texture texture) {\n            this.texture \u003d texture;\n        }\n\n        public Texture getTexture() {\n            return this.texture;\n        }\n\n        /**\n         * Returns the pixels of the given \u003ccode\u003eimage\u003c/code\u003e.\n         */\n        private int[] getImagePixels() {\n            int[] imageBits \u003d null;\n            if (this.imageBits !\u003d null) {\n                imageBits \u003d this.imageBits.get();\n            }\n            if (imageBits \u003d\u003d null) {\n                BufferedImage image \u003d ((ImageComponent2D) this.texture.getImage(0)).getImage();\n                if (image.getType() !\u003d BufferedImage.TYPE_INT_RGB \u0026\u0026 image.getType() !\u003d BufferedImage.TYPE_INT_ARGB) {\n                    // Transform as TYPE_INT_ARGB or TYPE_INT_RGB (much faster than calling image.getRGB())\n                    BufferedImage tmp \u003d new BufferedImage(image.getWidth(), image.getHeight(), this.texture.getFormat() \u003d\u003d Texture.RGBA ? BufferedImage.TYPE_INT_ARGB : BufferedImage.TYPE_INT_RGB);\n                    Graphics2D g \u003d (Graphics2D) tmp.getGraphics();\n                    g.drawImage(image, null, 0, 0);\n                    g.dispose();\n                    image \u003d tmp;\n                }\n                imageBits \u003d (int[]) image.getRaster().getDataElements(0, 0, image.getWidth(), image.getHeight(), null);\n                this.transparent \u003d image.getTransparency() !\u003d BufferedImage.OPAQUE;\n                this.imageBits \u003d new WeakReference\u003cint[]\u003e(imageBits);\n            }\n            return imageBits;\n        }\n\n        /**\n         * Returns \u003ccode\u003etrue\u003c/code\u003e if the image of the texture contains at least one transparent pixel.\n         */\n        public boolean isTransparent() {\n            return this.transparent;\n        }\n\n        /**\n         * Returns \u003ccode\u003etrue\u003c/code\u003e if the image of this texture and\n         * the image of the object in parameter are the same.\n         */\n        @Override\n        public boolean equals(Object obj) {\n            if (this \u003d\u003d obj) {\n                return true;\n            } else if (obj instanceof TextureKey) {\n                TextureKey textureKey \u003d (TextureKey) obj;\n                if (this.texture \u003d\u003d textureKey.texture) {\n                    return true;\n                } else if (hashCode() \u003d\u003d textureKey.hashCode()) {\n                    return Arrays.equals(getImagePixels(), textureKey.getImagePixels());\n                }\n            }\n            return false;\n        }\n\n        @Override\n        public int hashCode() {\n            if (!this.hashCodeSet) {\n                this.hashCodeCache \u003d Arrays.hashCode(getImagePixels());\n                this.hashCodeSet \u003d true;\n            }\n            return this.hashCodeCache;\n        }\n    }\n}\n",
    "package": "com.eteks.sweethome3d.j3d",
    "classname": "TextureManager",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/TextureManager_0Test.java",
    "test_prompt": "// TextureManager_0Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.Color;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.imageio.ImageIO;\nimport javax.media.j3d.ImageComponent;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.Texture;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.sun.j3d.utils.image.TextureLoader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TextureManager}.\n* It contains ten unit test cases for the {@link TextureManager#getInstance()} method.\n*/\nclass TextureManager_0Test {",
    "method_signature": "getInstance()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Component3DManager.java\n/*\n * Canvas3DManager.java 25 oct. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.GraphicsConfigTemplate;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport javax.media.j3d.Canvas3D;\nimport javax.media.j3d.GraphicsConfigTemplate3D;\nimport javax.media.j3d.IllegalRenderingStateException;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.RenderingError;\nimport javax.media.j3d.RenderingErrorListener;\nimport javax.media.j3d.Screen3D;\nimport javax.media.j3d.View;\nimport javax.media.j3d.VirtualUniverse;\nimport com.sun.j3d.utils.universe.SimpleUniverse;\nimport com.sun.j3d.utils.universe.Viewer;\nimport com.sun.j3d.utils.universe.ViewingPlatform;\n\n/**\n * Manager of \u003ccode\u003eCanvas3D\u003c/code\u003e instantiations and Java 3D error listeners.\n * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.\n * @author Emmanuel Puybaret\n */\npublic class Component3DManager {\n\n    private static final String CHECK_OFF_SCREEN_IMAGE_SUPPORT \u003d \"com.eteks.sweethome3d.j3d.checkOffScreenSupport\";\n\n    private static Component3DManager instance;\n\n    private RenderingErrorObserver renderingErrorObserver;\n\n    // The Java 3D listener matching renderingErrorObserver\n    // (use Object class to ensure Component3DManager class can run with Java 3D 1.3.1)\n    private Object renderingErrorListener;\n\n    private Boolean offScreenImageSupported;\n\n    private GraphicsConfiguration defaultScreenConfiguration;\n\n    private Component3DManager() {\n        if (!GraphicsEnvironment.isHeadless()) {\n            GraphicsConfigTemplate3D template \u003d createGraphicsConfigurationTemplate3D();\n            GraphicsDevice defaultScreenDevice \u003d GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n            this.defaultScreenConfiguration \u003d defaultScreenDevice.getBestConfiguration(template);\n            if (this.defaultScreenConfiguration \u003d\u003d null) {\n                this.defaultScreenConfiguration \u003d defaultScreenDevice.getBestConfiguration(new GraphicsConfigTemplate3D());\n            }\n        } else {\n            this.offScreenImageSupported \u003d Boolean.FALSE;\n        }\n    }\n\n    /**\n     * Returns the template to configure the graphics of canvas 3D.\n     */\n    private GraphicsConfigTemplate3D createGraphicsConfigurationTemplate3D() {\n        System.setProperty(\"j3d.implicitAntialiasing\", \"true\");\n        // Retrieve graphics configuration once\n        GraphicsConfigTemplate3D template \u003d new GraphicsConfigTemplate3D();\n        // Try to get antialiasing\n        template.setSceneAntialiasing(GraphicsConfigTemplate3D.PREFERRED);\n        // From http://www.java.net/node/683852\n        // Check if the user has set the Java 3D stereo option.\n        String stereo \u003d System.getProperty(\"j3d.stereo\");\n        if (stereo !\u003d null) {\n            if (\"REQUIRED\".equals(stereo))\n                template.setStereo(GraphicsConfigTemplate.REQUIRED);\n            else if (\"PREFERRED\".equals(stereo))\n                template.setStereo(GraphicsConfigTemplate.PREFERRED);\n        }\n        return template;\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static Component3DManager getInstance() {\n        if (instance \u003d\u003d null) {\n            instance \u003d new Component3DManager();\n        }\n        return instance;\n    }\n\n    /**\n     * Sets the current rendering error listener bound to \u003ccode\u003eVirtualUniverse\u003c/code\u003e.\n     */\n    public void setRenderingErrorObserver(RenderingErrorObserver observer) {\n        try {\n            Class.forName(\"javax.media.j3d.RenderingErrorListener\");\n            this.renderingErrorListener \u003d RenderingErrorListenerManager.setRenderingErrorObserver(observer, this.renderingErrorListener);\n            this.renderingErrorObserver \u003d observer;\n        } catch (ClassNotFoundException ex) {\n            // As RenderingErrorListener and addRenderingErrorListener are available since Java 3D 1.5,\n            // use the default rendering error reporting if Sweet Home 3D is linked to a previous version\n        }\n    }\n\n    /**\n     * Returns the current rendering error listener bound to \u003ccode\u003eVirtualUniverse\u003c/code\u003e.\n     */\n    public RenderingErrorObserver getRenderingErrorObserver() {\n        return this.renderingErrorObserver;\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if offscreen is supported in Java 3D on user system.\n     * Will always return \u003ccode\u003efalse\u003c/code\u003e if \u003ccode\u003ecom.eteks.sweethome3d.j3d.checkOffScreenSupport\u003c/code\u003e\n     * system is equal to \u003ccode\u003efalse\u003c/code\u003e. By default, \u003ccode\u003ecom.eteks.sweethome3d.j3d.checkOffScreenSupport\u003c/code\u003e\n     * is equal to \u003ccode\u003etrue\u003c/code\u003e.\n     */\n    public boolean isOffScreenImageSupported() {\n        if (this.offScreenImageSupported \u003d\u003d null) {\n            if (\"false\".equalsIgnoreCase(System.getProperty(CHECK_OFF_SCREEN_IMAGE_SUPPORT, \"true\"))) {\n                this.offScreenImageSupported \u003d Boolean.FALSE;\n            } else {\n                SimpleUniverse universe \u003d null;\n                try {\n                    // Create a universe bound to no canvas 3D\n                    ViewingPlatform viewingPlatform \u003d new ViewingPlatform();\n                    Viewer viewer \u003d new Viewer(new Canvas3D[0]);\n                    universe \u003d new SimpleUniverse(viewingPlatform, viewer);\n                    // Create a dummy 3D image to check if it can be rendered in current Java 3D configuration\n                    getOffScreenImage(viewer.getView(), 1, 1);\n                    this.offScreenImageSupported \u003d Boolean.TRUE;\n                } catch (IllegalRenderingStateException ex) {\n                    this.offScreenImageSupported \u003d Boolean.FALSE;\n                } catch (NullPointerException ex) {\n                    this.offScreenImageSupported \u003d Boolean.FALSE;\n                } catch (IllegalArgumentException ex) {\n                    this.offScreenImageSupported \u003d Boolean.FALSE;\n                } finally {\n                    if (universe !\u003d null) {\n                        universe.cleanup();\n                    }\n                }\n            }\n        }\n        return this.offScreenImageSupported;\n    }\n\n    /**\n     * Returns a new \u003ccode\u003ecanva3D\u003c/code\u003e instance that will call \u003ccode\u003erenderingObserver\u003c/code\u003e\n     * methods during the rendering loop.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn\u0027t be created.\n     */\n    private Canvas3D getCanvas3D(GraphicsConfiguration deviceConfiguration, boolean offscreen, final RenderingObserver renderingObserver) {\n        GraphicsConfiguration configuration;\n        if (GraphicsEnvironment.isHeadless()) {\n            configuration \u003d null;\n        } else if (deviceConfiguration \u003d\u003d null || deviceConfiguration.getDevice() \u003d\u003d this.defaultScreenConfiguration.getDevice()) {\n            configuration \u003d this.defaultScreenConfiguration;\n        } else {\n            GraphicsConfigTemplate3D template \u003d createGraphicsConfigurationTemplate3D();\n            configuration \u003d deviceConfiguration.getDevice().getBestConfiguration(template);\n            if (configuration \u003d\u003d null) {\n                configuration \u003d deviceConfiguration.getDevice().getBestConfiguration(new GraphicsConfigTemplate3D());\n            }\n        }\n        if (configuration \u003d\u003d null) {\n            throw new IllegalRenderingStateException(\"Can\u0027t create graphics environment for Canvas 3D\");\n        }\n        try {\n            // Ensure unused canvases are freed\n            System.gc();\n            // Create a Java 3D canvas\n            return new Canvas3D(configuration, offscreen) {\n\n                @Override\n                public void preRender() {\n                    if (renderingObserver !\u003d null) {\n                        renderingObserver.canvas3DPreRendered(this);\n                    }\n                }\n\n                @Override\n                public void postRender() {\n                    if (renderingObserver !\u003d null) {\n                        renderingObserver.canvas3DPostRendered(this);\n                    }\n                }\n\n                @Override\n                public void postSwap() {\n                    if (renderingObserver !\u003d null) {\n                        renderingObserver.canvas3DSwapped(this);\n                    }\n                }\n            };\n        } catch (IllegalArgumentException ex) {\n            IllegalRenderingStateException ex2 \u003d new IllegalRenderingStateException(\"Can\u0027t create Canvas 3D\");\n            ex2.initCause(ex);\n            throw ex2;\n        }\n    }\n\n    /**\n     * Returns a new on screen \u003ccode\u003ecanva3D\u003c/code\u003e instance. The returned canvas 3D will be associated\n     * with the graphics configuration of the default screen device.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn\u0027t be created.\n     */\n    public Canvas3D getOnscreenCanvas3D() {\n        return getOnscreenCanvas3D(null);\n    }\n\n    /**\n     * Returns a new on screen \u003ccode\u003ecanva3D\u003c/code\u003e instance which rendering will be observed\n     * with the given rendering observer. The returned canvas 3D will be associated with the\n     * graphics configuration of the default screen device.\n     * @param renderingObserver an observer of the 3D rendering process of the returned canvas.\n     *            Caution: The methods of the observer will be called in 3D rendering loop thread.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn\u0027t be created.\n     */\n    public Canvas3D getOnscreenCanvas3D(RenderingObserver renderingObserver) {\n        return getCanvas3D(null, false, renderingObserver);\n    }\n\n    /**\n     * Returns a new on screen \u003ccode\u003ecanva3D\u003c/code\u003e instance which rendering will be observed\n     * with the given rendering observer.\n     * @param renderingObserver an observer of the 3D rendering process of the returned canvas.\n     *            Caution: The methods of the observer will be called in 3D rendering loop thread.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn\u0027t be created.\n     */\n    public Canvas3D getOnscreenCanvas3D(GraphicsConfiguration deviceConfiguration, RenderingObserver renderingObserver) {\n        return getCanvas3D(deviceConfiguration, false, renderingObserver);\n    }\n\n    /**\n     * Returns a new off screen \u003ccode\u003ecanva3D\u003c/code\u003e at the given size.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn\u0027t be created.\n     *    To avoid this exception, call {@link #isOffScreenImageSupported() isOffScreenImageSupported()} first.\n     */\n    public Canvas3D getOffScreenCanvas3D(int width, int height) {\n        Canvas3D offScreenCanvas \u003d getCanvas3D(null, true, null);\n        // Configure canvas 3D for offscreen\n        Screen3D screen3D \u003d offScreenCanvas.getScreen3D();\n        screen3D.setSize(width, height);\n        screen3D.setPhysicalScreenWidth(2f);\n        screen3D.setPhysicalScreenHeight(2f / width * height);\n        BufferedImage image \u003d new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        ImageComponent2D imageComponent2D \u003d new ImageComponent2D(ImageComponent2D.FORMAT_RGB, image);\n        imageComponent2D.setCapability(ImageComponent2D.ALLOW_IMAGE_READ);\n        offScreenCanvas.setOffScreenBuffer(imageComponent2D);\n        return offScreenCanvas;\n    }\n\n    /**\n     * Returns an image at the given size of the 3D \u003ccode\u003eview\u003c/code\u003e.\n     * This image is created with an off screen canvas.\n     * @throws IllegalRenderingStateException  if the image couldn\u0027t be created.\n     */\n    public BufferedImage getOffScreenImage(View view, int width, int height) {\n        Canvas3D offScreenCanvas \u003d null;\n        RenderingErrorObserver previousRenderingErrorObserver \u003d getRenderingErrorObserver();\n        try {\n            // Replace current rendering error observer by a listener that counts down\n            // a latch to check further if a rendering error happened during off screen rendering\n            // (rendering error listener is called from a notification thread)\n            final CountDownLatch latch \u003d new CountDownLatch(1);\n            setRenderingErrorObserver(new RenderingErrorObserver() {\n\n                public void errorOccured(int errorCode, String errorMessage) {\n                    latch.countDown();\n                }\n            });\n            // Create an off screen canvas and bind it to view\n            offScreenCanvas \u003d getOffScreenCanvas3D(width, height);\n            view.addCanvas3D(offScreenCanvas);\n            // Render off screen canvas\n            offScreenCanvas.renderOffScreenBuffer();\n            offScreenCanvas.waitForOffScreenRendering();\n            // If latch count becomes equal to 0 during the past instructions or in the coming 10 milliseconds,\n            // this means that a rendering error happened\n            if (latch.await(10, TimeUnit.MILLISECONDS)) {\n                throw new IllegalRenderingStateException(\"Off screen rendering unavailable\");\n            }\n            return offScreenCanvas.getOffScreenBuffer().getImage();\n        } catch (InterruptedException ex) {\n            IllegalRenderingStateException ex2 \u003d new IllegalRenderingStateException(\"Off screen rendering interrupted\");\n            ex2.initCause(ex);\n            throw ex2;\n        } finally {\n            if (offScreenCanvas !\u003d null) {\n                view.removeCanvas3D(offScreenCanvas);\n                try {\n                    // Free off screen buffer and context\n                    offScreenCanvas.setOffScreenBuffer(null);\n                } catch (NullPointerException ex) {\n                    // Java 3D 1.3 may throw an exception\n                }\n            }\n            // Reset previous rendering error listener\n            setRenderingErrorObserver(previousRenderingErrorObserver);\n        }\n    }\n\n    /**\n     * An observer that receives error notifications in Java 3D.\n     */\n    public static interface RenderingErrorObserver {\n\n        void errorOccured(int errorCode, String errorMessage);\n    }\n\n    /**\n     * Manages Java 3D 1.5 \u003ccode\u003eRenderingErrorListener\u003c/code\u003e change matching the given\n     * rendering error observer.\n     */\n    private static class RenderingErrorListenerManager {\n\n        public static Object setRenderingErrorObserver(final RenderingErrorObserver observer, Object previousRenderingErrorListener) {\n            if (previousRenderingErrorListener !\u003d null) {\n                VirtualUniverse.removeRenderingErrorListener((RenderingErrorListener) previousRenderingErrorListener);\n            }\n            RenderingErrorListener renderingErrorListener \u003d new RenderingErrorListener() {\n\n                public void errorOccurred(RenderingError error) {\n                    observer.errorOccured(error.getErrorCode(), error.getErrorMessage());\n                }\n            };\n            VirtualUniverse.addRenderingErrorListener(renderingErrorListener);\n            return renderingErrorListener;\n        }\n    }\n\n    /**\n     * An observer that receives notifications during the different steps\n     * of the loop rendering a canvas 3D.\n     */\n    public static interface RenderingObserver {\n\n        /**\n         * Called before \u003ccode\u003ecanvas3D\u003c/code\u003e is rendered.\n         */\n        public void canvas3DPreRendered(Canvas3D canvas3D);\n\n        /**\n         * Called after \u003ccode\u003ecanvas3D\u003c/code\u003e is rendered.\n         */\n        public void canvas3DPostRendered(Canvas3D canvas3D);\n\n        /**\n         * Called after \u003ccode\u003ecanvas3D\u003c/code\u003e buffer is swapped.\n         */\n        public void canvas3DSwapped(Canvas3D canvas3D);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.j3d",
    "classname": "Component3DManager",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/Component3DManager_0Test.java",
    "test_prompt": "// Component3DManager_0Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.GraphicsConfigTemplate;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport javax.media.j3d.Canvas3D;\nimport javax.media.j3d.GraphicsConfigTemplate3D;\nimport javax.media.j3d.IllegalRenderingStateException;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.RenderingError;\nimport javax.media.j3d.RenderingErrorListener;\nimport javax.media.j3d.Screen3D;\nimport javax.media.j3d.View;\nimport javax.media.j3d.VirtualUniverse;\nimport com.sun.j3d.utils.universe.SimpleUniverse;\nimport com.sun.j3d.utils.universe.Viewer;\nimport com.sun.j3d.utils.universe.ViewingPlatform;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Component3DManager}.\n* It contains ten unit test cases for the {@link Component3DManager#getInstance()} method.\n*/\nclass Component3DManager_0Test {",
    "method_signature": "getInstance()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Component3DManager.java\n/*\n * Canvas3DManager.java 25 oct. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.GraphicsConfigTemplate;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport javax.media.j3d.Canvas3D;\nimport javax.media.j3d.GraphicsConfigTemplate3D;\nimport javax.media.j3d.IllegalRenderingStateException;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.RenderingError;\nimport javax.media.j3d.RenderingErrorListener;\nimport javax.media.j3d.Screen3D;\nimport javax.media.j3d.View;\nimport javax.media.j3d.VirtualUniverse;\nimport com.sun.j3d.utils.universe.SimpleUniverse;\nimport com.sun.j3d.utils.universe.Viewer;\nimport com.sun.j3d.utils.universe.ViewingPlatform;\n\n/**\n * Manager of \u003ccode\u003eCanvas3D\u003c/code\u003e instantiations and Java 3D error listeners.\n * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.\n * @author Emmanuel Puybaret\n */\npublic class Component3DManager {\n\n    private static final String CHECK_OFF_SCREEN_IMAGE_SUPPORT \u003d \"com.eteks.sweethome3d.j3d.checkOffScreenSupport\";\n\n    private static Component3DManager instance;\n\n    private RenderingErrorObserver renderingErrorObserver;\n\n    // The Java 3D listener matching renderingErrorObserver\n    // (use Object class to ensure Component3DManager class can run with Java 3D 1.3.1)\n    private Object renderingErrorListener;\n\n    private Boolean offScreenImageSupported;\n\n    private GraphicsConfiguration defaultScreenConfiguration;\n\n    private Component3DManager() {\n        if (!GraphicsEnvironment.isHeadless()) {\n            GraphicsConfigTemplate3D template \u003d createGraphicsConfigurationTemplate3D();\n            GraphicsDevice defaultScreenDevice \u003d GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n            this.defaultScreenConfiguration \u003d defaultScreenDevice.getBestConfiguration(template);\n            if (this.defaultScreenConfiguration \u003d\u003d null) {\n                this.defaultScreenConfiguration \u003d defaultScreenDevice.getBestConfiguration(new GraphicsConfigTemplate3D());\n            }\n        } else {\n            this.offScreenImageSupported \u003d Boolean.FALSE;\n        }\n    }\n\n    /**\n     * Returns the template to configure the graphics of canvas 3D.\n     */\n    private GraphicsConfigTemplate3D createGraphicsConfigurationTemplate3D() {\n        System.setProperty(\"j3d.implicitAntialiasing\", \"true\");\n        // Retrieve graphics configuration once\n        GraphicsConfigTemplate3D template \u003d new GraphicsConfigTemplate3D();\n        // Try to get antialiasing\n        template.setSceneAntialiasing(GraphicsConfigTemplate3D.PREFERRED);\n        // From http://www.java.net/node/683852\n        // Check if the user has set the Java 3D stereo option.\n        String stereo \u003d System.getProperty(\"j3d.stereo\");\n        if (stereo !\u003d null) {\n            if (\"REQUIRED\".equals(stereo))\n                template.setStereo(GraphicsConfigTemplate.REQUIRED);\n            else if (\"PREFERRED\".equals(stereo))\n                template.setStereo(GraphicsConfigTemplate.PREFERRED);\n        }\n        return template;\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static Component3DManager getInstance() {\n        if (instance \u003d\u003d null) {\n            instance \u003d new Component3DManager();\n        }\n        return instance;\n    }\n\n    /**\n     * Sets the current rendering error listener bound to \u003ccode\u003eVirtualUniverse\u003c/code\u003e.\n     */\n    public void setRenderingErrorObserver(RenderingErrorObserver observer) {\n        try {\n            Class.forName(\"javax.media.j3d.RenderingErrorListener\");\n            this.renderingErrorListener \u003d RenderingErrorListenerManager.setRenderingErrorObserver(observer, this.renderingErrorListener);\n            this.renderingErrorObserver \u003d observer;\n        } catch (ClassNotFoundException ex) {\n            // As RenderingErrorListener and addRenderingErrorListener are available since Java 3D 1.5,\n            // use the default rendering error reporting if Sweet Home 3D is linked to a previous version\n        }\n    }\n\n    /**\n     * Returns the current rendering error listener bound to \u003ccode\u003eVirtualUniverse\u003c/code\u003e.\n     */\n    public RenderingErrorObserver getRenderingErrorObserver() {\n        return this.renderingErrorObserver;\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if offscreen is supported in Java 3D on user system.\n     * Will always return \u003ccode\u003efalse\u003c/code\u003e if \u003ccode\u003ecom.eteks.sweethome3d.j3d.checkOffScreenSupport\u003c/code\u003e\n     * system is equal to \u003ccode\u003efalse\u003c/code\u003e. By default, \u003ccode\u003ecom.eteks.sweethome3d.j3d.checkOffScreenSupport\u003c/code\u003e\n     * is equal to \u003ccode\u003etrue\u003c/code\u003e.\n     */\n    public boolean isOffScreenImageSupported() {\n        if (this.offScreenImageSupported \u003d\u003d null) {\n            if (\"false\".equalsIgnoreCase(System.getProperty(CHECK_OFF_SCREEN_IMAGE_SUPPORT, \"true\"))) {\n                this.offScreenImageSupported \u003d Boolean.FALSE;\n            } else {\n                SimpleUniverse universe \u003d null;\n                try {\n                    // Create a universe bound to no canvas 3D\n                    ViewingPlatform viewingPlatform \u003d new ViewingPlatform();\n                    Viewer viewer \u003d new Viewer(new Canvas3D[0]);\n                    universe \u003d new SimpleUniverse(viewingPlatform, viewer);\n                    // Create a dummy 3D image to check if it can be rendered in current Java 3D configuration\n                    getOffScreenImage(viewer.getView(), 1, 1);\n                    this.offScreenImageSupported \u003d Boolean.TRUE;\n                } catch (IllegalRenderingStateException ex) {\n                    this.offScreenImageSupported \u003d Boolean.FALSE;\n                } catch (NullPointerException ex) {\n                    this.offScreenImageSupported \u003d Boolean.FALSE;\n                } catch (IllegalArgumentException ex) {\n                    this.offScreenImageSupported \u003d Boolean.FALSE;\n                } finally {\n                    if (universe !\u003d null) {\n                        universe.cleanup();\n                    }\n                }\n            }\n        }\n        return this.offScreenImageSupported;\n    }\n\n    /**\n     * Returns a new \u003ccode\u003ecanva3D\u003c/code\u003e instance that will call \u003ccode\u003erenderingObserver\u003c/code\u003e\n     * methods during the rendering loop.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn\u0027t be created.\n     */\n    private Canvas3D getCanvas3D(GraphicsConfiguration deviceConfiguration, boolean offscreen, final RenderingObserver renderingObserver) {\n        GraphicsConfiguration configuration;\n        if (GraphicsEnvironment.isHeadless()) {\n            configuration \u003d null;\n        } else if (deviceConfiguration \u003d\u003d null || deviceConfiguration.getDevice() \u003d\u003d this.defaultScreenConfiguration.getDevice()) {\n            configuration \u003d this.defaultScreenConfiguration;\n        } else {\n            GraphicsConfigTemplate3D template \u003d createGraphicsConfigurationTemplate3D();\n            configuration \u003d deviceConfiguration.getDevice().getBestConfiguration(template);\n            if (configuration \u003d\u003d null) {\n                configuration \u003d deviceConfiguration.getDevice().getBestConfiguration(new GraphicsConfigTemplate3D());\n            }\n        }\n        if (configuration \u003d\u003d null) {\n            throw new IllegalRenderingStateException(\"Can\u0027t create graphics environment for Canvas 3D\");\n        }\n        try {\n            // Ensure unused canvases are freed\n            System.gc();\n            // Create a Java 3D canvas\n            return new Canvas3D(configuration, offscreen) {\n\n                @Override\n                public void preRender() {\n                    if (renderingObserver !\u003d null) {\n                        renderingObserver.canvas3DPreRendered(this);\n                    }\n                }\n\n                @Override\n                public void postRender() {\n                    if (renderingObserver !\u003d null) {\n                        renderingObserver.canvas3DPostRendered(this);\n                    }\n                }\n\n                @Override\n                public void postSwap() {\n                    if (renderingObserver !\u003d null) {\n                        renderingObserver.canvas3DSwapped(this);\n                    }\n                }\n            };\n        } catch (IllegalArgumentException ex) {\n            IllegalRenderingStateException ex2 \u003d new IllegalRenderingStateException(\"Can\u0027t create Canvas 3D\");\n            ex2.initCause(ex);\n            throw ex2;\n        }\n    }\n\n    /**\n     * Returns a new on screen \u003ccode\u003ecanva3D\u003c/code\u003e instance. The returned canvas 3D will be associated\n     * with the graphics configuration of the default screen device.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn\u0027t be created.\n     */\n    public Canvas3D getOnscreenCanvas3D() {\n        return getOnscreenCanvas3D(null);\n    }\n\n    /**\n     * Returns a new on screen \u003ccode\u003ecanva3D\u003c/code\u003e instance which rendering will be observed\n     * with the given rendering observer. The returned canvas 3D will be associated with the\n     * graphics configuration of the default screen device.\n     * @param renderingObserver an observer of the 3D rendering process of the returned canvas.\n     *            Caution: The methods of the observer will be called in 3D rendering loop thread.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn\u0027t be created.\n     */\n    public Canvas3D getOnscreenCanvas3D(RenderingObserver renderingObserver) {\n        return getCanvas3D(null, false, renderingObserver);\n    }\n\n    /**\n     * Returns a new on screen \u003ccode\u003ecanva3D\u003c/code\u003e instance which rendering will be observed\n     * with the given rendering observer.\n     * @param renderingObserver an observer of the 3D rendering process of the returned canvas.\n     *            Caution: The methods of the observer will be called in 3D rendering loop thread.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn\u0027t be created.\n     */\n    public Canvas3D getOnscreenCanvas3D(GraphicsConfiguration deviceConfiguration, RenderingObserver renderingObserver) {\n        return getCanvas3D(deviceConfiguration, false, renderingObserver);\n    }\n\n    /**\n     * Returns a new off screen \u003ccode\u003ecanva3D\u003c/code\u003e at the given size.\n     * @throws IllegalRenderingStateException  if the canvas 3D couldn\u0027t be created.\n     *    To avoid this exception, call {@link #isOffScreenImageSupported() isOffScreenImageSupported()} first.\n     */\n    public Canvas3D getOffScreenCanvas3D(int width, int height) {\n        Canvas3D offScreenCanvas \u003d getCanvas3D(null, true, null);\n        // Configure canvas 3D for offscreen\n        Screen3D screen3D \u003d offScreenCanvas.getScreen3D();\n        screen3D.setSize(width, height);\n        screen3D.setPhysicalScreenWidth(2f);\n        screen3D.setPhysicalScreenHeight(2f / width * height);\n        BufferedImage image \u003d new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        ImageComponent2D imageComponent2D \u003d new ImageComponent2D(ImageComponent2D.FORMAT_RGB, image);\n        imageComponent2D.setCapability(ImageComponent2D.ALLOW_IMAGE_READ);\n        offScreenCanvas.setOffScreenBuffer(imageComponent2D);\n        return offScreenCanvas;\n    }\n\n    /**\n     * Returns an image at the given size of the 3D \u003ccode\u003eview\u003c/code\u003e.\n     * This image is created with an off screen canvas.\n     * @throws IllegalRenderingStateException  if the image couldn\u0027t be created.\n     */\n    public BufferedImage getOffScreenImage(View view, int width, int height) {\n        Canvas3D offScreenCanvas \u003d null;\n        RenderingErrorObserver previousRenderingErrorObserver \u003d getRenderingErrorObserver();\n        try {\n            // Replace current rendering error observer by a listener that counts down\n            // a latch to check further if a rendering error happened during off screen rendering\n            // (rendering error listener is called from a notification thread)\n            final CountDownLatch latch \u003d new CountDownLatch(1);\n            setRenderingErrorObserver(new RenderingErrorObserver() {\n\n                public void errorOccured(int errorCode, String errorMessage) {\n                    latch.countDown();\n                }\n            });\n            // Create an off screen canvas and bind it to view\n            offScreenCanvas \u003d getOffScreenCanvas3D(width, height);\n            view.addCanvas3D(offScreenCanvas);\n            // Render off screen canvas\n            offScreenCanvas.renderOffScreenBuffer();\n            offScreenCanvas.waitForOffScreenRendering();\n            // If latch count becomes equal to 0 during the past instructions or in the coming 10 milliseconds,\n            // this means that a rendering error happened\n            if (latch.await(10, TimeUnit.MILLISECONDS)) {\n                throw new IllegalRenderingStateException(\"Off screen rendering unavailable\");\n            }\n            return offScreenCanvas.getOffScreenBuffer().getImage();\n        } catch (InterruptedException ex) {\n            IllegalRenderingStateException ex2 \u003d new IllegalRenderingStateException(\"Off screen rendering interrupted\");\n            ex2.initCause(ex);\n            throw ex2;\n        } finally {\n            if (offScreenCanvas !\u003d null) {\n                view.removeCanvas3D(offScreenCanvas);\n                try {\n                    // Free off screen buffer and context\n                    offScreenCanvas.setOffScreenBuffer(null);\n                } catch (NullPointerException ex) {\n                    // Java 3D 1.3 may throw an exception\n                }\n            }\n            // Reset previous rendering error listener\n            setRenderingErrorObserver(previousRenderingErrorObserver);\n        }\n    }\n\n    /**\n     * An observer that receives error notifications in Java 3D.\n     */\n    public static interface RenderingErrorObserver {\n\n        void errorOccured(int errorCode, String errorMessage);\n    }\n\n    /**\n     * Manages Java 3D 1.5 \u003ccode\u003eRenderingErrorListener\u003c/code\u003e change matching the given\n     * rendering error observer.\n     */\n    private static class RenderingErrorListenerManager {\n\n        public static Object setRenderingErrorObserver(final RenderingErrorObserver observer, Object previousRenderingErrorListener) {\n            if (previousRenderingErrorListener !\u003d null) {\n                VirtualUniverse.removeRenderingErrorListener((RenderingErrorListener) previousRenderingErrorListener);\n            }\n            RenderingErrorListener renderingErrorListener \u003d new RenderingErrorListener() {\n\n                public void errorOccurred(RenderingError error) {\n                    observer.errorOccured(error.getErrorCode(), error.getErrorMessage());\n                }\n            };\n            VirtualUniverse.addRenderingErrorListener(renderingErrorListener);\n            return renderingErrorListener;\n        }\n    }\n\n    /**\n     * An observer that receives notifications during the different steps\n     * of the loop rendering a canvas 3D.\n     */\n    public static interface RenderingObserver {\n\n        /**\n         * Called before \u003ccode\u003ecanvas3D\u003c/code\u003e is rendered.\n         */\n        public void canvas3DPreRendered(Canvas3D canvas3D);\n\n        /**\n         * Called after \u003ccode\u003ecanvas3D\u003c/code\u003e is rendered.\n         */\n        public void canvas3DPostRendered(Canvas3D canvas3D);\n\n        /**\n         * Called after \u003ccode\u003ecanvas3D\u003c/code\u003e buffer is swapped.\n         */\n        public void canvas3DSwapped(Canvas3D canvas3D);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.j3d",
    "classname": "Component3DManager",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/Component3DManager_1Test.java",
    "test_prompt": "// Component3DManager_1Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.GraphicsConfigTemplate;\nimport java.awt.GraphicsConfiguration;\nimport java.awt.GraphicsDevice;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport javax.media.j3d.Canvas3D;\nimport javax.media.j3d.GraphicsConfigTemplate3D;\nimport javax.media.j3d.IllegalRenderingStateException;\nimport javax.media.j3d.ImageComponent2D;\nimport javax.media.j3d.RenderingError;\nimport javax.media.j3d.RenderingErrorListener;\nimport javax.media.j3d.Screen3D;\nimport javax.media.j3d.View;\nimport javax.media.j3d.VirtualUniverse;\nimport com.sun.j3d.utils.universe.SimpleUniverse;\nimport com.sun.j3d.utils.universe.Viewer;\nimport com.sun.j3d.utils.universe.ViewingPlatform;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Component3DManager}.\n* It contains ten unit test cases for the {@link Component3DManager#getOnscreenCanvas3D(RenderingObserver)} method.\n*/\nclass Component3DManager_1Test {",
    "method_signature": "getOnscreenCanvas3D(RenderingObserver)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ModelManager.java\n/*\n * ModelManager.java 4 juil. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\n\n/**\n * Singleton managing 3D models cache.\n * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.\n * Additional classes implementing Java 3D \u003ccode\u003eLoader\u003c/code\u003e interface may be\n * specified in the \u003ccode\u003ecom.eteks.sweethome3d.j3d.additionalLoaderClasses\u003c/code\u003e\n * (separated by a space or a colon :) to enable the support of other formats.\u003cbr\u003e\n * Note: this class is compatible with Java 3D 1.3.\n * @author Emmanuel Puybaret\n */\npublic class ModelManager {\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for window pane shapes.\n     */\n    public static final String WINDOW_PANE_SHAPE_PREFIX \u003d \"sweethome3d_window_pane\";\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for mirror shapes.\n     */\n    public static final String MIRROR_SHAPE_PREFIX \u003d \"sweethome3d_window_mirror\";\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for lights.\n     */\n    public static final String LIGHT_SHAPE_PREFIX \u003d \"sweethome3d_light\";\n\n    private static final TransparencyAttributes WINDOW_PANE_TRANSPARENCY_ATTRIBUTES \u003d new TransparencyAttributes(TransparencyAttributes.NICEST, 0.5f);\n\n    private static final Material DEFAULT_MATERIAL \u003d new Material();\n\n    private static final float MINIMUM_SIZE \u003d 0.001f;\n\n    private static final String ADDITIONAL_LOADER_CLASSES \u003d \"com.eteks.sweethome3d.j3d.additionalLoaderClasses\";\n\n    private static ModelManager instance;\n\n    // Map storing loaded model nodes\n    private Map\u003cContent, BranchGroup\u003e loadedModelNodes;\n\n    // Map storing model nodes being loaded\n    private Map\u003cContent, List\u003cModelObserver\u003e\u003e loadingModelObservers;\n\n    // Executor used to load models\n    private ExecutorService modelsLoader;\n\n    // List of additional loader classes\n    private Class\u003cLoader\u003e[] additionalLoaderClasses;\n\n    // SVG path Shapes\n    private final Map\u003cString, Shape\u003e parsedShapes;\n\n    private ModelManager() {\n        // This class is a singleton\n        this.loadedModelNodes \u003d new WeakHashMap\u003cContent, BranchGroup\u003e();\n        this.loadingModelObservers \u003d new HashMap\u003cContent, List\u003cModelObserver\u003e\u003e();\n        this.parsedShapes \u003d new WeakHashMap\u003cString, Shape\u003e();\n        // Load other optional Loader classes\n        List\u003cClass\u003cLoader\u003e\u003e loaderClasses \u003d new ArrayList\u003cClass\u003cLoader\u003e\u003e();\n        String loaderClassNames \u003d System.getProperty(ADDITIONAL_LOADER_CLASSES);\n        if (loaderClassNames !\u003d null) {\n            for (String loaderClassName : loaderClassNames.split(\"\\\\s|:\")) {\n                try {\n                    loaderClasses.add(getLoaderClass(loaderClassName));\n                } catch (IllegalArgumentException ex) {\n                    System.err.println(\"Invalid loader class \" + loaderClassName + \":\\n\" + ex.getMessage());\n                }\n            }\n        }\n        this.additionalLoaderClasses \u003d loaderClasses.toArray(new Class[loaderClasses.size()]);\n    }\n\n    /**\n     * Returns the class of name \u003ccode\u003eloaderClassName\u003c/code\u003e.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Class\u003cLoader\u003e getLoaderClass(String loaderClassName) {\n        try {\n            Class\u003cLoader\u003e loaderClass \u003d (Class\u003cLoader\u003e) getClass().getClassLoader().loadClass(loaderClassName);\n            if (!Loader.class.isAssignableFrom(loaderClass)) {\n                throw new IllegalArgumentException(loaderClassName + \" not a subclass of \" + Loader.class.getName());\n            } else if (Modifier.isAbstract(loaderClass.getModifiers()) || !Modifier.isPublic(loaderClass.getModifiers())) {\n                throw new IllegalArgumentException(loaderClassName + \" not a public static class\");\n            }\n            Constructor\u003cLoader\u003e constructor \u003d loaderClass.getConstructor(new Class[0]);\n            // Try to instantiate it now to see if it won\u0027t cause any problem\n            constructor.newInstance(new Object[0]);\n            return loaderClass;\n        } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (NoSuchMethodException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (InvocationTargetException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (IllegalAccessException ex) {\n            throw new IllegalArgumentException(loaderClassName + \" constructor not accessible\");\n        } catch (InstantiationException ex) {\n            throw new IllegalArgumentException(loaderClassName + \" not a public static class\");\n        }\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static ModelManager getInstance() {\n        if (instance \u003d\u003d null) {\n            instance \u003d new ModelManager();\n        }\n        return instance;\n    }\n\n    /**\n     * Shutdowns the multithreaded service that load textures.\n     */\n    public void clear() {\n        if (this.modelsLoader !\u003d null) {\n            this.modelsLoader.shutdownNow();\n            this.modelsLoader \u003d null;\n        }\n        synchronized (this.loadedModelNodes) {\n            this.loadedModelNodes.clear();\n        }\n    }\n\n    /**\n     * Returns the minimum size of a model.\n     */\n    float getMinimumSize() {\n        return MINIMUM_SIZE;\n    }\n\n    /**\n     * Returns the size of 3D shapes of \u003ccode\u003enode\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node) {\n        return getSize(node, new Transform3D());\n    }\n\n    /**\n     * Returns the size of 3D shapes of \u003ccode\u003enode\u003c/code\u003e after an additional \u003ccode\u003etransformation\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node, Transform3D transformation) {\n        BoundingBox bounds \u003d getBounds(node, transformation);\n        Point3d lower \u003d new Point3d();\n        bounds.getLower(lower);\n        Point3d upper \u003d new Point3d();\n        bounds.getUpper(upper);\n        return new Vector3f(Math.max(getMinimumSize(), (float) (upper.x - lower.x)), Math.max(getMinimumSize(), (float) (upper.y - lower.y)), Math.max(getMinimumSize(), (float) (upper.z - lower.z)));\n    }\n\n    /**\n     * Returns the bounds of the 3D shapes of \u003ccode\u003enode\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node) {\n        return getBounds(node, new Transform3D());\n    }\n\n    /**\n     * Returns the bounds of the 3D shapes of \u003ccode\u003enode\u003c/code\u003e with an additional \u003ccode\u003etransformation\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes, contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e\n     * that returns a bounding sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node, Transform3D transformation) {\n        BoundingBox objectBounds \u003d new BoundingBox(new Point3d(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY), new Point3d(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY));\n        computeBounds(node, objectBounds, transformation, !isOrthogonalRotation(transformation));\n        Point3d lower \u003d new Point3d();\n        objectBounds.getLower(lower);\n        if (lower.x \u003d\u003d Double.POSITIVE_INFINITY) {\n            throw new IllegalArgumentException(\"Node has no bounds\");\n        }\n        return objectBounds;\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the rotation matrix matches only rotations of\n     * a multiple of 90� degrees around x, y or z axis.\n     */\n    private boolean isOrthogonalRotation(Transform3D transformation) {\n        Matrix3f matrix \u003d new Matrix3f();\n        transformation.get(matrix);\n        for (int i \u003d 0; i \u003c 3; i++) {\n            for (int j \u003d 0; j \u003c 3; j++) {\n                // Return false if the matrix contains a value different from 0 1 or -1\n                if (Math.abs(matrix.getElement(i, j)) \u003e 1E-6 \u0026\u0026 Math.abs(matrix.getElement(i, j) - 1) \u003e 1E-6 \u0026\u0026 Math.abs(matrix.getElement(i, j) + 1) \u003e 1E-6) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private void computeBounds(Node node, BoundingBox bounds, Transform3D parentTransformations, boolean transformShapeGeometry) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute the bounds of all the node children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeBounds((Node) enumeration.nextElement(), bounds, parentTransformations, transformShapeGeometry);\n            }\n        } else if (node instanceof Link) {\n            computeBounds(((Link) node).getSharedGroup(), bounds, parentTransformations, transformShapeGeometry);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Bounds shapeBounds;\n            if (transformShapeGeometry) {\n                shapeBounds \u003d computeTransformedGeometryBounds(shape, parentTransformations);\n            } else {\n                shapeBounds \u003d shape.getBounds();\n                shapeBounds.transform(parentTransformations);\n            }\n            bounds.combine(shapeBounds);\n        }\n    }\n\n    private Bounds computeTransformedGeometryBounds(Shape3D shape, Transform3D transformation) {\n        Point3d lower \u003d new Point3d(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n        Point3d upper \u003d new Point3d(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n        for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n            Geometry geometry \u003d shape.getGeometry(i);\n            if (geometry instanceof GeometryArray) {\n                GeometryArray geometryArray \u003d (GeometryArray) geometry;\n                int vertexCount \u003d geometryArray.getVertexCount();\n                Point3f vertex \u003d new Point3f();\n                if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                    if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                        float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                        int vertexSize \u003d vertexData.length / vertexCount;\n                        for (int index \u003d 0, j \u003d vertexSize - 3; index \u003c vertexCount; j +\u003d vertexSize, index++) {\n                            vertex.x \u003d vertexData[j];\n                            vertex.y \u003d vertexData[j + 1];\n                            vertex.z \u003d vertexData[j + 2];\n                            updateBounds(vertex, transformation, lower, upper);\n                        }\n                    } else {\n                        float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                        for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j +\u003d 3, index++) {\n                            vertex.x \u003d vertexCoordinates[j];\n                            vertex.y \u003d vertexCoordinates[j + 1];\n                            vertex.z \u003d vertexCoordinates[j + 2];\n                            updateBounds(vertex, transformation, lower, upper);\n                        }\n                    }\n                } else {\n                    for (int index \u003d 0; index \u003c vertexCount; index++) {\n                        geometryArray.getCoordinate(index, vertex);\n                        updateBounds(vertex, transformation, lower, upper);\n                    }\n                }\n            } else {\n                Bounds shapeBounds \u003d shape.getBounds();\n                shapeBounds.transform(transformation);\n                return shapeBounds;\n            }\n        }\n        Bounds shapeBounds \u003d new BoundingBox(lower, upper);\n        return shapeBounds;\n    }\n\n    private void updateBounds(Point3f vertex, Transform3D transformation, Point3d lower, Point3d upper) {\n        transformation.transform(vertex);\n        if (lower.x \u003e vertex.x) {\n            lower.x \u003d vertex.x;\n        }\n        if (lower.y \u003e vertex.y) {\n            lower.y \u003d vertex.y;\n        }\n        if (lower.z \u003e vertex.z) {\n            lower.z \u003d vertex.z;\n        }\n        if (upper.x \u003c vertex.x) {\n            upper.x \u003d vertex.x;\n        }\n        if (upper.y \u003c vertex.y) {\n            upper.y \u003d vertex.y;\n        }\n        if (upper.z \u003c vertex.z) {\n            upper.z \u003d vertex.z;\n        }\n    }\n\n    /**\n     * Returns a transform group that will transform the model \u003ccode\u003enode\u003c/code\u003e\n     * to let it fill a box of the given \u003ccode\u003ewidth\u003c/code\u003e centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or \u003ccode\u003enull\u003c/code\u003e if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public TransformGroup getNormalizedTransformGroup(Node node, float[][] modelRotation, float width) {\n        return new TransformGroup(getNormalizedTransform(node, modelRotation, width));\n    }\n\n    /**\n     * Returns a transform that will transform the model \u003ccode\u003enode\u003c/code\u003e\n     * to let it fill a box of the given \u003ccode\u003ewidth\u003c/code\u003e centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or \u003ccode\u003enull\u003c/code\u003e if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public Transform3D getNormalizedTransform(Node node, float[][] modelRotation, float width) {\n        // Get model bounding box size\n        BoundingBox modelBounds \u003d getBounds(node);\n        Point3d lower \u003d new Point3d();\n        modelBounds.getLower(lower);\n        Point3d upper \u003d new Point3d();\n        modelBounds.getUpper(upper);\n        // Translate model to its center\n        Transform3D translation \u003d new Transform3D();\n        translation.setTranslation(new Vector3d(-lower.x - (upper.x - lower.x) / 2, -lower.y - (upper.y - lower.y) / 2, -lower.z - (upper.z - lower.z) / 2));\n        Transform3D modelTransform;\n        if (modelRotation !\u003d null) {\n            // Get model bounding box size with model rotation\n            Matrix3f modelRotationMatrix \u003d new Matrix3f(modelRotation[0][0], modelRotation[0][1], modelRotation[0][2], modelRotation[1][0], modelRotation[1][1], modelRotation[1][2], modelRotation[2][0], modelRotation[2][1], modelRotation[2][2]);\n            modelTransform \u003d new Transform3D();\n            modelTransform.setRotation(modelRotationMatrix);\n            modelTransform.mul(translation);\n            BoundingBox rotatedModelBounds \u003d getBounds(node, modelTransform);\n            rotatedModelBounds.getLower(lower);\n            rotatedModelBounds.getUpper(upper);\n        } else {\n            modelTransform \u003d translation;\n        }\n        // Scale model to make it fill a 1 unit wide box\n        Transform3D scaleOneTransform \u003d new Transform3D();\n        scaleOneTransform.setScale(new Vector3d(width / Math.max(getMinimumSize(), upper.x - lower.x), width / Math.max(getMinimumSize(), upper.y - lower.y), width / Math.max(getMinimumSize(), upper.z - lower.z)));\n        scaleOneTransform.mul(modelTransform);\n        return scaleOneTransform;\n    }\n\n    /**\n     * Reads asynchronously a 3D node from \u003ccode\u003econtent\u003c/code\u003e with supported loaders\n     * and notifies the loaded model to the given \u003ccode\u003emodelObserver\u003c/code\u003e once available.\n     * @param content an object containing a model\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens\n     * @throws IllegalStateException if the current thread isn\u0027t the Event Dispatch Thread.\n     */\n    public void loadModel(Content content, ModelObserver modelObserver) {\n        loadModel(content, false, modelObserver);\n    }\n\n    /**\n     * Reads a 3D node from \u003ccode\u003econtent\u003c/code\u003e with supported loaders\n     * and notifies the loaded model to the given \u003ccode\u003emodelObserver\u003c/code\u003e once available.\n     * @param content an object containing a model\n     * @param synchronous if \u003ccode\u003etrue\u003c/code\u003e, this method will return only once model content is loaded\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens. When the model is loaded synchronously, the observer will be notified\n     *    in the same thread as the caller, otherwise the observer will be notified in the Event\n     *    Dispatch Thread and this method must be called in Event Dispatch Thread too.\n     * @throws IllegalStateException if synchronous is \u003ccode\u003efalse\u003c/code\u003e and the current thread isn\u0027t\n     *    the Event Dispatch Thread.\n     */\n    public void loadModel(final Content content, boolean synchronous, ModelObserver modelObserver) {\n        BranchGroup modelRoot;\n        synchronized (this.loadedModelNodes) {\n            modelRoot \u003d this.loadedModelNodes.get(content);\n        }\n        if (modelRoot !\u003d null) {\n            // Notify cached model to observer with a clone of the model\n            modelObserver.modelUpdated((BranchGroup) cloneNode(modelRoot));\n        } else if (synchronous) {\n            try {\n                modelRoot \u003d loadModel(content);\n                synchronized (this.loadedModelNodes) {\n                    // Store in cache model node for future copies\n                    this.loadedModelNodes.put(content, (BranchGroup) modelRoot);\n                }\n                modelObserver.modelUpdated((BranchGroup) cloneNode(modelRoot));\n            } catch (IOException ex) {\n                modelObserver.modelError(ex);\n            }\n        } else if (!EventQueue.isDispatchThread()) {\n            throw new IllegalStateException(\"Asynchronous call out of Event Dispatch Thread\");\n        } else {\n            if (this.modelsLoader \u003d\u003d null) {\n                this.modelsLoader \u003d Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n            }\n            List\u003cModelObserver\u003e observers \u003d this.loadingModelObservers.get(content);\n            if (observers !\u003d null) {\n                // If observers list exists, content model is already being loaded\n                // register observer for future notification\n                observers.add(modelObserver);\n            } else {\n                // Create a list of observers that will be notified once content model is loaded\n                observers \u003d new ArrayList\u003cModelObserver\u003e();\n                observers.add(modelObserver);\n                this.loadingModelObservers.put(content, observers);\n                // Load the model in an other thread\n                this.modelsLoader.execute(new Runnable() {\n\n                    public void run() {\n                        try {\n                            final BranchGroup loadedModel \u003d loadModel(content);\n                            synchronized (loadedModelNodes) {\n                                // Update loaded models cache and notify registered observers\n                                loadedModelNodes.put(content, loadedModel);\n                            }\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    for (final ModelObserver observer : loadingModelObservers.remove(content)) {\n                                        observer.modelUpdated((BranchGroup) cloneNode(loadedModel));\n                                    }\n                                }\n                            });\n                        } catch (final IOException ex) {\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    for (final ModelObserver observer : loadingModelObservers.remove(content)) {\n                                        observer.modelError(ex);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns a clone of the given \u003ccode\u003enode\u003c/code\u003e.\n     * All the children and the attributes of the given node are duplicated except the geometries\n     * and the texture images of shapes.\n     */\n    public Node cloneNode(Node node) {\n        // Clone node in a synchronized block because cloneNodeComponent is not thread safe\n        synchronized (this.loadedModelNodes) {\n            return cloneNode(node, new HashMap\u003cSharedGroup, SharedGroup\u003e());\n        }\n    }\n\n    private Node cloneNode(Node node, Map\u003cSharedGroup, SharedGroup\u003e clonedSharedGroups) {\n        if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Shape3D clonedShape \u003d (Shape3D) shape.cloneNode(false);\n            Appearance appearance \u003d shape.getAppearance();\n            if (appearance !\u003d null) {\n                // Force only duplication of node\u0027s appearance except its texture\n                Appearance clonedAppearance \u003d (Appearance) appearance.cloneNodeComponent(true);\n                Texture texture \u003d appearance.getTexture();\n                if (texture !\u003d null) {\n                    clonedAppearance.setTexture(texture);\n                }\n                clonedShape.setAppearance(clonedAppearance);\n            }\n            return clonedShape;\n        } else if (node instanceof Link) {\n            Link clonedLink \u003d (Link) node.cloneNode(true);\n            // Force duplication of shared groups too\n            SharedGroup sharedGroup \u003d clonedLink.getSharedGroup();\n            if (sharedGroup !\u003d null) {\n                SharedGroup clonedSharedGroup \u003d clonedSharedGroups.get(sharedGroup);\n                if (clonedSharedGroup \u003d\u003d null) {\n                    clonedSharedGroup \u003d (SharedGroup) cloneNode(sharedGroup, clonedSharedGroups);\n                    clonedSharedGroups.put(sharedGroup, clonedSharedGroup);\n                }\n                clonedLink.setSharedGroup(clonedSharedGroup);\n            }\n            return clonedLink;\n        } else {\n            Node clonedNode \u003d node.cloneNode(true);\n            if (node instanceof Group) {\n                Group group \u003d (Group) node;\n                Group clonedGroup \u003d (Group) clonedNode;\n                for (int i \u003d 0, n \u003d group.numChildren(); i \u003c n; i++) {\n                    Node clonedChild \u003d cloneNode(group.getChild(i), clonedSharedGroups);\n                    clonedGroup.addChild(clonedChild);\n                }\n            }\n            return clonedNode;\n        }\n    }\n\n    /**\n     * Returns the node loaded synchronously from \u003ccode\u003econtent\u003c/code\u003e with supported loaders.\n     * This method is threadsafe and may be called from any thread.\n     * @param content an object containing a model\n     */\n    public BranchGroup loadModel(Content content) throws IOException {\n        // Ensure we use a URLContent object\n        URLContent urlContent;\n        if (content instanceof URLContent) {\n            urlContent \u003d (URLContent) content;\n        } else {\n            urlContent \u003d TemporaryURLContent.copyToTemporaryURLContent(content);\n        }\n        Loader3DS loader3DSWithNoStackTraces \u003d new Loader3DS() {\n\n            @Override\n            public Scene load(URL url) throws FileNotFoundException, IncorrectFormatException {\n                try {\n                    // Check magic number 0x4D4D\n                    InputStream in \u003d url.openStream();\n                    int b1 \u003d in.read();\n                    int b2 \u003d in.read();\n                    if (b1 !\u003d 0x4D || b2 !\u003d 0x4D) {\n                        throw new IncorrectFormatException(\"Bad magic number\");\n                    }\n                    in.close();\n                } catch (FileNotFoundException ex) {\n                    throw ex;\n                } catch (IOException ex) {\n                    throw new ParsingErrorException(\"Can\u0027t read url \" + url);\n                }\n                PrintStream defaultSystemErrorStream \u003d System.err;\n                try {\n                    // Ignore stack traces on System.err during 3DS file loading\n                    System.setErr(new PrintStream(new OutputStream() {\n\n                        @Override\n                        public void write(int b) throws IOException {\n                            // Do nothing\n                        }\n                    }));\n                    // Default load\n                    return super.load(url);\n                } finally {\n                    // Reset default err print stream\n                    System.setErr(defaultSystemErrorStream);\n                }\n            }\n        };\n        Loader[] defaultLoaders \u003d new Loader[] { new OBJLoader(), new DAELoader(), loader3DSWithNoStackTraces, new Lw3dLoader() };\n        Loader[] loaders \u003d new Loader[defaultLoaders.length + this.additionalLoaderClasses.length];\n        System.arraycopy(defaultLoaders, 0, loaders, 0, defaultLoaders.length);\n        for (int i \u003d 0; i \u003c this.additionalLoaderClasses.length; i++) {\n            try {\n                loaders[defaultLoaders.length + i] \u003d this.additionalLoaderClasses[i].newInstance();\n            } catch (InstantiationException ex) {\n                // Can\u0027t happen: getLoaderClass checked this class is instantiable\n                throw new InternalError(ex.getMessage());\n            } catch (IllegalAccessException ex) {\n                // Can\u0027t happen: getLoaderClass checked this class is instantiable\n                throw new InternalError(ex.getMessage());\n            }\n        }\n        Exception lastException \u003d null;\n        for (Loader loader : loaders) {\n            try {\n                // Ask loader to ignore lights, fogs...\n                loader.setFlags(loader.getFlags() \u0026 ~(Loader.LOAD_LIGHT_NODES | Loader.LOAD_FOG_NODES | Loader.LOAD_BACKGROUND_NODES | Loader.LOAD_VIEW_GROUPS));\n                // Return the first scene that can be loaded from model URL content\n                Scene scene \u003d loader.load(urlContent.getURL());\n                BranchGroup modelNode \u003d scene.getSceneGroup();\n                // If model doesn\u0027t have any child, consider the file as wrong\n                if (modelNode.numChildren() \u003d\u003d 0) {\n                    throw new IllegalArgumentException(\"Empty model\");\n                }\n                // Update transparency of scene window panes shapes\n                updateShapeNamesAndWindowPanesTransparency(scene);\n                // Turn off lights because some loaders don\u0027t take into account the ~LOAD_LIGHT_NODES flag\n                turnOffLightsShareAndModulateTextures(modelNode);\n                return modelNode;\n            } catch (IllegalArgumentException ex) {\n                lastException \u003d ex;\n            } catch (IncorrectFormatException ex) {\n                lastException \u003d ex;\n            } catch (ParsingErrorException ex) {\n                lastException \u003d ex;\n            } catch (IOException ex) {\n                lastException \u003d ex;\n            } catch (RuntimeException ex) {\n                // Take into account exceptions of Java 3D 1.5 ImageException class\n                // in such a way program can run in Java 3D 1.3.1\n                if (ex.getClass().getName().equals(\"com.sun.j3d.utils.image.ImageException\")) {\n                    lastException \u003d ex;\n                } else {\n                    throw ex;\n                }\n            }\n        }\n        if (lastException instanceof IOException) {\n            throw (IOException) lastException;\n        } else if (lastException instanceof IncorrectFormatException) {\n            IOException incorrectFormatException \u003d new IOException(\"Incorrect format\");\n            incorrectFormatException.initCause(lastException);\n            throw incorrectFormatException;\n        } else if (lastException instanceof ParsingErrorException) {\n            IOException incorrectFormatException \u003d new IOException(\"Parsing error\");\n            incorrectFormatException.initCause(lastException);\n            throw incorrectFormatException;\n        } else {\n            IOException otherException \u003d new IOException();\n            otherException.initCause(lastException);\n            throw otherException;\n        }\n    }\n\n    /**\n     * Updates the name of scene shapes and transparency window panes shapes.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void updateShapeNamesAndWindowPanesTransparency(Scene scene) {\n        Map\u003cString, Object\u003e namedObjects \u003d scene.getNamedObjects();\n        for (Map.Entry\u003cString, Object\u003e entry : namedObjects.entrySet()) {\n            if (entry.getValue() instanceof Shape3D) {\n                String shapeName \u003d entry.getKey();\n                // Assign shape name to its user data\n                Shape3D shape \u003d (Shape3D) entry.getValue();\n                shape.setUserData(shapeName);\n                if (shapeName.startsWith(WINDOW_PANE_SHAPE_PREFIX)) {\n                    Appearance appearance \u003d shape.getAppearance();\n                    if (appearance \u003d\u003d null) {\n                        appearance \u003d new Appearance();\n                        shape.setAppearance(appearance);\n                    }\n                    if (appearance.getTransparencyAttributes() \u003d\u003d null) {\n                        appearance.setTransparencyAttributes(WINDOW_PANE_TRANSPARENCY_ATTRIBUTES);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Turns off light nodes of \u003ccode\u003enode\u003c/code\u003e children,\n     * and modulates textures if needed.\n     */\n    private void turnOffLightsShareAndModulateTextures(Node node) {\n        if (node instanceof Group) {\n            // Enumerate children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                turnOffLightsShareAndModulateTextures((Node) enumeration.nextElement());\n            }\n        } else if (node instanceof Link) {\n            turnOffLightsShareAndModulateTextures(((Link) node).getSharedGroup());\n        } else if (node instanceof Light) {\n            ((Light) node).setEnable(false);\n        } else if (node instanceof Shape3D) {\n            Appearance appearance \u003d ((Shape3D) node).getAppearance();\n            if (appearance !\u003d null) {\n                Texture texture \u003d appearance.getTexture();\n                if (texture !\u003d null) {\n                    // Share textures data as much as possible\n                    Texture sharedTexture \u003d TextureManager.getInstance().shareTexture(texture);\n                    if (sharedTexture !\u003d texture) {\n                        appearance.setTexture(sharedTexture);\n                    }\n                    TextureAttributes textureAttributes \u003d appearance.getTextureAttributes();\n                    if (textureAttributes \u003d\u003d null) {\n                        // Mix texture and shape color\n                        textureAttributes \u003d new TextureAttributes();\n                        textureAttributes.setTextureMode(TextureAttributes.MODULATE);\n                        appearance.setTextureAttributes(textureAttributes);\n                        // Check shape color is white\n                        Material material \u003d appearance.getMaterial();\n                        if (material \u003d\u003d null) {\n                            appearance.setMaterial((Material) DEFAULT_MATERIAL.cloneNodeComponent(true));\n                        } else {\n                            Color3f color \u003d new Color3f();\n                            DEFAULT_MATERIAL.getDiffuseColor(color);\n                            material.setDiffuseColor(color);\n                            DEFAULT_MATERIAL.getAmbientColor(color);\n                            material.setAmbientColor(color);\n                        }\n                    }\n                    // If texture image supports transparency\n                    if (TextureManager.getInstance().isTextureTransparent(sharedTexture)) {\n                        if (appearance.getTransparencyAttributes() \u003d\u003d null) {\n                            // Add transparency attributes to ensure transparency works\n                            appearance.setTransparencyAttributes(new TransparencyAttributes(TransparencyAttributes.NICEST, 0));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the 2D area of the 3D shapes children of the given \u003ccode\u003enode\u003c/code\u003e\n     * projected on the floor (plan y \u003d 0).\n     */\n    public Area getAreaOnFloor(Node node) {\n        Area modelAreaOnFloor;\n        int vertexCount \u003d getVertexCount(node);\n        if (vertexCount \u003c 10000) {\n            modelAreaOnFloor \u003d new Area();\n            computeAreaOnFloor(node, modelAreaOnFloor, new Transform3D());\n        } else {\n            List\u003cfloat[]\u003e vertices \u003d new ArrayList\u003cfloat[]\u003e(vertexCount);\n            computeVerticesOnFloor(node, vertices, new Transform3D());\n            float[][] surroundingPolygon \u003d getSurroundingPolygon(vertices.toArray(new float[vertices.size()][]));\n            GeneralPath generalPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, surroundingPolygon.length);\n            generalPath.moveTo(surroundingPolygon[0][0], surroundingPolygon[0][1]);\n            for (int i \u003d 0; i \u003c surroundingPolygon.length; i++) {\n                generalPath.lineTo(surroundingPolygon[i][0], surroundingPolygon[i][1]);\n            }\n            generalPath.closePath();\n            modelAreaOnFloor \u003d new Area(generalPath);\n        }\n        return modelAreaOnFloor;\n    }\n\n    /**\n     * Returns the total count of vertices in all geometries.\n     */\n    private int getVertexCount(Node node) {\n        int count \u003d 0;\n        if (node instanceof Group) {\n            // Enumerate all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                count +\u003d getVertexCount((Node) enumeration.nextElement());\n            }\n        } else if (node instanceof Link) {\n            count \u003d getVertexCount(((Link) node).getSharedGroup());\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            if (renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) {\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    Geometry geometry \u003d shape.getGeometry(i);\n                    if (geometry instanceof GeometryArray) {\n                        count +\u003d ((GeometryArray) geometry).getVertexCount();\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Computes the vertices coordinates projected on floor of the 3D shapes children of \u003ccode\u003enode\u003c/code\u003e.\n     */\n    private void computeVerticesOnFloor(Node node, List\u003cfloat[]\u003e vertices, Transform3D parentTransformations) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeVerticesOnFloor((Node) enumeration.nextElement(), vertices, parentTransformations);\n            }\n        } else if (node instanceof Link) {\n            computeVerticesOnFloor(((Link) node).getSharedGroup(), vertices, parentTransformations);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            TransparencyAttributes transparencyAttributes \u003d appearance !\u003d null ? appearance.getTransparencyAttributes() : null;\n            if ((renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) \u0026\u0026 (transparencyAttributes \u003d\u003d null || transparencyAttributes.getTransparency() \u003c 1)) {\n                // Compute shape geometries area\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    Geometry geometry \u003d shape.getGeometry(i);\n                    if (geometry instanceof GeometryArray) {\n                        GeometryArray geometryArray \u003d (GeometryArray) geometry;\n                        int vertexCount \u003d geometryArray.getVertexCount();\n                        Point3f vertex \u003d new Point3f();\n                        if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                            if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                                float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                                int vertexSize \u003d vertexData.length / vertexCount;\n                                // Store vertices coordinates\n                                for (int index \u003d 0, j \u003d vertexSize - 3; index \u003c vertexCount; j +\u003d vertexSize, index++) {\n                                    vertex.x \u003d vertexData[j];\n                                    vertex.y \u003d vertexData[j + 1];\n                                    vertex.z \u003d vertexData[j + 2];\n                                    parentTransformations.transform(vertex);\n                                    vertices.add(new float[] { vertex.x, vertex.z });\n                                }\n                            } else {\n                                // Store vertices coordinates\n                                float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                                for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j +\u003d 3, index++) {\n                                    vertex.x \u003d vertexCoordinates[j];\n                                    vertex.y \u003d vertexCoordinates[j + 1];\n                                    vertex.z \u003d vertexCoordinates[j + 2];\n                                    parentTransformations.transform(vertex);\n                                    vertices.add(new float[] { vertex.x, vertex.z });\n                                }\n                            }\n                        } else {\n                            // Store vertices coordinates\n                            for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j++, index++) {\n                                geometryArray.getCoordinate(j, vertex);\n                                parentTransformations.transform(vertex);\n                                vertices.add(new float[] { vertex.x, vertex.z });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Computes the 2D area on floor of the 3D shapes children of \u003ccode\u003enode\u003c/code\u003e.\n     */\n    private void computeAreaOnFloor(Node node, Area nodeArea, Transform3D parentTransformations) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeAreaOnFloor((Node) enumeration.nextElement(), nodeArea, parentTransformations);\n            }\n        } else if (node instanceof Link) {\n            computeAreaOnFloor(((Link) node).getSharedGroup(), nodeArea, parentTransformations);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            TransparencyAttributes transparencyAttributes \u003d appearance !\u003d null ? appearance.getTransparencyAttributes() : null;\n            if ((renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) \u0026\u0026 (transparencyAttributes \u003d\u003d null || transparencyAttributes.getTransparency() \u003c 1)) {\n                // Compute shape geometries area\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    computeGeometryAreaOnFloor(shape.getGeometry(i), parentTransformations, nodeArea);\n                }\n            }\n        }\n    }\n\n    /**\n     * Computes the area on floor of a 3D geometry.\n     */\n    private void computeGeometryAreaOnFloor(Geometry geometry, Transform3D parentTransformations, Area nodeArea) {\n        if (geometry instanceof GeometryArray) {\n            GeometryArray geometryArray \u003d (GeometryArray) geometry;\n            int vertexCount \u003d geometryArray.getVertexCount();\n            float[] vertices \u003d new float[vertexCount * 2];\n            Point3f vertex \u003d new Point3f();\n            if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                    float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                    int vertexSize \u003d vertexData.length / vertexCount;\n                    // Store vertices coordinates\n                    for (int index \u003d 0, i \u003d vertexSize - 3; index \u003c vertices.length; i +\u003d vertexSize) {\n                        vertex.x \u003d vertexData[i];\n                        vertex.y \u003d vertexData[i + 1];\n                        vertex.z \u003d vertexData[i + 2];\n                        parentTransformations.transform(vertex);\n                        vertices[index++] \u003d vertex.x;\n                        vertices[index++] \u003d vertex.z;\n                    }\n                } else {\n                    // Store vertices coordinates\n                    float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                    for (int index \u003d 0, i \u003d 0; index \u003c vertices.length; i +\u003d 3) {\n                        vertex.x \u003d vertexCoordinates[i];\n                        vertex.y \u003d vertexCoordinates[i + 1];\n                        vertex.z \u003d vertexCoordinates[i + 2];\n                        parentTransformations.transform(vertex);\n                        vertices[index++] \u003d vertex.x;\n                        vertices[index++] \u003d vertex.z;\n                    }\n                }\n            } else {\n                // Store vertices coordinates\n                for (int index \u003d 0, i \u003d 0; index \u003c vertices.length; i++) {\n                    geometryArray.getCoordinate(i, vertex);\n                    parentTransformations.transform(vertex);\n                    vertices[index++] \u003d vertex.x;\n                    vertices[index++] \u003d vertex.z;\n                }\n            }\n            // Create path from triangles or quadrilaterals of geometry\n            GeneralPath geometryPath \u003d null;\n            if (geometryArray instanceof IndexedGeometryArray) {\n                if (geometryArray instanceof IndexedTriangleArray) {\n                    IndexedTriangleArray triangleArray \u003d (IndexedTriangleArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, triangleIndex \u003d 0, n \u003d triangleArray.getIndexCount(); i \u003c n; i +\u003d 3) {\n                        addIndexedTriangleToPath(triangleArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof IndexedQuadArray) {\n                    IndexedQuadArray quadArray \u003d (IndexedQuadArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, quadrilateralIndex \u003d 0, n \u003d quadArray.getIndexCount(); i \u003c n; i +\u003d 4) {\n                        addIndexedQuadrilateralToPath(quadArray, i, i + 1, i + 2, i + 3, vertices, geometryPath, quadrilateralIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof IndexedGeometryStripArray) {\n                    IndexedGeometryStripArray geometryStripArray \u003d (IndexedGeometryStripArray) geometryArray;\n                    int[] stripIndexCounts \u003d new int[geometryStripArray.getNumStrips()];\n                    geometryStripArray.getStripIndexCounts(stripIndexCounts);\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    int initialIndex \u003d 0;\n                    if (geometryStripArray instanceof IndexedTriangleStripArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripIndexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripIndexCounts[strip] - 2, j \u003d 0; i \u003c n; i++, j++) {\n                                if (j % 2 \u003d\u003d 0) {\n                                    addIndexedTriangleToPath(geometryStripArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                                } else {\n                                    // Vertices of odd triangles are in reverse order\n                                    addIndexedTriangleToPath(geometryStripArray, i, i + 2, i + 1, vertices, geometryPath, triangleIndex++, nodeArea);\n                                }\n                            }\n                            initialIndex +\u003d stripIndexCounts[strip];\n                        }\n                    } else if (geometryStripArray instanceof IndexedTriangleFanArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripIndexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripIndexCounts[strip] - 2; i \u003c n; i++) {\n                                addIndexedTriangleToPath(geometryStripArray, initialIndex, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                            }\n                            initialIndex +\u003d stripIndexCounts[strip];\n                        }\n                    }\n                }\n            } else {\n                if (geometryArray instanceof TriangleArray) {\n                    TriangleArray triangleArray \u003d (TriangleArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, triangleIndex \u003d 0; i \u003c vertexCount; i +\u003d 3) {\n                        addTriangleToPath(triangleArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof QuadArray) {\n                    QuadArray quadArray \u003d (QuadArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, quadrilateralIndex \u003d 0; i \u003c vertexCount; i +\u003d 4) {\n                        addQuadrilateralToPath(quadArray, i, i + 1, i + 2, i + 3, vertices, geometryPath, quadrilateralIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof GeometryStripArray) {\n                    GeometryStripArray geometryStripArray \u003d (GeometryStripArray) geometryArray;\n                    int[] stripVertexCounts \u003d new int[geometryStripArray.getNumStrips()];\n                    geometryStripArray.getStripVertexCounts(stripVertexCounts);\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    int initialIndex \u003d 0;\n                    if (geometryStripArray instanceof TriangleStripArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripVertexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripVertexCounts[strip] - 2, j \u003d 0; i \u003c n; i++, j++) {\n                                if (j % 2 \u003d\u003d 0) {\n                                    addTriangleToPath(geometryStripArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                                } else {\n                                    // Vertices of odd triangles are in reverse order\n                                    addTriangleToPath(geometryStripArray, i, i + 2, i + 1, vertices, geometryPath, triangleIndex++, nodeArea);\n                                }\n                            }\n                            initialIndex +\u003d stripVertexCounts[strip];\n                        }\n                    } else if (geometryStripArray instanceof TriangleFanArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripVertexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripVertexCounts[strip] - 2; i \u003c n; i++) {\n                                addTriangleToPath(geometryStripArray, initialIndex, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                            }\n                            initialIndex +\u003d stripVertexCounts[strip];\n                        }\n                    }\n                }\n            }\n            if (geometryPath !\u003d null) {\n                nodeArea.add(new Area(geometryPath));\n            }\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices.\n     */\n    private void addIndexedTriangleToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea) {\n        addTriangleToPath(geometryArray, geometryArray.getCoordinateIndex(vertexIndex1), geometryArray.getCoordinateIndex(vertexIndex2), geometryArray.getCoordinateIndex(vertexIndex3), vertices, geometryPath, triangleIndex, nodeArea);\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices.\n     */\n    private void addIndexedQuadrilateralToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea) {\n        addQuadrilateralToPath(geometryArray, geometryArray.getCoordinateIndex(vertexIndex1), geometryArray.getCoordinateIndex(vertexIndex2), geometryArray.getCoordinateIndex(vertexIndex3), geometryArray.getCoordinateIndex(vertexIndex4), vertices, geometryPath, quadrilateralIndex, nodeArea);\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices,\n     * only if the triangle has a positive orientation.\n     */\n    private void addTriangleToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea) {\n        float xVertex1 \u003d vertices[2 * vertexIndex1];\n        float yVertex1 \u003d vertices[2 * vertexIndex1 + 1];\n        float xVertex2 \u003d vertices[2 * vertexIndex2];\n        float yVertex2 \u003d vertices[2 * vertexIndex2 + 1];\n        float xVertex3 \u003d vertices[2 * vertexIndex3];\n        float yVertex3 \u003d vertices[2 * vertexIndex3 + 1];\n        if ((xVertex2 - xVertex1) * (yVertex3 - yVertex2) - (yVertex2 - yVertex1) * (xVertex3 - xVertex2) \u003e 0) {\n            if (triangleIndex \u003e 0 \u0026\u0026 triangleIndex % 1000 \u003d\u003d 0) {\n                // Add now current path to area otherwise area gets too slow\n                nodeArea.add(new Area(geometryPath));\n                geometryPath.reset();\n            }\n            geometryPath.moveTo(xVertex1, yVertex1);\n            geometryPath.lineTo(xVertex2, yVertex2);\n            geometryPath.lineTo(xVertex3, yVertex3);\n            geometryPath.closePath();\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices,\n     * only if the quadrilateral has a positive orientation.\n     */\n    private void addQuadrilateralToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea) {\n        float xVertex1 \u003d vertices[2 * vertexIndex1];\n        float yVertex1 \u003d vertices[2 * vertexIndex1 + 1];\n        float xVertex2 \u003d vertices[2 * vertexIndex2];\n        float yVertex2 \u003d vertices[2 * vertexIndex2 + 1];\n        float xVertex3 \u003d vertices[2 * vertexIndex3];\n        float yVertex3 \u003d vertices[2 * vertexIndex3 + 1];\n        if ((xVertex2 - xVertex1) * (yVertex3 - yVertex2) - (yVertex2 - yVertex1) * (xVertex3 - xVertex2) \u003e 0) {\n            if (quadrilateralIndex \u003e 0 \u0026\u0026 quadrilateralIndex % 1000 \u003d\u003d 0) {\n                // Add now current path to area otherwise area gets too slow\n                nodeArea.add(new Area(geometryPath));\n                geometryPath.reset();\n            }\n            geometryPath.moveTo(xVertex1, yVertex1);\n            geometryPath.lineTo(xVertex2, yVertex2);\n            geometryPath.lineTo(xVertex3, yVertex3);\n            geometryPath.lineTo(vertices[2 * vertexIndex4], vertices[2 * vertexIndex4 + 1]);\n            geometryPath.closePath();\n        }\n    }\n\n    /**\n     * Returns the convex polygon that surrounds the given \u003ccode\u003evertices\u003c/code\u003e.\n     * From Andrew\u0027s monotone chain 2D convex hull algorithm described at\n     * http://softsurfer.com/Archive/algorithm%5F0109/algorithm%5F0109.htm\n     */\n    private float[][] getSurroundingPolygon(float[][] vertices) {\n        Arrays.sort(vertices, new Comparator\u003cfloat[]\u003e() {\n\n            public int compare(float[] vertex1, float[] vertex2) {\n                if (vertex1[0] \u003d\u003d vertex2[0]) {\n                    return (int) Math.signum(vertex2[1] - vertex1[1]);\n                } else {\n                    return (int) Math.signum(vertex2[0] - vertex1[0]);\n                }\n            }\n        });\n        float[][] polygon \u003d new float[vertices.length][];\n        // The output array polygon [] will be used as the stack\n        // indices for bottom and top of the stack\n        int bottom \u003d 0, top \u003d -1;\n        // array scan index\n        int i;\n        // Get the indices of points with min x-coord and min|max y-coord\n        int minMin \u003d 0, minMax;\n        float xmin \u003d vertices[0][0];\n        for (i \u003d 1; i \u003c vertices.length; i++) {\n            if (vertices[i][0] !\u003d xmin) {\n                break;\n            }\n        }\n        minMax \u003d i - 1;\n        if (minMax \u003d\u003d vertices.length - 1) {\n            // Degenerate case: all x-coords \u003d\u003d xmin\n            polygon[++top] \u003d vertices[minMin];\n            if (vertices[minMax][1] !\u003d vertices[minMin][1]) {\n                // A nontrivial segment\n                polygon[++top] \u003d vertices[minMax];\n            }\n            // Add polygon end point\n            polygon[++top] \u003d vertices[minMin];\n            float[][] surroundingPolygon \u003d new float[top + 1][];\n            System.arraycopy(polygon, 0, surroundingPolygon, 0, surroundingPolygon.length);\n        }\n        // Get the indices of points with max x-coord and min|max y-coord\n        int maxMin, maxMax \u003d vertices.length - 1;\n        float xMax \u003d vertices[vertices.length - 1][0];\n        for (i \u003d vertices.length - 2; i \u003e\u003d 0; i--) {\n            if (vertices[i][0] !\u003d xMax) {\n                break;\n            }\n        }\n        maxMin \u003d i + 1;\n        // Compute the lower hull on the stack polygon\n        // push minmin point onto stack\n        polygon[++top] \u003d vertices[minMin];\n        i \u003d minMax;\n        while (++i \u003c\u003d maxMin) {\n            // The lower line joins points [minmin] with points [maxmin]\n            if (isLeft(vertices[minMin], vertices[maxMin], vertices[i]) \u003e\u003d 0 \u0026\u0026 i \u003c maxMin) {\n                // ignore points [i] above or on the lower line\n                continue;\n            }\n            while (// There are at least 2 points on the stack\n            top \u003e 0) {\n                // Test if points [i] is left of the line at the stack top\n                if (isLeft(polygon[top - 1], polygon[top], vertices[i]) \u003e 0)\n                    // points [i] is a new hull vertex\n                    break;\n                else\n                    // pop top point off stack\n                    top--;\n            }\n            // push points [i] onto stack\n            polygon[++top] \u003d vertices[i];\n        }\n        // Next, compute the upper hull on the stack polygon above the bottom hull\n        // If distinct xmax points\n        if (maxMax !\u003d maxMin) {\n            // Push maxmax point onto stack\n            polygon[++top] \u003d vertices[maxMax];\n        }\n        // The bottom point of the upper hull stack\n        bottom \u003d top;\n        i \u003d maxMin;\n        while (--i \u003e\u003d minMax) {\n            // The upper line joins points [maxmax] with points [minmax]\n            if (isLeft(vertices[maxMax], vertices[minMax], vertices[i]) \u003e\u003d 0 \u0026\u0026 i \u003e minMax) {\n                // Ignore points [i] below or on the upper line\n                continue;\n            }\n            // At least 2 points on the upper stack\n            while (top \u003e bottom) {\n                // Test if points [i] is left of the line at the stack top\n                if (isLeft(polygon[top - 1], polygon[top], vertices[i]) \u003e 0) {\n                    // points [i] is a new hull vertex\n                    break;\n                } else {\n                    // Pop top point off stack\n                    top--;\n                }\n            }\n            // Push points [i] onto stack\n            polygon[++top] \u003d vertices[i];\n        }\n        if (minMax !\u003d minMin) {\n            // Push joining endpoint onto stack\n            polygon[++top] \u003d vertices[minMin];\n        }\n        float[][] surroundingPolygon \u003d new float[top + 1][];\n        System.arraycopy(polygon, 0, surroundingPolygon, 0, surroundingPolygon.length);\n        return surroundingPolygon;\n    }\n\n    private float isLeft(float[] vertex0, float[] vertex1, float[] vertex2) {\n        return (vertex1[0] - vertex0[0]) * (vertex2[1] - vertex0[1]) - (vertex2[0] - vertex0[0]) * (vertex1[1] - vertex0[1]);\n    }\n\n    /**\n     * Returns the area on the floor of the given staircase.\n     */\n    public Area getAreaOnFloor(HomePieceOfFurniture staircase) {\n        if (staircase.getStaircaseCutOutShape() \u003d\u003d null) {\n            throw new IllegalArgumentException(\"No cut out shape associated to piece\");\n        }\n        Shape shape \u003d parseShape(staircase.getStaircaseCutOutShape());\n        Area staircaseArea \u003d new Area(shape);\n        if (staircase.isModelMirrored()) {\n            staircaseArea \u003d getMirroredArea(staircaseArea);\n        }\n        AffineTransform staircaseTransform \u003d AffineTransform.getTranslateInstance(staircase.getX() - staircase.getWidth() / 2, staircase.getY() - staircase.getDepth() / 2);\n        staircaseTransform.concatenate(AffineTransform.getRotateInstance(staircase.getAngle(), staircase.getWidth() / 2, staircase.getDepth() / 2));\n        staircaseTransform.concatenate(AffineTransform.getScaleInstance(staircase.getWidth(), staircase.getDepth()));\n        staircaseArea.transform(staircaseTransform);\n        return staircaseArea;\n    }\n\n    /**\n     * Returns the mirror area of the given \u003ccode\u003earea\u003c/code\u003e.\n     */\n    private Area getMirroredArea(Area area) {\n        // As applying a -1 scale transform reverses the holes / non holes interpretation of the points,\n        // we have to create a mirrored shape by parsing points\n        GeneralPath mirrorPath \u003d new GeneralPath();\n        float[] point \u003d new float[6];\n        for (PathIterator it \u003d area.getPathIterator(null); !it.isDone(); it.next()) {\n            switch(it.currentSegment(point)) {\n                case PathIterator.SEG_MOVETO:\n                    mirrorPath.moveTo(1 - point[0], point[1]);\n                    break;\n                case PathIterator.SEG_LINETO:\n                    mirrorPath.lineTo(1 - point[0], point[1]);\n                    break;\n                case PathIterator.SEG_QUADTO:\n                    mirrorPath.quadTo(1 - point[0], point[1], 1 - point[2], point[3]);\n                    break;\n                case PathIterator.SEG_CUBICTO:\n                    mirrorPath.curveTo(1 - point[0], point[1], 1 - point[2], point[3], 1 - point[4], point[5]);\n                    break;\n                case PathIterator.SEG_CLOSE:\n                    mirrorPath.closePath();\n                    break;\n            }\n        }\n        return new Area(mirrorPath);\n    }\n\n    /**\n     * Returns the AWT shape matching the given \u003ca href\u003d\"http://www.w3.org/TR/SVG/paths.html\"\u003eSVG path shape\u003c/a\u003e.\n     */\n    private Shape parseShape(String svgPathShape) {\n        Shape shape \u003d parsedShapes.get(svgPathShape);\n        if (shape \u003d\u003d null) {\n            try {\n                shape \u003d SVGPathSupport.parsePathShape(svgPathShape);\n            } catch (LinkageError ex) {\n                // Fallback to default square shape if batik classes aren\u0027t in classpath\n                shape \u003d new Rectangle2D.Float(0, 0, 1, 1);\n            }\n            parsedShapes.put(svgPathShape, shape);\n        }\n        return shape;\n    }\n\n    /**\n     * Separated static class to be able to exclude Batik library from classpath.\n     */\n    private static class SVGPathSupport {\n\n        public static Shape parsePathShape(String svgPathShape) {\n            try {\n                AWTPathProducer pathProducer \u003d new AWTPathProducer();\n                PathParser pathParser \u003d new PathParser();\n                pathParser.setPathHandler(pathProducer);\n                pathParser.parse(svgPathShape);\n                return pathProducer.getShape();\n            } catch (ParseException ex) {\n                // Fallback to default square shape if shape is incorrect\n                return new Rectangle2D.Float(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * An observer that receives model loading notifications.\n     */\n    public static interface ModelObserver {\n\n        public void modelUpdated(BranchGroup modelRoot);\n\n        public void modelError(Exception ex);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.j3d",
    "classname": "ModelManager",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager_0Test.java",
    "test_prompt": "// ModelManager_0Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModelManager}.\n* It contains ten unit test cases for the {@link ModelManager#getInstance()} method.\n*/\nclass ModelManager_0Test {",
    "method_signature": "getInstance()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ModelManager.java\n/*\n * ModelManager.java 4 juil. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\n\n/**\n * Singleton managing 3D models cache.\n * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.\n * Additional classes implementing Java 3D \u003ccode\u003eLoader\u003c/code\u003e interface may be\n * specified in the \u003ccode\u003ecom.eteks.sweethome3d.j3d.additionalLoaderClasses\u003c/code\u003e\n * (separated by a space or a colon :) to enable the support of other formats.\u003cbr\u003e\n * Note: this class is compatible with Java 3D 1.3.\n * @author Emmanuel Puybaret\n */\npublic class ModelManager {\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for window pane shapes.\n     */\n    public static final String WINDOW_PANE_SHAPE_PREFIX \u003d \"sweethome3d_window_pane\";\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for mirror shapes.\n     */\n    public static final String MIRROR_SHAPE_PREFIX \u003d \"sweethome3d_window_mirror\";\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for lights.\n     */\n    public static final String LIGHT_SHAPE_PREFIX \u003d \"sweethome3d_light\";\n\n    private static final TransparencyAttributes WINDOW_PANE_TRANSPARENCY_ATTRIBUTES \u003d new TransparencyAttributes(TransparencyAttributes.NICEST, 0.5f);\n\n    private static final Material DEFAULT_MATERIAL \u003d new Material();\n\n    private static final float MINIMUM_SIZE \u003d 0.001f;\n\n    private static final String ADDITIONAL_LOADER_CLASSES \u003d \"com.eteks.sweethome3d.j3d.additionalLoaderClasses\";\n\n    private static ModelManager instance;\n\n    // Map storing loaded model nodes\n    private Map\u003cContent, BranchGroup\u003e loadedModelNodes;\n\n    // Map storing model nodes being loaded\n    private Map\u003cContent, List\u003cModelObserver\u003e\u003e loadingModelObservers;\n\n    // Executor used to load models\n    private ExecutorService modelsLoader;\n\n    // List of additional loader classes\n    private Class\u003cLoader\u003e[] additionalLoaderClasses;\n\n    // SVG path Shapes\n    private final Map\u003cString, Shape\u003e parsedShapes;\n\n    private ModelManager() {\n        // This class is a singleton\n        this.loadedModelNodes \u003d new WeakHashMap\u003cContent, BranchGroup\u003e();\n        this.loadingModelObservers \u003d new HashMap\u003cContent, List\u003cModelObserver\u003e\u003e();\n        this.parsedShapes \u003d new WeakHashMap\u003cString, Shape\u003e();\n        // Load other optional Loader classes\n        List\u003cClass\u003cLoader\u003e\u003e loaderClasses \u003d new ArrayList\u003cClass\u003cLoader\u003e\u003e();\n        String loaderClassNames \u003d System.getProperty(ADDITIONAL_LOADER_CLASSES);\n        if (loaderClassNames !\u003d null) {\n            for (String loaderClassName : loaderClassNames.split(\"\\\\s|:\")) {\n                try {\n                    loaderClasses.add(getLoaderClass(loaderClassName));\n                } catch (IllegalArgumentException ex) {\n                    System.err.println(\"Invalid loader class \" + loaderClassName + \":\\n\" + ex.getMessage());\n                }\n            }\n        }\n        this.additionalLoaderClasses \u003d loaderClasses.toArray(new Class[loaderClasses.size()]);\n    }\n\n    /**\n     * Returns the class of name \u003ccode\u003eloaderClassName\u003c/code\u003e.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Class\u003cLoader\u003e getLoaderClass(String loaderClassName) {\n        try {\n            Class\u003cLoader\u003e loaderClass \u003d (Class\u003cLoader\u003e) getClass().getClassLoader().loadClass(loaderClassName);\n            if (!Loader.class.isAssignableFrom(loaderClass)) {\n                throw new IllegalArgumentException(loaderClassName + \" not a subclass of \" + Loader.class.getName());\n            } else if (Modifier.isAbstract(loaderClass.getModifiers()) || !Modifier.isPublic(loaderClass.getModifiers())) {\n                throw new IllegalArgumentException(loaderClassName + \" not a public static class\");\n            }\n            Constructor\u003cLoader\u003e constructor \u003d loaderClass.getConstructor(new Class[0]);\n            // Try to instantiate it now to see if it won\u0027t cause any problem\n            constructor.newInstance(new Object[0]);\n            return loaderClass;\n        } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (NoSuchMethodException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (InvocationTargetException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (IllegalAccessException ex) {\n            throw new IllegalArgumentException(loaderClassName + \" constructor not accessible\");\n        } catch (InstantiationException ex) {\n            throw new IllegalArgumentException(loaderClassName + \" not a public static class\");\n        }\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static ModelManager getInstance() {\n        if (instance \u003d\u003d null) {\n            instance \u003d new ModelManager();\n        }\n        return instance;\n    }\n\n    /**\n     * Shutdowns the multithreaded service that load textures.\n     */\n    public void clear() {\n        if (this.modelsLoader !\u003d null) {\n            this.modelsLoader.shutdownNow();\n            this.modelsLoader \u003d null;\n        }\n        synchronized (this.loadedModelNodes) {\n            this.loadedModelNodes.clear();\n        }\n    }\n\n    /**\n     * Returns the minimum size of a model.\n     */\n    float getMinimumSize() {\n        return MINIMUM_SIZE;\n    }\n\n    /**\n     * Returns the size of 3D shapes of \u003ccode\u003enode\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node) {\n        return getSize(node, new Transform3D());\n    }\n\n    /**\n     * Returns the size of 3D shapes of \u003ccode\u003enode\u003c/code\u003e after an additional \u003ccode\u003etransformation\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node, Transform3D transformation) {\n        BoundingBox bounds \u003d getBounds(node, transformation);\n        Point3d lower \u003d new Point3d();\n        bounds.getLower(lower);\n        Point3d upper \u003d new Point3d();\n        bounds.getUpper(upper);\n        return new Vector3f(Math.max(getMinimumSize(), (float) (upper.x - lower.x)), Math.max(getMinimumSize(), (float) (upper.y - lower.y)), Math.max(getMinimumSize(), (float) (upper.z - lower.z)));\n    }\n\n    /**\n     * Returns the bounds of the 3D shapes of \u003ccode\u003enode\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node) {\n        return getBounds(node, new Transform3D());\n    }\n\n    /**\n     * Returns the bounds of the 3D shapes of \u003ccode\u003enode\u003c/code\u003e with an additional \u003ccode\u003etransformation\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes, contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e\n     * that returns a bounding sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node, Transform3D transformation) {\n        BoundingBox objectBounds \u003d new BoundingBox(new Point3d(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY), new Point3d(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY));\n        computeBounds(node, objectBounds, transformation, !isOrthogonalRotation(transformation));\n        Point3d lower \u003d new Point3d();\n        objectBounds.getLower(lower);\n        if (lower.x \u003d\u003d Double.POSITIVE_INFINITY) {\n            throw new IllegalArgumentException(\"Node has no bounds\");\n        }\n        return objectBounds;\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the rotation matrix matches only rotations of\n     * a multiple of 90� degrees around x, y or z axis.\n     */\n    private boolean isOrthogonalRotation(Transform3D transformation) {\n        Matrix3f matrix \u003d new Matrix3f();\n        transformation.get(matrix);\n        for (int i \u003d 0; i \u003c 3; i++) {\n            for (int j \u003d 0; j \u003c 3; j++) {\n                // Return false if the matrix contains a value different from 0 1 or -1\n                if (Math.abs(matrix.getElement(i, j)) \u003e 1E-6 \u0026\u0026 Math.abs(matrix.getElement(i, j) - 1) \u003e 1E-6 \u0026\u0026 Math.abs(matrix.getElement(i, j) + 1) \u003e 1E-6) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private void computeBounds(Node node, BoundingBox bounds, Transform3D parentTransformations, boolean transformShapeGeometry) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute the bounds of all the node children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeBounds((Node) enumeration.nextElement(), bounds, parentTransformations, transformShapeGeometry);\n            }\n        } else if (node instanceof Link) {\n            computeBounds(((Link) node).getSharedGroup(), bounds, parentTransformations, transformShapeGeometry);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Bounds shapeBounds;\n            if (transformShapeGeometry) {\n                shapeBounds \u003d computeTransformedGeometryBounds(shape, parentTransformations);\n            } else {\n                shapeBounds \u003d shape.getBounds();\n                shapeBounds.transform(parentTransformations);\n            }\n            bounds.combine(shapeBounds);\n        }\n    }\n\n    private Bounds computeTransformedGeometryBounds(Shape3D shape, Transform3D transformation) {\n        Point3d lower \u003d new Point3d(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n        Point3d upper \u003d new Point3d(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n        for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n            Geometry geometry \u003d shape.getGeometry(i);\n            if (geometry instanceof GeometryArray) {\n                GeometryArray geometryArray \u003d (GeometryArray) geometry;\n                int vertexCount \u003d geometryArray.getVertexCount();\n                Point3f vertex \u003d new Point3f();\n                if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                    if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                        float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                        int vertexSize \u003d vertexData.length / vertexCount;\n                        for (int index \u003d 0, j \u003d vertexSize - 3; index \u003c vertexCount; j +\u003d vertexSize, index++) {\n                            vertex.x \u003d vertexData[j];\n                            vertex.y \u003d vertexData[j + 1];\n                            vertex.z \u003d vertexData[j + 2];\n                            updateBounds(vertex, transformation, lower, upper);\n                        }\n                    } else {\n                        float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                        for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j +\u003d 3, index++) {\n                            vertex.x \u003d vertexCoordinates[j];\n                            vertex.y \u003d vertexCoordinates[j + 1];\n                            vertex.z \u003d vertexCoordinates[j + 2];\n                            updateBounds(vertex, transformation, lower, upper);\n                        }\n                    }\n                } else {\n                    for (int index \u003d 0; index \u003c vertexCount; index++) {\n                        geometryArray.getCoordinate(index, vertex);\n                        updateBounds(vertex, transformation, lower, upper);\n                    }\n                }\n            } else {\n                Bounds shapeBounds \u003d shape.getBounds();\n                shapeBounds.transform(transformation);\n                return shapeBounds;\n            }\n        }\n        Bounds shapeBounds \u003d new BoundingBox(lower, upper);\n        return shapeBounds;\n    }\n\n    private void updateBounds(Point3f vertex, Transform3D transformation, Point3d lower, Point3d upper) {\n        transformation.transform(vertex);\n        if (lower.x \u003e vertex.x) {\n            lower.x \u003d vertex.x;\n        }\n        if (lower.y \u003e vertex.y) {\n            lower.y \u003d vertex.y;\n        }\n        if (lower.z \u003e vertex.z) {\n            lower.z \u003d vertex.z;\n        }\n        if (upper.x \u003c vertex.x) {\n            upper.x \u003d vertex.x;\n        }\n        if (upper.y \u003c vertex.y) {\n            upper.y \u003d vertex.y;\n        }\n        if (upper.z \u003c vertex.z) {\n            upper.z \u003d vertex.z;\n        }\n    }\n\n    /**\n     * Returns a transform group that will transform the model \u003ccode\u003enode\u003c/code\u003e\n     * to let it fill a box of the given \u003ccode\u003ewidth\u003c/code\u003e centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or \u003ccode\u003enull\u003c/code\u003e if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public TransformGroup getNormalizedTransformGroup(Node node, float[][] modelRotation, float width) {\n        return new TransformGroup(getNormalizedTransform(node, modelRotation, width));\n    }\n\n    /**\n     * Returns a transform that will transform the model \u003ccode\u003enode\u003c/code\u003e\n     * to let it fill a box of the given \u003ccode\u003ewidth\u003c/code\u003e centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or \u003ccode\u003enull\u003c/code\u003e if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public Transform3D getNormalizedTransform(Node node, float[][] modelRotation, float width) {\n        // Get model bounding box size\n        BoundingBox modelBounds \u003d getBounds(node);\n        Point3d lower \u003d new Point3d();\n        modelBounds.getLower(lower);\n        Point3d upper \u003d new Point3d();\n        modelBounds.getUpper(upper);\n        // Translate model to its center\n        Transform3D translation \u003d new Transform3D();\n        translation.setTranslation(new Vector3d(-lower.x - (upper.x - lower.x) / 2, -lower.y - (upper.y - lower.y) / 2, -lower.z - (upper.z - lower.z) / 2));\n        Transform3D modelTransform;\n        if (modelRotation !\u003d null) {\n            // Get model bounding box size with model rotation\n            Matrix3f modelRotationMatrix \u003d new Matrix3f(modelRotation[0][0], modelRotation[0][1], modelRotation[0][2], modelRotation[1][0], modelRotation[1][1], modelRotation[1][2], modelRotation[2][0], modelRotation[2][1], modelRotation[2][2]);\n            modelTransform \u003d new Transform3D();\n            modelTransform.setRotation(modelRotationMatrix);\n            modelTransform.mul(translation);\n            BoundingBox rotatedModelBounds \u003d getBounds(node, modelTransform);\n            rotatedModelBounds.getLower(lower);\n            rotatedModelBounds.getUpper(upper);\n        } else {\n            modelTransform \u003d translation;\n        }\n        // Scale model to make it fill a 1 unit wide box\n        Transform3D scaleOneTransform \u003d new Transform3D();\n        scaleOneTransform.setScale(new Vector3d(width / Math.max(getMinimumSize(), upper.x - lower.x), width / Math.max(getMinimumSize(), upper.y - lower.y), width / Math.max(getMinimumSize(), upper.z - lower.z)));\n        scaleOneTransform.mul(modelTransform);\n        return scaleOneTransform;\n    }\n\n    /**\n     * Reads asynchronously a 3D node from \u003ccode\u003econtent\u003c/code\u003e with supported loaders\n     * and notifies the loaded model to the given \u003ccode\u003emodelObserver\u003c/code\u003e once available.\n     * @param content an object containing a model\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens\n     * @throws IllegalStateException if the current thread isn\u0027t the Event Dispatch Thread.\n     */\n    public void loadModel(Content content, ModelObserver modelObserver) {\n        loadModel(content, false, modelObserver);\n    }\n\n    /**\n     * Reads a 3D node from \u003ccode\u003econtent\u003c/code\u003e with supported loaders\n     * and notifies the loaded model to the given \u003ccode\u003emodelObserver\u003c/code\u003e once available.\n     * @param content an object containing a model\n     * @param synchronous if \u003ccode\u003etrue\u003c/code\u003e, this method will return only once model content is loaded\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens. When the model is loaded synchronously, the observer will be notified\n     *    in the same thread as the caller, otherwise the observer will be notified in the Event\n     *    Dispatch Thread and this method must be called in Event Dispatch Thread too.\n     * @throws IllegalStateException if synchronous is \u003ccode\u003efalse\u003c/code\u003e and the current thread isn\u0027t\n     *    the Event Dispatch Thread.\n     */\n    public void loadModel(final Content content, boolean synchronous, ModelObserver modelObserver) {\n        BranchGroup modelRoot;\n        synchronized (this.loadedModelNodes) {\n            modelRoot \u003d this.loadedModelNodes.get(content);\n        }\n        if (modelRoot !\u003d null) {\n            // Notify cached model to observer with a clone of the model\n            modelObserver.modelUpdated((BranchGroup) cloneNode(modelRoot));\n        } else if (synchronous) {\n            try {\n                modelRoot \u003d loadModel(content);\n                synchronized (this.loadedModelNodes) {\n                    // Store in cache model node for future copies\n                    this.loadedModelNodes.put(content, (BranchGroup) modelRoot);\n                }\n                modelObserver.modelUpdated((BranchGroup) cloneNode(modelRoot));\n            } catch (IOException ex) {\n                modelObserver.modelError(ex);\n            }\n        } else if (!EventQueue.isDispatchThread()) {\n            throw new IllegalStateException(\"Asynchronous call out of Event Dispatch Thread\");\n        } else {\n            if (this.modelsLoader \u003d\u003d null) {\n                this.modelsLoader \u003d Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n            }\n            List\u003cModelObserver\u003e observers \u003d this.loadingModelObservers.get(content);\n            if (observers !\u003d null) {\n                // If observers list exists, content model is already being loaded\n                // register observer for future notification\n                observers.add(modelObserver);\n            } else {\n                // Create a list of observers that will be notified once content model is loaded\n                observers \u003d new ArrayList\u003cModelObserver\u003e();\n                observers.add(modelObserver);\n                this.loadingModelObservers.put(content, observers);\n                // Load the model in an other thread\n                this.modelsLoader.execute(new Runnable() {\n\n                    public void run() {\n                        try {\n                            final BranchGroup loadedModel \u003d loadModel(content);\n                            synchronized (loadedModelNodes) {\n                                // Update loaded models cache and notify registered observers\n                                loadedModelNodes.put(content, loadedModel);\n                            }\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    for (final ModelObserver observer : loadingModelObservers.remove(content)) {\n                                        observer.modelUpdated((BranchGroup) cloneNode(loadedModel));\n                                    }\n                                }\n                            });\n                        } catch (final IOException ex) {\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    for (final ModelObserver observer : loadingModelObservers.remove(content)) {\n                                        observer.modelError(ex);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns a clone of the given \u003ccode\u003enode\u003c/code\u003e.\n     * All the children and the attributes of the given node are duplicated except the geometries\n     * and the texture images of shapes.\n     */\n    public Node cloneNode(Node node) {\n        // Clone node in a synchronized block because cloneNodeComponent is not thread safe\n        synchronized (this.loadedModelNodes) {\n            return cloneNode(node, new HashMap\u003cSharedGroup, SharedGroup\u003e());\n        }\n    }\n\n    private Node cloneNode(Node node, Map\u003cSharedGroup, SharedGroup\u003e clonedSharedGroups) {\n        if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Shape3D clonedShape \u003d (Shape3D) shape.cloneNode(false);\n            Appearance appearance \u003d shape.getAppearance();\n            if (appearance !\u003d null) {\n                // Force only duplication of node\u0027s appearance except its texture\n                Appearance clonedAppearance \u003d (Appearance) appearance.cloneNodeComponent(true);\n                Texture texture \u003d appearance.getTexture();\n                if (texture !\u003d null) {\n                    clonedAppearance.setTexture(texture);\n                }\n                clonedShape.setAppearance(clonedAppearance);\n            }\n            return clonedShape;\n        } else if (node instanceof Link) {\n            Link clonedLink \u003d (Link) node.cloneNode(true);\n            // Force duplication of shared groups too\n            SharedGroup sharedGroup \u003d clonedLink.getSharedGroup();\n            if (sharedGroup !\u003d null) {\n                SharedGroup clonedSharedGroup \u003d clonedSharedGroups.get(sharedGroup);\n                if (clonedSharedGroup \u003d\u003d null) {\n                    clonedSharedGroup \u003d (SharedGroup) cloneNode(sharedGroup, clonedSharedGroups);\n                    clonedSharedGroups.put(sharedGroup, clonedSharedGroup);\n                }\n                clonedLink.setSharedGroup(clonedSharedGroup);\n            }\n            return clonedLink;\n        } else {\n            Node clonedNode \u003d node.cloneNode(true);\n            if (node instanceof Group) {\n                Group group \u003d (Group) node;\n                Group clonedGroup \u003d (Group) clonedNode;\n                for (int i \u003d 0, n \u003d group.numChildren(); i \u003c n; i++) {\n                    Node clonedChild \u003d cloneNode(group.getChild(i), clonedSharedGroups);\n                    clonedGroup.addChild(clonedChild);\n                }\n            }\n            return clonedNode;\n        }\n    }\n\n    /**\n     * Returns the node loaded synchronously from \u003ccode\u003econtent\u003c/code\u003e with supported loaders.\n     * This method is threadsafe and may be called from any thread.\n     * @param content an object containing a model\n     */\n    public BranchGroup loadModel(Content content) throws IOException {\n        // Ensure we use a URLContent object\n        URLContent urlContent;\n        if (content instanceof URLContent) {\n            urlContent \u003d (URLContent) content;\n        } else {\n            urlContent \u003d TemporaryURLContent.copyToTemporaryURLContent(content);\n        }\n        Loader3DS loader3DSWithNoStackTraces \u003d new Loader3DS() {\n\n            @Override\n            public Scene load(URL url) throws FileNotFoundException, IncorrectFormatException {\n                try {\n                    // Check magic number 0x4D4D\n                    InputStream in \u003d url.openStream();\n                    int b1 \u003d in.read();\n                    int b2 \u003d in.read();\n                    if (b1 !\u003d 0x4D || b2 !\u003d 0x4D) {\n                        throw new IncorrectFormatException(\"Bad magic number\");\n                    }\n                    in.close();\n                } catch (FileNotFoundException ex) {\n                    throw ex;\n                } catch (IOException ex) {\n                    throw new ParsingErrorException(\"Can\u0027t read url \" + url);\n                }\n                PrintStream defaultSystemErrorStream \u003d System.err;\n                try {\n                    // Ignore stack traces on System.err during 3DS file loading\n                    System.setErr(new PrintStream(new OutputStream() {\n\n                        @Override\n                        public void write(int b) throws IOException {\n                            // Do nothing\n                        }\n                    }));\n                    // Default load\n                    return super.load(url);\n                } finally {\n                    // Reset default err print stream\n                    System.setErr(defaultSystemErrorStream);\n                }\n            }\n        };\n        Loader[] defaultLoaders \u003d new Loader[] { new OBJLoader(), new DAELoader(), loader3DSWithNoStackTraces, new Lw3dLoader() };\n        Loader[] loaders \u003d new Loader[defaultLoaders.length + this.additionalLoaderClasses.length];\n        System.arraycopy(defaultLoaders, 0, loaders, 0, defaultLoaders.length);\n        for (int i \u003d 0; i \u003c this.additionalLoaderClasses.length; i++) {\n            try {\n                loaders[defaultLoaders.length + i] \u003d this.additionalLoaderClasses[i].newInstance();\n            } catch (InstantiationException ex) {\n                // Can\u0027t happen: getLoaderClass checked this class is instantiable\n                throw new InternalError(ex.getMessage());\n            } catch (IllegalAccessException ex) {\n                // Can\u0027t happen: getLoaderClass checked this class is instantiable\n                throw new InternalError(ex.getMessage());\n            }\n        }\n        Exception lastException \u003d null;\n        for (Loader loader : loaders) {\n            try {\n                // Ask loader to ignore lights, fogs...\n                loader.setFlags(loader.getFlags() \u0026 ~(Loader.LOAD_LIGHT_NODES | Loader.LOAD_FOG_NODES | Loader.LOAD_BACKGROUND_NODES | Loader.LOAD_VIEW_GROUPS));\n                // Return the first scene that can be loaded from model URL content\n                Scene scene \u003d loader.load(urlContent.getURL());\n                BranchGroup modelNode \u003d scene.getSceneGroup();\n                // If model doesn\u0027t have any child, consider the file as wrong\n                if (modelNode.numChildren() \u003d\u003d 0) {\n                    throw new IllegalArgumentException(\"Empty model\");\n                }\n                // Update transparency of scene window panes shapes\n                updateShapeNamesAndWindowPanesTransparency(scene);\n                // Turn off lights because some loaders don\u0027t take into account the ~LOAD_LIGHT_NODES flag\n                turnOffLightsShareAndModulateTextures(modelNode);\n                return modelNode;\n            } catch (IllegalArgumentException ex) {\n                lastException \u003d ex;\n            } catch (IncorrectFormatException ex) {\n                lastException \u003d ex;\n            } catch (ParsingErrorException ex) {\n                lastException \u003d ex;\n            } catch (IOException ex) {\n                lastException \u003d ex;\n            } catch (RuntimeException ex) {\n                // Take into account exceptions of Java 3D 1.5 ImageException class\n                // in such a way program can run in Java 3D 1.3.1\n                if (ex.getClass().getName().equals(\"com.sun.j3d.utils.image.ImageException\")) {\n                    lastException \u003d ex;\n                } else {\n                    throw ex;\n                }\n            }\n        }\n        if (lastException instanceof IOException) {\n            throw (IOException) lastException;\n        } else if (lastException instanceof IncorrectFormatException) {\n            IOException incorrectFormatException \u003d new IOException(\"Incorrect format\");\n            incorrectFormatException.initCause(lastException);\n            throw incorrectFormatException;\n        } else if (lastException instanceof ParsingErrorException) {\n            IOException incorrectFormatException \u003d new IOException(\"Parsing error\");\n            incorrectFormatException.initCause(lastException);\n            throw incorrectFormatException;\n        } else {\n            IOException otherException \u003d new IOException();\n            otherException.initCause(lastException);\n            throw otherException;\n        }\n    }\n\n    /**\n     * Updates the name of scene shapes and transparency window panes shapes.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void updateShapeNamesAndWindowPanesTransparency(Scene scene) {\n        Map\u003cString, Object\u003e namedObjects \u003d scene.getNamedObjects();\n        for (Map.Entry\u003cString, Object\u003e entry : namedObjects.entrySet()) {\n            if (entry.getValue() instanceof Shape3D) {\n                String shapeName \u003d entry.getKey();\n                // Assign shape name to its user data\n                Shape3D shape \u003d (Shape3D) entry.getValue();\n                shape.setUserData(shapeName);\n                if (shapeName.startsWith(WINDOW_PANE_SHAPE_PREFIX)) {\n                    Appearance appearance \u003d shape.getAppearance();\n                    if (appearance \u003d\u003d null) {\n                        appearance \u003d new Appearance();\n                        shape.setAppearance(appearance);\n                    }\n                    if (appearance.getTransparencyAttributes() \u003d\u003d null) {\n                        appearance.setTransparencyAttributes(WINDOW_PANE_TRANSPARENCY_ATTRIBUTES);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Turns off light nodes of \u003ccode\u003enode\u003c/code\u003e children,\n     * and modulates textures if needed.\n     */\n    private void turnOffLightsShareAndModulateTextures(Node node) {\n        if (node instanceof Group) {\n            // Enumerate children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                turnOffLightsShareAndModulateTextures((Node) enumeration.nextElement());\n            }\n        } else if (node instanceof Link) {\n            turnOffLightsShareAndModulateTextures(((Link) node).getSharedGroup());\n        } else if (node instanceof Light) {\n            ((Light) node).setEnable(false);\n        } else if (node instanceof Shape3D) {\n            Appearance appearance \u003d ((Shape3D) node).getAppearance();\n            if (appearance !\u003d null) {\n                Texture texture \u003d appearance.getTexture();\n                if (texture !\u003d null) {\n                    // Share textures data as much as possible\n                    Texture sharedTexture \u003d TextureManager.getInstance().shareTexture(texture);\n                    if (sharedTexture !\u003d texture) {\n                        appearance.setTexture(sharedTexture);\n                    }\n                    TextureAttributes textureAttributes \u003d appearance.getTextureAttributes();\n                    if (textureAttributes \u003d\u003d null) {\n                        // Mix texture and shape color\n                        textureAttributes \u003d new TextureAttributes();\n                        textureAttributes.setTextureMode(TextureAttributes.MODULATE);\n                        appearance.setTextureAttributes(textureAttributes);\n                        // Check shape color is white\n                        Material material \u003d appearance.getMaterial();\n                        if (material \u003d\u003d null) {\n                            appearance.setMaterial((Material) DEFAULT_MATERIAL.cloneNodeComponent(true));\n                        } else {\n                            Color3f color \u003d new Color3f();\n                            DEFAULT_MATERIAL.getDiffuseColor(color);\n                            material.setDiffuseColor(color);\n                            DEFAULT_MATERIAL.getAmbientColor(color);\n                            material.setAmbientColor(color);\n                        }\n                    }\n                    // If texture image supports transparency\n                    if (TextureManager.getInstance().isTextureTransparent(sharedTexture)) {\n                        if (appearance.getTransparencyAttributes() \u003d\u003d null) {\n                            // Add transparency attributes to ensure transparency works\n                            appearance.setTransparencyAttributes(new TransparencyAttributes(TransparencyAttributes.NICEST, 0));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the 2D area of the 3D shapes children of the given \u003ccode\u003enode\u003c/code\u003e\n     * projected on the floor (plan y \u003d 0).\n     */\n    public Area getAreaOnFloor(Node node) {\n        Area modelAreaOnFloor;\n        int vertexCount \u003d getVertexCount(node);\n        if (vertexCount \u003c 10000) {\n            modelAreaOnFloor \u003d new Area();\n            computeAreaOnFloor(node, modelAreaOnFloor, new Transform3D());\n        } else {\n            List\u003cfloat[]\u003e vertices \u003d new ArrayList\u003cfloat[]\u003e(vertexCount);\n            computeVerticesOnFloor(node, vertices, new Transform3D());\n            float[][] surroundingPolygon \u003d getSurroundingPolygon(vertices.toArray(new float[vertices.size()][]));\n            GeneralPath generalPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, surroundingPolygon.length);\n            generalPath.moveTo(surroundingPolygon[0][0], surroundingPolygon[0][1]);\n            for (int i \u003d 0; i \u003c surroundingPolygon.length; i++) {\n                generalPath.lineTo(surroundingPolygon[i][0], surroundingPolygon[i][1]);\n            }\n            generalPath.closePath();\n            modelAreaOnFloor \u003d new Area(generalPath);\n        }\n        return modelAreaOnFloor;\n    }\n\n    /**\n     * Returns the total count of vertices in all geometries.\n     */\n    private int getVertexCount(Node node) {\n        int count \u003d 0;\n        if (node instanceof Group) {\n            // Enumerate all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                count +\u003d getVertexCount((Node) enumeration.nextElement());\n            }\n        } else if (node instanceof Link) {\n            count \u003d getVertexCount(((Link) node).getSharedGroup());\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            if (renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) {\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    Geometry geometry \u003d shape.getGeometry(i);\n                    if (geometry instanceof GeometryArray) {\n                        count +\u003d ((GeometryArray) geometry).getVertexCount();\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Computes the vertices coordinates projected on floor of the 3D shapes children of \u003ccode\u003enode\u003c/code\u003e.\n     */\n    private void computeVerticesOnFloor(Node node, List\u003cfloat[]\u003e vertices, Transform3D parentTransformations) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeVerticesOnFloor((Node) enumeration.nextElement(), vertices, parentTransformations);\n            }\n        } else if (node instanceof Link) {\n            computeVerticesOnFloor(((Link) node).getSharedGroup(), vertices, parentTransformations);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            TransparencyAttributes transparencyAttributes \u003d appearance !\u003d null ? appearance.getTransparencyAttributes() : null;\n            if ((renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) \u0026\u0026 (transparencyAttributes \u003d\u003d null || transparencyAttributes.getTransparency() \u003c 1)) {\n                // Compute shape geometries area\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    Geometry geometry \u003d shape.getGeometry(i);\n                    if (geometry instanceof GeometryArray) {\n                        GeometryArray geometryArray \u003d (GeometryArray) geometry;\n                        int vertexCount \u003d geometryArray.getVertexCount();\n                        Point3f vertex \u003d new Point3f();\n                        if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                            if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                                float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                                int vertexSize \u003d vertexData.length / vertexCount;\n                                // Store vertices coordinates\n                                for (int index \u003d 0, j \u003d vertexSize - 3; index \u003c vertexCount; j +\u003d vertexSize, index++) {\n                                    vertex.x \u003d vertexData[j];\n                                    vertex.y \u003d vertexData[j + 1];\n                                    vertex.z \u003d vertexData[j + 2];\n                                    parentTransformations.transform(vertex);\n                                    vertices.add(new float[] { vertex.x, vertex.z });\n                                }\n                            } else {\n                                // Store vertices coordinates\n                                float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                                for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j +\u003d 3, index++) {\n                                    vertex.x \u003d vertexCoordinates[j];\n                                    vertex.y \u003d vertexCoordinates[j + 1];\n                                    vertex.z \u003d vertexCoordinates[j + 2];\n                                    parentTransformations.transform(vertex);\n                                    vertices.add(new float[] { vertex.x, vertex.z });\n                                }\n                            }\n                        } else {\n                            // Store vertices coordinates\n                            for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j++, index++) {\n                                geometryArray.getCoordinate(j, vertex);\n                                parentTransformations.transform(vertex);\n                                vertices.add(new float[] { vertex.x, vertex.z });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Computes the 2D area on floor of the 3D shapes children of \u003ccode\u003enode\u003c/code\u003e.\n     */\n    private void computeAreaOnFloor(Node node, Area nodeArea, Transform3D parentTransformations) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeAreaOnFloor((Node) enumeration.nextElement(), nodeArea, parentTransformations);\n            }\n        } else if (node instanceof Link) {\n            computeAreaOnFloor(((Link) node).getSharedGroup(), nodeArea, parentTransformations);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            TransparencyAttributes transparencyAttributes \u003d appearance !\u003d null ? appearance.getTransparencyAttributes() : null;\n            if ((renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) \u0026\u0026 (transparencyAttributes \u003d\u003d null || transparencyAttributes.getTransparency() \u003c 1)) {\n                // Compute shape geometries area\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    computeGeometryAreaOnFloor(shape.getGeometry(i), parentTransformations, nodeArea);\n                }\n            }\n        }\n    }\n\n    /**\n     * Computes the area on floor of a 3D geometry.\n     */\n    private void computeGeometryAreaOnFloor(Geometry geometry, Transform3D parentTransformations, Area nodeArea) {\n        if (geometry instanceof GeometryArray) {\n            GeometryArray geometryArray \u003d (GeometryArray) geometry;\n            int vertexCount \u003d geometryArray.getVertexCount();\n            float[] vertices \u003d new float[vertexCount * 2];\n            Point3f vertex \u003d new Point3f();\n            if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                    float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                    int vertexSize \u003d vertexData.length / vertexCount;\n                    // Store vertices coordinates\n                    for (int index \u003d 0, i \u003d vertexSize - 3; index \u003c vertices.length; i +\u003d vertexSize) {\n                        vertex.x \u003d vertexData[i];\n                        vertex.y \u003d vertexData[i + 1];\n                        vertex.z \u003d vertexData[i + 2];\n                        parentTransformations.transform(vertex);\n                        vertices[index++] \u003d vertex.x;\n                        vertices[index++] \u003d vertex.z;\n                    }\n                } else {\n                    // Store vertices coordinates\n                    float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                    for (int index \u003d 0, i \u003d 0; index \u003c vertices.length; i +\u003d 3) {\n                        vertex.x \u003d vertexCoordinates[i];\n                        vertex.y \u003d vertexCoordinates[i + 1];\n                        vertex.z \u003d vertexCoordinates[i + 2];\n                        parentTransformations.transform(vertex);\n                        vertices[index++] \u003d vertex.x;\n                        vertices[index++] \u003d vertex.z;\n                    }\n                }\n            } else {\n                // Store vertices coordinates\n                for (int index \u003d 0, i \u003d 0; index \u003c vertices.length; i++) {\n                    geometryArray.getCoordinate(i, vertex);\n                    parentTransformations.transform(vertex);\n                    vertices[index++] \u003d vertex.x;\n                    vertices[index++] \u003d vertex.z;\n                }\n            }\n            // Create path from triangles or quadrilaterals of geometry\n            GeneralPath geometryPath \u003d null;\n            if (geometryArray instanceof IndexedGeometryArray) {\n                if (geometryArray instanceof IndexedTriangleArray) {\n                    IndexedTriangleArray triangleArray \u003d (IndexedTriangleArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, triangleIndex \u003d 0, n \u003d triangleArray.getIndexCount(); i \u003c n; i +\u003d 3) {\n                        addIndexedTriangleToPath(triangleArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof IndexedQuadArray) {\n                    IndexedQuadArray quadArray \u003d (IndexedQuadArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, quadrilateralIndex \u003d 0, n \u003d quadArray.getIndexCount(); i \u003c n; i +\u003d 4) {\n                        addIndexedQuadrilateralToPath(quadArray, i, i + 1, i + 2, i + 3, vertices, geometryPath, quadrilateralIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof IndexedGeometryStripArray) {\n                    IndexedGeometryStripArray geometryStripArray \u003d (IndexedGeometryStripArray) geometryArray;\n                    int[] stripIndexCounts \u003d new int[geometryStripArray.getNumStrips()];\n                    geometryStripArray.getStripIndexCounts(stripIndexCounts);\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    int initialIndex \u003d 0;\n                    if (geometryStripArray instanceof IndexedTriangleStripArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripIndexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripIndexCounts[strip] - 2, j \u003d 0; i \u003c n; i++, j++) {\n                                if (j % 2 \u003d\u003d 0) {\n                                    addIndexedTriangleToPath(geometryStripArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                                } else {\n                                    // Vertices of odd triangles are in reverse order\n                                    addIndexedTriangleToPath(geometryStripArray, i, i + 2, i + 1, vertices, geometryPath, triangleIndex++, nodeArea);\n                                }\n                            }\n                            initialIndex +\u003d stripIndexCounts[strip];\n                        }\n                    } else if (geometryStripArray instanceof IndexedTriangleFanArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripIndexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripIndexCounts[strip] - 2; i \u003c n; i++) {\n                                addIndexedTriangleToPath(geometryStripArray, initialIndex, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                            }\n                            initialIndex +\u003d stripIndexCounts[strip];\n                        }\n                    }\n                }\n            } else {\n                if (geometryArray instanceof TriangleArray) {\n                    TriangleArray triangleArray \u003d (TriangleArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, triangleIndex \u003d 0; i \u003c vertexCount; i +\u003d 3) {\n                        addTriangleToPath(triangleArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof QuadArray) {\n                    QuadArray quadArray \u003d (QuadArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, quadrilateralIndex \u003d 0; i \u003c vertexCount; i +\u003d 4) {\n                        addQuadrilateralToPath(quadArray, i, i + 1, i + 2, i + 3, vertices, geometryPath, quadrilateralIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof GeometryStripArray) {\n                    GeometryStripArray geometryStripArray \u003d (GeometryStripArray) geometryArray;\n                    int[] stripVertexCounts \u003d new int[geometryStripArray.getNumStrips()];\n                    geometryStripArray.getStripVertexCounts(stripVertexCounts);\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    int initialIndex \u003d 0;\n                    if (geometryStripArray instanceof TriangleStripArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripVertexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripVertexCounts[strip] - 2, j \u003d 0; i \u003c n; i++, j++) {\n                                if (j % 2 \u003d\u003d 0) {\n                                    addTriangleToPath(geometryStripArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                                } else {\n                                    // Vertices of odd triangles are in reverse order\n                                    addTriangleToPath(geometryStripArray, i, i + 2, i + 1, vertices, geometryPath, triangleIndex++, nodeArea);\n                                }\n                            }\n                            initialIndex +\u003d stripVertexCounts[strip];\n                        }\n                    } else if (geometryStripArray instanceof TriangleFanArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripVertexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripVertexCounts[strip] - 2; i \u003c n; i++) {\n                                addTriangleToPath(geometryStripArray, initialIndex, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                            }\n                            initialIndex +\u003d stripVertexCounts[strip];\n                        }\n                    }\n                }\n            }\n            if (geometryPath !\u003d null) {\n                nodeArea.add(new Area(geometryPath));\n            }\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices.\n     */\n    private void addIndexedTriangleToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea) {\n        addTriangleToPath(geometryArray, geometryArray.getCoordinateIndex(vertexIndex1), geometryArray.getCoordinateIndex(vertexIndex2), geometryArray.getCoordinateIndex(vertexIndex3), vertices, geometryPath, triangleIndex, nodeArea);\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices.\n     */\n    private void addIndexedQuadrilateralToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea) {\n        addQuadrilateralToPath(geometryArray, geometryArray.getCoordinateIndex(vertexIndex1), geometryArray.getCoordinateIndex(vertexIndex2), geometryArray.getCoordinateIndex(vertexIndex3), geometryArray.getCoordinateIndex(vertexIndex4), vertices, geometryPath, quadrilateralIndex, nodeArea);\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices,\n     * only if the triangle has a positive orientation.\n     */\n    private void addTriangleToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea) {\n        float xVertex1 \u003d vertices[2 * vertexIndex1];\n        float yVertex1 \u003d vertices[2 * vertexIndex1 + 1];\n        float xVertex2 \u003d vertices[2 * vertexIndex2];\n        float yVertex2 \u003d vertices[2 * vertexIndex2 + 1];\n        float xVertex3 \u003d vertices[2 * vertexIndex3];\n        float yVertex3 \u003d vertices[2 * vertexIndex3 + 1];\n        if ((xVertex2 - xVertex1) * (yVertex3 - yVertex2) - (yVertex2 - yVertex1) * (xVertex3 - xVertex2) \u003e 0) {\n            if (triangleIndex \u003e 0 \u0026\u0026 triangleIndex % 1000 \u003d\u003d 0) {\n                // Add now current path to area otherwise area gets too slow\n                nodeArea.add(new Area(geometryPath));\n                geometryPath.reset();\n            }\n            geometryPath.moveTo(xVertex1, yVertex1);\n            geometryPath.lineTo(xVertex2, yVertex2);\n            geometryPath.lineTo(xVertex3, yVertex3);\n            geometryPath.closePath();\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices,\n     * only if the quadrilateral has a positive orientation.\n     */\n    private void addQuadrilateralToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea) {\n        float xVertex1 \u003d vertices[2 * vertexIndex1];\n        float yVertex1 \u003d vertices[2 * vertexIndex1 + 1];\n        float xVertex2 \u003d vertices[2 * vertexIndex2];\n        float yVertex2 \u003d vertices[2 * vertexIndex2 + 1];\n        float xVertex3 \u003d vertices[2 * vertexIndex3];\n        float yVertex3 \u003d vertices[2 * vertexIndex3 + 1];\n        if ((xVertex2 - xVertex1) * (yVertex3 - yVertex2) - (yVertex2 - yVertex1) * (xVertex3 - xVertex2) \u003e 0) {\n            if (quadrilateralIndex \u003e 0 \u0026\u0026 quadrilateralIndex % 1000 \u003d\u003d 0) {\n                // Add now current path to area otherwise area gets too slow\n                nodeArea.add(new Area(geometryPath));\n                geometryPath.reset();\n            }\n            geometryPath.moveTo(xVertex1, yVertex1);\n            geometryPath.lineTo(xVertex2, yVertex2);\n            geometryPath.lineTo(xVertex3, yVertex3);\n            geometryPath.lineTo(vertices[2 * vertexIndex4], vertices[2 * vertexIndex4 + 1]);\n            geometryPath.closePath();\n        }\n    }\n\n    /**\n     * Returns the convex polygon that surrounds the given \u003ccode\u003evertices\u003c/code\u003e.\n     * From Andrew\u0027s monotone chain 2D convex hull algorithm described at\n     * http://softsurfer.com/Archive/algorithm%5F0109/algorithm%5F0109.htm\n     */\n    private float[][] getSurroundingPolygon(float[][] vertices) {\n        Arrays.sort(vertices, new Comparator\u003cfloat[]\u003e() {\n\n            public int compare(float[] vertex1, float[] vertex2) {\n                if (vertex1[0] \u003d\u003d vertex2[0]) {\n                    return (int) Math.signum(vertex2[1] - vertex1[1]);\n                } else {\n                    return (int) Math.signum(vertex2[0] - vertex1[0]);\n                }\n            }\n        });\n        float[][] polygon \u003d new float[vertices.length][];\n        // The output array polygon [] will be used as the stack\n        // indices for bottom and top of the stack\n        int bottom \u003d 0, top \u003d -1;\n        // array scan index\n        int i;\n        // Get the indices of points with min x-coord and min|max y-coord\n        int minMin \u003d 0, minMax;\n        float xmin \u003d vertices[0][0];\n        for (i \u003d 1; i \u003c vertices.length; i++) {\n            if (vertices[i][0] !\u003d xmin) {\n                break;\n            }\n        }\n        minMax \u003d i - 1;\n        if (minMax \u003d\u003d vertices.length - 1) {\n            // Degenerate case: all x-coords \u003d\u003d xmin\n            polygon[++top] \u003d vertices[minMin];\n            if (vertices[minMax][1] !\u003d vertices[minMin][1]) {\n                // A nontrivial segment\n                polygon[++top] \u003d vertices[minMax];\n            }\n            // Add polygon end point\n            polygon[++top] \u003d vertices[minMin];\n            float[][] surroundingPolygon \u003d new float[top + 1][];\n            System.arraycopy(polygon, 0, surroundingPolygon, 0, surroundingPolygon.length);\n        }\n        // Get the indices of points with max x-coord and min|max y-coord\n        int maxMin, maxMax \u003d vertices.length - 1;\n        float xMax \u003d vertices[vertices.length - 1][0];\n        for (i \u003d vertices.length - 2; i \u003e\u003d 0; i--) {\n            if (vertices[i][0] !\u003d xMax) {\n                break;\n            }\n        }\n        maxMin \u003d i + 1;\n        // Compute the lower hull on the stack polygon\n        // push minmin point onto stack\n        polygon[++top] \u003d vertices[minMin];\n        i \u003d minMax;\n        while (++i \u003c\u003d maxMin) {\n            // The lower line joins points [minmin] with points [maxmin]\n            if (isLeft(vertices[minMin], vertices[maxMin], vertices[i]) \u003e\u003d 0 \u0026\u0026 i \u003c maxMin) {\n                // ignore points [i] above or on the lower line\n                continue;\n            }\n            while (// There are at least 2 points on the stack\n            top \u003e 0) {\n                // Test if points [i] is left of the line at the stack top\n                if (isLeft(polygon[top - 1], polygon[top], vertices[i]) \u003e 0)\n                    // points [i] is a new hull vertex\n                    break;\n                else\n                    // pop top point off stack\n                    top--;\n            }\n            // push points [i] onto stack\n            polygon[++top] \u003d vertices[i];\n        }\n        // Next, compute the upper hull on the stack polygon above the bottom hull\n        // If distinct xmax points\n        if (maxMax !\u003d maxMin) {\n            // Push maxmax point onto stack\n            polygon[++top] \u003d vertices[maxMax];\n        }\n        // The bottom point of the upper hull stack\n        bottom \u003d top;\n        i \u003d maxMin;\n        while (--i \u003e\u003d minMax) {\n            // The upper line joins points [maxmax] with points [minmax]\n            if (isLeft(vertices[maxMax], vertices[minMax], vertices[i]) \u003e\u003d 0 \u0026\u0026 i \u003e minMax) {\n                // Ignore points [i] below or on the upper line\n                continue;\n            }\n            // At least 2 points on the upper stack\n            while (top \u003e bottom) {\n                // Test if points [i] is left of the line at the stack top\n                if (isLeft(polygon[top - 1], polygon[top], vertices[i]) \u003e 0) {\n                    // points [i] is a new hull vertex\n                    break;\n                } else {\n                    // Pop top point off stack\n                    top--;\n                }\n            }\n            // Push points [i] onto stack\n            polygon[++top] \u003d vertices[i];\n        }\n        if (minMax !\u003d minMin) {\n            // Push joining endpoint onto stack\n            polygon[++top] \u003d vertices[minMin];\n        }\n        float[][] surroundingPolygon \u003d new float[top + 1][];\n        System.arraycopy(polygon, 0, surroundingPolygon, 0, surroundingPolygon.length);\n        return surroundingPolygon;\n    }\n\n    private float isLeft(float[] vertex0, float[] vertex1, float[] vertex2) {\n        return (vertex1[0] - vertex0[0]) * (vertex2[1] - vertex0[1]) - (vertex2[0] - vertex0[0]) * (vertex1[1] - vertex0[1]);\n    }\n\n    /**\n     * Returns the area on the floor of the given staircase.\n     */\n    public Area getAreaOnFloor(HomePieceOfFurniture staircase) {\n        if (staircase.getStaircaseCutOutShape() \u003d\u003d null) {\n            throw new IllegalArgumentException(\"No cut out shape associated to piece\");\n        }\n        Shape shape \u003d parseShape(staircase.getStaircaseCutOutShape());\n        Area staircaseArea \u003d new Area(shape);\n        if (staircase.isModelMirrored()) {\n            staircaseArea \u003d getMirroredArea(staircaseArea);\n        }\n        AffineTransform staircaseTransform \u003d AffineTransform.getTranslateInstance(staircase.getX() - staircase.getWidth() / 2, staircase.getY() - staircase.getDepth() / 2);\n        staircaseTransform.concatenate(AffineTransform.getRotateInstance(staircase.getAngle(), staircase.getWidth() / 2, staircase.getDepth() / 2));\n        staircaseTransform.concatenate(AffineTransform.getScaleInstance(staircase.getWidth(), staircase.getDepth()));\n        staircaseArea.transform(staircaseTransform);\n        return staircaseArea;\n    }\n\n    /**\n     * Returns the mirror area of the given \u003ccode\u003earea\u003c/code\u003e.\n     */\n    private Area getMirroredArea(Area area) {\n        // As applying a -1 scale transform reverses the holes / non holes interpretation of the points,\n        // we have to create a mirrored shape by parsing points\n        GeneralPath mirrorPath \u003d new GeneralPath();\n        float[] point \u003d new float[6];\n        for (PathIterator it \u003d area.getPathIterator(null); !it.isDone(); it.next()) {\n            switch(it.currentSegment(point)) {\n                case PathIterator.SEG_MOVETO:\n                    mirrorPath.moveTo(1 - point[0], point[1]);\n                    break;\n                case PathIterator.SEG_LINETO:\n                    mirrorPath.lineTo(1 - point[0], point[1]);\n                    break;\n                case PathIterator.SEG_QUADTO:\n                    mirrorPath.quadTo(1 - point[0], point[1], 1 - point[2], point[3]);\n                    break;\n                case PathIterator.SEG_CUBICTO:\n                    mirrorPath.curveTo(1 - point[0], point[1], 1 - point[2], point[3], 1 - point[4], point[5]);\n                    break;\n                case PathIterator.SEG_CLOSE:\n                    mirrorPath.closePath();\n                    break;\n            }\n        }\n        return new Area(mirrorPath);\n    }\n\n    /**\n     * Returns the AWT shape matching the given \u003ca href\u003d\"http://www.w3.org/TR/SVG/paths.html\"\u003eSVG path shape\u003c/a\u003e.\n     */\n    private Shape parseShape(String svgPathShape) {\n        Shape shape \u003d parsedShapes.get(svgPathShape);\n        if (shape \u003d\u003d null) {\n            try {\n                shape \u003d SVGPathSupport.parsePathShape(svgPathShape);\n            } catch (LinkageError ex) {\n                // Fallback to default square shape if batik classes aren\u0027t in classpath\n                shape \u003d new Rectangle2D.Float(0, 0, 1, 1);\n            }\n            parsedShapes.put(svgPathShape, shape);\n        }\n        return shape;\n    }\n\n    /**\n     * Separated static class to be able to exclude Batik library from classpath.\n     */\n    private static class SVGPathSupport {\n\n        public static Shape parsePathShape(String svgPathShape) {\n            try {\n                AWTPathProducer pathProducer \u003d new AWTPathProducer();\n                PathParser pathParser \u003d new PathParser();\n                pathParser.setPathHandler(pathProducer);\n                pathParser.parse(svgPathShape);\n                return pathProducer.getShape();\n            } catch (ParseException ex) {\n                // Fallback to default square shape if shape is incorrect\n                return new Rectangle2D.Float(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * An observer that receives model loading notifications.\n     */\n    public static interface ModelObserver {\n\n        public void modelUpdated(BranchGroup modelRoot);\n\n        public void modelError(Exception ex);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.j3d",
    "classname": "ModelManager",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager_5Test.java",
    "test_prompt": "// ModelManager_5Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModelManager}.\n* It contains ten unit test cases for the {@link ModelManager#getNormalizedTransformGroup(Node, float[][], float)} method.\n*/\nclass ModelManager_5Test {",
    "method_signature": "getNormalizedTransformGroup(Node, float[][], float)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// ModelManager.java\n/*\n * ModelManager.java 4 juil. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\n\n/**\n * Singleton managing 3D models cache.\n * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.\n * Additional classes implementing Java 3D \u003ccode\u003eLoader\u003c/code\u003e interface may be\n * specified in the \u003ccode\u003ecom.eteks.sweethome3d.j3d.additionalLoaderClasses\u003c/code\u003e\n * (separated by a space or a colon :) to enable the support of other formats.\u003cbr\u003e\n * Note: this class is compatible with Java 3D 1.3.\n * @author Emmanuel Puybaret\n */\npublic class ModelManager {\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for window pane shapes.\n     */\n    public static final String WINDOW_PANE_SHAPE_PREFIX \u003d \"sweethome3d_window_pane\";\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for mirror shapes.\n     */\n    public static final String MIRROR_SHAPE_PREFIX \u003d \"sweethome3d_window_mirror\";\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for lights.\n     */\n    public static final String LIGHT_SHAPE_PREFIX \u003d \"sweethome3d_light\";\n\n    private static final TransparencyAttributes WINDOW_PANE_TRANSPARENCY_ATTRIBUTES \u003d new TransparencyAttributes(TransparencyAttributes.NICEST, 0.5f);\n\n    private static final Material DEFAULT_MATERIAL \u003d new Material();\n\n    private static final float MINIMUM_SIZE \u003d 0.001f;\n\n    private static final String ADDITIONAL_LOADER_CLASSES \u003d \"com.eteks.sweethome3d.j3d.additionalLoaderClasses\";\n\n    private static ModelManager instance;\n\n    // Map storing loaded model nodes\n    private Map\u003cContent, BranchGroup\u003e loadedModelNodes;\n\n    // Map storing model nodes being loaded\n    private Map\u003cContent, List\u003cModelObserver\u003e\u003e loadingModelObservers;\n\n    // Executor used to load models\n    private ExecutorService modelsLoader;\n\n    // List of additional loader classes\n    private Class\u003cLoader\u003e[] additionalLoaderClasses;\n\n    // SVG path Shapes\n    private final Map\u003cString, Shape\u003e parsedShapes;\n\n    private ModelManager() {\n        // This class is a singleton\n        this.loadedModelNodes \u003d new WeakHashMap\u003cContent, BranchGroup\u003e();\n        this.loadingModelObservers \u003d new HashMap\u003cContent, List\u003cModelObserver\u003e\u003e();\n        this.parsedShapes \u003d new WeakHashMap\u003cString, Shape\u003e();\n        // Load other optional Loader classes\n        List\u003cClass\u003cLoader\u003e\u003e loaderClasses \u003d new ArrayList\u003cClass\u003cLoader\u003e\u003e();\n        String loaderClassNames \u003d System.getProperty(ADDITIONAL_LOADER_CLASSES);\n        if (loaderClassNames !\u003d null) {\n            for (String loaderClassName : loaderClassNames.split(\"\\\\s|:\")) {\n                try {\n                    loaderClasses.add(getLoaderClass(loaderClassName));\n                } catch (IllegalArgumentException ex) {\n                    System.err.println(\"Invalid loader class \" + loaderClassName + \":\\n\" + ex.getMessage());\n                }\n            }\n        }\n        this.additionalLoaderClasses \u003d loaderClasses.toArray(new Class[loaderClasses.size()]);\n    }\n\n    /**\n     * Returns the class of name \u003ccode\u003eloaderClassName\u003c/code\u003e.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Class\u003cLoader\u003e getLoaderClass(String loaderClassName) {\n        try {\n            Class\u003cLoader\u003e loaderClass \u003d (Class\u003cLoader\u003e) getClass().getClassLoader().loadClass(loaderClassName);\n            if (!Loader.class.isAssignableFrom(loaderClass)) {\n                throw new IllegalArgumentException(loaderClassName + \" not a subclass of \" + Loader.class.getName());\n            } else if (Modifier.isAbstract(loaderClass.getModifiers()) || !Modifier.isPublic(loaderClass.getModifiers())) {\n                throw new IllegalArgumentException(loaderClassName + \" not a public static class\");\n            }\n            Constructor\u003cLoader\u003e constructor \u003d loaderClass.getConstructor(new Class[0]);\n            // Try to instantiate it now to see if it won\u0027t cause any problem\n            constructor.newInstance(new Object[0]);\n            return loaderClass;\n        } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (NoSuchMethodException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (InvocationTargetException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (IllegalAccessException ex) {\n            throw new IllegalArgumentException(loaderClassName + \" constructor not accessible\");\n        } catch (InstantiationException ex) {\n            throw new IllegalArgumentException(loaderClassName + \" not a public static class\");\n        }\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static ModelManager getInstance() {\n        if (instance \u003d\u003d null) {\n            instance \u003d new ModelManager();\n        }\n        return instance;\n    }\n\n    /**\n     * Shutdowns the multithreaded service that load textures.\n     */\n    public void clear() {\n        if (this.modelsLoader !\u003d null) {\n            this.modelsLoader.shutdownNow();\n            this.modelsLoader \u003d null;\n        }\n        synchronized (this.loadedModelNodes) {\n            this.loadedModelNodes.clear();\n        }\n    }\n\n    /**\n     * Returns the minimum size of a model.\n     */\n    float getMinimumSize() {\n        return MINIMUM_SIZE;\n    }\n\n    /**\n     * Returns the size of 3D shapes of \u003ccode\u003enode\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node) {\n        return getSize(node, new Transform3D());\n    }\n\n    /**\n     * Returns the size of 3D shapes of \u003ccode\u003enode\u003c/code\u003e after an additional \u003ccode\u003etransformation\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node, Transform3D transformation) {\n        BoundingBox bounds \u003d getBounds(node, transformation);\n        Point3d lower \u003d new Point3d();\n        bounds.getLower(lower);\n        Point3d upper \u003d new Point3d();\n        bounds.getUpper(upper);\n        return new Vector3f(Math.max(getMinimumSize(), (float) (upper.x - lower.x)), Math.max(getMinimumSize(), (float) (upper.y - lower.y)), Math.max(getMinimumSize(), (float) (upper.z - lower.z)));\n    }\n\n    /**\n     * Returns the bounds of the 3D shapes of \u003ccode\u003enode\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node) {\n        return getBounds(node, new Transform3D());\n    }\n\n    /**\n     * Returns the bounds of the 3D shapes of \u003ccode\u003enode\u003c/code\u003e with an additional \u003ccode\u003etransformation\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes, contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e\n     * that returns a bounding sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node, Transform3D transformation) {\n        BoundingBox objectBounds \u003d new BoundingBox(new Point3d(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY), new Point3d(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY));\n        computeBounds(node, objectBounds, transformation, !isOrthogonalRotation(transformation));\n        Point3d lower \u003d new Point3d();\n        objectBounds.getLower(lower);\n        if (lower.x \u003d\u003d Double.POSITIVE_INFINITY) {\n            throw new IllegalArgumentException(\"Node has no bounds\");\n        }\n        return objectBounds;\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the rotation matrix matches only rotations of\n     * a multiple of 90� degrees around x, y or z axis.\n     */\n    private boolean isOrthogonalRotation(Transform3D transformation) {\n        Matrix3f matrix \u003d new Matrix3f();\n        transformation.get(matrix);\n        for (int i \u003d 0; i \u003c 3; i++) {\n            for (int j \u003d 0; j \u003c 3; j++) {\n                // Return false if the matrix contains a value different from 0 1 or -1\n                if (Math.abs(matrix.getElement(i, j)) \u003e 1E-6 \u0026\u0026 Math.abs(matrix.getElement(i, j) - 1) \u003e 1E-6 \u0026\u0026 Math.abs(matrix.getElement(i, j) + 1) \u003e 1E-6) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private void computeBounds(Node node, BoundingBox bounds, Transform3D parentTransformations, boolean transformShapeGeometry) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute the bounds of all the node children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeBounds((Node) enumeration.nextElement(), bounds, parentTransformations, transformShapeGeometry);\n            }\n        } else if (node instanceof Link) {\n            computeBounds(((Link) node).getSharedGroup(), bounds, parentTransformations, transformShapeGeometry);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Bounds shapeBounds;\n            if (transformShapeGeometry) {\n                shapeBounds \u003d computeTransformedGeometryBounds(shape, parentTransformations);\n            } else {\n                shapeBounds \u003d shape.getBounds();\n                shapeBounds.transform(parentTransformations);\n            }\n            bounds.combine(shapeBounds);\n        }\n    }\n\n    private Bounds computeTransformedGeometryBounds(Shape3D shape, Transform3D transformation) {\n        Point3d lower \u003d new Point3d(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n        Point3d upper \u003d new Point3d(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n        for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n            Geometry geometry \u003d shape.getGeometry(i);\n            if (geometry instanceof GeometryArray) {\n                GeometryArray geometryArray \u003d (GeometryArray) geometry;\n                int vertexCount \u003d geometryArray.getVertexCount();\n                Point3f vertex \u003d new Point3f();\n                if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                    if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                        float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                        int vertexSize \u003d vertexData.length / vertexCount;\n                        for (int index \u003d 0, j \u003d vertexSize - 3; index \u003c vertexCount; j +\u003d vertexSize, index++) {\n                            vertex.x \u003d vertexData[j];\n                            vertex.y \u003d vertexData[j + 1];\n                            vertex.z \u003d vertexData[j + 2];\n                            updateBounds(vertex, transformation, lower, upper);\n                        }\n                    } else {\n                        float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                        for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j +\u003d 3, index++) {\n                            vertex.x \u003d vertexCoordinates[j];\n                            vertex.y \u003d vertexCoordinates[j + 1];\n                            vertex.z \u003d vertexCoordinates[j + 2];\n                            updateBounds(vertex, transformation, lower, upper);\n                        }\n                    }\n                } else {\n                    for (int index \u003d 0; index \u003c vertexCount; index++) {\n                        geometryArray.getCoordinate(index, vertex);\n                        updateBounds(vertex, transformation, lower, upper);\n                    }\n                }\n            } else {\n                Bounds shapeBounds \u003d shape.getBounds();\n                shapeBounds.transform(transformation);\n                return shapeBounds;\n            }\n        }\n        Bounds shapeBounds \u003d new BoundingBox(lower, upper);\n        return shapeBounds;\n    }\n\n    private void updateBounds(Point3f vertex, Transform3D transformation, Point3d lower, Point3d upper) {\n        transformation.transform(vertex);\n        if (lower.x \u003e vertex.x) {\n            lower.x \u003d vertex.x;\n        }\n        if (lower.y \u003e vertex.y) {\n            lower.y \u003d vertex.y;\n        }\n        if (lower.z \u003e vertex.z) {\n            lower.z \u003d vertex.z;\n        }\n        if (upper.x \u003c vertex.x) {\n            upper.x \u003d vertex.x;\n        }\n        if (upper.y \u003c vertex.y) {\n            upper.y \u003d vertex.y;\n        }\n        if (upper.z \u003c vertex.z) {\n            upper.z \u003d vertex.z;\n        }\n    }\n\n    /**\n     * Returns a transform group that will transform the model \u003ccode\u003enode\u003c/code\u003e\n     * to let it fill a box of the given \u003ccode\u003ewidth\u003c/code\u003e centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or \u003ccode\u003enull\u003c/code\u003e if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public TransformGroup getNormalizedTransformGroup(Node node, float[][] modelRotation, float width) {\n        return new TransformGroup(getNormalizedTransform(node, modelRotation, width));\n    }\n\n    /**\n     * Returns a transform that will transform the model \u003ccode\u003enode\u003c/code\u003e\n     * to let it fill a box of the given \u003ccode\u003ewidth\u003c/code\u003e centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or \u003ccode\u003enull\u003c/code\u003e if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public Transform3D getNormalizedTransform(Node node, float[][] modelRotation, float width) {\n        // Get model bounding box size\n        BoundingBox modelBounds \u003d getBounds(node);\n        Point3d lower \u003d new Point3d();\n        modelBounds.getLower(lower);\n        Point3d upper \u003d new Point3d();\n        modelBounds.getUpper(upper);\n        // Translate model to its center\n        Transform3D translation \u003d new Transform3D();\n        translation.setTranslation(new Vector3d(-lower.x - (upper.x - lower.x) / 2, -lower.y - (upper.y - lower.y) / 2, -lower.z - (upper.z - lower.z) / 2));\n        Transform3D modelTransform;\n        if (modelRotation !\u003d null) {\n            // Get model bounding box size with model rotation\n            Matrix3f modelRotationMatrix \u003d new Matrix3f(modelRotation[0][0], modelRotation[0][1], modelRotation[0][2], modelRotation[1][0], modelRotation[1][1], modelRotation[1][2], modelRotation[2][0], modelRotation[2][1], modelRotation[2][2]);\n            modelTransform \u003d new Transform3D();\n            modelTransform.setRotation(modelRotationMatrix);\n            modelTransform.mul(translation);\n            BoundingBox rotatedModelBounds \u003d getBounds(node, modelTransform);\n            rotatedModelBounds.getLower(lower);\n            rotatedModelBounds.getUpper(upper);\n        } else {\n            modelTransform \u003d translation;\n        }\n        // Scale model to make it fill a 1 unit wide box\n        Transform3D scaleOneTransform \u003d new Transform3D();\n        scaleOneTransform.setScale(new Vector3d(width / Math.max(getMinimumSize(), upper.x - lower.x), width / Math.max(getMinimumSize(), upper.y - lower.y), width / Math.max(getMinimumSize(), upper.z - lower.z)));\n        scaleOneTransform.mul(modelTransform);\n        return scaleOneTransform;\n    }\n\n    /**\n     * Reads asynchronously a 3D node from \u003ccode\u003econtent\u003c/code\u003e with supported loaders\n     * and notifies the loaded model to the given \u003ccode\u003emodelObserver\u003c/code\u003e once available.\n     * @param content an object containing a model\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens\n     * @throws IllegalStateException if the current thread isn\u0027t the Event Dispatch Thread.\n     */\n    public void loadModel(Content content, ModelObserver modelObserver) {\n        loadModel(content, false, modelObserver);\n    }\n\n    /**\n     * Reads a 3D node from \u003ccode\u003econtent\u003c/code\u003e with supported loaders\n     * and notifies the loaded model to the given \u003ccode\u003emodelObserver\u003c/code\u003e once available.\n     * @param content an object containing a model\n     * @param synchronous if \u003ccode\u003etrue\u003c/code\u003e, this method will return only once model content is loaded\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens. When the model is loaded synchronously, the observer will be notified\n     *    in the same thread as the caller, otherwise the observer will be notified in the Event\n     *    Dispatch Thread and this method must be called in Event Dispatch Thread too.\n     * @throws IllegalStateException if synchronous is \u003ccode\u003efalse\u003c/code\u003e and the current thread isn\u0027t\n     *    the Event Dispatch Thread.\n     */\n    public void loadModel(final Content content, boolean synchronous, ModelObserver modelObserver) {\n        BranchGroup modelRoot;\n        synchronized (this.loadedModelNodes) {\n            modelRoot \u003d this.loadedModelNodes.get(content);\n        }\n        if (modelRoot !\u003d null) {\n            // Notify cached model to observer with a clone of the model\n            modelObserver.modelUpdated((BranchGroup) cloneNode(modelRoot));\n        } else if (synchronous) {\n            try {\n                modelRoot \u003d loadModel(content);\n                synchronized (this.loadedModelNodes) {\n                    // Store in cache model node for future copies\n                    this.loadedModelNodes.put(content, (BranchGroup) modelRoot);\n                }\n                modelObserver.modelUpdated((BranchGroup) cloneNode(modelRoot));\n            } catch (IOException ex) {\n                modelObserver.modelError(ex);\n            }\n        } else if (!EventQueue.isDispatchThread()) {\n            throw new IllegalStateException(\"Asynchronous call out of Event Dispatch Thread\");\n        } else {\n            if (this.modelsLoader \u003d\u003d null) {\n                this.modelsLoader \u003d Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n            }\n            List\u003cModelObserver\u003e observers \u003d this.loadingModelObservers.get(content);\n            if (observers !\u003d null) {\n                // If observers list exists, content model is already being loaded\n                // register observer for future notification\n                observers.add(modelObserver);\n            } else {\n                // Create a list of observers that will be notified once content model is loaded\n                observers \u003d new ArrayList\u003cModelObserver\u003e();\n                observers.add(modelObserver);\n                this.loadingModelObservers.put(content, observers);\n                // Load the model in an other thread\n                this.modelsLoader.execute(new Runnable() {\n\n                    public void run() {\n                        try {\n                            final BranchGroup loadedModel \u003d loadModel(content);\n                            synchronized (loadedModelNodes) {\n                                // Update loaded models cache and notify registered observers\n                                loadedModelNodes.put(content, loadedModel);\n                            }\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    for (final ModelObserver observer : loadingModelObservers.remove(content)) {\n                                        observer.modelUpdated((BranchGroup) cloneNode(loadedModel));\n                                    }\n                                }\n                            });\n                        } catch (final IOException ex) {\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    for (final ModelObserver observer : loadingModelObservers.remove(content)) {\n                                        observer.modelError(ex);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns a clone of the given \u003ccode\u003enode\u003c/code\u003e.\n     * All the children and the attributes of the given node are duplicated except the geometries\n     * and the texture images of shapes.\n     */\n    public Node cloneNode(Node node) {\n        // Clone node in a synchronized block because cloneNodeComponent is not thread safe\n        synchronized (this.loadedModelNodes) {\n            return cloneNode(node, new HashMap\u003cSharedGroup, SharedGroup\u003e());\n        }\n    }\n\n    private Node cloneNode(Node node, Map\u003cSharedGroup, SharedGroup\u003e clonedSharedGroups) {\n        if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Shape3D clonedShape \u003d (Shape3D) shape.cloneNode(false);\n            Appearance appearance \u003d shape.getAppearance();\n            if (appearance !\u003d null) {\n                // Force only duplication of node\u0027s appearance except its texture\n                Appearance clonedAppearance \u003d (Appearance) appearance.cloneNodeComponent(true);\n                Texture texture \u003d appearance.getTexture();\n                if (texture !\u003d null) {\n                    clonedAppearance.setTexture(texture);\n                }\n                clonedShape.setAppearance(clonedAppearance);\n            }\n            return clonedShape;\n        } else if (node instanceof Link) {\n            Link clonedLink \u003d (Link) node.cloneNode(true);\n            // Force duplication of shared groups too\n            SharedGroup sharedGroup \u003d clonedLink.getSharedGroup();\n            if (sharedGroup !\u003d null) {\n                SharedGroup clonedSharedGroup \u003d clonedSharedGroups.get(sharedGroup);\n                if (clonedSharedGroup \u003d\u003d null) {\n                    clonedSharedGroup \u003d (SharedGroup) cloneNode(sharedGroup, clonedSharedGroups);\n                    clonedSharedGroups.put(sharedGroup, clonedSharedGroup);\n                }\n                clonedLink.setSharedGroup(clonedSharedGroup);\n            }\n            return clonedLink;\n        } else {\n            Node clonedNode \u003d node.cloneNode(true);\n            if (node instanceof Group) {\n                Group group \u003d (Group) node;\n                Group clonedGroup \u003d (Group) clonedNode;\n                for (int i \u003d 0, n \u003d group.numChildren(); i \u003c n; i++) {\n                    Node clonedChild \u003d cloneNode(group.getChild(i), clonedSharedGroups);\n                    clonedGroup.addChild(clonedChild);\n                }\n            }\n            return clonedNode;\n        }\n    }\n\n    /**\n     * Returns the node loaded synchronously from \u003ccode\u003econtent\u003c/code\u003e with supported loaders.\n     * This method is threadsafe and may be called from any thread.\n     * @param content an object containing a model\n     */\n    public BranchGroup loadModel(Content content) throws IOException {\n        // Ensure we use a URLContent object\n        URLContent urlContent;\n        if (content instanceof URLContent) {\n            urlContent \u003d (URLContent) content;\n        } else {\n            urlContent \u003d TemporaryURLContent.copyToTemporaryURLContent(content);\n        }\n        Loader3DS loader3DSWithNoStackTraces \u003d new Loader3DS() {\n\n            @Override\n            public Scene load(URL url) throws FileNotFoundException, IncorrectFormatException {\n                try {\n                    // Check magic number 0x4D4D\n                    InputStream in \u003d url.openStream();\n                    int b1 \u003d in.read();\n                    int b2 \u003d in.read();\n                    if (b1 !\u003d 0x4D || b2 !\u003d 0x4D) {\n                        throw new IncorrectFormatException(\"Bad magic number\");\n                    }\n                    in.close();\n                } catch (FileNotFoundException ex) {\n                    throw ex;\n                } catch (IOException ex) {\n                    throw new ParsingErrorException(\"Can\u0027t read url \" + url);\n                }\n                PrintStream defaultSystemErrorStream \u003d System.err;\n                try {\n                    // Ignore stack traces on System.err during 3DS file loading\n                    System.setErr(new PrintStream(new OutputStream() {\n\n                        @Override\n                        public void write(int b) throws IOException {\n                            // Do nothing\n                        }\n                    }));\n                    // Default load\n                    return super.load(url);\n                } finally {\n                    // Reset default err print stream\n                    System.setErr(defaultSystemErrorStream);\n                }\n            }\n        };\n        Loader[] defaultLoaders \u003d new Loader[] { new OBJLoader(), new DAELoader(), loader3DSWithNoStackTraces, new Lw3dLoader() };\n        Loader[] loaders \u003d new Loader[defaultLoaders.length + this.additionalLoaderClasses.length];\n        System.arraycopy(defaultLoaders, 0, loaders, 0, defaultLoaders.length);\n        for (int i \u003d 0; i \u003c this.additionalLoaderClasses.length; i++) {\n            try {\n                loaders[defaultLoaders.length + i] \u003d this.additionalLoaderClasses[i].newInstance();\n            } catch (InstantiationException ex) {\n                // Can\u0027t happen: getLoaderClass checked this class is instantiable\n                throw new InternalError(ex.getMessage());\n            } catch (IllegalAccessException ex) {\n                // Can\u0027t happen: getLoaderClass checked this class is instantiable\n                throw new InternalError(ex.getMessage());\n            }\n        }\n        Exception lastException \u003d null;\n        for (Loader loader : loaders) {\n            try {\n                // Ask loader to ignore lights, fogs...\n                loader.setFlags(loader.getFlags() \u0026 ~(Loader.LOAD_LIGHT_NODES | Loader.LOAD_FOG_NODES | Loader.LOAD_BACKGROUND_NODES | Loader.LOAD_VIEW_GROUPS));\n                // Return the first scene that can be loaded from model URL content\n                Scene scene \u003d loader.load(urlContent.getURL());\n                BranchGroup modelNode \u003d scene.getSceneGroup();\n                // If model doesn\u0027t have any child, consider the file as wrong\n                if (modelNode.numChildren() \u003d\u003d 0) {\n                    throw new IllegalArgumentException(\"Empty model\");\n                }\n                // Update transparency of scene window panes shapes\n                updateShapeNamesAndWindowPanesTransparency(scene);\n                // Turn off lights because some loaders don\u0027t take into account the ~LOAD_LIGHT_NODES flag\n                turnOffLightsShareAndModulateTextures(modelNode);\n                return modelNode;\n            } catch (IllegalArgumentException ex) {\n                lastException \u003d ex;\n            } catch (IncorrectFormatException ex) {\n                lastException \u003d ex;\n            } catch (ParsingErrorException ex) {\n                lastException \u003d ex;\n            } catch (IOException ex) {\n                lastException \u003d ex;\n            } catch (RuntimeException ex) {\n                // Take into account exceptions of Java 3D 1.5 ImageException class\n                // in such a way program can run in Java 3D 1.3.1\n                if (ex.getClass().getName().equals(\"com.sun.j3d.utils.image.ImageException\")) {\n                    lastException \u003d ex;\n                } else {\n                    throw ex;\n                }\n            }\n        }\n        if (lastException instanceof IOException) {\n            throw (IOException) lastException;\n        } else if (lastException instanceof IncorrectFormatException) {\n            IOException incorrectFormatException \u003d new IOException(\"Incorrect format\");\n            incorrectFormatException.initCause(lastException);\n            throw incorrectFormatException;\n        } else if (lastException instanceof ParsingErrorException) {\n            IOException incorrectFormatException \u003d new IOException(\"Parsing error\");\n            incorrectFormatException.initCause(lastException);\n            throw incorrectFormatException;\n        } else {\n            IOException otherException \u003d new IOException();\n            otherException.initCause(lastException);\n            throw otherException;\n        }\n    }\n\n    /**\n     * Updates the name of scene shapes and transparency window panes shapes.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void updateShapeNamesAndWindowPanesTransparency(Scene scene) {\n        Map\u003cString, Object\u003e namedObjects \u003d scene.getNamedObjects();\n        for (Map.Entry\u003cString, Object\u003e entry : namedObjects.entrySet()) {\n            if (entry.getValue() instanceof Shape3D) {\n                String shapeName \u003d entry.getKey();\n                // Assign shape name to its user data\n                Shape3D shape \u003d (Shape3D) entry.getValue();\n                shape.setUserData(shapeName);\n                if (shapeName.startsWith(WINDOW_PANE_SHAPE_PREFIX)) {\n                    Appearance appearance \u003d shape.getAppearance();\n                    if (appearance \u003d\u003d null) {\n                        appearance \u003d new Appearance();\n                        shape.setAppearance(appearance);\n                    }\n                    if (appearance.getTransparencyAttributes() \u003d\u003d null) {\n                        appearance.setTransparencyAttributes(WINDOW_PANE_TRANSPARENCY_ATTRIBUTES);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Turns off light nodes of \u003ccode\u003enode\u003c/code\u003e children,\n     * and modulates textures if needed.\n     */\n    private void turnOffLightsShareAndModulateTextures(Node node) {\n        if (node instanceof Group) {\n            // Enumerate children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                turnOffLightsShareAndModulateTextures((Node) enumeration.nextElement());\n            }\n        } else if (node instanceof Link) {\n            turnOffLightsShareAndModulateTextures(((Link) node).getSharedGroup());\n        } else if (node instanceof Light) {\n            ((Light) node).setEnable(false);\n        } else if (node instanceof Shape3D) {\n            Appearance appearance \u003d ((Shape3D) node).getAppearance();\n            if (appearance !\u003d null) {\n                Texture texture \u003d appearance.getTexture();\n                if (texture !\u003d null) {\n                    // Share textures data as much as possible\n                    Texture sharedTexture \u003d TextureManager.getInstance().shareTexture(texture);\n                    if (sharedTexture !\u003d texture) {\n                        appearance.setTexture(sharedTexture);\n                    }\n                    TextureAttributes textureAttributes \u003d appearance.getTextureAttributes();\n                    if (textureAttributes \u003d\u003d null) {\n                        // Mix texture and shape color\n                        textureAttributes \u003d new TextureAttributes();\n                        textureAttributes.setTextureMode(TextureAttributes.MODULATE);\n                        appearance.setTextureAttributes(textureAttributes);\n                        // Check shape color is white\n                        Material material \u003d appearance.getMaterial();\n                        if (material \u003d\u003d null) {\n                            appearance.setMaterial((Material) DEFAULT_MATERIAL.cloneNodeComponent(true));\n                        } else {\n                            Color3f color \u003d new Color3f();\n                            DEFAULT_MATERIAL.getDiffuseColor(color);\n                            material.setDiffuseColor(color);\n                            DEFAULT_MATERIAL.getAmbientColor(color);\n                            material.setAmbientColor(color);\n                        }\n                    }\n                    // If texture image supports transparency\n                    if (TextureManager.getInstance().isTextureTransparent(sharedTexture)) {\n                        if (appearance.getTransparencyAttributes() \u003d\u003d null) {\n                            // Add transparency attributes to ensure transparency works\n                            appearance.setTransparencyAttributes(new TransparencyAttributes(TransparencyAttributes.NICEST, 0));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the 2D area of the 3D shapes children of the given \u003ccode\u003enode\u003c/code\u003e\n     * projected on the floor (plan y \u003d 0).\n     */\n    public Area getAreaOnFloor(Node node) {\n        Area modelAreaOnFloor;\n        int vertexCount \u003d getVertexCount(node);\n        if (vertexCount \u003c 10000) {\n            modelAreaOnFloor \u003d new Area();\n            computeAreaOnFloor(node, modelAreaOnFloor, new Transform3D());\n        } else {\n            List\u003cfloat[]\u003e vertices \u003d new ArrayList\u003cfloat[]\u003e(vertexCount);\n            computeVerticesOnFloor(node, vertices, new Transform3D());\n            float[][] surroundingPolygon \u003d getSurroundingPolygon(vertices.toArray(new float[vertices.size()][]));\n            GeneralPath generalPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, surroundingPolygon.length);\n            generalPath.moveTo(surroundingPolygon[0][0], surroundingPolygon[0][1]);\n            for (int i \u003d 0; i \u003c surroundingPolygon.length; i++) {\n                generalPath.lineTo(surroundingPolygon[i][0], surroundingPolygon[i][1]);\n            }\n            generalPath.closePath();\n            modelAreaOnFloor \u003d new Area(generalPath);\n        }\n        return modelAreaOnFloor;\n    }\n\n    /**\n     * Returns the total count of vertices in all geometries.\n     */\n    private int getVertexCount(Node node) {\n        int count \u003d 0;\n        if (node instanceof Group) {\n            // Enumerate all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                count +\u003d getVertexCount((Node) enumeration.nextElement());\n            }\n        } else if (node instanceof Link) {\n            count \u003d getVertexCount(((Link) node).getSharedGroup());\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            if (renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) {\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    Geometry geometry \u003d shape.getGeometry(i);\n                    if (geometry instanceof GeometryArray) {\n                        count +\u003d ((GeometryArray) geometry).getVertexCount();\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Computes the vertices coordinates projected on floor of the 3D shapes children of \u003ccode\u003enode\u003c/code\u003e.\n     */\n    private void computeVerticesOnFloor(Node node, List\u003cfloat[]\u003e vertices, Transform3D parentTransformations) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeVerticesOnFloor((Node) enumeration.nextElement(), vertices, parentTransformations);\n            }\n        } else if (node instanceof Link) {\n            computeVerticesOnFloor(((Link) node).getSharedGroup(), vertices, parentTransformations);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            TransparencyAttributes transparencyAttributes \u003d appearance !\u003d null ? appearance.getTransparencyAttributes() : null;\n            if ((renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) \u0026\u0026 (transparencyAttributes \u003d\u003d null || transparencyAttributes.getTransparency() \u003c 1)) {\n                // Compute shape geometries area\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    Geometry geometry \u003d shape.getGeometry(i);\n                    if (geometry instanceof GeometryArray) {\n                        GeometryArray geometryArray \u003d (GeometryArray) geometry;\n                        int vertexCount \u003d geometryArray.getVertexCount();\n                        Point3f vertex \u003d new Point3f();\n                        if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                            if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                                float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                                int vertexSize \u003d vertexData.length / vertexCount;\n                                // Store vertices coordinates\n                                for (int index \u003d 0, j \u003d vertexSize - 3; index \u003c vertexCount; j +\u003d vertexSize, index++) {\n                                    vertex.x \u003d vertexData[j];\n                                    vertex.y \u003d vertexData[j + 1];\n                                    vertex.z \u003d vertexData[j + 2];\n                                    parentTransformations.transform(vertex);\n                                    vertices.add(new float[] { vertex.x, vertex.z });\n                                }\n                            } else {\n                                // Store vertices coordinates\n                                float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                                for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j +\u003d 3, index++) {\n                                    vertex.x \u003d vertexCoordinates[j];\n                                    vertex.y \u003d vertexCoordinates[j + 1];\n                                    vertex.z \u003d vertexCoordinates[j + 2];\n                                    parentTransformations.transform(vertex);\n                                    vertices.add(new float[] { vertex.x, vertex.z });\n                                }\n                            }\n                        } else {\n                            // Store vertices coordinates\n                            for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j++, index++) {\n                                geometryArray.getCoordinate(j, vertex);\n                                parentTransformations.transform(vertex);\n                                vertices.add(new float[] { vertex.x, vertex.z });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Computes the 2D area on floor of the 3D shapes children of \u003ccode\u003enode\u003c/code\u003e.\n     */\n    private void computeAreaOnFloor(Node node, Area nodeArea, Transform3D parentTransformations) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeAreaOnFloor((Node) enumeration.nextElement(), nodeArea, parentTransformations);\n            }\n        } else if (node instanceof Link) {\n            computeAreaOnFloor(((Link) node).getSharedGroup(), nodeArea, parentTransformations);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            TransparencyAttributes transparencyAttributes \u003d appearance !\u003d null ? appearance.getTransparencyAttributes() : null;\n            if ((renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) \u0026\u0026 (transparencyAttributes \u003d\u003d null || transparencyAttributes.getTransparency() \u003c 1)) {\n                // Compute shape geometries area\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    computeGeometryAreaOnFloor(shape.getGeometry(i), parentTransformations, nodeArea);\n                }\n            }\n        }\n    }\n\n    /**\n     * Computes the area on floor of a 3D geometry.\n     */\n    private void computeGeometryAreaOnFloor(Geometry geometry, Transform3D parentTransformations, Area nodeArea) {\n        if (geometry instanceof GeometryArray) {\n            GeometryArray geometryArray \u003d (GeometryArray) geometry;\n            int vertexCount \u003d geometryArray.getVertexCount();\n            float[] vertices \u003d new float[vertexCount * 2];\n            Point3f vertex \u003d new Point3f();\n            if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                    float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                    int vertexSize \u003d vertexData.length / vertexCount;\n                    // Store vertices coordinates\n                    for (int index \u003d 0, i \u003d vertexSize - 3; index \u003c vertices.length; i +\u003d vertexSize) {\n                        vertex.x \u003d vertexData[i];\n                        vertex.y \u003d vertexData[i + 1];\n                        vertex.z \u003d vertexData[i + 2];\n                        parentTransformations.transform(vertex);\n                        vertices[index++] \u003d vertex.x;\n                        vertices[index++] \u003d vertex.z;\n                    }\n                } else {\n                    // Store vertices coordinates\n                    float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                    for (int index \u003d 0, i \u003d 0; index \u003c vertices.length; i +\u003d 3) {\n                        vertex.x \u003d vertexCoordinates[i];\n                        vertex.y \u003d vertexCoordinates[i + 1];\n                        vertex.z \u003d vertexCoordinates[i + 2];\n                        parentTransformations.transform(vertex);\n                        vertices[index++] \u003d vertex.x;\n                        vertices[index++] \u003d vertex.z;\n                    }\n                }\n            } else {\n                // Store vertices coordinates\n                for (int index \u003d 0, i \u003d 0; index \u003c vertices.length; i++) {\n                    geometryArray.getCoordinate(i, vertex);\n                    parentTransformations.transform(vertex);\n                    vertices[index++] \u003d vertex.x;\n                    vertices[index++] \u003d vertex.z;\n                }\n            }\n            // Create path from triangles or quadrilaterals of geometry\n            GeneralPath geometryPath \u003d null;\n            if (geometryArray instanceof IndexedGeometryArray) {\n                if (geometryArray instanceof IndexedTriangleArray) {\n                    IndexedTriangleArray triangleArray \u003d (IndexedTriangleArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, triangleIndex \u003d 0, n \u003d triangleArray.getIndexCount(); i \u003c n; i +\u003d 3) {\n                        addIndexedTriangleToPath(triangleArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof IndexedQuadArray) {\n                    IndexedQuadArray quadArray \u003d (IndexedQuadArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, quadrilateralIndex \u003d 0, n \u003d quadArray.getIndexCount(); i \u003c n; i +\u003d 4) {\n                        addIndexedQuadrilateralToPath(quadArray, i, i + 1, i + 2, i + 3, vertices, geometryPath, quadrilateralIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof IndexedGeometryStripArray) {\n                    IndexedGeometryStripArray geometryStripArray \u003d (IndexedGeometryStripArray) geometryArray;\n                    int[] stripIndexCounts \u003d new int[geometryStripArray.getNumStrips()];\n                    geometryStripArray.getStripIndexCounts(stripIndexCounts);\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    int initialIndex \u003d 0;\n                    if (geometryStripArray instanceof IndexedTriangleStripArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripIndexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripIndexCounts[strip] - 2, j \u003d 0; i \u003c n; i++, j++) {\n                                if (j % 2 \u003d\u003d 0) {\n                                    addIndexedTriangleToPath(geometryStripArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                                } else {\n                                    // Vertices of odd triangles are in reverse order\n                                    addIndexedTriangleToPath(geometryStripArray, i, i + 2, i + 1, vertices, geometryPath, triangleIndex++, nodeArea);\n                                }\n                            }\n                            initialIndex +\u003d stripIndexCounts[strip];\n                        }\n                    } else if (geometryStripArray instanceof IndexedTriangleFanArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripIndexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripIndexCounts[strip] - 2; i \u003c n; i++) {\n                                addIndexedTriangleToPath(geometryStripArray, initialIndex, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                            }\n                            initialIndex +\u003d stripIndexCounts[strip];\n                        }\n                    }\n                }\n            } else {\n                if (geometryArray instanceof TriangleArray) {\n                    TriangleArray triangleArray \u003d (TriangleArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, triangleIndex \u003d 0; i \u003c vertexCount; i +\u003d 3) {\n                        addTriangleToPath(triangleArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof QuadArray) {\n                    QuadArray quadArray \u003d (QuadArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, quadrilateralIndex \u003d 0; i \u003c vertexCount; i +\u003d 4) {\n                        addQuadrilateralToPath(quadArray, i, i + 1, i + 2, i + 3, vertices, geometryPath, quadrilateralIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof GeometryStripArray) {\n                    GeometryStripArray geometryStripArray \u003d (GeometryStripArray) geometryArray;\n                    int[] stripVertexCounts \u003d new int[geometryStripArray.getNumStrips()];\n                    geometryStripArray.getStripVertexCounts(stripVertexCounts);\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    int initialIndex \u003d 0;\n                    if (geometryStripArray instanceof TriangleStripArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripVertexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripVertexCounts[strip] - 2, j \u003d 0; i \u003c n; i++, j++) {\n                                if (j % 2 \u003d\u003d 0) {\n                                    addTriangleToPath(geometryStripArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                                } else {\n                                    // Vertices of odd triangles are in reverse order\n                                    addTriangleToPath(geometryStripArray, i, i + 2, i + 1, vertices, geometryPath, triangleIndex++, nodeArea);\n                                }\n                            }\n                            initialIndex +\u003d stripVertexCounts[strip];\n                        }\n                    } else if (geometryStripArray instanceof TriangleFanArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripVertexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripVertexCounts[strip] - 2; i \u003c n; i++) {\n                                addTriangleToPath(geometryStripArray, initialIndex, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                            }\n                            initialIndex +\u003d stripVertexCounts[strip];\n                        }\n                    }\n                }\n            }\n            if (geometryPath !\u003d null) {\n                nodeArea.add(new Area(geometryPath));\n            }\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices.\n     */\n    private void addIndexedTriangleToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea) {\n        addTriangleToPath(geometryArray, geometryArray.getCoordinateIndex(vertexIndex1), geometryArray.getCoordinateIndex(vertexIndex2), geometryArray.getCoordinateIndex(vertexIndex3), vertices, geometryPath, triangleIndex, nodeArea);\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices.\n     */\n    private void addIndexedQuadrilateralToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea) {\n        addQuadrilateralToPath(geometryArray, geometryArray.getCoordinateIndex(vertexIndex1), geometryArray.getCoordinateIndex(vertexIndex2), geometryArray.getCoordinateIndex(vertexIndex3), geometryArray.getCoordinateIndex(vertexIndex4), vertices, geometryPath, quadrilateralIndex, nodeArea);\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices,\n     * only if the triangle has a positive orientation.\n     */\n    private void addTriangleToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea) {\n        float xVertex1 \u003d vertices[2 * vertexIndex1];\n        float yVertex1 \u003d vertices[2 * vertexIndex1 + 1];\n        float xVertex2 \u003d vertices[2 * vertexIndex2];\n        float yVertex2 \u003d vertices[2 * vertexIndex2 + 1];\n        float xVertex3 \u003d vertices[2 * vertexIndex3];\n        float yVertex3 \u003d vertices[2 * vertexIndex3 + 1];\n        if ((xVertex2 - xVertex1) * (yVertex3 - yVertex2) - (yVertex2 - yVertex1) * (xVertex3 - xVertex2) \u003e 0) {\n            if (triangleIndex \u003e 0 \u0026\u0026 triangleIndex % 1000 \u003d\u003d 0) {\n                // Add now current path to area otherwise area gets too slow\n                nodeArea.add(new Area(geometryPath));\n                geometryPath.reset();\n            }\n            geometryPath.moveTo(xVertex1, yVertex1);\n            geometryPath.lineTo(xVertex2, yVertex2);\n            geometryPath.lineTo(xVertex3, yVertex3);\n            geometryPath.closePath();\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices,\n     * only if the quadrilateral has a positive orientation.\n     */\n    private void addQuadrilateralToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea) {\n        float xVertex1 \u003d vertices[2 * vertexIndex1];\n        float yVertex1 \u003d vertices[2 * vertexIndex1 + 1];\n        float xVertex2 \u003d vertices[2 * vertexIndex2];\n        float yVertex2 \u003d vertices[2 * vertexIndex2 + 1];\n        float xVertex3 \u003d vertices[2 * vertexIndex3];\n        float yVertex3 \u003d vertices[2 * vertexIndex3 + 1];\n        if ((xVertex2 - xVertex1) * (yVertex3 - yVertex2) - (yVertex2 - yVertex1) * (xVertex3 - xVertex2) \u003e 0) {\n            if (quadrilateralIndex \u003e 0 \u0026\u0026 quadrilateralIndex % 1000 \u003d\u003d 0) {\n                // Add now current path to area otherwise area gets too slow\n                nodeArea.add(new Area(geometryPath));\n                geometryPath.reset();\n            }\n            geometryPath.moveTo(xVertex1, yVertex1);\n            geometryPath.lineTo(xVertex2, yVertex2);\n            geometryPath.lineTo(xVertex3, yVertex3);\n            geometryPath.lineTo(vertices[2 * vertexIndex4], vertices[2 * vertexIndex4 + 1]);\n            geometryPath.closePath();\n        }\n    }\n\n    /**\n     * Returns the convex polygon that surrounds the given \u003ccode\u003evertices\u003c/code\u003e.\n     * From Andrew\u0027s monotone chain 2D convex hull algorithm described at\n     * http://softsurfer.com/Archive/algorithm%5F0109/algorithm%5F0109.htm\n     */\n    private float[][] getSurroundingPolygon(float[][] vertices) {\n        Arrays.sort(vertices, new Comparator\u003cfloat[]\u003e() {\n\n            public int compare(float[] vertex1, float[] vertex2) {\n                if (vertex1[0] \u003d\u003d vertex2[0]) {\n                    return (int) Math.signum(vertex2[1] - vertex1[1]);\n                } else {\n                    return (int) Math.signum(vertex2[0] - vertex1[0]);\n                }\n            }\n        });\n        float[][] polygon \u003d new float[vertices.length][];\n        // The output array polygon [] will be used as the stack\n        // indices for bottom and top of the stack\n        int bottom \u003d 0, top \u003d -1;\n        // array scan index\n        int i;\n        // Get the indices of points with min x-coord and min|max y-coord\n        int minMin \u003d 0, minMax;\n        float xmin \u003d vertices[0][0];\n        for (i \u003d 1; i \u003c vertices.length; i++) {\n            if (vertices[i][0] !\u003d xmin) {\n                break;\n            }\n        }\n        minMax \u003d i - 1;\n        if (minMax \u003d\u003d vertices.length - 1) {\n            // Degenerate case: all x-coords \u003d\u003d xmin\n            polygon[++top] \u003d vertices[minMin];\n            if (vertices[minMax][1] !\u003d vertices[minMin][1]) {\n                // A nontrivial segment\n                polygon[++top] \u003d vertices[minMax];\n            }\n            // Add polygon end point\n            polygon[++top] \u003d vertices[minMin];\n            float[][] surroundingPolygon \u003d new float[top + 1][];\n            System.arraycopy(polygon, 0, surroundingPolygon, 0, surroundingPolygon.length);\n        }\n        // Get the indices of points with max x-coord and min|max y-coord\n        int maxMin, maxMax \u003d vertices.length - 1;\n        float xMax \u003d vertices[vertices.length - 1][0];\n        for (i \u003d vertices.length - 2; i \u003e\u003d 0; i--) {\n            if (vertices[i][0] !\u003d xMax) {\n                break;\n            }\n        }\n        maxMin \u003d i + 1;\n        // Compute the lower hull on the stack polygon\n        // push minmin point onto stack\n        polygon[++top] \u003d vertices[minMin];\n        i \u003d minMax;\n        while (++i \u003c\u003d maxMin) {\n            // The lower line joins points [minmin] with points [maxmin]\n            if (isLeft(vertices[minMin], vertices[maxMin], vertices[i]) \u003e\u003d 0 \u0026\u0026 i \u003c maxMin) {\n                // ignore points [i] above or on the lower line\n                continue;\n            }\n            while (// There are at least 2 points on the stack\n            top \u003e 0) {\n                // Test if points [i] is left of the line at the stack top\n                if (isLeft(polygon[top - 1], polygon[top], vertices[i]) \u003e 0)\n                    // points [i] is a new hull vertex\n                    break;\n                else\n                    // pop top point off stack\n                    top--;\n            }\n            // push points [i] onto stack\n            polygon[++top] \u003d vertices[i];\n        }\n        // Next, compute the upper hull on the stack polygon above the bottom hull\n        // If distinct xmax points\n        if (maxMax !\u003d maxMin) {\n            // Push maxmax point onto stack\n            polygon[++top] \u003d vertices[maxMax];\n        }\n        // The bottom point of the upper hull stack\n        bottom \u003d top;\n        i \u003d maxMin;\n        while (--i \u003e\u003d minMax) {\n            // The upper line joins points [maxmax] with points [minmax]\n            if (isLeft(vertices[maxMax], vertices[minMax], vertices[i]) \u003e\u003d 0 \u0026\u0026 i \u003e minMax) {\n                // Ignore points [i] below or on the upper line\n                continue;\n            }\n            // At least 2 points on the upper stack\n            while (top \u003e bottom) {\n                // Test if points [i] is left of the line at the stack top\n                if (isLeft(polygon[top - 1], polygon[top], vertices[i]) \u003e 0) {\n                    // points [i] is a new hull vertex\n                    break;\n                } else {\n                    // Pop top point off stack\n                    top--;\n                }\n            }\n            // Push points [i] onto stack\n            polygon[++top] \u003d vertices[i];\n        }\n        if (minMax !\u003d minMin) {\n            // Push joining endpoint onto stack\n            polygon[++top] \u003d vertices[minMin];\n        }\n        float[][] surroundingPolygon \u003d new float[top + 1][];\n        System.arraycopy(polygon, 0, surroundingPolygon, 0, surroundingPolygon.length);\n        return surroundingPolygon;\n    }\n\n    private float isLeft(float[] vertex0, float[] vertex1, float[] vertex2) {\n        return (vertex1[0] - vertex0[0]) * (vertex2[1] - vertex0[1]) - (vertex2[0] - vertex0[0]) * (vertex1[1] - vertex0[1]);\n    }\n\n    /**\n     * Returns the area on the floor of the given staircase.\n     */\n    public Area getAreaOnFloor(HomePieceOfFurniture staircase) {\n        if (staircase.getStaircaseCutOutShape() \u003d\u003d null) {\n            throw new IllegalArgumentException(\"No cut out shape associated to piece\");\n        }\n        Shape shape \u003d parseShape(staircase.getStaircaseCutOutShape());\n        Area staircaseArea \u003d new Area(shape);\n        if (staircase.isModelMirrored()) {\n            staircaseArea \u003d getMirroredArea(staircaseArea);\n        }\n        AffineTransform staircaseTransform \u003d AffineTransform.getTranslateInstance(staircase.getX() - staircase.getWidth() / 2, staircase.getY() - staircase.getDepth() / 2);\n        staircaseTransform.concatenate(AffineTransform.getRotateInstance(staircase.getAngle(), staircase.getWidth() / 2, staircase.getDepth() / 2));\n        staircaseTransform.concatenate(AffineTransform.getScaleInstance(staircase.getWidth(), staircase.getDepth()));\n        staircaseArea.transform(staircaseTransform);\n        return staircaseArea;\n    }\n\n    /**\n     * Returns the mirror area of the given \u003ccode\u003earea\u003c/code\u003e.\n     */\n    private Area getMirroredArea(Area area) {\n        // As applying a -1 scale transform reverses the holes / non holes interpretation of the points,\n        // we have to create a mirrored shape by parsing points\n        GeneralPath mirrorPath \u003d new GeneralPath();\n        float[] point \u003d new float[6];\n        for (PathIterator it \u003d area.getPathIterator(null); !it.isDone(); it.next()) {\n            switch(it.currentSegment(point)) {\n                case PathIterator.SEG_MOVETO:\n                    mirrorPath.moveTo(1 - point[0], point[1]);\n                    break;\n                case PathIterator.SEG_LINETO:\n                    mirrorPath.lineTo(1 - point[0], point[1]);\n                    break;\n                case PathIterator.SEG_QUADTO:\n                    mirrorPath.quadTo(1 - point[0], point[1], 1 - point[2], point[3]);\n                    break;\n                case PathIterator.SEG_CUBICTO:\n                    mirrorPath.curveTo(1 - point[0], point[1], 1 - point[2], point[3], 1 - point[4], point[5]);\n                    break;\n                case PathIterator.SEG_CLOSE:\n                    mirrorPath.closePath();\n                    break;\n            }\n        }\n        return new Area(mirrorPath);\n    }\n\n    /**\n     * Returns the AWT shape matching the given \u003ca href\u003d\"http://www.w3.org/TR/SVG/paths.html\"\u003eSVG path shape\u003c/a\u003e.\n     */\n    private Shape parseShape(String svgPathShape) {\n        Shape shape \u003d parsedShapes.get(svgPathShape);\n        if (shape \u003d\u003d null) {\n            try {\n                shape \u003d SVGPathSupport.parsePathShape(svgPathShape);\n            } catch (LinkageError ex) {\n                // Fallback to default square shape if batik classes aren\u0027t in classpath\n                shape \u003d new Rectangle2D.Float(0, 0, 1, 1);\n            }\n            parsedShapes.put(svgPathShape, shape);\n        }\n        return shape;\n    }\n\n    /**\n     * Separated static class to be able to exclude Batik library from classpath.\n     */\n    private static class SVGPathSupport {\n\n        public static Shape parsePathShape(String svgPathShape) {\n            try {\n                AWTPathProducer pathProducer \u003d new AWTPathProducer();\n                PathParser pathParser \u003d new PathParser();\n                pathParser.setPathHandler(pathProducer);\n                pathParser.parse(svgPathShape);\n                return pathProducer.getShape();\n            } catch (ParseException ex) {\n                // Fallback to default square shape if shape is incorrect\n                return new Rectangle2D.Float(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * An observer that receives model loading notifications.\n     */\n    public static interface ModelObserver {\n\n        public void modelUpdated(BranchGroup modelRoot);\n\n        public void modelError(Exception ex);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.j3d",
    "classname": "ModelManager",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager_6Test.java",
    "test_prompt": "// ModelManager_6Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModelManager}.\n* It contains ten unit test cases for the {@link ModelManager#getNormalizedTransform(Node, float[][], float)} method.\n*/\nclass ModelManager_6Test {",
    "method_signature": "getNormalizedTransform(Node, float[][], float)",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// ModelManager.java\n/*\n * ModelManager.java 4 juil. 07\n *\n * Sweet Home 3D, Copyright (c) 2007 Emmanuel PUYBARET / eTeks \u003cinfo@eteks.com\u003e\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\n\n/**\n * Singleton managing 3D models cache.\n * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.\n * Additional classes implementing Java 3D \u003ccode\u003eLoader\u003c/code\u003e interface may be\n * specified in the \u003ccode\u003ecom.eteks.sweethome3d.j3d.additionalLoaderClasses\u003c/code\u003e\n * (separated by a space or a colon :) to enable the support of other formats.\u003cbr\u003e\n * Note: this class is compatible with Java 3D 1.3.\n * @author Emmanuel Puybaret\n */\npublic class ModelManager {\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for window pane shapes.\n     */\n    public static final String WINDOW_PANE_SHAPE_PREFIX \u003d \"sweethome3d_window_pane\";\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for mirror shapes.\n     */\n    public static final String MIRROR_SHAPE_PREFIX \u003d \"sweethome3d_window_mirror\";\n\n    /**\n     * \u003ccode\u003eShape3D\u003c/code\u003e user data prefix for lights.\n     */\n    public static final String LIGHT_SHAPE_PREFIX \u003d \"sweethome3d_light\";\n\n    private static final TransparencyAttributes WINDOW_PANE_TRANSPARENCY_ATTRIBUTES \u003d new TransparencyAttributes(TransparencyAttributes.NICEST, 0.5f);\n\n    private static final Material DEFAULT_MATERIAL \u003d new Material();\n\n    private static final float MINIMUM_SIZE \u003d 0.001f;\n\n    private static final String ADDITIONAL_LOADER_CLASSES \u003d \"com.eteks.sweethome3d.j3d.additionalLoaderClasses\";\n\n    private static ModelManager instance;\n\n    // Map storing loaded model nodes\n    private Map\u003cContent, BranchGroup\u003e loadedModelNodes;\n\n    // Map storing model nodes being loaded\n    private Map\u003cContent, List\u003cModelObserver\u003e\u003e loadingModelObservers;\n\n    // Executor used to load models\n    private ExecutorService modelsLoader;\n\n    // List of additional loader classes\n    private Class\u003cLoader\u003e[] additionalLoaderClasses;\n\n    // SVG path Shapes\n    private final Map\u003cString, Shape\u003e parsedShapes;\n\n    private ModelManager() {\n        // This class is a singleton\n        this.loadedModelNodes \u003d new WeakHashMap\u003cContent, BranchGroup\u003e();\n        this.loadingModelObservers \u003d new HashMap\u003cContent, List\u003cModelObserver\u003e\u003e();\n        this.parsedShapes \u003d new WeakHashMap\u003cString, Shape\u003e();\n        // Load other optional Loader classes\n        List\u003cClass\u003cLoader\u003e\u003e loaderClasses \u003d new ArrayList\u003cClass\u003cLoader\u003e\u003e();\n        String loaderClassNames \u003d System.getProperty(ADDITIONAL_LOADER_CLASSES);\n        if (loaderClassNames !\u003d null) {\n            for (String loaderClassName : loaderClassNames.split(\"\\\\s|:\")) {\n                try {\n                    loaderClasses.add(getLoaderClass(loaderClassName));\n                } catch (IllegalArgumentException ex) {\n                    System.err.println(\"Invalid loader class \" + loaderClassName + \":\\n\" + ex.getMessage());\n                }\n            }\n        }\n        this.additionalLoaderClasses \u003d loaderClasses.toArray(new Class[loaderClasses.size()]);\n    }\n\n    /**\n     * Returns the class of name \u003ccode\u003eloaderClassName\u003c/code\u003e.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Class\u003cLoader\u003e getLoaderClass(String loaderClassName) {\n        try {\n            Class\u003cLoader\u003e loaderClass \u003d (Class\u003cLoader\u003e) getClass().getClassLoader().loadClass(loaderClassName);\n            if (!Loader.class.isAssignableFrom(loaderClass)) {\n                throw new IllegalArgumentException(loaderClassName + \" not a subclass of \" + Loader.class.getName());\n            } else if (Modifier.isAbstract(loaderClass.getModifiers()) || !Modifier.isPublic(loaderClass.getModifiers())) {\n                throw new IllegalArgumentException(loaderClassName + \" not a public static class\");\n            }\n            Constructor\u003cLoader\u003e constructor \u003d loaderClass.getConstructor(new Class[0]);\n            // Try to instantiate it now to see if it won\u0027t cause any problem\n            constructor.newInstance(new Object[0]);\n            return loaderClass;\n        } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (NoSuchMethodException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (InvocationTargetException ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        } catch (IllegalAccessException ex) {\n            throw new IllegalArgumentException(loaderClassName + \" constructor not accessible\");\n        } catch (InstantiationException ex) {\n            throw new IllegalArgumentException(loaderClassName + \" not a public static class\");\n        }\n    }\n\n    /**\n     * Returns an instance of this singleton.\n     */\n    public static ModelManager getInstance() {\n        if (instance \u003d\u003d null) {\n            instance \u003d new ModelManager();\n        }\n        return instance;\n    }\n\n    /**\n     * Shutdowns the multithreaded service that load textures.\n     */\n    public void clear() {\n        if (this.modelsLoader !\u003d null) {\n            this.modelsLoader.shutdownNow();\n            this.modelsLoader \u003d null;\n        }\n        synchronized (this.loadedModelNodes) {\n            this.loadedModelNodes.clear();\n        }\n    }\n\n    /**\n     * Returns the minimum size of a model.\n     */\n    float getMinimumSize() {\n        return MINIMUM_SIZE;\n    }\n\n    /**\n     * Returns the size of 3D shapes of \u003ccode\u003enode\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node) {\n        return getSize(node, new Transform3D());\n    }\n\n    /**\n     * Returns the size of 3D shapes of \u003ccode\u003enode\u003c/code\u003e after an additional \u003ccode\u003etransformation\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public Vector3f getSize(Node node, Transform3D transformation) {\n        BoundingBox bounds \u003d getBounds(node, transformation);\n        Point3d lower \u003d new Point3d();\n        bounds.getLower(lower);\n        Point3d upper \u003d new Point3d();\n        bounds.getUpper(upper);\n        return new Vector3f(Math.max(getMinimumSize(), (float) (upper.x - lower.x)), Math.max(getMinimumSize(), (float) (upper.y - lower.y)), Math.max(getMinimumSize(), (float) (upper.z - lower.z)));\n    }\n\n    /**\n     * Returns the bounds of the 3D shapes of \u003ccode\u003enode\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes,\n     * contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e that returns a bounding\n     * sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node) {\n        return getBounds(node, new Transform3D());\n    }\n\n    /**\n     * Returns the bounds of the 3D shapes of \u003ccode\u003enode\u003c/code\u003e with an additional \u003ccode\u003etransformation\u003c/code\u003e.\n     * This method computes the exact box that contains all the shapes, contrary to \u003ccode\u003enode.getBounds()\u003c/code\u003e\n     * that returns a bounding sphere for a scene.\n     */\n    public BoundingBox getBounds(Node node, Transform3D transformation) {\n        BoundingBox objectBounds \u003d new BoundingBox(new Point3d(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY), new Point3d(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY));\n        computeBounds(node, objectBounds, transformation, !isOrthogonalRotation(transformation));\n        Point3d lower \u003d new Point3d();\n        objectBounds.getLower(lower);\n        if (lower.x \u003d\u003d Double.POSITIVE_INFINITY) {\n            throw new IllegalArgumentException(\"Node has no bounds\");\n        }\n        return objectBounds;\n    }\n\n    /**\n     * Returns \u003ccode\u003etrue\u003c/code\u003e if the rotation matrix matches only rotations of\n     * a multiple of 90� degrees around x, y or z axis.\n     */\n    private boolean isOrthogonalRotation(Transform3D transformation) {\n        Matrix3f matrix \u003d new Matrix3f();\n        transformation.get(matrix);\n        for (int i \u003d 0; i \u003c 3; i++) {\n            for (int j \u003d 0; j \u003c 3; j++) {\n                // Return false if the matrix contains a value different from 0 1 or -1\n                if (Math.abs(matrix.getElement(i, j)) \u003e 1E-6 \u0026\u0026 Math.abs(matrix.getElement(i, j) - 1) \u003e 1E-6 \u0026\u0026 Math.abs(matrix.getElement(i, j) + 1) \u003e 1E-6) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private void computeBounds(Node node, BoundingBox bounds, Transform3D parentTransformations, boolean transformShapeGeometry) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute the bounds of all the node children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeBounds((Node) enumeration.nextElement(), bounds, parentTransformations, transformShapeGeometry);\n            }\n        } else if (node instanceof Link) {\n            computeBounds(((Link) node).getSharedGroup(), bounds, parentTransformations, transformShapeGeometry);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Bounds shapeBounds;\n            if (transformShapeGeometry) {\n                shapeBounds \u003d computeTransformedGeometryBounds(shape, parentTransformations);\n            } else {\n                shapeBounds \u003d shape.getBounds();\n                shapeBounds.transform(parentTransformations);\n            }\n            bounds.combine(shapeBounds);\n        }\n    }\n\n    private Bounds computeTransformedGeometryBounds(Shape3D shape, Transform3D transformation) {\n        Point3d lower \u003d new Point3d(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n        Point3d upper \u003d new Point3d(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n        for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n            Geometry geometry \u003d shape.getGeometry(i);\n            if (geometry instanceof GeometryArray) {\n                GeometryArray geometryArray \u003d (GeometryArray) geometry;\n                int vertexCount \u003d geometryArray.getVertexCount();\n                Point3f vertex \u003d new Point3f();\n                if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                    if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                        float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                        int vertexSize \u003d vertexData.length / vertexCount;\n                        for (int index \u003d 0, j \u003d vertexSize - 3; index \u003c vertexCount; j +\u003d vertexSize, index++) {\n                            vertex.x \u003d vertexData[j];\n                            vertex.y \u003d vertexData[j + 1];\n                            vertex.z \u003d vertexData[j + 2];\n                            updateBounds(vertex, transformation, lower, upper);\n                        }\n                    } else {\n                        float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                        for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j +\u003d 3, index++) {\n                            vertex.x \u003d vertexCoordinates[j];\n                            vertex.y \u003d vertexCoordinates[j + 1];\n                            vertex.z \u003d vertexCoordinates[j + 2];\n                            updateBounds(vertex, transformation, lower, upper);\n                        }\n                    }\n                } else {\n                    for (int index \u003d 0; index \u003c vertexCount; index++) {\n                        geometryArray.getCoordinate(index, vertex);\n                        updateBounds(vertex, transformation, lower, upper);\n                    }\n                }\n            } else {\n                Bounds shapeBounds \u003d shape.getBounds();\n                shapeBounds.transform(transformation);\n                return shapeBounds;\n            }\n        }\n        Bounds shapeBounds \u003d new BoundingBox(lower, upper);\n        return shapeBounds;\n    }\n\n    private void updateBounds(Point3f vertex, Transform3D transformation, Point3d lower, Point3d upper) {\n        transformation.transform(vertex);\n        if (lower.x \u003e vertex.x) {\n            lower.x \u003d vertex.x;\n        }\n        if (lower.y \u003e vertex.y) {\n            lower.y \u003d vertex.y;\n        }\n        if (lower.z \u003e vertex.z) {\n            lower.z \u003d vertex.z;\n        }\n        if (upper.x \u003c vertex.x) {\n            upper.x \u003d vertex.x;\n        }\n        if (upper.y \u003c vertex.y) {\n            upper.y \u003d vertex.y;\n        }\n        if (upper.z \u003c vertex.z) {\n            upper.z \u003d vertex.z;\n        }\n    }\n\n    /**\n     * Returns a transform group that will transform the model \u003ccode\u003enode\u003c/code\u003e\n     * to let it fill a box of the given \u003ccode\u003ewidth\u003c/code\u003e centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or \u003ccode\u003enull\u003c/code\u003e if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public TransformGroup getNormalizedTransformGroup(Node node, float[][] modelRotation, float width) {\n        return new TransformGroup(getNormalizedTransform(node, modelRotation, width));\n    }\n\n    /**\n     * Returns a transform that will transform the model \u003ccode\u003enode\u003c/code\u003e\n     * to let it fill a box of the given \u003ccode\u003ewidth\u003c/code\u003e centered on the origin.\n     * @param node     the root of a model with any size and location\n     * @param modelRotation the rotation applied to the model before normalization\n     *                 or \u003ccode\u003enull\u003c/code\u003e if no transformation should be applied to node.\n     * @param width    the width of the box\n     */\n    public Transform3D getNormalizedTransform(Node node, float[][] modelRotation, float width) {\n        // Get model bounding box size\n        BoundingBox modelBounds \u003d getBounds(node);\n        Point3d lower \u003d new Point3d();\n        modelBounds.getLower(lower);\n        Point3d upper \u003d new Point3d();\n        modelBounds.getUpper(upper);\n        // Translate model to its center\n        Transform3D translation \u003d new Transform3D();\n        translation.setTranslation(new Vector3d(-lower.x - (upper.x - lower.x) / 2, -lower.y - (upper.y - lower.y) / 2, -lower.z - (upper.z - lower.z) / 2));\n        Transform3D modelTransform;\n        if (modelRotation !\u003d null) {\n            // Get model bounding box size with model rotation\n            Matrix3f modelRotationMatrix \u003d new Matrix3f(modelRotation[0][0], modelRotation[0][1], modelRotation[0][2], modelRotation[1][0], modelRotation[1][1], modelRotation[1][2], modelRotation[2][0], modelRotation[2][1], modelRotation[2][2]);\n            modelTransform \u003d new Transform3D();\n            modelTransform.setRotation(modelRotationMatrix);\n            modelTransform.mul(translation);\n            BoundingBox rotatedModelBounds \u003d getBounds(node, modelTransform);\n            rotatedModelBounds.getLower(lower);\n            rotatedModelBounds.getUpper(upper);\n        } else {\n            modelTransform \u003d translation;\n        }\n        // Scale model to make it fill a 1 unit wide box\n        Transform3D scaleOneTransform \u003d new Transform3D();\n        scaleOneTransform.setScale(new Vector3d(width / Math.max(getMinimumSize(), upper.x - lower.x), width / Math.max(getMinimumSize(), upper.y - lower.y), width / Math.max(getMinimumSize(), upper.z - lower.z)));\n        scaleOneTransform.mul(modelTransform);\n        return scaleOneTransform;\n    }\n\n    /**\n     * Reads asynchronously a 3D node from \u003ccode\u003econtent\u003c/code\u003e with supported loaders\n     * and notifies the loaded model to the given \u003ccode\u003emodelObserver\u003c/code\u003e once available.\n     * @param content an object containing a model\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens\n     * @throws IllegalStateException if the current thread isn\u0027t the Event Dispatch Thread.\n     */\n    public void loadModel(Content content, ModelObserver modelObserver) {\n        loadModel(content, false, modelObserver);\n    }\n\n    /**\n     * Reads a 3D node from \u003ccode\u003econtent\u003c/code\u003e with supported loaders\n     * and notifies the loaded model to the given \u003ccode\u003emodelObserver\u003c/code\u003e once available.\n     * @param content an object containing a model\n     * @param synchronous if \u003ccode\u003etrue\u003c/code\u003e, this method will return only once model content is loaded\n     * @param modelObserver the observer that will be notified once the model is available\n     *    or if an error happens. When the model is loaded synchronously, the observer will be notified\n     *    in the same thread as the caller, otherwise the observer will be notified in the Event\n     *    Dispatch Thread and this method must be called in Event Dispatch Thread too.\n     * @throws IllegalStateException if synchronous is \u003ccode\u003efalse\u003c/code\u003e and the current thread isn\u0027t\n     *    the Event Dispatch Thread.\n     */\n    public void loadModel(final Content content, boolean synchronous, ModelObserver modelObserver) {\n        BranchGroup modelRoot;\n        synchronized (this.loadedModelNodes) {\n            modelRoot \u003d this.loadedModelNodes.get(content);\n        }\n        if (modelRoot !\u003d null) {\n            // Notify cached model to observer with a clone of the model\n            modelObserver.modelUpdated((BranchGroup) cloneNode(modelRoot));\n        } else if (synchronous) {\n            try {\n                modelRoot \u003d loadModel(content);\n                synchronized (this.loadedModelNodes) {\n                    // Store in cache model node for future copies\n                    this.loadedModelNodes.put(content, (BranchGroup) modelRoot);\n                }\n                modelObserver.modelUpdated((BranchGroup) cloneNode(modelRoot));\n            } catch (IOException ex) {\n                modelObserver.modelError(ex);\n            }\n        } else if (!EventQueue.isDispatchThread()) {\n            throw new IllegalStateException(\"Asynchronous call out of Event Dispatch Thread\");\n        } else {\n            if (this.modelsLoader \u003d\u003d null) {\n                this.modelsLoader \u003d Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n            }\n            List\u003cModelObserver\u003e observers \u003d this.loadingModelObservers.get(content);\n            if (observers !\u003d null) {\n                // If observers list exists, content model is already being loaded\n                // register observer for future notification\n                observers.add(modelObserver);\n            } else {\n                // Create a list of observers that will be notified once content model is loaded\n                observers \u003d new ArrayList\u003cModelObserver\u003e();\n                observers.add(modelObserver);\n                this.loadingModelObservers.put(content, observers);\n                // Load the model in an other thread\n                this.modelsLoader.execute(new Runnable() {\n\n                    public void run() {\n                        try {\n                            final BranchGroup loadedModel \u003d loadModel(content);\n                            synchronized (loadedModelNodes) {\n                                // Update loaded models cache and notify registered observers\n                                loadedModelNodes.put(content, loadedModel);\n                            }\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    for (final ModelObserver observer : loadingModelObservers.remove(content)) {\n                                        observer.modelUpdated((BranchGroup) cloneNode(loadedModel));\n                                    }\n                                }\n                            });\n                        } catch (final IOException ex) {\n                            EventQueue.invokeLater(new Runnable() {\n\n                                public void run() {\n                                    for (final ModelObserver observer : loadingModelObservers.remove(content)) {\n                                        observer.modelError(ex);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Returns a clone of the given \u003ccode\u003enode\u003c/code\u003e.\n     * All the children and the attributes of the given node are duplicated except the geometries\n     * and the texture images of shapes.\n     */\n    public Node cloneNode(Node node) {\n        // Clone node in a synchronized block because cloneNodeComponent is not thread safe\n        synchronized (this.loadedModelNodes) {\n            return cloneNode(node, new HashMap\u003cSharedGroup, SharedGroup\u003e());\n        }\n    }\n\n    private Node cloneNode(Node node, Map\u003cSharedGroup, SharedGroup\u003e clonedSharedGroups) {\n        if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Shape3D clonedShape \u003d (Shape3D) shape.cloneNode(false);\n            Appearance appearance \u003d shape.getAppearance();\n            if (appearance !\u003d null) {\n                // Force only duplication of node\u0027s appearance except its texture\n                Appearance clonedAppearance \u003d (Appearance) appearance.cloneNodeComponent(true);\n                Texture texture \u003d appearance.getTexture();\n                if (texture !\u003d null) {\n                    clonedAppearance.setTexture(texture);\n                }\n                clonedShape.setAppearance(clonedAppearance);\n            }\n            return clonedShape;\n        } else if (node instanceof Link) {\n            Link clonedLink \u003d (Link) node.cloneNode(true);\n            // Force duplication of shared groups too\n            SharedGroup sharedGroup \u003d clonedLink.getSharedGroup();\n            if (sharedGroup !\u003d null) {\n                SharedGroup clonedSharedGroup \u003d clonedSharedGroups.get(sharedGroup);\n                if (clonedSharedGroup \u003d\u003d null) {\n                    clonedSharedGroup \u003d (SharedGroup) cloneNode(sharedGroup, clonedSharedGroups);\n                    clonedSharedGroups.put(sharedGroup, clonedSharedGroup);\n                }\n                clonedLink.setSharedGroup(clonedSharedGroup);\n            }\n            return clonedLink;\n        } else {\n            Node clonedNode \u003d node.cloneNode(true);\n            if (node instanceof Group) {\n                Group group \u003d (Group) node;\n                Group clonedGroup \u003d (Group) clonedNode;\n                for (int i \u003d 0, n \u003d group.numChildren(); i \u003c n; i++) {\n                    Node clonedChild \u003d cloneNode(group.getChild(i), clonedSharedGroups);\n                    clonedGroup.addChild(clonedChild);\n                }\n            }\n            return clonedNode;\n        }\n    }\n\n    /**\n     * Returns the node loaded synchronously from \u003ccode\u003econtent\u003c/code\u003e with supported loaders.\n     * This method is threadsafe and may be called from any thread.\n     * @param content an object containing a model\n     */\n    public BranchGroup loadModel(Content content) throws IOException {\n        // Ensure we use a URLContent object\n        URLContent urlContent;\n        if (content instanceof URLContent) {\n            urlContent \u003d (URLContent) content;\n        } else {\n            urlContent \u003d TemporaryURLContent.copyToTemporaryURLContent(content);\n        }\n        Loader3DS loader3DSWithNoStackTraces \u003d new Loader3DS() {\n\n            @Override\n            public Scene load(URL url) throws FileNotFoundException, IncorrectFormatException {\n                try {\n                    // Check magic number 0x4D4D\n                    InputStream in \u003d url.openStream();\n                    int b1 \u003d in.read();\n                    int b2 \u003d in.read();\n                    if (b1 !\u003d 0x4D || b2 !\u003d 0x4D) {\n                        throw new IncorrectFormatException(\"Bad magic number\");\n                    }\n                    in.close();\n                } catch (FileNotFoundException ex) {\n                    throw ex;\n                } catch (IOException ex) {\n                    throw new ParsingErrorException(\"Can\u0027t read url \" + url);\n                }\n                PrintStream defaultSystemErrorStream \u003d System.err;\n                try {\n                    // Ignore stack traces on System.err during 3DS file loading\n                    System.setErr(new PrintStream(new OutputStream() {\n\n                        @Override\n                        public void write(int b) throws IOException {\n                            // Do nothing\n                        }\n                    }));\n                    // Default load\n                    return super.load(url);\n                } finally {\n                    // Reset default err print stream\n                    System.setErr(defaultSystemErrorStream);\n                }\n            }\n        };\n        Loader[] defaultLoaders \u003d new Loader[] { new OBJLoader(), new DAELoader(), loader3DSWithNoStackTraces, new Lw3dLoader() };\n        Loader[] loaders \u003d new Loader[defaultLoaders.length + this.additionalLoaderClasses.length];\n        System.arraycopy(defaultLoaders, 0, loaders, 0, defaultLoaders.length);\n        for (int i \u003d 0; i \u003c this.additionalLoaderClasses.length; i++) {\n            try {\n                loaders[defaultLoaders.length + i] \u003d this.additionalLoaderClasses[i].newInstance();\n            } catch (InstantiationException ex) {\n                // Can\u0027t happen: getLoaderClass checked this class is instantiable\n                throw new InternalError(ex.getMessage());\n            } catch (IllegalAccessException ex) {\n                // Can\u0027t happen: getLoaderClass checked this class is instantiable\n                throw new InternalError(ex.getMessage());\n            }\n        }\n        Exception lastException \u003d null;\n        for (Loader loader : loaders) {\n            try {\n                // Ask loader to ignore lights, fogs...\n                loader.setFlags(loader.getFlags() \u0026 ~(Loader.LOAD_LIGHT_NODES | Loader.LOAD_FOG_NODES | Loader.LOAD_BACKGROUND_NODES | Loader.LOAD_VIEW_GROUPS));\n                // Return the first scene that can be loaded from model URL content\n                Scene scene \u003d loader.load(urlContent.getURL());\n                BranchGroup modelNode \u003d scene.getSceneGroup();\n                // If model doesn\u0027t have any child, consider the file as wrong\n                if (modelNode.numChildren() \u003d\u003d 0) {\n                    throw new IllegalArgumentException(\"Empty model\");\n                }\n                // Update transparency of scene window panes shapes\n                updateShapeNamesAndWindowPanesTransparency(scene);\n                // Turn off lights because some loaders don\u0027t take into account the ~LOAD_LIGHT_NODES flag\n                turnOffLightsShareAndModulateTextures(modelNode);\n                return modelNode;\n            } catch (IllegalArgumentException ex) {\n                lastException \u003d ex;\n            } catch (IncorrectFormatException ex) {\n                lastException \u003d ex;\n            } catch (ParsingErrorException ex) {\n                lastException \u003d ex;\n            } catch (IOException ex) {\n                lastException \u003d ex;\n            } catch (RuntimeException ex) {\n                // Take into account exceptions of Java 3D 1.5 ImageException class\n                // in such a way program can run in Java 3D 1.3.1\n                if (ex.getClass().getName().equals(\"com.sun.j3d.utils.image.ImageException\")) {\n                    lastException \u003d ex;\n                } else {\n                    throw ex;\n                }\n            }\n        }\n        if (lastException instanceof IOException) {\n            throw (IOException) lastException;\n        } else if (lastException instanceof IncorrectFormatException) {\n            IOException incorrectFormatException \u003d new IOException(\"Incorrect format\");\n            incorrectFormatException.initCause(lastException);\n            throw incorrectFormatException;\n        } else if (lastException instanceof ParsingErrorException) {\n            IOException incorrectFormatException \u003d new IOException(\"Parsing error\");\n            incorrectFormatException.initCause(lastException);\n            throw incorrectFormatException;\n        } else {\n            IOException otherException \u003d new IOException();\n            otherException.initCause(lastException);\n            throw otherException;\n        }\n    }\n\n    /**\n     * Updates the name of scene shapes and transparency window panes shapes.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void updateShapeNamesAndWindowPanesTransparency(Scene scene) {\n        Map\u003cString, Object\u003e namedObjects \u003d scene.getNamedObjects();\n        for (Map.Entry\u003cString, Object\u003e entry : namedObjects.entrySet()) {\n            if (entry.getValue() instanceof Shape3D) {\n                String shapeName \u003d entry.getKey();\n                // Assign shape name to its user data\n                Shape3D shape \u003d (Shape3D) entry.getValue();\n                shape.setUserData(shapeName);\n                if (shapeName.startsWith(WINDOW_PANE_SHAPE_PREFIX)) {\n                    Appearance appearance \u003d shape.getAppearance();\n                    if (appearance \u003d\u003d null) {\n                        appearance \u003d new Appearance();\n                        shape.setAppearance(appearance);\n                    }\n                    if (appearance.getTransparencyAttributes() \u003d\u003d null) {\n                        appearance.setTransparencyAttributes(WINDOW_PANE_TRANSPARENCY_ATTRIBUTES);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Turns off light nodes of \u003ccode\u003enode\u003c/code\u003e children,\n     * and modulates textures if needed.\n     */\n    private void turnOffLightsShareAndModulateTextures(Node node) {\n        if (node instanceof Group) {\n            // Enumerate children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                turnOffLightsShareAndModulateTextures((Node) enumeration.nextElement());\n            }\n        } else if (node instanceof Link) {\n            turnOffLightsShareAndModulateTextures(((Link) node).getSharedGroup());\n        } else if (node instanceof Light) {\n            ((Light) node).setEnable(false);\n        } else if (node instanceof Shape3D) {\n            Appearance appearance \u003d ((Shape3D) node).getAppearance();\n            if (appearance !\u003d null) {\n                Texture texture \u003d appearance.getTexture();\n                if (texture !\u003d null) {\n                    // Share textures data as much as possible\n                    Texture sharedTexture \u003d TextureManager.getInstance().shareTexture(texture);\n                    if (sharedTexture !\u003d texture) {\n                        appearance.setTexture(sharedTexture);\n                    }\n                    TextureAttributes textureAttributes \u003d appearance.getTextureAttributes();\n                    if (textureAttributes \u003d\u003d null) {\n                        // Mix texture and shape color\n                        textureAttributes \u003d new TextureAttributes();\n                        textureAttributes.setTextureMode(TextureAttributes.MODULATE);\n                        appearance.setTextureAttributes(textureAttributes);\n                        // Check shape color is white\n                        Material material \u003d appearance.getMaterial();\n                        if (material \u003d\u003d null) {\n                            appearance.setMaterial((Material) DEFAULT_MATERIAL.cloneNodeComponent(true));\n                        } else {\n                            Color3f color \u003d new Color3f();\n                            DEFAULT_MATERIAL.getDiffuseColor(color);\n                            material.setDiffuseColor(color);\n                            DEFAULT_MATERIAL.getAmbientColor(color);\n                            material.setAmbientColor(color);\n                        }\n                    }\n                    // If texture image supports transparency\n                    if (TextureManager.getInstance().isTextureTransparent(sharedTexture)) {\n                        if (appearance.getTransparencyAttributes() \u003d\u003d null) {\n                            // Add transparency attributes to ensure transparency works\n                            appearance.setTransparencyAttributes(new TransparencyAttributes(TransparencyAttributes.NICEST, 0));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the 2D area of the 3D shapes children of the given \u003ccode\u003enode\u003c/code\u003e\n     * projected on the floor (plan y \u003d 0).\n     */\n    public Area getAreaOnFloor(Node node) {\n        Area modelAreaOnFloor;\n        int vertexCount \u003d getVertexCount(node);\n        if (vertexCount \u003c 10000) {\n            modelAreaOnFloor \u003d new Area();\n            computeAreaOnFloor(node, modelAreaOnFloor, new Transform3D());\n        } else {\n            List\u003cfloat[]\u003e vertices \u003d new ArrayList\u003cfloat[]\u003e(vertexCount);\n            computeVerticesOnFloor(node, vertices, new Transform3D());\n            float[][] surroundingPolygon \u003d getSurroundingPolygon(vertices.toArray(new float[vertices.size()][]));\n            GeneralPath generalPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, surroundingPolygon.length);\n            generalPath.moveTo(surroundingPolygon[0][0], surroundingPolygon[0][1]);\n            for (int i \u003d 0; i \u003c surroundingPolygon.length; i++) {\n                generalPath.lineTo(surroundingPolygon[i][0], surroundingPolygon[i][1]);\n            }\n            generalPath.closePath();\n            modelAreaOnFloor \u003d new Area(generalPath);\n        }\n        return modelAreaOnFloor;\n    }\n\n    /**\n     * Returns the total count of vertices in all geometries.\n     */\n    private int getVertexCount(Node node) {\n        int count \u003d 0;\n        if (node instanceof Group) {\n            // Enumerate all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                count +\u003d getVertexCount((Node) enumeration.nextElement());\n            }\n        } else if (node instanceof Link) {\n            count \u003d getVertexCount(((Link) node).getSharedGroup());\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            if (renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) {\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    Geometry geometry \u003d shape.getGeometry(i);\n                    if (geometry instanceof GeometryArray) {\n                        count +\u003d ((GeometryArray) geometry).getVertexCount();\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Computes the vertices coordinates projected on floor of the 3D shapes children of \u003ccode\u003enode\u003c/code\u003e.\n     */\n    private void computeVerticesOnFloor(Node node, List\u003cfloat[]\u003e vertices, Transform3D parentTransformations) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeVerticesOnFloor((Node) enumeration.nextElement(), vertices, parentTransformations);\n            }\n        } else if (node instanceof Link) {\n            computeVerticesOnFloor(((Link) node).getSharedGroup(), vertices, parentTransformations);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            TransparencyAttributes transparencyAttributes \u003d appearance !\u003d null ? appearance.getTransparencyAttributes() : null;\n            if ((renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) \u0026\u0026 (transparencyAttributes \u003d\u003d null || transparencyAttributes.getTransparency() \u003c 1)) {\n                // Compute shape geometries area\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    Geometry geometry \u003d shape.getGeometry(i);\n                    if (geometry instanceof GeometryArray) {\n                        GeometryArray geometryArray \u003d (GeometryArray) geometry;\n                        int vertexCount \u003d geometryArray.getVertexCount();\n                        Point3f vertex \u003d new Point3f();\n                        if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                            if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                                float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                                int vertexSize \u003d vertexData.length / vertexCount;\n                                // Store vertices coordinates\n                                for (int index \u003d 0, j \u003d vertexSize - 3; index \u003c vertexCount; j +\u003d vertexSize, index++) {\n                                    vertex.x \u003d vertexData[j];\n                                    vertex.y \u003d vertexData[j + 1];\n                                    vertex.z \u003d vertexData[j + 2];\n                                    parentTransformations.transform(vertex);\n                                    vertices.add(new float[] { vertex.x, vertex.z });\n                                }\n                            } else {\n                                // Store vertices coordinates\n                                float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                                for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j +\u003d 3, index++) {\n                                    vertex.x \u003d vertexCoordinates[j];\n                                    vertex.y \u003d vertexCoordinates[j + 1];\n                                    vertex.z \u003d vertexCoordinates[j + 2];\n                                    parentTransformations.transform(vertex);\n                                    vertices.add(new float[] { vertex.x, vertex.z });\n                                }\n                            }\n                        } else {\n                            // Store vertices coordinates\n                            for (int index \u003d 0, j \u003d 0; index \u003c vertexCount; j++, index++) {\n                                geometryArray.getCoordinate(j, vertex);\n                                parentTransformations.transform(vertex);\n                                vertices.add(new float[] { vertex.x, vertex.z });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Computes the 2D area on floor of the 3D shapes children of \u003ccode\u003enode\u003c/code\u003e.\n     */\n    private void computeAreaOnFloor(Node node, Area nodeArea, Transform3D parentTransformations) {\n        if (node instanceof Group) {\n            if (node instanceof TransformGroup) {\n                parentTransformations \u003d new Transform3D(parentTransformations);\n                Transform3D transform \u003d new Transform3D();\n                ((TransformGroup) node).getTransform(transform);\n                parentTransformations.mul(transform);\n            }\n            // Compute all children\n            Enumeration\u003c?\u003e enumeration \u003d ((Group) node).getAllChildren();\n            while (enumeration.hasMoreElements()) {\n                computeAreaOnFloor((Node) enumeration.nextElement(), nodeArea, parentTransformations);\n            }\n        } else if (node instanceof Link) {\n            computeAreaOnFloor(((Link) node).getSharedGroup(), nodeArea, parentTransformations);\n        } else if (node instanceof Shape3D) {\n            Shape3D shape \u003d (Shape3D) node;\n            Appearance appearance \u003d shape.getAppearance();\n            RenderingAttributes renderingAttributes \u003d appearance !\u003d null ? appearance.getRenderingAttributes() : null;\n            TransparencyAttributes transparencyAttributes \u003d appearance !\u003d null ? appearance.getTransparencyAttributes() : null;\n            if ((renderingAttributes \u003d\u003d null || renderingAttributes.getVisible()) \u0026\u0026 (transparencyAttributes \u003d\u003d null || transparencyAttributes.getTransparency() \u003c 1)) {\n                // Compute shape geometries area\n                for (int i \u003d 0, n \u003d shape.numGeometries(); i \u003c n; i++) {\n                    computeGeometryAreaOnFloor(shape.getGeometry(i), parentTransformations, nodeArea);\n                }\n            }\n        }\n    }\n\n    /**\n     * Computes the area on floor of a 3D geometry.\n     */\n    private void computeGeometryAreaOnFloor(Geometry geometry, Transform3D parentTransformations, Area nodeArea) {\n        if (geometry instanceof GeometryArray) {\n            GeometryArray geometryArray \u003d (GeometryArray) geometry;\n            int vertexCount \u003d geometryArray.getVertexCount();\n            float[] vertices \u003d new float[vertexCount * 2];\n            Point3f vertex \u003d new Point3f();\n            if ((geometryArray.getVertexFormat() \u0026 GeometryArray.BY_REFERENCE) !\u003d 0) {\n                if ((geometryArray.getVertexFormat() \u0026 GeometryArray.INTERLEAVED) !\u003d 0) {\n                    float[] vertexData \u003d geometryArray.getInterleavedVertices();\n                    int vertexSize \u003d vertexData.length / vertexCount;\n                    // Store vertices coordinates\n                    for (int index \u003d 0, i \u003d vertexSize - 3; index \u003c vertices.length; i +\u003d vertexSize) {\n                        vertex.x \u003d vertexData[i];\n                        vertex.y \u003d vertexData[i + 1];\n                        vertex.z \u003d vertexData[i + 2];\n                        parentTransformations.transform(vertex);\n                        vertices[index++] \u003d vertex.x;\n                        vertices[index++] \u003d vertex.z;\n                    }\n                } else {\n                    // Store vertices coordinates\n                    float[] vertexCoordinates \u003d geometryArray.getCoordRefFloat();\n                    for (int index \u003d 0, i \u003d 0; index \u003c vertices.length; i +\u003d 3) {\n                        vertex.x \u003d vertexCoordinates[i];\n                        vertex.y \u003d vertexCoordinates[i + 1];\n                        vertex.z \u003d vertexCoordinates[i + 2];\n                        parentTransformations.transform(vertex);\n                        vertices[index++] \u003d vertex.x;\n                        vertices[index++] \u003d vertex.z;\n                    }\n                }\n            } else {\n                // Store vertices coordinates\n                for (int index \u003d 0, i \u003d 0; index \u003c vertices.length; i++) {\n                    geometryArray.getCoordinate(i, vertex);\n                    parentTransformations.transform(vertex);\n                    vertices[index++] \u003d vertex.x;\n                    vertices[index++] \u003d vertex.z;\n                }\n            }\n            // Create path from triangles or quadrilaterals of geometry\n            GeneralPath geometryPath \u003d null;\n            if (geometryArray instanceof IndexedGeometryArray) {\n                if (geometryArray instanceof IndexedTriangleArray) {\n                    IndexedTriangleArray triangleArray \u003d (IndexedTriangleArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, triangleIndex \u003d 0, n \u003d triangleArray.getIndexCount(); i \u003c n; i +\u003d 3) {\n                        addIndexedTriangleToPath(triangleArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof IndexedQuadArray) {\n                    IndexedQuadArray quadArray \u003d (IndexedQuadArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, quadrilateralIndex \u003d 0, n \u003d quadArray.getIndexCount(); i \u003c n; i +\u003d 4) {\n                        addIndexedQuadrilateralToPath(quadArray, i, i + 1, i + 2, i + 3, vertices, geometryPath, quadrilateralIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof IndexedGeometryStripArray) {\n                    IndexedGeometryStripArray geometryStripArray \u003d (IndexedGeometryStripArray) geometryArray;\n                    int[] stripIndexCounts \u003d new int[geometryStripArray.getNumStrips()];\n                    geometryStripArray.getStripIndexCounts(stripIndexCounts);\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    int initialIndex \u003d 0;\n                    if (geometryStripArray instanceof IndexedTriangleStripArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripIndexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripIndexCounts[strip] - 2, j \u003d 0; i \u003c n; i++, j++) {\n                                if (j % 2 \u003d\u003d 0) {\n                                    addIndexedTriangleToPath(geometryStripArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                                } else {\n                                    // Vertices of odd triangles are in reverse order\n                                    addIndexedTriangleToPath(geometryStripArray, i, i + 2, i + 1, vertices, geometryPath, triangleIndex++, nodeArea);\n                                }\n                            }\n                            initialIndex +\u003d stripIndexCounts[strip];\n                        }\n                    } else if (geometryStripArray instanceof IndexedTriangleFanArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripIndexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripIndexCounts[strip] - 2; i \u003c n; i++) {\n                                addIndexedTriangleToPath(geometryStripArray, initialIndex, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                            }\n                            initialIndex +\u003d stripIndexCounts[strip];\n                        }\n                    }\n                }\n            } else {\n                if (geometryArray instanceof TriangleArray) {\n                    TriangleArray triangleArray \u003d (TriangleArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, triangleIndex \u003d 0; i \u003c vertexCount; i +\u003d 3) {\n                        addTriangleToPath(triangleArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof QuadArray) {\n                    QuadArray quadArray \u003d (QuadArray) geometryArray;\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    for (int i \u003d 0, quadrilateralIndex \u003d 0; i \u003c vertexCount; i +\u003d 4) {\n                        addQuadrilateralToPath(quadArray, i, i + 1, i + 2, i + 3, vertices, geometryPath, quadrilateralIndex++, nodeArea);\n                    }\n                } else if (geometryArray instanceof GeometryStripArray) {\n                    GeometryStripArray geometryStripArray \u003d (GeometryStripArray) geometryArray;\n                    int[] stripVertexCounts \u003d new int[geometryStripArray.getNumStrips()];\n                    geometryStripArray.getStripVertexCounts(stripVertexCounts);\n                    geometryPath \u003d new GeneralPath(GeneralPath.WIND_NON_ZERO, 1000);\n                    int initialIndex \u003d 0;\n                    if (geometryStripArray instanceof TriangleStripArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripVertexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripVertexCounts[strip] - 2, j \u003d 0; i \u003c n; i++, j++) {\n                                if (j % 2 \u003d\u003d 0) {\n                                    addTriangleToPath(geometryStripArray, i, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                                } else {\n                                    // Vertices of odd triangles are in reverse order\n                                    addTriangleToPath(geometryStripArray, i, i + 2, i + 1, vertices, geometryPath, triangleIndex++, nodeArea);\n                                }\n                            }\n                            initialIndex +\u003d stripVertexCounts[strip];\n                        }\n                    } else if (geometryStripArray instanceof TriangleFanArray) {\n                        for (int strip \u003d 0, triangleIndex \u003d 0; strip \u003c stripVertexCounts.length; strip++) {\n                            for (int i \u003d initialIndex, n \u003d initialIndex + stripVertexCounts[strip] - 2; i \u003c n; i++) {\n                                addTriangleToPath(geometryStripArray, initialIndex, i + 1, i + 2, vertices, geometryPath, triangleIndex++, nodeArea);\n                            }\n                            initialIndex +\u003d stripVertexCounts[strip];\n                        }\n                    }\n                }\n            }\n            if (geometryPath !\u003d null) {\n                nodeArea.add(new Area(geometryPath));\n            }\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices.\n     */\n    private void addIndexedTriangleToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea) {\n        addTriangleToPath(geometryArray, geometryArray.getCoordinateIndex(vertexIndex1), geometryArray.getCoordinateIndex(vertexIndex2), geometryArray.getCoordinateIndex(vertexIndex3), vertices, geometryPath, triangleIndex, nodeArea);\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices.\n     */\n    private void addIndexedQuadrilateralToPath(IndexedGeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea) {\n        addQuadrilateralToPath(geometryArray, geometryArray.getCoordinateIndex(vertexIndex1), geometryArray.getCoordinateIndex(vertexIndex2), geometryArray.getCoordinateIndex(vertexIndex3), geometryArray.getCoordinateIndex(vertexIndex4), vertices, geometryPath, quadrilateralIndex, nodeArea);\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the triangle joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3 indices,\n     * only if the triangle has a positive orientation.\n     */\n    private void addTriangleToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, float[] vertices, GeneralPath geometryPath, int triangleIndex, Area nodeArea) {\n        float xVertex1 \u003d vertices[2 * vertexIndex1];\n        float yVertex1 \u003d vertices[2 * vertexIndex1 + 1];\n        float xVertex2 \u003d vertices[2 * vertexIndex2];\n        float yVertex2 \u003d vertices[2 * vertexIndex2 + 1];\n        float xVertex3 \u003d vertices[2 * vertexIndex3];\n        float yVertex3 \u003d vertices[2 * vertexIndex3 + 1];\n        if ((xVertex2 - xVertex1) * (yVertex3 - yVertex2) - (yVertex2 - yVertex1) * (xVertex3 - xVertex2) \u003e 0) {\n            if (triangleIndex \u003e 0 \u0026\u0026 triangleIndex % 1000 \u003d\u003d 0) {\n                // Add now current path to area otherwise area gets too slow\n                nodeArea.add(new Area(geometryPath));\n                geometryPath.reset();\n            }\n            geometryPath.moveTo(xVertex1, yVertex1);\n            geometryPath.lineTo(xVertex2, yVertex2);\n            geometryPath.lineTo(xVertex3, yVertex3);\n            geometryPath.closePath();\n        }\n    }\n\n    /**\n     * Adds to \u003ccode\u003enodePath\u003c/code\u003e the quadrilateral joining vertices at\n     * vertexIndex1, vertexIndex2, vertexIndex3, vertexIndex4 indices,\n     * only if the quadrilateral has a positive orientation.\n     */\n    private void addQuadrilateralToPath(GeometryArray geometryArray, int vertexIndex1, int vertexIndex2, int vertexIndex3, int vertexIndex4, float[] vertices, GeneralPath geometryPath, int quadrilateralIndex, Area nodeArea) {\n        float xVertex1 \u003d vertices[2 * vertexIndex1];\n        float yVertex1 \u003d vertices[2 * vertexIndex1 + 1];\n        float xVertex2 \u003d vertices[2 * vertexIndex2];\n        float yVertex2 \u003d vertices[2 * vertexIndex2 + 1];\n        float xVertex3 \u003d vertices[2 * vertexIndex3];\n        float yVertex3 \u003d vertices[2 * vertexIndex3 + 1];\n        if ((xVertex2 - xVertex1) * (yVertex3 - yVertex2) - (yVertex2 - yVertex1) * (xVertex3 - xVertex2) \u003e 0) {\n            if (quadrilateralIndex \u003e 0 \u0026\u0026 quadrilateralIndex % 1000 \u003d\u003d 0) {\n                // Add now current path to area otherwise area gets too slow\n                nodeArea.add(new Area(geometryPath));\n                geometryPath.reset();\n            }\n            geometryPath.moveTo(xVertex1, yVertex1);\n            geometryPath.lineTo(xVertex2, yVertex2);\n            geometryPath.lineTo(xVertex3, yVertex3);\n            geometryPath.lineTo(vertices[2 * vertexIndex4], vertices[2 * vertexIndex4 + 1]);\n            geometryPath.closePath();\n        }\n    }\n\n    /**\n     * Returns the convex polygon that surrounds the given \u003ccode\u003evertices\u003c/code\u003e.\n     * From Andrew\u0027s monotone chain 2D convex hull algorithm described at\n     * http://softsurfer.com/Archive/algorithm%5F0109/algorithm%5F0109.htm\n     */\n    private float[][] getSurroundingPolygon(float[][] vertices) {\n        Arrays.sort(vertices, new Comparator\u003cfloat[]\u003e() {\n\n            public int compare(float[] vertex1, float[] vertex2) {\n                if (vertex1[0] \u003d\u003d vertex2[0]) {\n                    return (int) Math.signum(vertex2[1] - vertex1[1]);\n                } else {\n                    return (int) Math.signum(vertex2[0] - vertex1[0]);\n                }\n            }\n        });\n        float[][] polygon \u003d new float[vertices.length][];\n        // The output array polygon [] will be used as the stack\n        // indices for bottom and top of the stack\n        int bottom \u003d 0, top \u003d -1;\n        // array scan index\n        int i;\n        // Get the indices of points with min x-coord and min|max y-coord\n        int minMin \u003d 0, minMax;\n        float xmin \u003d vertices[0][0];\n        for (i \u003d 1; i \u003c vertices.length; i++) {\n            if (vertices[i][0] !\u003d xmin) {\n                break;\n            }\n        }\n        minMax \u003d i - 1;\n        if (minMax \u003d\u003d vertices.length - 1) {\n            // Degenerate case: all x-coords \u003d\u003d xmin\n            polygon[++top] \u003d vertices[minMin];\n            if (vertices[minMax][1] !\u003d vertices[minMin][1]) {\n                // A nontrivial segment\n                polygon[++top] \u003d vertices[minMax];\n            }\n            // Add polygon end point\n            polygon[++top] \u003d vertices[minMin];\n            float[][] surroundingPolygon \u003d new float[top + 1][];\n            System.arraycopy(polygon, 0, surroundingPolygon, 0, surroundingPolygon.length);\n        }\n        // Get the indices of points with max x-coord and min|max y-coord\n        int maxMin, maxMax \u003d vertices.length - 1;\n        float xMax \u003d vertices[vertices.length - 1][0];\n        for (i \u003d vertices.length - 2; i \u003e\u003d 0; i--) {\n            if (vertices[i][0] !\u003d xMax) {\n                break;\n            }\n        }\n        maxMin \u003d i + 1;\n        // Compute the lower hull on the stack polygon\n        // push minmin point onto stack\n        polygon[++top] \u003d vertices[minMin];\n        i \u003d minMax;\n        while (++i \u003c\u003d maxMin) {\n            // The lower line joins points [minmin] with points [maxmin]\n            if (isLeft(vertices[minMin], vertices[maxMin], vertices[i]) \u003e\u003d 0 \u0026\u0026 i \u003c maxMin) {\n                // ignore points [i] above or on the lower line\n                continue;\n            }\n            while (// There are at least 2 points on the stack\n            top \u003e 0) {\n                // Test if points [i] is left of the line at the stack top\n                if (isLeft(polygon[top - 1], polygon[top], vertices[i]) \u003e 0)\n                    // points [i] is a new hull vertex\n                    break;\n                else\n                    // pop top point off stack\n                    top--;\n            }\n            // push points [i] onto stack\n            polygon[++top] \u003d vertices[i];\n        }\n        // Next, compute the upper hull on the stack polygon above the bottom hull\n        // If distinct xmax points\n        if (maxMax !\u003d maxMin) {\n            // Push maxmax point onto stack\n            polygon[++top] \u003d vertices[maxMax];\n        }\n        // The bottom point of the upper hull stack\n        bottom \u003d top;\n        i \u003d maxMin;\n        while (--i \u003e\u003d minMax) {\n            // The upper line joins points [maxmax] with points [minmax]\n            if (isLeft(vertices[maxMax], vertices[minMax], vertices[i]) \u003e\u003d 0 \u0026\u0026 i \u003e minMax) {\n                // Ignore points [i] below or on the upper line\n                continue;\n            }\n            // At least 2 points on the upper stack\n            while (top \u003e bottom) {\n                // Test if points [i] is left of the line at the stack top\n                if (isLeft(polygon[top - 1], polygon[top], vertices[i]) \u003e 0) {\n                    // points [i] is a new hull vertex\n                    break;\n                } else {\n                    // Pop top point off stack\n                    top--;\n                }\n            }\n            // Push points [i] onto stack\n            polygon[++top] \u003d vertices[i];\n        }\n        if (minMax !\u003d minMin) {\n            // Push joining endpoint onto stack\n            polygon[++top] \u003d vertices[minMin];\n        }\n        float[][] surroundingPolygon \u003d new float[top + 1][];\n        System.arraycopy(polygon, 0, surroundingPolygon, 0, surroundingPolygon.length);\n        return surroundingPolygon;\n    }\n\n    private float isLeft(float[] vertex0, float[] vertex1, float[] vertex2) {\n        return (vertex1[0] - vertex0[0]) * (vertex2[1] - vertex0[1]) - (vertex2[0] - vertex0[0]) * (vertex1[1] - vertex0[1]);\n    }\n\n    /**\n     * Returns the area on the floor of the given staircase.\n     */\n    public Area getAreaOnFloor(HomePieceOfFurniture staircase) {\n        if (staircase.getStaircaseCutOutShape() \u003d\u003d null) {\n            throw new IllegalArgumentException(\"No cut out shape associated to piece\");\n        }\n        Shape shape \u003d parseShape(staircase.getStaircaseCutOutShape());\n        Area staircaseArea \u003d new Area(shape);\n        if (staircase.isModelMirrored()) {\n            staircaseArea \u003d getMirroredArea(staircaseArea);\n        }\n        AffineTransform staircaseTransform \u003d AffineTransform.getTranslateInstance(staircase.getX() - staircase.getWidth() / 2, staircase.getY() - staircase.getDepth() / 2);\n        staircaseTransform.concatenate(AffineTransform.getRotateInstance(staircase.getAngle(), staircase.getWidth() / 2, staircase.getDepth() / 2));\n        staircaseTransform.concatenate(AffineTransform.getScaleInstance(staircase.getWidth(), staircase.getDepth()));\n        staircaseArea.transform(staircaseTransform);\n        return staircaseArea;\n    }\n\n    /**\n     * Returns the mirror area of the given \u003ccode\u003earea\u003c/code\u003e.\n     */\n    private Area getMirroredArea(Area area) {\n        // As applying a -1 scale transform reverses the holes / non holes interpretation of the points,\n        // we have to create a mirrored shape by parsing points\n        GeneralPath mirrorPath \u003d new GeneralPath();\n        float[] point \u003d new float[6];\n        for (PathIterator it \u003d area.getPathIterator(null); !it.isDone(); it.next()) {\n            switch(it.currentSegment(point)) {\n                case PathIterator.SEG_MOVETO:\n                    mirrorPath.moveTo(1 - point[0], point[1]);\n                    break;\n                case PathIterator.SEG_LINETO:\n                    mirrorPath.lineTo(1 - point[0], point[1]);\n                    break;\n                case PathIterator.SEG_QUADTO:\n                    mirrorPath.quadTo(1 - point[0], point[1], 1 - point[2], point[3]);\n                    break;\n                case PathIterator.SEG_CUBICTO:\n                    mirrorPath.curveTo(1 - point[0], point[1], 1 - point[2], point[3], 1 - point[4], point[5]);\n                    break;\n                case PathIterator.SEG_CLOSE:\n                    mirrorPath.closePath();\n                    break;\n            }\n        }\n        return new Area(mirrorPath);\n    }\n\n    /**\n     * Returns the AWT shape matching the given \u003ca href\u003d\"http://www.w3.org/TR/SVG/paths.html\"\u003eSVG path shape\u003c/a\u003e.\n     */\n    private Shape parseShape(String svgPathShape) {\n        Shape shape \u003d parsedShapes.get(svgPathShape);\n        if (shape \u003d\u003d null) {\n            try {\n                shape \u003d SVGPathSupport.parsePathShape(svgPathShape);\n            } catch (LinkageError ex) {\n                // Fallback to default square shape if batik classes aren\u0027t in classpath\n                shape \u003d new Rectangle2D.Float(0, 0, 1, 1);\n            }\n            parsedShapes.put(svgPathShape, shape);\n        }\n        return shape;\n    }\n\n    /**\n     * Separated static class to be able to exclude Batik library from classpath.\n     */\n    private static class SVGPathSupport {\n\n        public static Shape parsePathShape(String svgPathShape) {\n            try {\n                AWTPathProducer pathProducer \u003d new AWTPathProducer();\n                PathParser pathParser \u003d new PathParser();\n                pathParser.setPathHandler(pathProducer);\n                pathParser.parse(svgPathShape);\n                return pathProducer.getShape();\n            } catch (ParseException ex) {\n                // Fallback to default square shape if shape is incorrect\n                return new Rectangle2D.Float(0, 0, 1, 1);\n            }\n        }\n    }\n\n    /**\n     * An observer that receives model loading notifications.\n     */\n    public static interface ModelObserver {\n\n        public void modelUpdated(BranchGroup modelRoot);\n\n        public void modelError(Exception ex);\n    }\n}\n",
    "package": "com.eteks.sweethome3d.j3d",
    "classname": "ModelManager",
    "id": "/EvoSuiteBenchmark/original/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager_8Test.java",
    "test_prompt": "// ModelManager_8Test.java\npackage com.eteks.sweethome3d.j3d;\n\nimport java.awt.EventQueue;\nimport java.awt.Shape;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.PathIterator;\nimport java.awt.geom.Rectangle2D;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Modifier;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.media.j3d.Appearance;\nimport javax.media.j3d.BoundingBox;\nimport javax.media.j3d.Bounds;\nimport javax.media.j3d.BranchGroup;\nimport javax.media.j3d.Geometry;\nimport javax.media.j3d.GeometryArray;\nimport javax.media.j3d.GeometryStripArray;\nimport javax.media.j3d.Group;\nimport javax.media.j3d.IndexedGeometryArray;\nimport javax.media.j3d.IndexedGeometryStripArray;\nimport javax.media.j3d.IndexedQuadArray;\nimport javax.media.j3d.IndexedTriangleArray;\nimport javax.media.j3d.IndexedTriangleFanArray;\nimport javax.media.j3d.IndexedTriangleStripArray;\nimport javax.media.j3d.Light;\nimport javax.media.j3d.Link;\nimport javax.media.j3d.Material;\nimport javax.media.j3d.Node;\nimport javax.media.j3d.QuadArray;\nimport javax.media.j3d.RenderingAttributes;\nimport javax.media.j3d.Shape3D;\nimport javax.media.j3d.SharedGroup;\nimport javax.media.j3d.Texture;\nimport javax.media.j3d.TextureAttributes;\nimport javax.media.j3d.Transform3D;\nimport javax.media.j3d.TransformGroup;\nimport javax.media.j3d.TransparencyAttributes;\nimport javax.media.j3d.TriangleArray;\nimport javax.media.j3d.TriangleFanArray;\nimport javax.media.j3d.TriangleStripArray;\nimport javax.vecmath.Color3f;\nimport javax.vecmath.Matrix3f;\nimport javax.vecmath.Point3d;\nimport javax.vecmath.Point3f;\nimport javax.vecmath.Vector3d;\nimport javax.vecmath.Vector3f;\nimport org.apache.batik.parser.AWTPathProducer;\nimport org.apache.batik.parser.ParseException;\nimport org.apache.batik.parser.PathParser;\nimport com.eteks.sweethome3d.model.Content;\nimport com.eteks.sweethome3d.model.HomePieceOfFurniture;\nimport com.eteks.sweethome3d.tools.TemporaryURLContent;\nimport com.eteks.sweethome3d.tools.URLContent;\nimport com.microcrowd.loader.java3d.max3ds.Loader3DS;\nimport com.sun.j3d.loaders.IncorrectFormatException;\nimport com.sun.j3d.loaders.Loader;\nimport com.sun.j3d.loaders.ParsingErrorException;\nimport com.sun.j3d.loaders.Scene;\nimport com.sun.j3d.loaders.lw3d.Lw3dLoader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModelManager}.\n* It contains ten unit test cases for the {@link ModelManager#loadModel(Content)} method.\n*/\nclass ModelManager_8Test {",
    "method_signature": "loadModel(Content)",
    "suffix": "8"
  }
]