[
  {
    "numberTests": "ten",
    "original_code": "// XPathReaderFactory.java\n/*\r\n * $Header: /cvsroot/saxpath/saxpath/src/java/main/org/saxpath/helpers/XPathReaderFactory.java,v 1.7 2002/04/26 17:05:34 jstrachan Exp $\r\n * $Revision: 1.7 $\r\n * $Date: 2002/04/26 17:05:34 $\r\n *\r\n * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n *\r\n * Copyright (C) 2000-2002 werken digital.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions, and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions, and the disclaimer that follows \r\n *    these conditions in the documentation and/or other materials \r\n *    provided with the distribution.\r\n *\r\n * 3. The name \"SAXPath\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission.  For\r\n *    written permission, please contact license@saxpath.org.\r\n * \r\n * 4. Products derived from this software may not be called \"SAXPath\", nor\r\n *    may \"SAXPath\" appear in their name, without prior written permission\r\n *    from the SAXPath Project Management (pm@saxpath.org).\r\n * \r\n * In addition, we request (but do not require) that you include in the \r\n * end-user documentation provided with the redistribution and/or in the \r\n * software itself an acknowledgement equivalent to the following:\r\n *     \"This product includes software developed by the\r\n *      SAXPath Project (http://www.saxpath.org/).\"\r\n * Alternatively, the acknowledgment may be graphical using the logos \r\n * available at http://www.saxpath.org/\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS\u0027\u0027 AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE SAXPath AUTHORS OR THE PROJECT\r\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n *\r\n * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n * This software consists of voluntary contributions made by many \r\n * individuals on behalf of the SAXPath Project and was originally \r\n * created by bob mcwhirter \u003cbob@werken.com\u003e and \r\n * James Strachan \u003cjstrachan@apache.org\u003e.  For more information on the \r\n * SAXPath Project, please see \u003chttp://www.saxpath.org/\u003e.\r\n * \r\n * $Id: XPathReaderFactory.java,v 1.7 2002/04/26 17:05:34 jstrachan Exp $\r\n */\r\npackage org.saxpath.helpers;\r\n\r\nimport org.saxpath.XPathReader;\r\nimport org.saxpath.SAXPathException;\r\n\r\n/**\r\n * Create an {@link org.saxpath.XPathReader} from\r\n *  either a system property, or a named class.\r\n *\r\n *  \u003cp\u003e\r\n *  Similar to the SAX API, the \u003ccode\u003eXPathReaderFactory\u003c/code\u003e\r\n *  can create an \u003ccode\u003eXPathReader\u003c/code\u003e from a name of a\r\n *  class passed in directly, or by inspecting the system\r\n *  property \u003ccode\u003eorg.saxpath.driver\u003c/code\u003e.\r\n *\r\n *  @author bob mcwhirter (bob@werken.com)\r\n */\r\npublic class XPathReaderFactory {\r\n\r\n    /**\r\n     * The \u003ccode\u003eorg.saxpath.driver\u003c/code\u003e property name.\r\n     */\r\n    public static final String DRIVER_PROPERTY \u003d \"org.saxpath.driver\";\r\n\r\n    /**\r\n     * The default driver to use if none is configured.\r\n     */\r\n    protected static final String DEFAULT_DRIVER \u003d \"com.werken.saxpath.XPathReader\";\r\n\r\n    /**\r\n     * Should the default driver be used\r\n     */\r\n    private static boolean USE_DEFAULT \u003d true;\r\n\r\n    /**\r\n     * Create an \u003ccode\u003eXPathReader\u003c/code\u003e using the value of\r\n     *  the \u003ccode\u003eorg.saxpath.driver\u003c/code\u003e system property.\r\n     *\r\n     *  @return An instance of the \u003ccode\u003eXPathReader\u003c/code\u003e specified\r\n     *          by the \u003ccode\u003eorg.saxpath.driver\u003c/code\u003e property.\r\n     *\r\n     *  @throws SAXPathException if the property is unset, or if\r\n     *          the class can not be instantiated for some reason.,\r\n     *          or if the class doesn\u0027t implement the \u003ccode\u003eXPathReader\u003c/code\u003e\r\n     *          interface.\r\n     */\r\n    public static XPathReader createReader() throws SAXPathException {\r\n        String className \u003d null;\r\n        boolean securityException \u003d false;\r\n        try {\r\n            className \u003d System.getProperty(DRIVER_PROPERTY);\r\n        } catch (SecurityException e) {\r\n            securityException \u003d true;\r\n        }\r\n        if (className \u003d\u003d null || \"\".equals(className)) {\r\n            if (USE_DEFAULT) {\r\n                className \u003d DEFAULT_DRIVER;\r\n            } else {\r\n                if (securityException) {\r\n                    throw new SAXPathException(\"Reading of property \" + DRIVER_PROPERTY + \" disallowed.\");\r\n                } else {\r\n                    throw new SAXPathException(\"Property \" + DRIVER_PROPERTY + \" not set\");\r\n                }\r\n            }\r\n        }\r\n        return createReader(className);\r\n    }\r\n\r\n    /**\r\n     * Create an \u003ccode\u003eXPathReader\u003c/code\u003e using the passed\r\n     *  in class name.\r\n     *\r\n     *  @param className The name of the class which implements\r\n     *         the \u003ccode\u003eXPathReader\u003c/code\u003e interface.\r\n     *\r\n     *  @throws SAXPathException if the class can not be\r\n     *          instantiated for some reason, or if the\r\n     *          class doesn\u0027t implement the \u003ccode\u003eXPathReader\u003c/code\u003e\r\n     *          interface.\r\n     */\r\n    public static XPathReader createReader(String className) throws SAXPathException {\r\n        Class readerClass \u003d null;\r\n        XPathReader reader \u003d null;\r\n        try {\r\n            // Use the full version of Class.forName(), so as to\r\n            // work better in sandboxed environments, such as\r\n            // Servlet contains, and Applets.\r\n            readerClass \u003d Class.forName(className, true, XPathReaderFactory.class.getClassLoader());\r\n            // Double-check that it\u0027s actually the right kind of class\r\n            // before attempting instantiation.\r\n            if (!XPathReader.class.isAssignableFrom(readerClass)) {\r\n                throw new SAXPathException(\"Class [\" + className + \"] does not implement the org.saxpath.XPathReader interface.\");\r\n            }\r\n        } catch (ClassNotFoundException e) {\r\n            throw new SAXPathException(e.getMessage());\r\n        }\r\n        try {\r\n            reader \u003d (XPathReader) readerClass.newInstance();\r\n        } catch (IllegalAccessException e) {\r\n            throw new SAXPathException(e.getMessage());\r\n        } catch (InstantiationException e) {\r\n            throw new SAXPathException(e.getMessage());\r\n        }\r\n        if (reader \u003d\u003d null) {\r\n            throw new SAXPathException(\"Unable to create XPathReader\");\r\n        }\r\n        return reader;\r\n    }\r\n}\r\n",
    "package": "org.saxpath.helpers",
    "classname": "XPathReaderFactory",
    "id": "/EvoSuiteBenchmark/original/24_saxpath/src/main/java/saxpath/helpers/XPathReaderFactory_0Test.java",
    "test_prompt": "// XPathReaderFactory_0Test.java\npackage org.saxpath.helpers;\n\nimport org.saxpath.XPathReader;\nimport org.saxpath.SAXPathException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XPathReaderFactory}.\n* It contains ten unit test cases for the {@link XPathReaderFactory#createReader()} method.\n*/\nclass XPathReaderFactory_0Test {",
    "method_signature": "createReader()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// XPathReaderFactory.java\n/*\r\n * $Header: /cvsroot/saxpath/saxpath/src/java/main/org/saxpath/helpers/XPathReaderFactory.java,v 1.7 2002/04/26 17:05:34 jstrachan Exp $\r\n * $Revision: 1.7 $\r\n * $Date: 2002/04/26 17:05:34 $\r\n *\r\n * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n *\r\n * Copyright (C) 2000-2002 werken digital.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions, and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions, and the disclaimer that follows \r\n *    these conditions in the documentation and/or other materials \r\n *    provided with the distribution.\r\n *\r\n * 3. The name \"SAXPath\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission.  For\r\n *    written permission, please contact license@saxpath.org.\r\n * \r\n * 4. Products derived from this software may not be called \"SAXPath\", nor\r\n *    may \"SAXPath\" appear in their name, without prior written permission\r\n *    from the SAXPath Project Management (pm@saxpath.org).\r\n * \r\n * In addition, we request (but do not require) that you include in the \r\n * end-user documentation provided with the redistribution and/or in the \r\n * software itself an acknowledgement equivalent to the following:\r\n *     \"This product includes software developed by the\r\n *      SAXPath Project (http://www.saxpath.org/).\"\r\n * Alternatively, the acknowledgment may be graphical using the logos \r\n * available at http://www.saxpath.org/\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS\u0027\u0027 AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE SAXPath AUTHORS OR THE PROJECT\r\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n *\r\n * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\r\n * This software consists of voluntary contributions made by many \r\n * individuals on behalf of the SAXPath Project and was originally \r\n * created by bob mcwhirter \u003cbob@werken.com\u003e and \r\n * James Strachan \u003cjstrachan@apache.org\u003e.  For more information on the \r\n * SAXPath Project, please see \u003chttp://www.saxpath.org/\u003e.\r\n * \r\n * $Id: XPathReaderFactory.java,v 1.7 2002/04/26 17:05:34 jstrachan Exp $\r\n */\r\npackage org.saxpath.helpers;\r\n\r\nimport org.saxpath.XPathReader;\r\nimport org.saxpath.SAXPathException;\r\n\r\n/**\r\n * Create an {@link org.saxpath.XPathReader} from\r\n *  either a system property, or a named class.\r\n *\r\n *  \u003cp\u003e\r\n *  Similar to the SAX API, the \u003ccode\u003eXPathReaderFactory\u003c/code\u003e\r\n *  can create an \u003ccode\u003eXPathReader\u003c/code\u003e from a name of a\r\n *  class passed in directly, or by inspecting the system\r\n *  property \u003ccode\u003eorg.saxpath.driver\u003c/code\u003e.\r\n *\r\n *  @author bob mcwhirter (bob@werken.com)\r\n */\r\npublic class XPathReaderFactory {\r\n\r\n    /**\r\n     * The \u003ccode\u003eorg.saxpath.driver\u003c/code\u003e property name.\r\n     */\r\n    public static final String DRIVER_PROPERTY \u003d \"org.saxpath.driver\";\r\n\r\n    /**\r\n     * The default driver to use if none is configured.\r\n     */\r\n    protected static final String DEFAULT_DRIVER \u003d \"com.werken.saxpath.XPathReader\";\r\n\r\n    /**\r\n     * Should the default driver be used\r\n     */\r\n    private static boolean USE_DEFAULT \u003d true;\r\n\r\n    /**\r\n     * Create an \u003ccode\u003eXPathReader\u003c/code\u003e using the value of\r\n     *  the \u003ccode\u003eorg.saxpath.driver\u003c/code\u003e system property.\r\n     *\r\n     *  @return An instance of the \u003ccode\u003eXPathReader\u003c/code\u003e specified\r\n     *          by the \u003ccode\u003eorg.saxpath.driver\u003c/code\u003e property.\r\n     *\r\n     *  @throws SAXPathException if the property is unset, or if\r\n     *          the class can not be instantiated for some reason.,\r\n     *          or if the class doesn\u0027t implement the \u003ccode\u003eXPathReader\u003c/code\u003e\r\n     *          interface.\r\n     */\r\n    public static XPathReader createReader() throws SAXPathException {\r\n        String className \u003d null;\r\n        boolean securityException \u003d false;\r\n        try {\r\n            className \u003d System.getProperty(DRIVER_PROPERTY);\r\n        } catch (SecurityException e) {\r\n            securityException \u003d true;\r\n        }\r\n        if (className \u003d\u003d null || \"\".equals(className)) {\r\n            if (USE_DEFAULT) {\r\n                className \u003d DEFAULT_DRIVER;\r\n            } else {\r\n                if (securityException) {\r\n                    throw new SAXPathException(\"Reading of property \" + DRIVER_PROPERTY + \" disallowed.\");\r\n                } else {\r\n                    throw new SAXPathException(\"Property \" + DRIVER_PROPERTY + \" not set\");\r\n                }\r\n            }\r\n        }\r\n        return createReader(className);\r\n    }\r\n\r\n    /**\r\n     * Create an \u003ccode\u003eXPathReader\u003c/code\u003e using the passed\r\n     *  in class name.\r\n     *\r\n     *  @param className The name of the class which implements\r\n     *         the \u003ccode\u003eXPathReader\u003c/code\u003e interface.\r\n     *\r\n     *  @throws SAXPathException if the class can not be\r\n     *          instantiated for some reason, or if the\r\n     *          class doesn\u0027t implement the \u003ccode\u003eXPathReader\u003c/code\u003e\r\n     *          interface.\r\n     */\r\n    public static XPathReader createReader(String className) throws SAXPathException {\r\n        Class readerClass \u003d null;\r\n        XPathReader reader \u003d null;\r\n        try {\r\n            // Use the full version of Class.forName(), so as to\r\n            // work better in sandboxed environments, such as\r\n            // Servlet contains, and Applets.\r\n            readerClass \u003d Class.forName(className, true, XPathReaderFactory.class.getClassLoader());\r\n            // Double-check that it\u0027s actually the right kind of class\r\n            // before attempting instantiation.\r\n            if (!XPathReader.class.isAssignableFrom(readerClass)) {\r\n                throw new SAXPathException(\"Class [\" + className + \"] does not implement the org.saxpath.XPathReader interface.\");\r\n            }\r\n        } catch (ClassNotFoundException e) {\r\n            throw new SAXPathException(e.getMessage());\r\n        }\r\n        try {\r\n            reader \u003d (XPathReader) readerClass.newInstance();\r\n        } catch (IllegalAccessException e) {\r\n            throw new SAXPathException(e.getMessage());\r\n        } catch (InstantiationException e) {\r\n            throw new SAXPathException(e.getMessage());\r\n        }\r\n        if (reader \u003d\u003d null) {\r\n            throw new SAXPathException(\"Unable to create XPathReader\");\r\n        }\r\n        return reader;\r\n    }\r\n}\r\n",
    "package": "org.saxpath.helpers",
    "classname": "XPathReaderFactory",
    "id": "/EvoSuiteBenchmark/original/24_saxpath/src/main/java/saxpath/helpers/XPathReaderFactory_1Test.java",
    "test_prompt": "// XPathReaderFactory_1Test.java\npackage org.saxpath.helpers;\n\nimport org.saxpath.XPathReader;\nimport org.saxpath.SAXPathException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XPathReaderFactory}.\n* It contains ten unit test cases for the {@link XPathReaderFactory#createReader(String)} method.\n*/\nclass XPathReaderFactory_1Test {",
    "method_signature": "createReader(String)",
    "suffix": "1"
  }
]