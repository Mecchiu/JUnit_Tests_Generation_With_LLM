[
  {
    "numberTests": "ten",
    "original_code": "// LoggerFactory.java\n/**\r\n * [ObjectExplorer4J - Tool zur grafischen Darstellung von Objekten und ihren\r\n * Referenzen]\r\n *\r\n * Copyright (C) [2009] [PARAGON Systemhaus GmbH]\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under\r\n * the terms of the GNU General Public License as published by the Free Software\r\n * Foundation; either version 3 of the License, or (at your option) any later\r\n * version.\r\n *\r\n * This program is distributed in the hope that it will be useful, but WITHOUT\r\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\r\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\r\n * details.\r\n *\r\n * You should have received a copy of the GNU General Public License along with\r\n * this program; if not, see \u003chttp://www.gnu.org/licenses/\u003e.\r\n */\r\npackage de.paragon.explorer.util;\r\n\r\nimport org.apache.log4j.Logger;\r\n\r\n/**\r\n * Factory f�r Log4J.\r\n *\r\n * @author Stefan Jockenh�vel\r\n *\r\n * @see http://www.javaspecialists.eu/archive/Issue137.html\r\n * @see http://shemnon.com/speling/2006/12/dry-logs-there-are-better-ways.html\r\n *      --\u003e comment\r\n */\r\npublic final class LoggerFactory {\r\n\r\n    /**\r\n     * Erzeugt einen Logger in der aufrufenden Klasse.\r\n     *\r\n     * @return Logger\r\n     */\r\n    public static Logger make() {\r\n        // Throwable t \u003d new Throwable();\r\n        // StackTraceElement directCaller \u003d t.getStackTrace()[1];\r\n        // return Logger.getLogger(directCaller.getClassName());\r\n        final Thread t \u003d Thread.currentThread();\r\n        final StackTraceElement directCaller \u003d t.getStackTrace()[2];\r\n        final String className \u003d directCaller.getClassName();\r\n        return Logger.getLogger(className);\r\n    }\r\n\r\n    /**\r\n     * privater Konstruktur --\u003e kein Erzeugen einer Instanz sinnvoll!\r\n     */\r\n    private LoggerFactory() {\r\n    }\r\n}\r\n",
    "package": "de.paragon.explorer.util",
    "classname": "LoggerFactory",
    "id": "/EvoSuiteBenchmark/original/63_objectexplorer/src/main/java/de/paragon/explorer/util/LoggerFactory.java",
    "test_prompt": "// LoggerFactoryTest.java\npackage de.paragon.explorer.util;\n\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoggerFactory}.\n* It contains ten unit test cases for the {@link LoggerFactory#make()} method.\n*/\nclass LoggerFactoryTest {",
    "method_signature": "make()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ExplorerModelBuilder.java\n/**\r\n * [ObjectExplorer4J - Tool zur grafischen Darstellung von Objekten und ihren\r\n * Referenzen]\r\n *\r\n * Copyright (C) [2009] [PARAGON Systemhaus GmbH]\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under\r\n * the terms of the GNU General Public License as published by the Free Software\r\n * Foundation; either version 3 of the License, or (at your option) any later\r\n * version.\r\n *\r\n * This program is distributed in the hope that it will be useful, but WITHOUT\r\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\r\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\r\n * details.\r\n *\r\n * You should have received a copy of the GNU General Public License along with\r\n * this program; if not, see \u003chttp://www.gnu.org/licenses/\u003e.\r\n */\r\npackage de.paragon.explorer.model;\r\n\r\nimport de.paragon.explorer.figure.ExplorerFigure;\r\nimport de.paragon.explorer.figure.ExplorerFigureBuilder;\r\nimport de.paragon.explorer.figure.ListBoxFigure;\r\nimport de.paragon.explorer.figure.TextBoxFigure;\r\nimport de.paragon.explorer.gui.ExplorerDrawingPanel;\r\nimport de.paragon.explorer.util.ExplorerManager;\r\n\r\npublic final class ExplorerModelBuilder {\r\n\r\n    private static ExplorerModelBuilder singleton;\r\n\r\n    public static ExplorerModelBuilder getInstance() {\r\n        return ExplorerModelBuilder.getSingleton();\r\n    }\r\n\r\n    private static ExplorerModelBuilder getSingleton() {\r\n        if (ExplorerModelBuilder.singleton \u003d\u003d null) {\r\n            ExplorerModelBuilder.setSingleton(new ExplorerModelBuilder());\r\n        }\r\n        return ExplorerModelBuilder.singleton;\r\n    }\r\n\r\n    private static void setSingleton(ExplorerModelBuilder builder) {\r\n        ExplorerModelBuilder.singleton \u003d builder;\r\n    }\r\n\r\n    private ExplorerModelBuilder() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Kommentar: Als erstes wird ein neues ExplorerModel erzeugt. Danach wird\r\n     * eine ExplorerFigure erzeugt. Diese wird dann mit dem ExplorerModel\r\n     * verknuepft. Generell gilt: Der Builder, der eine Figur oder ein Model\r\n     * frisch erzeugt hat, ist fuer die Verknuepfung der unmittelbar zuvor\r\n     * erzeugten Figur bzw. dem unmittelbar zuvor erzeugten Model zustaendig.\r\n     * Nach der Verknuepfung von ExplorerModel und ExplorerFigure wird ein neues\r\n     * ObjectModel erzeugt. Anschliessend werden ObjectModel und ExplorerModel\r\n     * verknuepft. Dann wird eine neue ListBoxFigure erzeugt. Diese wird dann\r\n     * mit dem ObjectModel verknuepft. Schliesslich schliesst sich der Kreis mit\r\n     * der Verknuepfung von ListBoxFigure und Explorer-Figure. Diese wird\r\n     * vorgenommen von dem ExplorerFigureBuilder. Anschliessend wird das\r\n     * ObjectModel weiter ausgebaut. Eine Beschreibung hierzu siehe im\r\n     * ObjectModelBuilder in der Methode buildObjectModel(ObjectModel objModl,\r\n     * Object object)! Ganz zum Schluss wird die fertige ListBoxFigure in der\r\n     * ExplorerFigure plaziert, das heisst, ihre Position innerhalb der\r\n     * ExplorerFigure wird festgelegt. Danach wird sie gezeichnet und ein neuer\r\n     * EventConverter wird erzeugt, bei dem die ExplorerFigure eingetragen wird.\r\n     */\r\n    public ExplorerDrawingPanel add1stModel(Object object) {\r\n        ExplorerModel explModl \u003d this.createNewExplorerModelWithFigure();\r\n        if (object !\u003d null) {\r\n            ObjectModel objModl \u003d this.createNewObjectModel(explModl);\r\n            this.getObjectModelBuilder().buildObjectModel(objModl, object);\r\n            this.getExplorerFigureBuilder().initialize1stList((ListBoxFigure) objModl.getFigure());\r\n            explModl.setDrawingFrameEventConverter(this.createNewEventConverter((ExplorerFigure) explModl.getFigure()));\r\n            ((ExplorerFigure) explModl.getFigure()).repaint();\r\n            this.getExplorerManager().addExplorerModel(explModl);\r\n        }\r\n        return ((ExplorerFigure) explModl.getFigure()).getPanel();\r\n    }\r\n\r\n    /**\r\n     * Kommentar: Als erstes wird ein neues ExplorerModel erzeugt. Danach wird\r\n     * eine ExplorerFigure erzeugt. Diese wird dann mit dem ExplorerModel\r\n     * verknuepft. Generell gilt: Der Builder, der eine Figur oder ein Model\r\n     * frisch erzeugt hat, ist fuer die Verknuepfung der unmittelbar zuvor\r\n     * erzeugten Figur bzw. dem unmittelbar zuvor erzeugten Model zustaendig.\r\n     * Nach der Verknuepfung von ExplorerModel und ExplorerFigure wird ein neues\r\n     * ObjectModel erzeugt. Anschliessend werden ObjectModel und ExplorerModel\r\n     * verknuepft. Dann wird eine neue ListBoxFigure erzeugt. Diese wird dann\r\n     * mit dem ObjectModel verknuepft. Schliesslich schliesst sich der Kreis mit\r\n     * der Verknuepfung von ListBoxFigure und Explorer-Figure. Diese wird\r\n     * vorgenommen von dem ExplorerFigureBuilder. Anschliessend wird das\r\n     * ObjectModel weiter ausgebaut. Eine Be- schreibung hierzu siehe im\r\n     * ObjectModelBuilder in der Methode buildObjectModel(ObjectModel objModl,\r\n     * Object object)! Ganz zum Schluss wird die fertige ListBoxFigure in der\r\n     * ExplorerFigure plaziert, das heisst, ihre Position innerhalb der\r\n     * ExplorerFigure wird festgelegt. Danach wird sie gezeichnet und ein neuer\r\n     * EventConverter wird erzeugt, bei dem die ExplorerFigure eingetragen wird.\r\n     */\r\n    public void addModel(ExplorerModel explModl, Object object) {\r\n        ObjectModel objModl \u003d this.createNewObjectModel(explModl);\r\n        this.getObjectModelBuilder().buildObjectModel(objModl, object);\r\n        this.getExplorerFigureBuilder().initializeCopyList((ListBoxFigure) objModl.getFigure());\r\n        this.getExplorerFigureBuilder().draw((ListBoxFigure) objModl.getFigure());\r\n    }\r\n\r\n    private void addNewConnectedObjectModelFor(TextBoxFigure tbf) {\r\n        AttributeModel attrModl \u003d (AttributeModel) tbf.getModel();\r\n        // ObjectModel objModl \u003d\r\n        // this.createNewObjectModel(attrModl.getObjectModel().getExplorerModel()\r\n        // );\r\n        ObjectModel objModl \u003d this.createNewObjectModel(tbf);\r\n        this.getObjectModelBuilder().buildObjectModel(objModl, attrModl.getValue());\r\n        this.getExplorerFigureBuilder().initializeListFor(objModl, attrModl);\r\n        this.getExplorerFigureBuilder().draw((ListBoxFigure) objModl.getFigure());\r\n        this.getConnectionBuilder().addConnection(objModl.getHeaderModel(), attrModl);\r\n    }\r\n\r\n    /**\r\n     * Kommentar: Diese Methode geht davon aus, dass lediglich die fertig\r\n     * erstellte ListBoxFigure noch innerhalb der Explorer- Figure positioniert\r\n     * werden muss.\r\n     */\r\n    private void connect(ExplorerModel explModl, ExplorerFigure explFig) {\r\n        explModl.setFigure(explFig);\r\n        explFig.setModel(explModl);\r\n    }\r\n\r\n    private de.paragon.explorer.event.ExplorerFrameEventConverter createNewEventConverter(ExplorerFigure explFig) {\r\n        return de.paragon.explorer.Explorer.getEventConverter(explFig);\r\n    }\r\n\r\n    /**\r\n     * Kommentar: Diese Methode erzeugt ein neues ExplorerModel, eine neue\r\n     * ExplorerFigure und verknuepft diese beiden.\r\n     */\r\n    public ExplorerModel createNewExplorerModelWithFigure() {\r\n        ExplorerModel explModl;\r\n        ExplorerFigure explFig;\r\n        explModl \u003d new ExplorerModel();\r\n        explFig \u003d this.getExplorerFigureBuilder().createNewExplorerFigure();\r\n        this.connect(explModl, explFig);\r\n        return explModl;\r\n    }\r\n\r\n    private ObjectModel createNewObjectModel(ExplorerModel explModl) {\r\n        return this.getObjectModelBuilder().createNewObjectModel(explModl);\r\n    }\r\n\r\n    private ObjectModel createNewObjectModel(TextBoxFigure tbf) {\r\n        return this.getObjectModelBuilder().createNewObjectModel(tbf);\r\n    }\r\n\r\n    private de.paragon.explorer.util.ConnectionBuilder getConnectionBuilder() {\r\n        return de.paragon.explorer.util.ConnectionBuilder.getInstance();\r\n    }\r\n\r\n    private ExplorerFigureBuilder getExplorerFigureBuilder() {\r\n        return ExplorerFigureBuilder.getInstance();\r\n    }\r\n\r\n    public ExplorerManager getExplorerManager() {\r\n        return ExplorerManager.INSTANCE;\r\n    }\r\n\r\n    private ObjectModelBuilder getObjectModelBuilder() {\r\n        return ObjectModelBuilder.getInstance();\r\n    }\r\n\r\n    /**\r\n     * Kommentar: Diese Methode geht davon aus, dass existieren: 1.\r\n     * ExplorerFigure verknuepft mit einem ExplorerModel; 2. Mindestens eine\r\n     * fertige ListBoxFigure. Diese Methode macht: Sie ist dann aufzurufen, wenn\r\n     * weder eine zu referenzierende ListBoxFigure noch die dazugehoerige\r\n     * ConnectionFigure da ist. Sie erzeugt ein neues ObjectModel incl.\r\n     * ListBoxFigure; baut dieses ObjectModel aus und fuegt sie abhaengig von\r\n     * dem AttributeModel, das es referenziert, in die ExplorerFigure ein.\r\n     * Anschliessend fuegt sie die verbindende ConnectionFigure ein. \"add\" steht\r\n     * hierbei fuer create, build und draw.\r\n     */\r\n    public void handleAttributeModel(TextBoxFigure tbf) {\r\n        if (!(((AttributeModel) tbf.getModel()).isAttributePrimitive())) {\r\n            this.addNewConnectedObjectModelFor(tbf);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Kommentar: Diese Methode geht davon aus, dass noch alle Verknuepfungen\r\n     * existieren, also noch nicht geloescht worden ist. Zunaechst wird das\r\n     * Objektmodell mit der zugehoerigen ListBoxFigure von der ExplorerFigure\r\n     * entfernt. Ein Objektmodell zu loeschen bedeutet, es aus der Liste\r\n     * objectModels des ExplorerModels zu entfernen. Dann geschieht Analoges mit\r\n     * den Connections, die auf das Modell zeigen oder vom Modell wegzeigen.\r\n     */\r\n    public void removeFromExplorer(ObjectModel objModl) {\r\n        objModl.getExplorerModel().removeObjectModel(objModl);\r\n        this.getExplorerFigureBuilder().removeFromExplorer((ListBoxFigure) objModl.getFigure());\r\n        this.getConnectionBuilder().removeConnections(objModl);\r\n    }\r\n}\r\n",
    "package": "de.paragon.explorer.model",
    "classname": "ExplorerModelBuilder",
    "id": "/EvoSuiteBenchmark/original/63_objectexplorer/src/main/java/de/paragon/explorer/model/ExplorerModelBuilder_2Test.java",
    "test_prompt": "// ExplorerModelBuilder_2Test.java\npackage de.paragon.explorer.model;\n\nimport de.paragon.explorer.figure.ExplorerFigure;\nimport de.paragon.explorer.figure.ExplorerFigureBuilder;\nimport de.paragon.explorer.figure.ListBoxFigure;\nimport de.paragon.explorer.figure.TextBoxFigure;\nimport de.paragon.explorer.gui.ExplorerDrawingPanel;\nimport de.paragon.explorer.util.ExplorerManager;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExplorerModelBuilder}.\n* It contains ten unit test cases for the {@link ExplorerModelBuilder#createNewExplorerModelWithFigure()} method.\n*/\nclass ExplorerModelBuilder_2Test {",
    "method_signature": "createNewExplorerModelWithFigure()",
    "suffix": "2"
  }
]