[
{
    "id": "cmpl-6wd9SpTYX0ctmNMg27jYTwJKaHvaW",
    "object": "text_completion",
    "created": 1679431542,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test of loginToGoogleAppEngine method, of class LogonHelper.\n\t* It tests the case when the userid is null.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_1() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine\");\n\t\tString userid = null;\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of loginToGoogleAppEngine method, of class LogonHelper.\n\t* It tests the case when the userid is empty.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_2() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of loginToGoogleAppEngine method, of class LogonHelper.\n\t* It tests the case when the password is null.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_3() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine\");\n\t\tString userid = \"\";\n\t\tString password = null;\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of loginToGoogleAppEngine method, of class LogonHelper.\n\t* It tests the case when the password is empty.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_4() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of loginToGoogleAppEngine method, of class LogonHelper.\n\t* It tests the case when the source is null.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_5() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = null;\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of loginToGoogleAppEngine method, of class LogonHelper.\n\t* It tests the case when the source is empty.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_6() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of loginToGoogleAppEngine method, of class LogonHelper.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_7() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of loginToGoogleAppEngine method, of class LogonHelper.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_8() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of loginToGoogleAppEngine method, of class LogonHelper.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_9() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t* Test of loginToGoogleAppEngine method, of class LogonHelper.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_10() {\n\t\tSystem.out.println(\"loginToGoogleAppEngine\");\n\t\tString userid = \"\";\n\t\tString password = \"\";\n\t\tString source = \"\";\n\t\tString expResult = \"\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 1264,
        "completion_tokens": 1454,
        "total_tokens": 2718
    },
    "time_taken": 46.31619095802307,
    "prompt_id": "/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/LogonHelper.java",
    "original_code": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line != null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n",
    "test_prompt": "// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains ten unit test cases for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {"
},
{
    "id": "cmpl-6wdAVxRtGhlBoUIrSLScNIXMzZp0D",
    "object": "text_completion",
    "created": 1679431607,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with valid userid, password, source and application.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString application = \"application\";\n\t\tString authCookie = \"authCookie\";\n\t\t\n\t\tLogonHelper logonHelper = new LogonHelper();\n\t\tLogonHelper spyLogonHelper = spy(logonHelper);\n\t\tdoReturn(authCookie).when(spyLogonHelper).loginToGoogleAppEngine(userid, password, source);\n\t\t\n\t\tManager manager = new Manager();\n\t\tManager spyManager = spy(manager);\n\t\tdoReturn(spyLogonHelper).when(spyManager).getLogonHelper();\n\t\t\n\t\tDefaultHttpClient client = new DefaultHttpClient();\n\t\tDefaultHttpClient spyClient = spy(client);\n\t\tdoReturn(spyClient).when(spyManager).getHttpClient();\n\t\t\n\t\tHttpGet get = new HttpGet(\"https://appengine.google.com/dashboard/quotadetails?&app_id=\" + application);\n\t\tHttpGet spyGet = spy(get);\n\t\tdoReturn(spyGet).when(spyManager).getHttpGet(authCookie, application);\n\t\t\n\t\tHttpResponse response = new HttpResponse();\n\t\tHttpResponse spyResponse = spy(response);\n\t\tdoReturn(spyResponse).when(spyClient).execute(spyGet);\n\t\t\n\t\tQuotaDetails quotaDetails = new QuotaDetails();\n\t\tQuotaDetailsParser quotaDetailsParser = new QuotaDetailsParser();\n\t\tQuotaDetailsParser spyQuotaDetailsParser = spy(quotaDetailsParser);\n\t\tdoReturn(quotaDetails).when(spyQuotaDetailsParser).parse(spyResponse.getEntity().getContent());\n\t\t\n\t\tdoReturn(spyQuotaDetailsParser).when(spyManager).getQuotaDetailsParser();\n\t\t\n\t\tQuotaDetails result = spyManager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t\n\t\tassertEquals(quotaDetails, result);\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with null userid.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithNullUserid() throws Exception {\n\t\tString userid = null;\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString application = \"application\";\n\t\t\n\t\tManager manager = new Manager();\n\t\t\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tmanager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with empty userid.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithEmptyUserid() throws Exception {\n\t\tString userid = \"\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString application = \"application\";\n\t\t\n\t\tManager manager = new Manager();\n\t\t\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tmanager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with null password.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithNullPassword() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = null;\n\t\tString source = \"source\";\n\t\tString application = \"application\";\n\t\t\n\t\tManager manager = new Manager();\n\t\t\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tmanager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with empty password.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithEmptyPassword() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"\";\n\t\tString source = \"source\";\n\t\tString application = \"application\";\n\t\t\n\t\tManager manager = new Manager();\n\t\t\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tmanager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with null source.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithNullSource() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = null;\n\t\tString application = \"application\";\n\t\t\n\t\tManager manager = new Manager();\n\t\t\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tmanager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with empty source.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithEmptySource() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"\";\n\t\tString application = \"application\";\n\t\t\n\t\tManager manager = new Manager();\n\t\t\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tmanager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with null application.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithNullApplication() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString application = null;\n\t\t\n\t\tManager manager = new Manager();\n\t\t\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tmanager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with empty application.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithEmptyApplication() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString application = \"\";\n\t\t\n\t\tManager manager = new Manager();\n\t\t\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tmanager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with invalid userid.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithInvalidUserid() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString application = \"application\";\n\t\tString authCookie = \"authCookie\";\n\t\t\n\t\tLogonHelper logonHelper = new LogonHelper();\n\t\tLogonHelper spyLogonHelper = spy(logonHelper);\n\t\tdoThrow(new Exception()).when(spyLogonHelper).loginToGoogleAppEngine(userid, password, source);\n\t\t\n\t\tManager manager = new Manager();\n\t\tManager spyManager = spy(manager);\n\t\tdoReturn(spyLogonHelper).when(spyManager).getLogonHelper();\n\t\t\n\t\tassertThrows(Exception.class, () -> {\n\t\t\tspyManager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with invalid password.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithInvalidPassword() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString application = \"application\";\n\t\tString authCookie = \"authCookie\";\n\t\t\n\t\tLogonHelper logonHelper = new LogonHelper();\n\t\tLogonHelper spyLogonHelper = spy(logonHelper);\n\t\tdoThrow(new Exception()).when(spyLogonHelper).loginToGoogleAppEngine(userid, password, source);\n\t\t\n\t\tManager manager = new Manager();\n\t\tManager spyManager = spy(manager);\n\t\tdoReturn(spyLogonHelper).when(spyManager).getLogonHelper();\n\t\t\n\t\tassertThrows(Exception.class, () -> {\n\t\t\tspyManager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with invalid source.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithInvalidSource() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString application = \"application\";\n\t\tString authCookie = \"authCookie\";\n\t\t\n\t\tLogonHelper logonHelper = new LogonHelper();\n\t\tLogonHelper spyLogonHelper = spy(logonHelper);\n\t\tdoThrow(new Exception()).when(spyLogonHelper).loginToGoogleAppEngine(userid, password, source);\n\t\t\n\t\tManager manager = new Manager();\n\t\tManager spyManager = spy(manager);\n\t\tdoReturn(spyLogonHelper).when(spyManager).getLogonHelper();\n\t\t\n\t\tassertThrows(Exception.class, () -> {\n\t\t\tspyManager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the method with invalid application.\n\t * @throws Exception in case of failure\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetailsWithInvalidApplication() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString application = \"application\";\n\t\tString authCookie = \"authCookie\";\n\t\t\n\t\tLogonHelper logonHelper = new LogonHelper();\n\t\tLogonHelper spyLogonHelper = spy(logonHelper);\n\t\tdoReturn(authCookie).when(spyLogonHelper).loginToGoogleAppEngine(userid, password, source);\n\t\t\n\t\tManager manager = new Manager();\n\t\tManager spyManager = spy(manager);\n\t\tdoReturn(spyLogonHelper).when(spyManager).getLogonHelper();\n\t\t\n\t\tDefaultHttpClient client = new DefaultHttpClient();\n\t\tDefaultHttpClient spyClient = spy(client);\n\t\tdoReturn(spyClient).when(spyManager).getHttpClient();\n\t\t\n\t\tHttpGet get = new HttpGet(\"https://appengine.google.com/dashboard/quotadetails?&app_id=\" + application);\n\t\tHttpGet spyGet = spy(get);\n\t\tdoReturn(spyGet).when(spyManager).getHttpGet(authCookie, application);\n\t\t\n\t\tHttpResponse response = new HttpResponse();\n\t\tHttpResponse spyResponse = spy(response);\n\t\tdoReturn(spyResponse).when(spyClient).execute(spyGet);\n\t\t\n\t\tQuotaDetails quotaDetails = new QuotaDetails();\n\t\tQuotaDetailsParser quotaDetailsParser = new QuotaDetailsParser();\n\t\tQuotaDetailsParser spyQuotaDetailsParser = spy(quotaDetailsParser);\n\t\tdoThrow(new Exception()).when(spyQuotaDetailsParser).parse(spyResponse.getEntity().getContent());\n\t\t\n\t\tdoReturn(spyQuotaDetailsParser).when(spyManager).getQuotaDetailsParser();\n\t\t\n\t\tassertThrows(Exception.class, () -> {\n\t\t\tspyManager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t});\n\t}\n}\n\n// QuotaDetails.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport java.util.Date;\n\n/**\n * Quota details of application deployed in Google App Engine.\n *\n * @author Alois Belaska\n */\npublic class QuotaDetails {\n\n    private Date startTime;\n    private Date endTime;\n    private int totalRequests;\n    private int totalBandwidth;\n    private int totalErrors;\n    private int totalCPU;\n    private int totalDatastoreRead;\n    private int totalDatastoreWrite;\n    private int totalDatastoreSmallRead;\n    private int totalDatastoreSmallWrite;\n    private int totalDatastoreLargeRead;\n    private int totalDatastoreLargeWrite;\n    private int totalDatastoreCost;\n    private int totalMemcacheRead;\n    private int totalMemcacheWrite;\n    private int totalMemcacheCost;\n    private int totalBlobstoreRead;\n    private int totalBlobstoreWrite;\n    private int totalBlobstoreCost;\n    private int totalTaskqueuePush;\n    private int totalTaskqueueLeased;\n    private int totalTaskqueueCost;\n    private int totalMailInbound;\n    private int totalMailOutbound;\n    private int totalMailCost;\n    private int totalXMPPInbound;\n    private int totalXMPPOutbound;\n    private int totalXMPPCost;\n    private int totalChannelConnect;\n    private int totalChannelMessage;\n    private int totalChannelCost;\n    private int totalURLFetch;\n    private int totalURLFetchCost;\n    private int totalURLFetchBandwidth;\n    private int totalImageAPI;\n    private int totalImageAPICost;\n    private int totalImageAPIBandwidth;\n    private int totalImageAPICacheHit;\n    private int totalImageAPICacheMiss;\n    private int totalImageAPICacheCost;\n    private int totalImageAPICacheBandwidth;\n    private int totalLogs;\n    private int totalLogsCost;\n    private int totalLogsBandwidth;\n    private int totalDatastoreEntities;\n    private int totalDatastoreEntityGroups;\n    private int totalDatastoreEntityGroupsCost;\n    private int totalDatastoreEntityGroupsWrite;\n    private int",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 568,
        "completion_tokens": 4000,
        "total_tokens": 4568
    },
    "time_taken": 126.23884296417236,
    "prompt_id": "/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/appengine/Manager.java",
    "original_code": "// Manager.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\n\n/**\n * Google App Engine application manager.\n *\n * @author Alois Belaska\n */\npublic class Manager {\n\n    /**\n     * Retrieve quota details of application deployed in Google App Engine.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            gmail account password\n     * @param source\n     *            name of application requesting quota details\n     * @param application\n     *            appspot application name\n     * @return quota details of application\n     * @throws Exception\n     *             in case of failure\n     */\n    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception {\n        String authCookie = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            HttpGet get = new HttpGet(\"https://appengine.google.com/dashboard/quotadetails?&app_id=\" + application);\n            get.setHeader(\"Cookie\", \"ACSID=\" + authCookie);\n            HttpResponse response = client.execute(get);\n            return new QuotaDetailsParser().parse(response.getEntity().getContent());\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n",
    "test_prompt": "// ManagerTest.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Manager}.\n* It contains ten unit test cases for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n*/\nclass ManagerTest {"
}
]