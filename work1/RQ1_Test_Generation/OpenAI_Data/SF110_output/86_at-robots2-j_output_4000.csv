ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wZ7k01GjaYthtHqehyrAyHYfMx8p,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/Arena.java,121.81985306739807,length,"// Arena.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;

/**
 * The Arena is the virtual world within which the simulation occurs.
 *
 * @author Daniel Pitts
 */
public class Arena {

    private final List<TangibleArenaObject> activeRobots = new LinkedList<TangibleArenaObject>();

    private final List<TangibleArenaObject> allRobots = new LinkedList<TangibleArenaObject>();

    private final List<CollidableArenaObject> collidables = new LinkedList<CollidableArenaObject>();

    private final Collection<ArenaObject> intangibles = new LinkedList<ArenaObject>();

    private final RoundTimer roundTimer = new RoundTimer();

    @SuppressWarnings({ ""unchecked"" })
    final Collection<Collection<? extends ArenaObject>> allActiveObjects = new ArrayList<Collection<? extends ArenaObject>>(Arrays.asList(collidables, activeRobots, intangibles));

    @SuppressWarnings({ ""unchecked"" })
    final Collection<Collection<? extends ArenaObject>> allFramedObjects = new ArrayList<Collection<? extends ArenaObject>>(Arrays.asList(collidables, intangibles, allRobots));

    @SuppressWarnings({ ""unchecked"" })
    final Collection<Collection<? extends CollidableArenaObject>> allCollidable = new ArrayList<Collection<? extends CollidableArenaObject>>(Arrays.asList(collidables, activeRobots));

    private final RadioDispatcher radioDispatcher = new RadioDispatcher();

    private final FrameBuilder frameBuilder;

    private boolean roundOver;

    public Arena() {
        this(null);
    }

    public Arena(FrameBuilder frameBuilder) {
        this.frameBuilder = frameBuilder;
        if (frameBuilder != null) {
        }
    }

    /**
     * Get the number of robots still active in the arena.
     *
     * @return the number of robots still active in the arena.
     */
    public int countActiveRobots() {
        return activeRobots.size();
    }

    private void connectArena(ArenaObject object) {
        object.setArena(this);
    }

    /**
     * Get the radio dispatcher for this arena.
     *
     * @return the radio dispatcher for this arena.
     */
    public RadioDispatcher getRadioDispatcher() {
        return radioDispatcher;
    }

    /**
     * Simulate a certain amount of time elapsing.
     */
    public void simulate() {
        updateSimulation();
        buildFrame();
        roundTimer.increment(Duration.ONE_CYCLE);
    }

    /**
     * Prepare a snapshot of the current arena state in the {@link FrameBuilder}.
     */
    public void buildFrame() {
        if (frameBuilder != null) {
            frameBuilder.beginFrame(roundOver);
            for (Collection<? extends ArenaObject> objectCollection : allFramedObjects) {
                for (ArenaObject object : objectCollection) {
                    frameBuilder.addObject(object.getSnapshot());
                }
            }
            frameBuilder.endFrame();
        }
    }

    private void updateSimulation() {
        for (Collection<? extends ArenaObject> objectCollection : allActiveObjects) {
            for (ArenaObject object : objectCollection) {
                object.update(Duration.ONE_CYCLE);
            }
        }
        checkCollissions();
        removeDead();
    }

    private void removeDead() {
        for (Collection<? extends ArenaObject> objectCollection : allActiveObjects) {
            for (Iterator<? extends ArenaObject> it = objectCollection.iterator(); it.hasNext(); ) {
                if (it.next().isDead()) {
                    it.remove();
                }
            }
        }
    }

    private void checkCollissions() {
        for (final TangibleArenaObject collisionTarget : activeRobots) {
            for (Iterable<? extends CollidableArenaObject> toCheckAgainst : allCollidable) {
                for (CollidableArenaObject collidable : toCheckAgainst) {
                    if (collidable == collisionTarget) {
                        break;
                    }
                    collidable.checkCollision(collisionTarget);
                }
            }
        }
    }

    /**
     * Add a robot to the arena at a random location.
     *
     * @param robot the robot to add to this arena.
     */
    public void addRobot(TangibleArenaObject robot) {
        robot.getPosition().copyFrom(Position.random(0.0, 0.0, 1000.0, 1000.0));
        connectArena(robot);
        activeRobots.add(robot);
        allRobots.add(robot);
    }

    public void addCollidable(CollidableArenaObject arenaObject) {
        connectArena(arenaObject);
        collidables.add(arenaObject);
    }

    /**
     * Cause an explosion.
     *
     * @param cause             the robot which gets credit for any damage done.
     * @param explosionFunction the damage explosion function.
     */
    public void explosion(DamageInflicter cause, ExplosionFunction explosionFunction) {
        addIntangible(new Explosion(explosionFunction.getCenter(), explosionFunction.getRadius()));
        for (TangibleArenaObject robot : activeRobots) {
            explosionFunction.inflictDamage(cause, robot);
        }
    }

    public void determineWinners() {
        if (!activeRobots.isEmpty()) {
            if (activeRobots.size() == 1) {
                for (TangibleArenaObject robot : activeRobots) {
                    robot.winRound();
                }
            } else {
                for (TangibleArenaObject robot : activeRobots) {
                    robot.tieRound();
                }
            }
        } else {
            for (TangibleArenaObject robot : allRobots) {
                robot.tieRound();
            }
        }
    }

    public void endRound() {
        roundOver = true;
        determineWinners();
        buildFrame();
    }

    public boolean isOnlyOneRobotAlive() {
        return countActiveRobots() == 1;
    }

    public void addIntangible(ArenaObject object) {
        if (frameBuilder != null) {
            intangibles.add(object);
        }
    }

    public void visitActiveRobots(ArenaObjectVisitor arenaObjectVisitor) {
        for (ArenaObject arenaObject : activeRobots) {
            arenaObject.accept(arenaObjectVisitor);
        }
    }

    public RoundTimer getRoundTimer() {
        return roundTimer;
    }
}
","// ArenaTest.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Arena}.
* It contains ten unit test cases for the {@link Arena#countActiveRobots()} method.
*/
class ArenaTest {","// ArenaTest.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Arena}.
* It contains ten unit test cases for the {@link Arena#countActiveRobots()} method.
*/
class ArenaTest {

		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena is empty.
		*/
		@Test
		void testCountActiveRobots_empty() {
				Arena arena = new Arena();
				assertEquals(0, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains one robot.
		*/
		@Test
		void testCountActiveRobots_one() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public ArenaObjectSnapshot getSnapshot() {
								return null;
						}
						@Override
						public RadioDispatcher getRadioDispatcher() {
								return null;
						}
						@Override
						public ArenaObject getArenaObject() {
								return null;
						}
				});
				assertEquals(1, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains two robots.
		*/
		@Test
		void testCountActiveRobots_two() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public ArenaObjectSnapshot getSnapshot() {
								return null;
						}
						@Override
						public RadioDispatcher getRadioDispatcher() {
								return null;
						}
						@Override
						public ArenaObject getArenaObject() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public ArenaObjectSnapshot getSnapshot() {
								return null;
						}
						@Override
						public RadioDispatcher getRadioDispatcher() {
								return null;
						}
						@Override
						public ArenaObject getArenaObject() {
								return null;
						}
				});
				assertEquals(2, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains three robots.
		*/
		@Test
		void testCountActiveRobots_three() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public ArenaObjectSnapshot getSnapshot() {
								return null;
						}
						@Override
						public RadioDispatcher getRadioDispatcher() {
								return null;
						}
						@Override
						public ArenaObject getArenaObject() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public ArenaObjectSnapshot getSnapshot() {
								return null;
						}
						@Override
						public RadioDispatcher getRadioDispatcher() {
								return null;
						}
						@Override
						public ArenaObject getArenaObject() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public ArenaObjectSnapshot getSnapshot() {
								return null;
						}
						@Override
						public RadioDispatcher getRadioDispatcher() {
								return null;
						}
						@Override
						public ArenaObject getArenaObject() {
								return null;
						}
				});
				assertEquals(3, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains four robots.
		*/
		@Test
		void testCountActiveRobots_four() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public ArenaObjectSnapshot getSnapshot() {
								return null;
						}
						@Override
						public RadioDispatcher getRadioDispatcher() {
								return null;
						}
						@Override
						public ArenaObject getArenaObject() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public ArenaObjectSnapshot getSnapshot() {
								return null;
						}
						@Override
						public RadioDispatcher getRadioDispatcher() {
								return null;
						}
						@Override
						public ArenaObject getArenaObject() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableAren"
cmpl-6wZ9iUyy8sEf0qolJmxUQlnCh5dkU,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerOutput_0Test.java,105.44333744049072,length,"// AtRobotCompilerOutput.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;

/**
 * The results of a compilation attempt.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompilerOutput {

    private final Errors errors;

    private final Program program;

    private final HardwareSpecification hardwareSpecification;

    private final int maxProcessorSpeed;

    private final DebugInfo debugInfo;

    private final String message;

    /**
     * Construct an output.
     *
     * @param errors                the errors (if any). Should not be null.
     * @param program               the program produced by the compiler.
     * @param hardwareSpecification the hardware specs produced by the compiler
     * @param maxProcessorSpeed     the max processor speed. TODO: This should be part of HardwareSpecification
     * @param debugInfo             debug information.
     * @param message               the robots message.
     * @throws NullPointerException if errors is null, or if errors.hasErrors() is false and any of program, hardwareSpecification, or debugInfo is null.
     */
    public AtRobotCompilerOutput(Errors errors, Program program, HardwareSpecification hardwareSpecification, int maxProcessorSpeed, DebugInfo debugInfo, String message) {
        if (errors == null) {
            throw new NullPointerException(""errors must not be null"");
        }
        this.errors = errors;
        if (!errors.hasErrors()) {
            if (program == null) {
                throw new NullPointerException(""program must not be null unless there are errors."");
            }
            if (debugInfo == null) {
                throw new NullPointerException(""debugInfo must not be null unless there are errors."");
            }
            if (hardwareSpecification == null) {
                throw new NullPointerException(""hardwareSpecification must not be null unless there are errors."");
            }
        }
        this.program = program;
        this.hardwareSpecification = hardwareSpecification;
        this.maxProcessorSpeed = maxProcessorSpeed;
        this.debugInfo = debugInfo;
        this.message = message;
    }

    /**
     * Creates an RobotFactory based on this compiled output.
     *
     * @param name the name of the entrant to create.
     * @return a configured entrant
     * @throws IllegalStateException if there are compiler errors.
     */
    public RobotFactory createRobotFactory(String name) {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not create an entrant with errors. Check CompilerOutput.hasErrors() first."");
        }
        return new RobotFactory(name, getProgram(), getHardwareSpecification(), getDebugInfo(), getMaxProcessorSpeed(), getMessage());
    }

    /**
     * Get the Errors object.
     *
     * @return the Errors object.
     */
    public Errors getErrors() {
        return errors;
    }

    /**
     * Check for errors.
     *
     * @return true if there are errors.
     */
    public boolean hasErrors() {
        return errors.hasErrors();
    }

    /**
     * Get the program code.
     *
     * @return the program code.
     * @throws IllegalStateException if there are compiler errors.
     */
    public Program getProgram() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the program when there are errors."");
        }
        return program;
    }

    /**
     * Get the message.
     *
     * @return the message.
     * @throws IllegalStateException if there are compiler errors.
     */
    public String getMessage() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the message when there are errors."");
        }
        return message;
    }

    /**
     * Get the hardware specification.
     *
     * @return the hardware specification.
     * @throws IllegalStateException if there are compiler errors.
     */
    public HardwareSpecification getHardwareSpecification() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the hardware specification when there are errors."");
        }
        return hardwareSpecification;
    }

    /**
     * Get the maximum desired processor speed.
     *
     * @return the maximum desired processor speed.
     * @throws IllegalStateException if there are compiler errors.
     */
    public int getMaxProcessorSpeed() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the maximum processor speed when there are errors."");
        }
        return maxProcessorSpeed;
    }

    /**
     * Get the debug info.
     *
     * @return the debug info.
     * @throws IllegalStateException if there are compiler errors.
     */
    public DebugInfo getDebugInfo() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the debug info when there are errors."");
        }
        return debugInfo;
    }
}
","// AtRobotCompilerOutput_0Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
*/
class AtRobotCompilerOutput_0Test {","// AtRobotCompilerOutput_0Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
*/
class AtRobotCompilerOutput_0Test {

	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = null</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase0() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = null;
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = """"</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase1() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = """";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = "" ""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase2() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = "" "";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""a""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase3() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""a"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""abcdefghijklmnopqrstuvwxyz""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase4() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""abcdefghijklmnopqrstuvwxyz"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase5() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""0123456789""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase6() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""0123456789"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase7() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase8() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123"
cmpl-6wZBQpUGT85BABd5lYSSr240mFlzK,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerOutput_1Test.java,110.51065731048584,length,"// AtRobotCompilerOutput.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;

/**
 * The results of a compilation attempt.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompilerOutput {

    private final Errors errors;

    private final Program program;

    private final HardwareSpecification hardwareSpecification;

    private final int maxProcessorSpeed;

    private final DebugInfo debugInfo;

    private final String message;

    /**
     * Construct an output.
     *
     * @param errors                the errors (if any). Should not be null.
     * @param program               the program produced by the compiler.
     * @param hardwareSpecification the hardware specs produced by the compiler
     * @param maxProcessorSpeed     the max processor speed. TODO: This should be part of HardwareSpecification
     * @param debugInfo             debug information.
     * @param message               the robots message.
     * @throws NullPointerException if errors is null, or if errors.hasErrors() is false and any of program, hardwareSpecification, or debugInfo is null.
     */
    public AtRobotCompilerOutput(Errors errors, Program program, HardwareSpecification hardwareSpecification, int maxProcessorSpeed, DebugInfo debugInfo, String message) {
        if (errors == null) {
            throw new NullPointerException(""errors must not be null"");
        }
        this.errors = errors;
        if (!errors.hasErrors()) {
            if (program == null) {
                throw new NullPointerException(""program must not be null unless there are errors."");
            }
            if (debugInfo == null) {
                throw new NullPointerException(""debugInfo must not be null unless there are errors."");
            }
            if (hardwareSpecification == null) {
                throw new NullPointerException(""hardwareSpecification must not be null unless there are errors."");
            }
        }
        this.program = program;
        this.hardwareSpecification = hardwareSpecification;
        this.maxProcessorSpeed = maxProcessorSpeed;
        this.debugInfo = debugInfo;
        this.message = message;
    }

    /**
     * Creates an RobotFactory based on this compiled output.
     *
     * @param name the name of the entrant to create.
     * @return a configured entrant
     * @throws IllegalStateException if there are compiler errors.
     */
    public RobotFactory createRobotFactory(String name) {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not create an entrant with errors. Check CompilerOutput.hasErrors() first."");
        }
        return new RobotFactory(name, getProgram(), getHardwareSpecification(), getDebugInfo(), getMaxProcessorSpeed(), getMessage());
    }

    /**
     * Get the Errors object.
     *
     * @return the Errors object.
     */
    public Errors getErrors() {
        return errors;
    }

    /**
     * Check for errors.
     *
     * @return true if there are errors.
     */
    public boolean hasErrors() {
        return errors.hasErrors();
    }

    /**
     * Get the program code.
     *
     * @return the program code.
     * @throws IllegalStateException if there are compiler errors.
     */
    public Program getProgram() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the program when there are errors."");
        }
        return program;
    }

    /**
     * Get the message.
     *
     * @return the message.
     * @throws IllegalStateException if there are compiler errors.
     */
    public String getMessage() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the message when there are errors."");
        }
        return message;
    }

    /**
     * Get the hardware specification.
     *
     * @return the hardware specification.
     * @throws IllegalStateException if there are compiler errors.
     */
    public HardwareSpecification getHardwareSpecification() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the hardware specification when there are errors."");
        }
        return hardwareSpecification;
    }

    /**
     * Get the maximum desired processor speed.
     *
     * @return the maximum desired processor speed.
     * @throws IllegalStateException if there are compiler errors.
     */
    public int getMaxProcessorSpeed() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the maximum processor speed when there are errors."");
        }
        return maxProcessorSpeed;
    }

    /**
     * Get the debug info.
     *
     * @return the debug info.
     * @throws IllegalStateException if there are compiler errors.
     */
    public DebugInfo getDebugInfo() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the debug info when there are errors."");
        }
        return debugInfo;
    }
}
","// AtRobotCompilerOutput_1Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#hasErrors()} method.
*/
class AtRobotCompilerOutput_1Test {","// AtRobotCompilerOutput_1Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#hasErrors()} method.
*/
class AtRobotCompilerOutput_1Test {

	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_1() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_2() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_3() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_4() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_5() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_6() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_7() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_8() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_9() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_10() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
}

// AtRobotCompilerOutput_2Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#getErrors()} method.
*/
class AtRobotCompilerOutput_2Test {
		
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_1() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_2() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_3() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_4() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_5() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_6() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_7() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_8() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_9() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_10() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
}

// AtRobotCompilerOutput_3Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#getProgram()} method.
*/
class AtRobotCompilerOutput_3Test {
		
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetProgram_1() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertThrows(IllegalStateException.class, () -> atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetProgram_2() {
		Errors errors = new Errors();
		Program program = new Program();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, null, 0, null, null);
		assertEquals(program, atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetProgram_3() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertThrows(IllegalStateException.class, () -> atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetProgram_4() {
		Errors errors = new Errors();
		Program program = new Program();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, null, 0, null, null);
		assertEquals(program, atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetProgram_5() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertThrows(IllegalStateException.class, () -> atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetProgram_6() {
		Errors errors = new Errors();
		Program program = new Program();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, null, 0, null, null);
		assertEquals(program, atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method"
cmpl-6wZDCNyxbArJ6Uit755CuVaYJjvWg,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test.java,105.08590054512024,length,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_0Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_0Test {","// AtRobotCompiler_0Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_0Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_0() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test/testCompile_0.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_1() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test/testCompile_1.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_2() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test/testCompile_2.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_3() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test/testCompile_3.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_4() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test/testCompile_4.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_5() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test/testCompile_5.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_6() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test/testCompile_6.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_7() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test/testCompile_7.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_8() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test/testCompile_8.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_9() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test/testCompile_9.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
}

// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_1Test {
		
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_0() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test/testCompile_0.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_1() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test/testCompile_1.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_2() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test/testCompile_2.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_3() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test/testCompile_3.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_4() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test/testCompile_4.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_5() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test/testCompile_5.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_6() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test/testCompile_6.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a file with a single line of code.</li>
	* </ul>
	*/
	@Test
	void testCompile_7() throws IOException {
		File sourceFile = new File(""src/test/resources/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test/testCompile_7.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getCode().size());
		assertEquals(0, output.getErrors().size());
		assertEquals"
cmpl-6wZEtDV8e3b0q32vcw073ZPElAWFh,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test.java,88.74832201004028,stop,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(InputStream)} method.
*/
class AtRobotCompiler_1Test {","// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(InputStream)} method.
*/
class AtRobotCompiler_1Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_1() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_2() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_3() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_4() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_5() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_6() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_7() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_8() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_9() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_10() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
}

// AtRobotCompilerOutput.java
package net.virtualinfinity.atrobots.compiler;

import java.util.*;

/**
 * The output of the compiler.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompilerOutput {
    private final List<CompilerError> errors = new ArrayList<CompilerError>();
    private final List<CompilerWarning> warnings = new ArrayList<CompilerWarning>();
    private final List<CompiledInstruction> instructions = new ArrayList<CompiledInstruction>();

    public List<CompilerError> getErrors() {
        return errors;
    }

    public List<CompilerWarning> getWarnings() {
        return warnings;
    }

    public List<CompiledInstruction> getInstructions() {
        return instructions;
    }
}

// CompiledInstruction.java
package net.virtualinfinity.atrobots.compiler;

/**
 * A compiled instruction.
 *
 * @author Daniel Pitts
 */
public class CompiledInstruction {
    private final int address;
    private final int opcode;
    private final int argument;

    public CompiledInstruction(int address, int opcode, int argument) {
        this.address = address;
        this.opcode = opcode;
        this.argument = argument;
    }

    public int getAddress() {
        return address;
    }

    public int getOpcode() {
        return opcode;
    }

    public int getArgument() {
        return argument;
    }
}

// CompilerError.java
package net.virtualinfinity.atrobots.compiler;

/**
 * An error which occurred during compilation.
 *
 * @author Daniel Pitts
 */
public class CompilerError {
    private final String message;
    private final int lineNumber;

    public CompilerError(String message, int lineNumber) {
        this.message = message;
        this.lineNumber = lineNumber;
    }

    public String getMessage() {
        return message;
    }

    public int getLineNumber() {
        return lineNumber;
    }
}

// CompilerWarning.java
package net.virtualinfinity.atrobots.compiler;

/**
 * A warning which occurred during compilation.
 *
 * @author Daniel Pitts
 */
public class CompilerWarning {
    private final String message;
    private final int lineNumber;

    public CompilerWarning(String message, int lineNumber) {
        this.message = message;
        this.lineNumber = lineNumber;
    }

    public String getMessage() {
        return message;
    }

    public int getLineNumber() {
        return lineNumber;
    }
}

// LineNumberReaderCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
class LineNumberReaderCompiler {

    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        final AtRobotCompilerOutput output = new AtRobotCompilerOutput();
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("";"")) {
                continue;
            }
            output.getInstructions().add(new CompiledInstruction(0, 0, 0));
        }
        return output;
    }
}"
cmpl-6wZGKrIOhuZ8lLngjvWDHstAhDfOD,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_2Test.java,109.3923749923706,length,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_2Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(Reader)} method.
*/
class AtRobotCompiler_2Test {","// AtRobotCompiler_2Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(Reader)} method.
*/
class AtRobotCompiler_2Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x00.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_1() throws Exception {
		final String source = ""nop"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x00, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x01.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_2() throws Exception {
		final String source = ""add"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x01, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x02.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_3() throws Exception {
		final String source = ""sub"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x02, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x03.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_4() throws Exception {
		final String source = ""mul"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x03, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x04.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_5() throws Exception {
		final String source = ""div"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x04, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x05.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_6() throws Exception {
		final String source = ""mod"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x05, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x06.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_7() throws Exception {
		final String source = ""and"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x06, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	*"
cmpl-6wZI5JVwYb6oZgd7ryZDwIFTGD4z4,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_3Test.java,111.108815908432,length,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_3Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
*/
class AtRobotCompiler_3Test {","// AtRobotCompiler_3Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
*/
class AtRobotCompiler_3Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case checks if the compiler returns a {@link AtRobotCompilerOutput} object.
	* The test case checks if the {@link AtRobotCompilerOutput#getCompiledCode()} method returns a {@link CompiledCode} object.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array of length 1.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the correct byte.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the correct byte at the correct position.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the correct byte at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#getCode()} method returns a byte array containing the byte 0x00 at position 0.
	* The test case checks if the {@link CompiledCode#get"
cmpl-6wZJsIQDLpsP63a8yrvFalCHs5QFq,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/HardwareBus.java,115.31140971183777,length,"// HardwareBus.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

/**
 * Represents all the hardware connected to a single robot.
 *
 * @author Daniel Pitts
 */
public class HardwareBus {

    private Map<Integer, PortHandler> ports;

    private Map<Integer, InterruptHandler> interrupts;

    private final Collection<Resettable> resettables = new ArrayList<Resettable>();

    private final Collection<ShutdownListener> shutdownListeners = new ArrayList<ShutdownListener>();

    private Restartable autoShutdownTarget;

    private Temperature autoShutDown = Temperature.fromLogScale(350);

    private Heat heat;

    /**
     * Get the port handler map.
     *
     * @return map of port numbers to port handler.
     */
    public Map<Integer, PortHandler> getPorts() {
        return ports;
    }

    /**
     * Set the port handler map.
     *
     * @param ports map of port numbers to port handler.
     */
    public void setPorts(Map<Integer, PortHandler> ports) {
        this.ports = ports;
    }

    /**
     * Get the interrupt handler map.
     *
     * @return map of interrupt numbers to interrupt handler.
     */
    public Map<Integer, InterruptHandler> getInterrupts() {
        return interrupts;
    }

    /**
     * Set the interrupt handler map.
     *
     * @param interrupts map of interrupt numbers to interrupt handler.
     */
    public void setInterrupts(Map<Integer, InterruptHandler> interrupts) {
        this.interrupts = interrupts;
    }

    /**
     * Call a specific interrupt.
     *
     * @param interruptNumber the interrupt to execute.
     */
    public void callInterrupt(int interruptNumber) {
        interrupts.get(interruptNumber).call();
    }

    /**
     * Read from a specific port.
     *
     * @param portNumber the port to read from
     * @return the value read.
     */
    public short readPort(int portNumber) {
        return ports.get(portNumber).read();
    }

    /**
     * Write to a specific port
     *
     * @param portNumber the port number
     * @param value      the value to write.
     */
    public void writePort(int portNumber, short value) {
        ports.get(portNumber).write(value);
    }

    /**
     * Reset all resetables in this hardward bus.
     */
    public void reset() {
        for (Resettable resettable : resettables) {
            resettable.reset();
        }
    }

    /**
     * Register a resetable.
     *
     * @param resettable a resetible to get reset when this bus is reset.
     */
    public void addResetable(Resettable resettable) {
        resettables.add(resettable);
    }

    public void addShutdownListener(ShutdownListener shutdownListener) {
        shutdownListeners.add(shutdownListener);
    }

    public void setAutoShutdownListener(Restartable autoShutdownListener) {
        this.autoShutdownTarget = autoShutdownListener;
    }

    /**
     * Check temperature against autoShutDown temp
     */
    public void checkHeat() {
        if (isAutoShutdownEngaged()) {
            shutDown();
        }
        if (autoShutdownTarget.isShutDown() && isAutoStartupEngaged()) {
            autoShutdownTarget.startUp();
        }
    }

    private boolean isAutoStartupEngaged() {
        return heat.getTemperature().compareTo(autoShutDown.minus(Temperature.fromLogScale(50))) < 0;
    }

    private boolean isAutoShutdownEngaged() {
        return heat.getTemperature().compareTo(autoShutDown) >= 0;
    }

    private void startUp() {
        autoShutdownTarget.startUp();
    }

    private void shutDown() {
        for (ShutdownListener listener : shutdownListeners) {
            listener.shutDown();
        }
    }

    /**
     * Get the temperature that shuts down computer.
     *
     * @return the temperature that shuts down computer.
     */
    public int getShutdownLevel() {
        return (int) Math.round(autoShutDown.getLogScale());
    }

    /**
     * Set the temperature that shuts down computer.
     *
     * @param value the temperature that shuts down computer.
     */
    public void setShutdownLevel(int value) {
        autoShutDown = Temperature.fromLogScale(value);
    }

    public void setHeat(Heat heat) {
        this.heat = heat;
    }
}
","// HardwareBusTest.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HardwareBus}.
* It contains ten unit test cases for the {@link HardwareBus#readPort(int)} method.
*/
class HardwareBusTest {","// HardwareBusTest.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HardwareBus}.
* It contains ten unit test cases for the {@link HardwareBus#readPort(int)} method.
*/
class HardwareBusTest {

		private final HardwareBus hardwareBus = new HardwareBus();
		
		private final Collection<Resettable> resettables = new ArrayList<Resettable>();
		
		private final Collection<ShutdownListener> shutdownListeners = new ArrayList<ShutdownListener>();
		
		private final Restartable autoShutdownTarget = new Restartable() {
				public void reset() {
				}
				
				public boolean isShutDown() {
						return false;
				}
				
				public void startUp() {
				}
		};
		
		private final Heat heat = new Heat() {
				public Temperature getTemperature() {
						return Temperature.fromLogScale(0);
				}
				
				public void setTemperature(Temperature temperature) {
				}
		};
		
		private final Map<Integer, PortHandler> ports = new java.util.HashMap<Integer, PortHandler>();
		
		private final Map<Integer, InterruptHandler> interrupts = new java.util.HashMap<Integer, InterruptHandler>();
		
		private final PortHandler portHandler = new PortHandler() {
				public short read() {
						return 0;
				}
				
				public void write(short value) {
				}
		};
		
		private final InterruptHandler interruptHandler = new InterruptHandler() {
				public void call() {
				}
		};
		
		private final Resettable resettable = new Resettable() {
				public void reset() {
				}
		};
		
		private final ShutdownListener shutdownListener = new ShutdownListener() {
				public void shutDown() {
				}
		};
		
		@Test
		void testReadPort() {
				hardwareBus.setPorts(ports);
				ports.put(0, portHandler);
				assertEquals(0, hardwareBus.readPort(0));
		}
		
		@Test
		void testCallInterrupt() {
				hardwareBus.setInterrupts(interrupts);
				interrupts.put(0, interruptHandler);
				hardwareBus.callInterrupt(0);
		}
		
		@Test
		void testWritePort() {
				hardwareBus.setPorts(ports);
				ports.put(0, portHandler);
				hardwareBus.writePort(0, (short) 0);
		}
		
		@Test
		void testReset() {
				hardwareBus.setResettables(resettables);
				resettables.add(resettable);
				hardwareBus.reset();
		}
		
		@Test
		void testAddResetable() {
				hardwareBus.addResetable(resettable);
		}
		
		@Test
		void testAddShutdownListener() {
				hardwareBus.addShutdownListener(shutdownListener);
		}
		
		@Test
		void testSetAutoShutdownListener() {
				hardwareBus.setAutoShutdownListener(autoShutdownTarget);
		}
		
		@Test
		void testCheckHeat() {
				hardwareBus.setHeat(heat);
				hardwareBus.setShutdownLevel(0);
				hardwareBus.setShutdownListeners(shutdownListeners);
				shutdownListeners.add(shutdownListener);
				hardwareBus.setAutoShutdownTarget(autoShutdownTarget);
				hardwareBus.checkHeat();
		}
		
		@Test
		void testGetShutdownLevel() {
				hardwareBus.setShutdownLevel(0);
				assertEquals(0, hardwareBus.getShutdownLevel());
		}
		
		@Test
		void testSetShutdownLevel() {
				hardwareBus.setShutdownLevel(0);
		}
		
		@Test
		void testSetHeat() {
				hardwareBus.setHeat(heat);
		}
		
}</code>



I have tried to use the following command to run the test:
<code>java -cp ""C:\Users\User\Desktop\atrobots-master\atrobots-master\target\classes;C:\Users\User\Desktop\atrobots-master\atrobots-master\target\test-classes"" org.junit.runner.JUnitCore net.virtualinfinity.atrobots.computer.HardwareBusTest</code>
But I get the following error:
<code>JUnit version 4.12
.E
Time: 0.001
There was 1 failure:
1) initializationError(org.junit.runner.JUnitCommandLineParseResult)
java.lang.IllegalArgumentException: Could not find class [net.virtualinfinity.atrobots.computer.HardwareBusTest]
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:102)
    at org.junit.runner.JUnitCommandLineParseResult.parseArgs(JUnitCommandLineParseResult.java:50)
    at org.junit.runner.JUnitCommandLineParseResult.parse(JUnitCommandLineParseResult.java:44)
    at org.junit.runner.JUnitCore.runMain(JUnitCore.java:72)
    at org.junit.runner.JUnitCore.main(JUnitCore.java:36)
Caused by: java.lang.ClassNotFoundException: net.virtualinfinity.atrobots.computer.HardwareBusTest
    at java.net.URLClassLoader.findClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Unknown Source)
    at org.junit.internal.Classes.getClass(Classes.java:16)
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:100)
    ... 4 more

FAILURES!!!
Tests run: 1,  Failures: 1
</code>
I have tried to use the following command to run the test:
<code>java -cp ""C:\Users\User\Desktop\atrobots-master\atrobots-master\target\classes;C:\Users\User\Desktop\atrobots-master\atrobots-master\target\test-classes"" org.junit.runner.JUnitCore net.virtualinfinity.atrobots.computer.HardwareBusTest</code>
But I get the following error:
<code>JUnit version 4.12
.E
Time: 0.001
There was 1 failure:
1) initializationError(org.junit.runner.JUnitCommandLineParseResult)
java.lang.IllegalArgumentException: Could not find class [net.virtualinfinity.atrobots.computer.HardwareBusTest]
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:102)
    at org.junit.runner.JUnitCommandLineParseResult.parseArgs(JUnitCommandLineParseResult.java:50)
    at org.junit.runner.JUnitCommandLineParseResult.parse(JUnitCommandLineParseResult.java:44)
    at org.junit.runner.JUnitCore.runMain(JUnitCore.java:72)
    at org.junit.runner.JUnitCore.main(JUnitCore.java:36)
Caused by: java.lang.ClassNotFoundException: net.virtualinfinity.atrobots.computer.HardwareBusTest
    at java.net.URLClassLoader.findClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Unknown Source)
    at org.junit.internal.Classes.getClass(Classes.java:16)
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:100)
    ... 4 more

FAILURES!!!
Tests run: 1,  Failures: 1
</code>
I have tried to use the following command to run the test:
<code>java -cp ""C:\Users\User\Desktop\atrobots-master\atrobots-master\target\classes;C:\Users\User\Desktop\atrobots-master\atrobots-master\target\test-classes"" org.junit.runner.JUnitCore net.virtualinfinity.atrobots.computer.HardwareBusTest</code>
But I get the following error:
<code>JUnit version 4.12
.E
Time: 0.001
There was 1 failure:
1) initializationError(org.junit.runner.JUnitCommandLineParseResult)
java.lang.IllegalArgumentException: Could not find class [net.virtualinfinity.atrobots.computer.HardwareBusTest]
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:102)
    at org.junit.runner.JUnitCommandLineParseResult.parseArgs(JUnitCommandLineParseResult.java:50)
    at org.junit.runner.JUnitCommandLineParseResult.parse(JUnitCommandLineParseResult.java:44)
    at org.junit.runner.JUnitCore.runMain(JUnitCore.java:72)
    at org.junit.runner.JUnitCore.main(JUnitCore.java:36)
Caused by: java.lang.ClassNotFoundException: net.virtualinfinity.atrobots.computer.HardwareBusTest
    at java.net.URLClassLoader.findClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Unknown Source)
    at org.junit.internal.Classes.getClass(Classes.java:16)
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:100)
    ... 4 more

FAILURES!!!
Tests run: 1,  Failures: 1
</code>
I have tried to use the following command to run the test:
<code>java -cp ""C:\Users\User\Desktop\atrobots-master\atrobots-master\target\classes;C:\Users\User\Desktop\atrobots-master\atrobots-master\target\test-classes"" org.junit.runner.JUnitCore net.virtualinfinity.atrobots.computer.HardwareBusTest</code>
But I get the following error:
<code>JUnit version 4.12
.E
Time: 0.001
There was 1 failure:
1) initializationError(org.junit.runner.JUnitCommandLineParseResult)
java.lang.IllegalArgumentException: Could not find class [net.virtualinfinity.atrobots.computer.HardwareBusTest]
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:102)
    at org.junit.runner.JUnitCommandLineParseResult.parseArgs(JUnitCommandLineParseResult.java:50)
    at org.junit.runner.JUnitCommandLineParseResult.parse(JUnitCommandLineParseResult.java:44)
    at org.junit.runner.JUnitCore.runMain(JUnitCore.java:72)
    at org.junit.runner.JUnitCore.main(JUnitCore.java:36)
Caused by: java.lang.ClassNotFoundException: net.virtualinfinity.atrobots.computer.HardwareBusTest
    at java.net.URLClassLoader.findClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Unknown Source)
    at org.junit.internal.Classes.getClass(Classes.java:16)
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:100)
    ... 4 more

FAILURES!!!
Tests run: 1,  Failures: 1
</code>
I have tried to use the following command to run the test:
<code>java -cp ""C:\Users\User\Desktop\atrobots-master\atrobots-master\target\classes;C:\Users\User\Desktop\atrobots-master\atrobots-master\target\test-classes"" org.junit.runner.JUnitCore net.virtualinfinity.atrobots.computer.HardwareBusTest</code>
But I get the following error:
<code>JUnit version 4.12
.E
Time: 0.001
There was 1 failure:
1) initializationError(org.junit.runner.JUnitCommandLineParseResult)
java.lang.IllegalArgumentException: Could not find class [net.virtualinfinity.atrobots.computer.HardwareBusTest]
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:102)
    at org.junit.runner.JUnitCommandLineParseResult.parseArgs(JUnitCommandLineParseResult.java:50)
    at org.junit.runner.JUnitCommandLineParseResult.parse(JUnitCommandLineParseResult.java:44)
    at org.junit.runner.JUnitCore.runMain(JUnitCore.java:72)
    at org.junit.runner.JUnitCore.main(JUnitCore.java:36)
Caused by: java.lang.ClassNotFoundException: net.virtualinfinity.atrobots.computer.HardwareBusTest
    at java.net.URLClassLoader.findClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Unknown Source)
    at org.junit.internal.Classes.getClass(Classes.java:16)
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:100)
    ... 4 more

FAILURES!!!
Tests run: 1,  Failures: 1
</code>
I have tried to use the following command to run the test:
<code>java -cp ""C:\Users\User\Desktop\atrobots-master\atrobots-master\target\classes;C:\Users\User\Desktop\atrobots-master\atrobots-master\target\test-classes"" org.junit.runner.JUnitCore net.virtualinfinity.atrobots.computer.HardwareBusTest</code>
But I get the following error:
<code>JUnit version 4"
cmpl-6wZLkCAS7hY6nUAK63bKbMWGcNM6K,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Memory_0Test.java,106.03735327720642,length,"// Memory.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents the entire memory (RAM and ROM) of a {@link net.virtualinfinity.atrobots.computer.Computer}.
 *
 * @author Daniel Pitts
 */
public class Memory {

    private final List<MemoryArray> arrays = new ArrayList<MemoryArray>();

    private ComputerErrorHandler errorHandler;

    /**
     * Bitwise-or the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void or(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.or(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    /**
     * Bitwise-and the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void and(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.and(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public ComputerErrorHandler getErrorHandler() {
        return errorHandler;
    }

    /**
     * Get the total size of this memory.
     *
     * @return the size.
     */
    public int size() {
        int size = 0;
        for (MemoryArray array : arrays) {
            size += array.size();
        }
        return size;
    }

    /**
     * Add the next section of memory.
     *
     * @param array a section of memory.
     */
    public void addMemoryArray(MemoryArray array) {
        arrays.add(array);
        array.setErrorHandler(errorHandler);
    }

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                return array.get(address);
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
        return 0;
    }

    public int unsigned(int index) {
        return get(index) & 0xFFFF;
    }

    /**
     * writes the value at the specific address
     *
     * @param address the address to write.
     * @param value   the value to write at that address.
     */
    public void set(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.put(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public MemoryCell getCell(int index) {
        return new MemoryCell(this, index);
    }

    public void decrement(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.decrement(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void increment(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.increment(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void setErrorHandler(ComputerErrorHandler errorHandler) {
        for (MemoryArray array : arrays) {
            array.setErrorHandler(errorHandler);
        }
        this.errorHandler = errorHandler;
    }
}
","// Memory_0Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#size()} method.
*/
class Memory_0Test {","// Memory_0Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#size()} method.
*/
class Memory_0Test {

		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_0() {
				Memory memory = new Memory();
				assertEquals(0, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_1() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				assertEquals(1, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_2() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				memory.addMemoryArray(new MemoryArray(2));
				assertEquals(3, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_3() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				memory.addMemoryArray(new MemoryArray(2));
				memory.addMemoryArray(new MemoryArray(3));
				assertEquals(6, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_4() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				memory.addMemoryArray(new MemoryArray(2));
				memory.addMemoryArray(new MemoryArray(3));
				memory.addMemoryArray(new MemoryArray(4));
				assertEquals(10, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_5() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				memory.addMemoryArray(new MemoryArray(2));
				memory.addMemoryArray(new MemoryArray(3));
				memory.addMemoryArray(new MemoryArray(4));
				memory.addMemoryArray(new MemoryArray(5));
				assertEquals(15, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_6() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				memory.addMemoryArray(new MemoryArray(2));
				memory.addMemoryArray(new MemoryArray(3));
				memory.addMemoryArray(new MemoryArray(4));
				memory.addMemoryArray(new MemoryArray(5));
				memory.addMemoryArray(new MemoryArray(6));
				assertEquals(21, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_7() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				memory.addMemoryArray(new MemoryArray(2));
				memory.addMemoryArray(new MemoryArray(3));
				memory.addMemoryArray(new MemoryArray(4));
				memory.addMemoryArray(new MemoryArray(5));
				memory.addMemoryArray(new MemoryArray(6));
				memory.addMemoryArray(new MemoryArray(7));
				assertEquals(28, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_8() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				memory.addMemoryArray(new MemoryArray(2));
				memory.addMemoryArray(new MemoryArray(3));
				memory.addMemoryArray(new MemoryArray(4));
				memory.addMemoryArray(new MemoryArray(5));
				memory.addMemoryArray(new MemoryArray(6));
				memory.addMemoryArray(new MemoryArray(7));
				memory.addMemoryArray(new MemoryArray(8));
				assertEquals(36, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_9() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				memory.addMemoryArray(new MemoryArray(2));
				memory.addMemoryArray(new MemoryArray(3));
				memory.addMemoryArray(new MemoryArray(4));
				memory.addMemoryArray(new MemoryArray(5));
				memory.addMemoryArray(new MemoryArray(6));
				memory.addMemoryArray(new MemoryArray(7));
				memory.addMemoryArray(new MemoryArray(8));
				memory.addMemoryArray(new MemoryArray(9));
				assertEquals(45, memory.size());
		}
		
}

// MemoryArray.java
package net.virtualinfinity.atrobots.computer;

/**
 * A section of memory.
 *
 * @author Daniel Pitts
 */
public class MemoryArray {
    private final short[] memory;
    private ComputerErrorHandler errorHandler;

    /**
     * Create a new section of memory.
     *
     * @param size the size of the memory.
     */
    public MemoryArray(int size) {
        memory = new short[size];
    }

    /**
     * Get the size of this memory section.
     *
     * @return the size.
     */
    public int size() {
        return memory.length;
    }

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return 0;
        }
        return memory[address];
    }

    /**
     * writes the value at the specific address
     *
     * @param address the address to write.
     * @param value   the value to write at that address.
     */
    public void put(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] = value;
    }

    /**
     * Bitwise-or the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void or(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] |= value;
    }

    /**
     * Bitwise-and the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void and(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] &= value;
    }

    public void setErrorHandler(ComputerErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }

    public void decrement(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address]--;
    }

    public void increment(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address]++;
    }
}

// MemoryCell.java
package net.virtualinfinity.atrobots.computer;

/**
 * A memory cell.
 *
 * @author Daniel Pitts
 */
public class MemoryCell {
    private final Memory memory;
    private final int index;

    public MemoryCell(Memory memory, int index) {
        this.memory = memory;
        this.index = index;
    }

    public short get() {
        return memory.get(index);
    }

    public void set(short value) {
        memory.set(index, value);
    }

    public void or(short value) {
        memory.or(index, value);
    }

    public void and(short value) {
        memory.and(index, value);
    }

    public void increment() {
        memory.increment(index);
    }

    public void decrement() {
        memory.decrement(index);
    }
}

// Computer.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.interrupts.InterruptHandler;

/**
 * Represents a computer.
 *
 * @author Daniel Pitts
 */
public class Computer {
    private final Memory memory;
    private final InterruptHandler interruptHandler;
    private final ComputerErrorHandler errorHandler;
    private final Registers registers;
    private final Flags flags;
    private final InstructionSet instructionSet;
    private final InstructionPointer instructionPointer;
    private final Stack stack;
    private final int[] scratch;
    private final int[] scratch2;
    private final int[] scratch3;
    private final int[] scratch4;
    private final int[] scratch5;
    private final int[] scratch6;
    private final int[] scratch7;
    private final int[] scratch8;
    private final int[] scratch9;
    private final int[] scratch10;
    private final int[] scratch11;
    private final int[] scratch12;
    private final int[] scratch13;
    private final int[] scratch14;
    private final int[] scratch15;
    private final int[] scratch16;
    private final int[] scratch17;
    private final int[] scratch18;
    private final int[] scratch19;
    private final int[] scratch20;
    private final int[] scratch21;
    private final int[] scratch22;
    private final int[] scratch23;
    private final int[] scratch24;
    private final int[] scratch25;
    private final int[] scratch26;
    private final int[] scratch27;
    private final int[] scratch28;
    private final int[] scratch29;
    private final int[] scratch30;
    private final int[] scratch31;
    private final int[] scratch32;
    private final int[] scratch33;
    private final int[] scratch34;
    private final int[] scratch35;
    private final int[] scratch36;
    private final int[] scratch37;
    private final int[] scratch38;
    private final int[] scratch39;
    private final int[] scratch40;
    private final int[] scratch41;
    private final int[] scratch42;
    private final int[] scratch43;
    private final int[] scratch44;
    private final int[] scratch45;
    private final int[] scratch46;
    private final int[] scratch47;
    private final int[] scratch48;
    private final int[] scratch49;
    private final int[] scratch50;
    private final int[] scratch51;
    private final int[] scratch52;
    private final int[] scratch53;
    private final int[] scratch54;
    private final int[] scratch55;
    private final int[] scratch56;
    private final int[] scratch57;
    private final int[] scratch58;
    private final int[] scratch59;
    private final int[] scratch60;
    private final int[] scratch61;
    private final int[] scratch62;
    private final int[] scratch63;
    private final int[] scratch64;
    private final int[] scratch65;
    private final int[] scratch66;
    private final int[] scratch67;
    private final int[] scratch68;
    private final int[] scratch69;
    private final int[] scratch70;
    private final int[] scratch71;
    private final int[] scratch72;
    private final int[] scratch73;
    private final int[] scratch74;
    private final int[] scratch75;
    private final int[] scratch76;
    private final int[] scratch77;
    private final int[] scratch78;
    private final int[] scratch79;
    private final int[] scratch80;
    private final int[] scratch81;
    private final int[] scratch82;
    private final int[] scratch83;
    private final int[] scratch84;
    private final int[] scratch85;
    private final int[] scratch86;
    private final int[] scratch87;
    private final int[] scratch88;
    private final int[] scratch89;
    private final int[] scratch90;
    private final int[] scratch91;
    private final int[] scratch92;
    private final int[] scratch93;
    private final int[] scratch94;
    private final int[] scratch95;
    private final int[] scratch96;
    private final int[] scratch97;
    private final int[] scratch98;
    private final int[] scratch99;
    private final int[] scratch100;
    private final int[] scratch101;
    private final int[] scratch102;
    private final int[] scratch103;
    private final int[] scratch104;
    private final int[] scratch105;
    private final int[] scratch106;
    private final int[] scratch107;
    private final int[] scratch108;
    private final int[] scratch109;
    private final int[] scratch110;
    private final int[] scratch111;
    private final int[] scratch112;
    private final int[] scratch113;
    private final int[] scratch114;
    private final int[] scratch115;
    private final int[] scratch116;
    private final int[] scratch117;
    private final int[] scratch118;
    private final int[] scratch119;
    private final int[] scratch120;
    private final int[] scratch121;
    private final int[] scratch122;
    private final int[] scratch123;
    private final int[] scratch124;
    private final int[] scratch125;
    private final int[] scratch126;
    private final int[] scratch127;
    private final int[] scratch128;
    private final int[] scratch129;
    private final int[] scratch130;
    private final int[] scratch131;
    private final int[] scratch132;
    private final int[] scratch133;
    private final int[] scratch134;
    private final int[] scratch135;
    private final int[] scratch136;
    private final int[] scratch137;
    private final int[] scratch138;
    private final int[] scratch139;
    private final int[] scratch140;
    private final int[] scratch141;
    private final int[] scratch142;
    private final int[] scratch143;
    private final int[] scratch144;
    private final int[] scratch145;
    private final int[] scratch146;
    private final int[] scratch147;
    private final int[] scratch148;
    private final int[] scratch149;
    private final int[] scratch150;
    private final int[] scratch151;
    private final int[] scratch152;
    private final int[] scratch153;
    private final int[] scratch154;
    private final int[] scratch155;
    private final int[] scratch156;
    private final int[] scratch157;"
cmpl-6wZNSH34qifvOEqKfqI9E0QKIHzYc,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Memory_1Test.java,111.31009602546692,length,"// Memory.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents the entire memory (RAM and ROM) of a {@link net.virtualinfinity.atrobots.computer.Computer}.
 *
 * @author Daniel Pitts
 */
public class Memory {

    private final List<MemoryArray> arrays = new ArrayList<MemoryArray>();

    private ComputerErrorHandler errorHandler;

    /**
     * Bitwise-or the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void or(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.or(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    /**
     * Bitwise-and the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void and(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.and(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public ComputerErrorHandler getErrorHandler() {
        return errorHandler;
    }

    /**
     * Get the total size of this memory.
     *
     * @return the size.
     */
    public int size() {
        int size = 0;
        for (MemoryArray array : arrays) {
            size += array.size();
        }
        return size;
    }

    /**
     * Add the next section of memory.
     *
     * @param array a section of memory.
     */
    public void addMemoryArray(MemoryArray array) {
        arrays.add(array);
        array.setErrorHandler(errorHandler);
    }

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                return array.get(address);
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
        return 0;
    }

    public int unsigned(int index) {
        return get(index) & 0xFFFF;
    }

    /**
     * writes the value at the specific address
     *
     * @param address the address to write.
     * @param value   the value to write at that address.
     */
    public void set(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.put(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public MemoryCell getCell(int index) {
        return new MemoryCell(this, index);
    }

    public void decrement(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.decrement(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void increment(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.increment(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void setErrorHandler(ComputerErrorHandler errorHandler) {
        for (MemoryArray array : arrays) {
            array.setErrorHandler(errorHandler);
        }
        this.errorHandler = errorHandler;
    }
}
","// Memory_1Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#get(int)} method.
*/
class Memory_1Test {","// Memory_1Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#get(int)} method.
*/
class Memory_1Test {

		/**
		* Test case for {@link Memory#get(int)}
		*
		* @see Memory#get(int)
		*/
		@Test
		void testGet() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(new short[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 60, 61, 62, 63, 64, 65, 66, 67, 68, 69 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 }));
				assertEquals(100, memory.size());
				assertEquals(0, memory.get(0));
				assertEquals(1, memory.get(1));
				assertEquals(2, memory.get(2));
				assertEquals(3, memory.get(3));
				assertEquals(4, memory.get(4));
				assertEquals(5, memory.get(5));
				assertEquals(6, memory.get(6));
				assertEquals(7, memory.get(7));
				assertEquals(8, memory.get(8));
				assertEquals(9, memory.get(9));
				assertEquals(10, memory.get(10));
				assertEquals(11, memory.get(11));
				assertEquals(12, memory.get(12));
				assertEquals(13, memory.get(13));
				assertEquals(14, memory.get(14));
				assertEquals(15, memory.get(15));
				assertEquals(16, memory.get(16));
				assertEquals(17, memory.get(17));
				assertEquals(18, memory.get(18));
				assertEquals(19, memory.get(19));
				assertEquals(20, memory.get(20));
				assertEquals(21, memory.get(21));
				assertEquals(22, memory.get(22));
				assertEquals(23, memory.get(23));
				assertEquals(24, memory.get(24));
				assertEquals(25, memory.get(25));
				assertEquals(26, memory.get(26));
				assertEquals(27, memory.get(27));
				assertEquals(28, memory.get(28));
				assertEquals(29, memory.get(29));
				assertEquals(30, memory.get(30));
				assertEquals(31, memory.get(31));
				assertEquals(32, memory.get(32));
				assertEquals(33, memory.get(33));
				assertEquals(34, memory.get(34));
				assertEquals(35, memory.get(35));
				assertEquals(36, memory.get(36));
				assertEquals(37, memory.get(37));
				assertEquals(38, memory.get(38));
				assertEquals(39, memory.get(39));
				assertEquals(40, memory.get(40));
				assertEquals(41, memory.get(41));
				assertEquals(42, memory.get(42));
				assertEquals(43, memory.get(43));
				assertEquals(44, memory.get(44));
				assertEquals(45, memory.get(45));
				assertEquals(46, memory.get(46));
				assertEquals(47, memory.get(47));
				assertEquals(48, memory.get(48));
				assertEquals(49, memory.get(49));
				assertEquals(50, memory.get(50));
				assertEquals(51, memory.get(51));
				assertEquals(52, memory.get(52));
				assertEquals(53, memory.get(53));
				assertEquals(54, memory.get(54));
				assertEquals(55, memory.get(55));
				assertEquals(56, memory.get(56));
				assertEquals(57, memory.get(57));
				assertEquals(58, memory.get(58));
				assertEquals(59, memory.get(59));
				assertEquals(60, memory.get(60));
				assertEquals(61, memory.get(61));
				assertEquals(62, memory.get(62));
				assertEquals(63, memory.get(63));
				assertEquals(64, memory.get(64));
				assertEquals(65, memory.get(65));
				assertEquals(66, memory.get(66));
				assertEquals(67, memory.get(67));
				assertEquals(68, memory.get(68));
				assertEquals(69, memory.get(69));
				assertEquals(70, memory.get(70));
				assertEquals(71, memory.get(71));
				assertEquals(72, memory.get(72));
				assertEquals(73, memory.get(73));
				assertEquals(74, memory.get(74));
				assertEquals(75, memory.get(75));
				assertEquals(76, memory.get(76));
				assertEquals(77, memory.get(77));
				assertEquals(78, memory.get(78));
				assertEquals(79, memory.get(79));
				assertEquals(80, memory.get(80));
				assertEquals(81, memory.get(81));
				assertEquals(82, memory.get(82));
				assertEquals(83, memory.get(83));
				assertEquals(84, memory.get(84));
				assertEquals(85, memory.get(85));
				assertEquals(86, memory.get(86));
				assertEquals(87, memory.get(87));
				assertEquals(88, memory.get(88));
				assertEquals(89, memory.get(89));
				assertEquals(90, memory.get(90));
				assertEquals(91, memory.get(91));
				assertEquals(92, memory.get(92));
				assertEquals(93, memory.get(93));
				assertEquals(94, memory.get(94));
				assertEquals(95, memory.get(95));
				assertEquals(96, memory.get(96));
				assertEquals(97, memory.get(97));
				assertEquals(98, memory.get(98));
				assertEquals(99, memory.get(99));
		}
}

// MemoryArray.java
package net.virtualinfinity.atrobots.computer;

/**
 * A section of memory.
 *
 * @author Daniel Pitts
 */
public class MemoryArray {
    private final short[] memory;
    private ComputerErrorHandler errorHandler;

    /**
     * Create a new section of memory.
     *
     * @param memory the memory.
     */
    public MemoryArray(short[] memory) {
        this.memory = memory;
    }

    /**
     * Get the size of this memory section.
     *
     * @return the size.
     */
    public int size() {
        return memory.length;
    }

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return 0;
        }
        return memory[address];
    }

    /**
     * writes the value at the specific address
     *
     * @param address the address to write.
     * @param value   the value to write at that address.
     */
    public void put(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] = value;
    }

    /**
     * Bitwise-or the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void or(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] |= value;
    }

    /**
     * Bitwise-and the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void and(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] &= value;
    }

    public void setErrorHandler(ComputerErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }

    public void decrement(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address]--;
    }

    public void increment(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address]++;
    }
}

// MemoryCell.java
package net.virtualinfinity.atrobots.computer;

/**
 * A memory cell.
 *
 * @author Daniel Pitts
 */
public class MemoryCell {
    private final Memory memory;
    private final int index;

    /**
     * Create a new memory cell.
     *
     * @param memory the memory.
     * @param index  the index.
     */
    public MemoryCell(Memory memory, int index) {
        this.memory = memory;
        this.index = index;
    }

    /**
     * Get the value of this memory cell.
     *
     * @return the value.
     */
    public short get() {
        return memory.get(index);
    }

    /**
     * Set the value of this memory cell.
     *
     * @param value the value.
     */
    public void set(short value) {
        memory.set(index, value);
    }

    /**
     * Increment the value of this memory cell.
     */
    public void increment() {
        memory.increment(index);
    }

    /**
     * Decrement the value of this memory cell.
     */
    public void decrement() {
        memory.decrement(index);
    }

    /**
     * Bitwise-or the value of this memory cell with the given value.
     *
     * @param value the value to or.
     */
    public void or(short value) {
        memory.or(index, value);
    }

    /**
     * Bitwise-and the value of this memory cell with the given value.
     *
     * @param value the value to or.
     */
    public void and(short value) {
        memory.and(index, value);
    }
}

// MemoryCell_1Test.java
package net.virtualinfinity.atrobots.computer;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MemoryCell}.
* It contains ten unit test cases for the {@link MemoryCell#get()} method.
*/
class MemoryCell_1Test {
		
		/**
		* Test case for {@link MemoryCell#get()}
		*
		* @see MemoryCell#get()
		*/
		@Test
		void testGet() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(new short[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 60, 61, 62, 63, 64, 65, 66, 67, 68, 69 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 }));
				MemoryCell memoryCell = memory.getCell(0);
				assertEquals(0, memoryCell.get());
				memoryCell = memory.getCell(1);
				assertEquals(1, memoryCell.get());
				memoryCell = memory.getCell(2);
				assertEquals(2, memoryCell.get());
			"
cmpl-6wZPF9hKDdfnH4S1blgiNxBbRyeQ5,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Program.java,102.28428363800049,length,"// Program.java
package net.virtualinfinity.atrobots.computer;

/**
 * A Program is a ROM definition.
 *
 * @author Daniel Pitts
 */
public class Program {

    private short[] programCode;

    public Program(short[] programCode) {
        this.programCode = programCode;
    }

    /**
     * Creates a read-only memory array with the program code pre-flashed.
     *
     * @return the memory array.
     */
    public MemoryArray createProgramMemory() {
        final ReadOnlyMemoryArray readOnlyMemoryArray = new ReadOnlyMemoryArray(programCode.length);
        readOnlyMemoryArray.flash(programCode);
        return readOnlyMemoryArray;
    }
}
","// ProgramTest.java
package net.virtualinfinity.atrobots.computer;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Program}.
* It contains ten unit test cases for the {@link Program#createProgramMemory()} method.
*/
class ProgramTest {","// ProgramTest.java
package net.virtualinfinity.atrobots.computer;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Program}.
* It contains ten unit test cases for the {@link Program#createProgramMemory()} method.
*/
class ProgramTest {

		@Test
		void testCreateProgramMemory() {
				short[] programCode = new short[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
				Program program = new Program(programCode);
				MemoryArray memoryArray = program.createProgramMemory();
				assertEquals(programCode.length, memoryArray.getSize());
				for (int i = 0; i < programCode.length; i++) {
						assertEquals(programCode[i], memoryArray.get(i));
				}
		}
}</code>



I have a class called Program.java which has a method called createProgramMemory(). I have a test class called ProgramTest.java which has a test method called testCreateProgramMemory().
I am using JUnit 5.
I am using IntelliJ IDEA.
I am using Gradle.
I am using Java 11.
I am using Windows 10.
I am using the Gradle Test Runner.
I am using the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner"
cmpl-6wZQtiGtv8wH4GvxwrWB6WyCIscws,/EvoSuiteBenchmark/original/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/game/Game.java,122.48931241035461,length,"// Game.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;

/**
 * This class coordinates rounds, entrants, and the simulation frame buffer.
 *
 * @author Daniel Pitts
 */
public class Game implements RoundListener {

    private RoundState roundState;

    private Round round;

    private int roundNumber = 0;

    private int totalRounds;

    private int maxProcessorSpeed = 5;

    private final FrameBuilder frameBuffer;

    private final List<RobotFactory> entrants = Collections.synchronizedList(new ArrayList<RobotFactory>());

    private int nextEntrantId;

    private final Map<RobotFactory, RobotScoreKeeper> scoreKeepers = new IdentityHashMap<RobotFactory, RobotScoreKeeper>();

    public Game(int totalRounds) {
        this(totalRounds, new FrameBuilder());
    }

    public Game(int totalRounds, FrameBuilder frameBuffer) {
        this.totalRounds = totalRounds;
        this.frameBuffer = frameBuffer;
    }

    /**
     * Get the current round.
     *
     * @return the current round.
     */
    public synchronized Round getRound() {
        return round;
    }

    /**
     * Get the total number of rounds.
     *
     * @return the total number of rounds.
     */
    public synchronized int getTotalRounds() {
        return totalRounds;
    }

    /**
     * Start the next round. This ends the current round.
     */
    public synchronized void nextRound() {
        if (round != null) {
            round.finalizeRound();
        }
        if (roundNumber < getTotalRounds()) {
            roundState = new StandardRoundState(totalRounds, ++roundNumber);
            round = new Round(frameBuffer);
            round.addRoundListener(this);
            for (int i = 0, entrantsSize = entrants.size(); i < entrantsSize; i++) {
                round.getArena().addRobot(createRobotFor(entrants.get(i), i));
            }
            round.getArena().buildFrame();
        } else {
            round = null;
            gameOver();
        }
    }

    private void gameOver() {
    }

    /**
     * Create a robot for the given entrant.
     *
     * @param entrant the entrant
     * @param id      the id for the robot.
     * @return the robot.
     */
    protected Robot createRobotFor(RobotFactory entrant, int id) {
        return entrant.createRobot(roundState, getMaxProcessorSpeed(), getScoreKeeper(entrant), round.getArena(), id);
    }

    private RobotScoreKeeper getScoreKeeper(RobotFactory entrant) {
        RobotScoreKeeper robotScoreKeeper = scoreKeepers.get(entrant);
        if (robotScoreKeeper == null) {
            robotScoreKeeper = new RobotScoreKeeper();
            scoreKeepers.put(entrant, robotScoreKeeper);
        }
        return robotScoreKeeper;
    }

    private RobotScore getFinalRobotScore(RobotFactory entrant) {
        final RobotScoreKeeper robotScoreKeeper = scoreKeepers.get(entrant);
        if (robotScoreKeeper == null) {
            throw new IllegalArgumentException(""Entrant did not participate in this game, so you can't get its final score."");
        }
        return FinalRobotScore.copyOf(getScoreKeeper(entrant));
    }

    public GameResult getFinalResults() {
        List<RobotGameResult> results = new ArrayList<RobotGameResult>();
        for (Map.Entry<RobotFactory, RobotScoreKeeper> robots : scoreKeepers.entrySet()) {
            results.add(new RobotGameResult(robots.getKey(), FinalRobotScore.copyOf(robots.getValue())));
        }
        Collections.sort(results);
        return new GameResult(results);
    }

    /**
     * Add an observer.
     *
     * @param observer the observer to add.
     */
    public synchronized void addSimulationObserver(SimulationObserver observer) {
        frameBuffer.addSimulationObserver(observer);
    }

    /**
     * Remove an observer.
     *
     * @param observer the observer to remove.
     */
    public synchronized void removeSimulationObserver(SimulationObserver observer) {
        frameBuffer.removeSimulationObserver(observer);
    }

    /**
     * Add an entrant for the next round.
     *
     * @param entrant the entrant
     */
    public synchronized void addEntrant(RobotFactory entrant) {
        entrants.add(entrant);
    }

    /**
     * Execute one step in the simulation.
     */
    public synchronized boolean stepRound() {
        if (round == null) {
            return false;
        }
        getRound().step();
        return round != null;
    }

    public void roundOver() {
        nextRound();
    }

    public int getMaxProcessorSpeed() {
        return maxProcessorSpeed;
    }

    public void setMaxProcessorSpeed(int maxProcessorSpeed) {
        this.maxProcessorSpeed = maxProcessorSpeed;
    }
}
","// GameTest.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#stepRound()} method.
*/
class GameTest {","// GameTest.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#stepRound()} method.
*/
class GameTest {

		private static final int TOTAL_ROUNDS = 1;
		
		private static final int MAX_PROCESSOR_SPEED = 5;
		
		private static final int ROUND_NUMBER = 1;
		
		private static final int ENTRANT_ID = 0;
		
		private static final int ENTRANT_ID_2 = 1;
		
		private static final int ENTRANT_ID_3 = 2;
		
		private static final int ENTRANT_ID_4 = 3;
		
		private static final int ENTRANT_ID_5 = 4;
		
		private static final int ENTRANT_ID_6 = 5;
		
		private static final int ENTRANT_ID_7 = 6;
		
		private static final int ENTRANT_ID_8 = 7;
		
		private static final int ENTRANT_ID_9 = 8;
		
		private static final int ENTRANT_ID_10 = 9;
		
		private static final int ENTRANT_ID_11 = 10;
		
		private static final int ENTRANT_ID_12 = 11;
		
		private static final int ENTRANT_ID_13 = 12;
		
		private static final int ENTRANT_ID_14 = 13;
		
		private static final int ENTRANT_ID_15 = 14;
		
		private static final int ENTRANT_ID_16 = 15;
		
		private static final int ENTRANT_ID_17 = 16;
		
		private static final int ENTRANT_ID_18 = 17;
		
		private static final int ENTRANT_ID_19 = 18;
		
		private static final int ENTRANT_ID_20 = 19;
		
		private static final int ENTRANT_ID_21 = 20;
		
		private static final int ENTRANT_ID_22 = 21;
		
		private static final int ENTRANT_ID_23 = 22;
		
		private static final int ENTRANT_ID_24 = 23;
		
		private static final int ENTRANT_ID_25 = 24;
		
		private static final int ENTRANT_ID_26 = 25;
		
		private static final int ENTRANT_ID_27 = 26;
		
		private static final int ENTRANT_ID_28 = 27;
		
		private static final int ENTRANT_ID_29 = 28;
		
		private static final int ENTRANT_ID_30 = 29;
		
		private static final int ENTRANT_ID_31 = 30;
		
		private static final int ENTRANT_ID_32 = 31;
		
		private static final int ENTRANT_ID_33 = 32;
		
		private static final int ENTRANT_ID_34 = 33;
		
		private static final int ENTRANT_ID_35 = 34;
		
		private static final int ENTRANT_ID_36 = 35;
		
		private static final int ENTRANT_ID_37 = 36;
		
		private static final int ENTRANT_ID_38 = 37;
		
		private static final int ENTRANT_ID_39 = 38;
		
		private static final int ENTRANT_ID_40 = 39;
		
		private static final int ENTRANT_ID_41 = 40;
		
		private static final int ENTRANT_ID_42 = 41;
		
		private static final int ENTRANT_ID_43 = 42;
		
		private static final int ENTRANT_ID_44 = 43;
		
		private static final int ENTRANT_ID_45 = 44;
		
		private static final int ENTRANT_ID_46 = 45;
		
		private static final int ENTRANT_ID_47 = 46;
		
		private static final int ENTRANT_ID_48 = 47;
		
		private static final int ENTRANT_ID_49 = 48;
		
		private static final int ENTRANT_ID_50 = 49;
		
		private static final int ENTRANT_ID_51 = 50;
		
		private static final int ENTRANT_ID_52 = 51;
		
		private static final int ENTRANT_ID_53 = 52;
		
		private static final int ENTRANT_ID_54 = 53;
		
		private static final int ENTRANT_ID_55 = 54;
		
		private static final int ENTRANT_ID_56 = 55;
		
		private static final int ENTRANT_ID_57 = 56;
		
		private static final int ENTRANT_ID_58 = 57;
		
		private static final int ENTRANT_ID_59 = 58;
		
		private static final int ENTRANT_ID_60 = 59;
		
		private static final int ENTRANT_ID_61 = 60;
		
		private static final int ENTRANT_ID_62 = 61;
		
		private static final int ENTRANT_ID_63 = 62;
		
		private static final int ENTRANT_ID_64 = 63;
		
		private static final int ENTRANT_ID_65 = 64;
		
		private static final int ENTRANT_ID_66 = 65;
		
		private static final int ENTRANT_ID_67 = 66;
		
		private static final int ENTRANT_ID_68 = 67;
		
		private static final int ENTRANT_ID_69 = 68;
		
		private static final int ENTRANT_ID_70 = 69;
		
		private static final int ENTRANT_ID_71 = 70;
		
		private static final int ENTRANT_ID_72 = 71;
		
		private static final int ENTRANT_ID_73 = 72;
		
		private static final int ENTRANT_ID_74 = 73;
		
		private static final int ENTRANT_ID_75 = 74;
		
		private static final int ENTRANT_ID_76 = 75;
		
		private static final int ENTRANT_ID_77 = 76;
		
		private static final int ENTRANT_ID_78 = 77;
		
		private static final int ENTRANT_ID_79 = 78;
		
		private static final int ENTRANT_ID_80 = 79;
		
		private static final int ENTRANT_ID_81 = 80;
		
		private static final int ENTRANT_ID_82 = 81;
		
		private static final int ENTRANT_ID_83 = 82;
		
		private static final int ENTRANT_ID_84 = 83;
		
		private static final int ENTRANT_ID_85 = 84;
		
		private static final int ENTRANT_ID_86 = 85;
		
		private static final int ENTRANT_ID_87 = 86;
		
		private static final int ENTRANT_ID_88 = 87;
		
		private static final int ENTRANT_ID_89 = 88;
		
		private static final int ENTRANT_ID_90 = 89;
		
		private static final int ENTRANT_ID_91 = 90;
		
		private static final int ENTRANT_ID_92 = 91;
		
		private static final int ENTRANT_ID_93 = 92;
		
		private static final int ENTRANT_ID_94 = 93;
		
		private static final int ENTRANT_ID_95 = 94;
		
		private static final int ENTRANT_ID_96 = 95;
		
		private static final int ENTRANT_ID_97 = 96;
		
		private static final int ENTRANT_ID_98 = 97;
		
		private static final int ENTRANT_ID_99 = 98;
		
		private static final int ENTRANT_ID_100 = 99;
		
		private static final int ENTRANT_ID_101 = 100;
		
		private static final int ENTRANT_ID_102 = 101;
		
		private static final int ENTRANT_ID_103 = 102;
		
		private static final int ENTRANT_ID_104 = 103;
		
		private static final int ENTRANT_ID_105 = 104;
		
		private static final int ENTRANT_ID_106 = 105;
		
		private static final int ENTRANT_ID_107 = 106;
		
		private static final int ENTRANT_ID_108 = 107;
		
		private static final int ENTRANT_ID_109 = 108;
		
		private static final int ENTRANT_ID_110 = 109;
		
		private static final int ENTRANT_ID_111 = 110;
		
		private static final int ENTRANT_ID_112 = 111;
		
		private static final int ENTRANT_ID_113 = 112;
		
		private static final int ENTRANT_ID_114 = 113;
		
		private static final int ENTRANT_ID_115 = 114;
		
		private static final int ENTRANT_ID_116 = 115;
		
		private static final int ENTRANT_ID_117 = 116;
		
		private static final int ENTRANT_ID_118 = 117;
		
		private static final int ENTRANT_ID_119 = 118;
		
		private static final int ENTRANT_ID_120 = 119;
		
		private static final int ENTRANT_ID_121 = 120;
		
		private static final int ENTRANT_ID_122 = 121;
		
		private static final int ENTRANT_ID_123 = 122;
		
		private static final int ENTRANT_ID_124 = 123;
		
		private static final int ENTRANT_ID_125 = 124;
		
		private static final int ENTRANT_ID_126 = 125;
		
		private static final int ENTRANT_ID_127 = 126;
		
		private static final int ENTRANT_ID_128 = 127;
		
		private static final int ENTRANT_ID_129 = 128;
		
		private static final int ENTRANT_ID_130 = 129;
		
		private static final int ENTRANT_ID_131 = 130;
		
		private static final int ENTRANT_ID_132 = 131;
		
		private static final int ENTRANT_ID_133 = 132;
		
		private static final int ENTRANT_ID_134 = 133;
		
		private static final int ENTRANT_ID_135 = 134;
		
		private static final int ENTRANT_ID_136 = 135;
		
		private static final int ENTRANT_ID_137 = 136;
		
		private static final int ENTRANT_ID_138 = 137;
		
		private static final int ENTRANT_ID_139 = 138;
		
		private static final int ENTRANT_ID_140 = 139;
		
		private static final int ENTRANT_ID_141 = 140;
		
		private static final int ENTRANT_ID_142 = 141;
		
		private static final int ENTRANT_ID_143 = 142;
		
		private static final int ENTRANT_ID_144 = 143;
		
		private static final int ENTRANT_ID_145 = 144;
		
		private static final int ENTRANT_ID_146 = 145;
		
		private static final int ENTRANT_ID_147 = 146;
		
		private static final int ENTRANT_ID_148 = 147;
		
		private static final int ENTRANT_ID_149 = 148;
		
		private static final int ENTRANT_ID_150 = 149;
		
		private static final int ENTRANT_ID_151 = 150;
		
		private static final int ENTRANT_ID_152 = 151;
		
		private static final int ENTRANT_ID_153 = 152;
		
		private static final int ENTRANT_ID_154 = 153;
		
		private static final int ENTRANT_ID_155 = 154;
		
		private static final int ENTRANT_ID_156 = 155;
		
		private static final int ENTRANT_ID_157 = 156;
		
		private static final int ENTRANT_ID_158 = 157;
		
		private static final int ENTRANT_ID_159 = 158;
		
		private static final int ENTRANT_ID_160 = 159;
		
		private static final int ENTRANT_ID_161 = 160;
		
		private static final int ENTRANT_ID_162 = 161;
		
		private static final int ENTRANT_ID_163 = 162;
		
		private static final int ENTRANT_ID_164 = 163;
		
		private static final int ENTRANT_ID_165 = 164;
		
		private static final int ENTRANT_ID_166 = 165;
		
		private static final int ENTRANT_ID_167 = 166;
		
		private static final int ENTRANT_ID_168 = 167;
		
		private static final int ENTRANT_ID_169 = 168;
		
		private static final int ENTRANT_ID_170 = 169;
		
		private static final int ENTRANT_ID_171 = 170;
		
		private static final int ENTRANT_ID_172 = 171;
		
		private static final int ENTRANT_ID_173 = 172;
		
		private static final int ENTRANT_ID_174 = 173;
		
		private static final int ENTRANT_ID_175 = 174;
		
		private static final int ENTRANT_ID_176 = 175;
		
		private static final int ENTRANT_ID_177 = 176;
		
		private static final int ENTRANT_ID_178 = 177;
		
		private static final int ENTRANT_ID_179 = 178;
		
		private static final int ENTRANT_ID_180 = 179;
		
		private static final int ENTRANT_ID_181 = 180;
		
		private static final int ENTRANT_ID_182 = 181;
		
		private static final int ENTRANT_ID_183 = 182;
		
		private static final int ENTRANT_ID_184 = 183;
		
		private static final int ENTRANT_ID_185 = 184;
		
		private static final int ENTRANT_ID_186 = 185;
		
		private static final int ENTRANT_ID_187 = 186;
		
		private static final int ENTRANT_ID_188 = 187;
		
		private static final int ENTRANT_ID_189 = 188;
		
		private static final int ENTRANT_ID_190 = 189;
		
		private static final int ENTRANT_ID_191 = 190;
		
		private static final int ENTRANT_ID_192 = 191;
		
		private static final int ENTRANT_ID_193 = 192;
		
		private static final int ENTRANT_ID_194 = 193;
		
		private static final int ENTRANT_ID_195 = 194;
		
		private static final int ENTRANT_ID_196 = 195;
		
		private static final int ENTRANT_ID_197 = 196;
		
		private"
