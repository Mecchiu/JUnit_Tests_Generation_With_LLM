[
    {
        "id": "cmpl-6wR0O09C5M9xeDWdMKOol4OPXPeQu",
        "object": "text_completion",
        "created": 1679384852,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// Loader_0Test.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n*/\nclass Loader_0Test {\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_0() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_1() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_2() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_3() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_4() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_5() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_6() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 3360,
            "completion_tokens": 2000,
            "total_tokens": 5360
        },
        "time_taken": 59.41604280471802,
        "prompt_id": "/EvoSuiteBenchmark/original/7_sfmis/src/main/java/com/hf/sfm/util/Loader_0Test.java",
        "original_code": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    private String sql;\n\n    private String filepath;\n\n    private int start;\n\n    private int limit;\n\n    private int totalCount;\n\n    private String[] colNames;\n\n    private String[][] pas;\n\n    private String sort;\n\n    private String dir;\n\n    private final String XMLPATH = \"sqlfolder/\";\n\n    private Session session = null;\n\n    private Query query;\n\n    private List rs;\n\n    private boolean paging;\n\n    private ListRange range;\n\n    private String querySql;\n\n    private String queryValue;\n\n    public ListRange getRange() {\n        return range;\n    }\n\n    public void setRange(ListRange range) {\n        this.range = range;\n    }\n\n    public List getRs() {\n        return rs;\n    }\n\n    public void setRs(List rs) {\n        this.rs = rs;\n    }\n\n    public int getTotalCount() {\n        return totalCount;\n    }\n\n    public void setTotalCount(int totalCount) {\n        this.totalCount = totalCount;\n    }\n\n    public String[] getColNames() {\n        return colNames;\n    }\n\n    public void setColNames(String[] colNames) {\n        this.colNames = colNames;\n    }\n\n    public void run(BasePara basePara) {\n        filepath = basePara.getSqlpath();\n        if (paging = basePara.isPaging()) {\n            start = basePara.getStart();\n            limit = basePara.getLimit();\n        }\n        sort = basePara.getSort();\n        dir = basePara.getDir();\n        pas = basePara.single2plannar();\n        this.parseXML();\n        querySql = querySql == null ? basePara.getQuerySql() : querySql;\n        queryValue = basePara.getQueryValue();\n        this.getCount();\n        this.getColsName();\n        this.loadDataWithSql();\n    }\n\n    /**\n     * \u4ecexml\u89e3\u6790sql\n     */\n    public void parseXML() {\n        String pa = this.getClass().getResource(\"Loader.class\").toString();\n        String rootpath = pa.substring(pa.indexOf(\":\") + 2, pa.lastIndexOf(\"classes\") + 8).replaceAll(\"%20\", \" \");\n        String[] path = this.filepath.split(\"//\");\n        String filepath = rootpath + XMLPATH + path[0] + \".xml\";\n        File file = new File(filepath);\n        SAXReader reader = new SAXReader();\n        try {\n            Document doc = reader.read(file);\n            Element root = doc.getRootElement();\n            for (Iterator it = root.elementIterator(); it.hasNext(); ) {\n                Element el = (Element) it.next();\n                if (el.getName().equals(path[1])) {\n                    sql = el.elementText(\"main_sql\");\n                    querySql = el.elementText(\"query_sql\");\n                    break;\n                }\n            }\n        } catch (DocumentException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u603b\u8bb0\u5f55\u6570\n     */\n    public void getCount() {\n        String subsql = \"\";\n        this.getQuerySql();\n        if (this.sql.lastIndexOf(\"group by\") != -1) {\n            subsql = this.sql.substring(this.sql.lastIndexOf(\"from\"), this.sql.lastIndexOf(\"group by\"));\n        } else {\n            subsql = this.sql.substring(this.sql.lastIndexOf(\"from\"));\n        }\n        session = HibernateSessionFactory.currentSession();\n        query = session.createSQLQuery(\"select count(1) \" + subsql);\n        if (pas != null) {\n            query = this.getParams(query, pas);\n        }\n        totalCount = Integer.parseInt(query.uniqueResult() + \"\");\n        HibernateSessionFactory.closeSession();\n    }\n\n    /**\n     * \u83b7\u53d6sql\u4e2d\u7684\u5b57\u6bb5\u540d\u96c6\u5408\n     */\n    public void getColsName() {\n        String colssql = this.sql.substring(this.sql.lastIndexOf(\"select\") + 6, this.sql.lastIndexOf(\"from\"));\n        String[] cols = colssql.split(\",\");\n        colNames = new String[cols.length];\n        for (int i = 0; i < cols.length; i++) {\n            String[] subcols = new String[cols.length];\n            if (cols[i].indexOf(\" as \") > 0) {\n                subcols = cols[i].split(\"as\");\n                colNames[i] = subcols[1].trim();\n            } else {\n                if (cols[i].indexOf(\".\") > 0) {\n                    colNames[i] = cols[i].substring(cols[i].indexOf(\".\") + 1).trim();\n                } else {\n                    colNames[i] = cols[i].trim();\n                }\n            }\n        }\n    }\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort != null && sort != \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas != null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n\n    public void getQuerySql() {\n        int wherenum, ordernum, groupnum;\n        System.out.println(\"querySql:\" + querySql + \",sql:\" + sql);\n        if (querySql != null) {\n            wherenum = this.sql.indexOf(\"where\");\n            ordernum = this.sql.indexOf(\"order by\");\n            groupnum = this.sql.indexOf(\"group by\");\n            querySql = querySql.replace(\"?\", queryValue);\n            System.out.println(\"&&&&&&&&querySql:\" + querySql);\n            if (wherenum > 0) {\n                if (groupnum > 0) {\n                    this.sql = this.sql.substring(0, groupnum) + \" and (\" + querySql + \")\" + this.sql.substring(groupnum);\n                } else if (ordernum > 0) {\n                    this.sql = this.sql.substring(0, ordernum) + \" and (\" + querySql + \")\" + this.sql.substring(ordernum);\n                }\n            } else {\n                if (groupnum > 0) {\n                    this.sql = this.sql.substring(0, groupnum) + \" where (\" + querySql + \")\" + this.sql.substring(groupnum);\n                } else if (ordernum > 0) {\n                    this.sql = this.sql.substring(0, ordernum) + \" where (\" + querySql + \")\" + this.sql.substring(ordernum);\n                } else {\n                    this.sql = this.sql + \" where (\" + querySql + \")\";\n                }\n            }\n        }\n    }\n\n    /**\n     * \u63a5\u6536\u53c2\u6570\n     */\n    public Query getParams(Query query, String[][] params) {\n        if (params != null) {\n            // \u53c2\u6570\u503c\n            String[] pValue = params[0];\n            // \u53c2\u6570\u503c\u7c7b\u578b\n            String[] pType = params[1];\n            for (int i = 0; i < pValue.length; i++) {\n                if (pType[i].equals(\"String\")) {\n                    query.setParameter(i, pValue[i]);\n                } else if (pType[i].equals(\"Long\")) {\n                    query.setParameter(i, Long.parseLong(pValue[i]));\n                } else if (pType[i].equals(\"Integer\")) {\n                    query.setParameter(i, Integer.parseInt(pValue[i]));\n                } else if (pType[i].equals(\"Double\")) {\n                    query.setParameter(i, Double.parseDouble(pValue[i]));\n                } else if (pType[i].equals(\"Date\")) {\n                    try {\n                        query.setParameter(i, new SimpleDateFormat(\"yyyy-MM-dd\").parse(pValue[i]));\n                    } catch (HibernateException e) {\n                        // TODO Auto-generated catch block\n                        e.printStackTrace();\n                    } catch (ParseException e) {\n                        // TODO Auto-generated catch block\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return query;\n    }\n\n    /**\n     * \u9996\u9875Tree\u6570\u636e\n     */\n    public String getArrayResults() {\n        List rows = this.getRs();\n        if (rows.size() == 0) {\n            return \"\";\n        }\n        String jsonstr = \"\";\n        for (Iterator<?> it = rows.iterator(); it.hasNext(); ) {\n            Object[] obj = (Object[]) it.next();\n            String constr = \"{\";\n            for (int i = 0; i < obj.length; i++) {\n                if (i == obj.length - 1) {\n                    constr += '\"' + colNames[i] + '\"' + \":\" + '\"' + obj[i] + '\"';\n                } else {\n                    constr += '\"' + colNames[i] + '\"' + \":\" + '\"' + obj[i] + '\"' + \",\";\n                }\n            }\n            constr += \"}\";\n            jsonstr += constr + \",\";\n        }\n        jsonstr = \"[\" + jsonstr.substring(0, jsonstr.lastIndexOf(\",\")) + \"]\";\n        return jsonstr;\n    }\n\n    public void collectToMap(String flag) {\n        ArrayList<Object> al = null;\n        HashMap<String, Object> map = null;\n        String[] colNameArray = this.getColNames();\n        if (flag.equals(\"combo\")) {\n            colNameArray[0] = \"value\";\n            colNameArray[1] = \"text\";\n        }\n        al = new ArrayList<Object>();\n        List rs = this.getRs();\n        if (rs.size() > 0) {\n            al = new ArrayList<Object>();\n            for (Iterator<?> it = rs.iterator(); it.hasNext(); ) {\n                Object[] obj = null;\n                if (colNameArray.length == 1) {\n                    obj = new Object[] { it.next() };\n                } else {\n                    obj = (Object[]) it.next();\n                }\n                map = new HashMap<String, Object>();\n                for (int i = 0; i < colNameArray.length; i++) {\n                    String tag = colNameArray[i];\n                    map.put(tag, obj[i]);\n                }\n                al.add(map);\n            }\n        }\n        range = new ListRange();\n        range.setData(al);\n        range.setTotalSize(this.getTotalCount());\n    }\n\n    public void collectToMap() {\n        this.collectToMap(\"\");\n    }\n}\n",
        "test_prompt": "// Loader_0Test.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n*/\nclass Loader_0Test {",
        "original_generated_code": "\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_0() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_1() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_2() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_3() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_4() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_5() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t*/\n\t\t@Test\n\t\tvoid testLoadDataWithSql_6() throws DocumentException {\n\t\t\t\t// Arrange\n\t\t\t\tLoader loader = new Loader();\n\t\t\t\tloader.setSql(\"select * from t_user\");\n\t\t\t\tloader.setPaging(false);\n\t\t\t\tloader.setStart(0);\n\t\t\t\tloader.setLimit(0);\n\t\t\t\tloader.setSort(\"\");\n\t\t\t\tloader.setDir(\"\");\n\t\t\t\tloader.setPas(null);\n\t\t\t\tloader.setQuerySql(null);\n\t\t\t\tloader.setQueryValue(null);\n\t\t\t\t\n\t\t\t\t// Act\n\t\t\t\tloader.loadDataWithSql();\n\t\t\t\t\n\t\t\t\t// Assert\n\t\t\t\tassertEquals(0, loader.getTotalCount());\n\t\t\t\tassertEquals(0, loader.getRs().size());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for the {@link Loader#loadDataWithSql()} method.\n\t\t* @throws DocumentException \n\t\t",
        "applied_heuristics": "H7"
    }
]