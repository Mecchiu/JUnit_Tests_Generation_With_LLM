ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wb1WegS4SnjAybgkSqlF133zssuV,/EvoSuiteBenchmark/original/39_diffi/src/main/java/de/beiri22/stringincrementor/helper/ExtBoolArray_0Test.java,93.26217103004456,length,"// ExtBoolArray.java
/*
 * ExtBoolArray.java
 *
 * Created on 31.10.2007, 14:34:55
 *
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.beiri22.stringincrementor.helper;

/**
 * @author Rico
 */
public final class ExtBoolArray {

    /**
     * Enthaelt die Booleanwerte
     */
    private boolean[] werte;

    /**
     * erstellt ein neues ExtBoolArray mit allen Werten False.
     * @param len Anzahl der Booleanwerte
     */
    public ExtBoolArray(int len) {
        werte = new boolean[len];
    }

    /**
     * setzt den Bereich mit den Indexen a bis b auf True.
     * @param a Startindex
     * @param b Endindex
     */
    public void setTrue(int a, int b) {
        for (int i = a; i <= b; i++) {
            werte[i] = true;
        }
    }

    /**
     * prueft, ob der Bereich mit den Indexen a bis b ausschlieÃŸlich False-Werte
     * enthaelt.
     * @param a Startindex
     * @param b Endindex
     * @return True - wenn alles False-Werte sind.
     */
    public boolean isFalse(int a, int b) {
        for (int i = a; i <= b; i++) {
            if (werte[i]) {
                return false;
            }
        }
        return true;
    }

    /**
     * Zahl die uebriggebliebenen False-Werte.
     * @return Anzahl der False-Werte.
     */
    public int left() {
        int result = 0;
        for (int i = 0; i < werte.length; i++) {
            if (!werte[i]) {
                result++;
            }
        }
        return result;
    }
}
","// ExtBoolArray_0Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.
*/
class ExtBoolArray_0Test {","// ExtBoolArray_0Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.
*/
class ExtBoolArray_0Test {

	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns true if the array contains only false values.
	 */
	@Test
	void testIsFalse_0() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		assertTrue(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_1() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_2() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_3() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_4() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_5() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_6() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_7() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_8() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_9() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
}

// ExtBoolArray_1Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.
*/
class ExtBoolArray_1Test {
		
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_0() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		assertEquals(5, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_1() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_2() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_3() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_4() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_5() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_6() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_7() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_8() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_9() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
}

// ExtBoolArray_2Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#setTrue(int, int)} method.
*/
class ExtBoolArray_2Test {
		
	/**
	 * Test case for {@link ExtBoolArray#setTrue(int, int)}
	 * <p>
	 * Test if the method sets the values in the given range to true.
	 */
	@Test
	void testSetTrue_0() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#setTrue(int, int)}
	 * <p>
	 * Test if the method sets the values in the given range to true.
	 */
	@Test
	void testSetTrue_1() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#setTrue(int, int)}
	 * <p>
	 * Test if the method sets the values in the given range to true.
	 */
	@Test
	void testSetTrue_2() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#setTrue(int, int)}
	 * <p>
	 * Test if the method sets the values in the given range to true.
	 */
	@Test
	void testSetTrue_3() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#setTrue(int, int)}
	 * <p>
	 * Test if the method sets the values in the given range to true.
	 */
	@Test
	void testSetTrue_4() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#setTrue(int, int)}
	 * <p>
	 * Test if the method sets the values in the given range to true.
	 */
	@Test
	void testSetTrue_5() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#setTrue(int, int)}
	 * <p>
	 * Test if the method sets the values in the given range to true.
	 */
	@Test
	void testSetTrue_6() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#setTrue(int, int)}
	 * <p>
	 * Test if the method sets the values in the given range to true.
	 */
	@Test
	void testSetTrue_7() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#setTrue(int, int)}
	 * <p>
	 * Test if the method sets the values in the given range to true.
	 */
	@Test
	void testSetTrue_8() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#setTrue(int, int)}
	 * <p>
	 * Test if the method sets the values in the given range to true.
	 */
	@Test
	void testSetTrue_9() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
}

// ExtBoolArray_3Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#ExtBoolArray(int)} method.
*/
class ExtBoolArray_3Test {
		
	/**
	 * Test case for {@link ExtBoolArray#ExtBoolArray(int)}
	 * <p>
	 * Test if the method creates an array with the given length.
	 */
	@Test
	void testExtBoolArray_0() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		assertEquals(5, extBoolArray.left());
"
cmpl-6wb31ukC2Wb3PcUV0k6PE144XYf1M,/EvoSuiteBenchmark/original/39_diffi/src/main/java/de/beiri22/stringincrementor/helper/ExtBoolArray_1Test.java,78.61248898506165,length,"// ExtBoolArray.java
/*
 * ExtBoolArray.java
 *
 * Created on 31.10.2007, 14:34:55
 *
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.beiri22.stringincrementor.helper;

/**
 * @author Rico
 */
public final class ExtBoolArray {

    /**
     * Enthaelt die Booleanwerte
     */
    private boolean[] werte;

    /**
     * erstellt ein neues ExtBoolArray mit allen Werten False.
     * @param len Anzahl der Booleanwerte
     */
    public ExtBoolArray(int len) {
        werte = new boolean[len];
    }

    /**
     * setzt den Bereich mit den Indexen a bis b auf True.
     * @param a Startindex
     * @param b Endindex
     */
    public void setTrue(int a, int b) {
        for (int i = a; i <= b; i++) {
            werte[i] = true;
        }
    }

    /**
     * prueft, ob der Bereich mit den Indexen a bis b ausschlieÃŸlich False-Werte
     * enthaelt.
     * @param a Startindex
     * @param b Endindex
     * @return True - wenn alles False-Werte sind.
     */
    public boolean isFalse(int a, int b) {
        for (int i = a; i <= b; i++) {
            if (werte[i]) {
                return false;
            }
        }
        return true;
    }

    /**
     * Zahl die uebriggebliebenen False-Werte.
     * @return Anzahl der False-Werte.
     */
    public int left() {
        int result = 0;
        for (int i = 0; i < werte.length; i++) {
            if (!werte[i]) {
                result++;
            }
        }
        return result;
    }
}
","// ExtBoolArray_1Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.
*/
class ExtBoolArray_1Test {","// ExtBoolArray_1Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.
*/
class ExtBoolArray_1Test {

	/**
	* Test case for {@link ExtBoolArray#left()} method.
	* Test if the method returns the correct number of false values.
	*/
	@Test
	void testLeft() {
		ExtBoolArray array = new ExtBoolArray(10);
		array.setTrue(0, 9);
		assertEquals(0, array.left());
		array.setTrue(0, 8);
		assertEquals(1, array.left());
		array.setTrue(0, 7);
		assertEquals(2, array.left());
		array.setTrue(0, 6);
		assertEquals(3, array.left());
		array.setTrue(0, 5);
		assertEquals(4, array.left());
		array.setTrue(0, 4);
		assertEquals(5, array.left());
		array.setTrue(0, 3);
		assertEquals(6, array.left());
		array.setTrue(0, 2);
		assertEquals(7, array.left());
		array.setTrue(0, 1);
		assertEquals(8, array.left());
		array.setTrue(0, 0);
		assertEquals(9, array.left());
	}
}

// ExtBoolArray_2Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.
*/
class ExtBoolArray_2Test {
		
	/**
	* Test case for {@link ExtBoolArray#isFalse(int, int)} method.
	* Test if the method returns the correct boolean value.
	*/
	@Test
	void testIsFalse() {
		ExtBoolArray array = new ExtBoolArray(10);
		array.setTrue(0, 9);
		assertFalse(array.isFalse(0, 9));
		array.setTrue(0, 8);
		assertFalse(array.isFalse(0, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 7);
		assertFalse(array.isFalse(0, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 6);
		assertFalse(array.isFalse(0, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 5);
		assertFalse(array.isFalse(0, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 4);
		assertFalse(array.isFalse(0, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 3);
		assertFalse(array.isFalse(0, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 2);
		assertFalse(array.isFalse(0, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 1);
		assertFalse(array.isFalse(0, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 0);
		assertFalse(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
	}
}

// ExtBoolArray_3Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#setTrue(int, int)} method.
*/
class ExtBoolArray_3Test {
		
	/**
	* Test case for {@link ExtBoolArray#setTrue(int, int)} method.
	* Test if the method sets the correct boolean values.
	*/
	@Test
	void testSetTrue() {
		ExtBoolArray array = new ExtBoolArray(10);
		array.setTrue(0, 9);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 8);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertFalse(array.isFalse(9, 9));
		array.setTrue(0, 7);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertFalse(array.isFalse(8, 8));
		assertFalse(array.isFalse(9, 9));
		array.setTrue(0, 6);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertFalse(array.isFalse(7, 7));
		assertFalse(array.isFalse(8, 8));
		assertFalse(array.isFalse(9, 9));
		array.setTrue(0, 5);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertFalse(array.isFalse(6, 6));
		assertFalse(array.isFalse(7, 7));
		assertFalse(array.isFalse(8, 8));
		assertFalse(array.isFalse(9, 9));
		array.setTrue(0, 4);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertFalse(array.isFalse(5, 5));
		assertFalse(array.isFalse(6, 6));
		assertFalse(array.isFalse(7, 7));
		assertFalse(array.isFalse(8, 8));
		assertFalse(array.isFalse(9, 9));
		array.setTrue(0, 3);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertFalse(array.isFalse(4, 4));
		assertFalse(array.isFalse(5, 5));
		assertFalse(array.isFalse(6, 6));
		assertFalse(array.isFalse(7, 7));
		assertFalse(array.isFalse(8, 8));
		assertFalse(array.isFalse(9, 9));
		array.setTrue(0, 2);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertFalse(array.isFalse(3, 3));
		assertFalse(array.isFalse(4, 4));
		assertFalse(array.isFalse(5, 5));
		assertFalse(array.isFalse(6, 6));
		assertFalse(array.isFalse(7, 7));
		assertFalse(array.isFalse(8, 8));
		assertFalse(array.isFalse(9, 9));
		array.setTrue(0, 1);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertFalse(array.isFalse(2, 2));
		assertFalse(array.isFalse(3, 3));
		assertFalse(array.isFalse(4, 4));
		assertFalse(array.isFalse(5, 5));
		assertFalse(array.isFalse(6, 6));
		assertFalse(array.isFalse(7, 7));
		assertFalse(array.isFalse(8, 8));
		assertFalse(array.isFalse(9, 9));
		array.setTrue(0, 0);
		assertFalse(array.isFalse(0, 0));
		assertFalse(array.isFalse(1, 1));
		assertFalse(array.isFalse(2, 2));
		assertFalse(array.isFalse(3, 3));
		assertFalse(array.isFalse(4, 4));
		assertFalse(array.isFalse(5, 5));
		assertFalse(array.isFalse(6, 6));
		assertFalse(array.isFalse(7, 7));
		assertFalse(array.isFalse(8, 8));
		assertFalse(array.isFalse(9, 9));
	}
}

// ExtBoolArray_4Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#ExtBoolArray(int)} constructor.
*/
class ExtBoolArray_4Test {
		
	/**
	* Test case for {@link ExtBoolArray#ExtBoolArray(int)} constructor.
	* Test if the constructor sets the correct boolean values.
	*/
	@Test
	void testExtBoolArray() {
		ExtBoolArray array = new ExtBoolArray(10);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
	}
}

// ExtBoolArray_5Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#ExtBoolArray(int)} constructor.
*/
class ExtBoolArray_5Test {
		
	/**
	* Test case for {@link ExtBoolArray#ExtBoolArray(int)} constructor.
	* Test if the constructor sets the correct boolean values.
	*/
	@Test
	void testExtBoolArray() {
		ExtBoolArray array = new ExtBoolArray(10);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
	}
}

// ExtBoolArray_6Test.java
package de.beiri22.stringincrementor.helper;"
