ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wn1jQCSisPWc6eSseBz721QiaFwJ,/EvoSuiteBenchmark/original/42_asphodel/src/main/java/org/asphodel/parser/HtmlContentParser_0Test.java,231.77194595336914,length,"// HtmlContentParser.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;

/**
 * @author : sunwj
 * @since 0.1
 *        Date: Mar 31, 2007
 *        Time: 10:03:07 PM
 *        <p/>
 *        html content parser using Jericho
 * todo does it need to devided into 2 different implementation?
 */
public class HtmlContentParser implements StringContentParser, StreamContentParser {

    private static Log log = LogFactory.getLog(HtmlContentParser.class);

    /**
     * @param textContent content as a text format,the real format of the content can be xml,html,xhtml....
     * @return plain text without extra tags or elements
     */
    public String extractPlainText(String textContent) throws ContentParserException {
        Source contentSource = new Source(textContent);
        return contentSource.extractText();
    }

    /**
     */
    public String extractText(Reader reader) throws ContentParserException {
        try {
            Source contentSource = new Source(reader);
            return contentSource.extractText();
        } catch (IOException e) {
            log.error(""when parsing from reader,"", e);
            throw new ContentParserException(e);
        }
    }

    public String extractText(InputStream inputStream) throws ContentParserException {
        try {
            Source contentSource = new Source(inputStream);
            return contentSource.extractText();
        } catch (IOException e) {
            log.error(""when parsing from inputStrem"", e);
            throw new ContentParserException(e);
        }
    }

    public String extractText(URL url) throws ContentParserException {
        try {
            Source contentSource = new Source(url);
            return contentSource.extractText();
        } catch (IOException e) {
            log.error(""when parsing from url"", e);
            throw new ContentParserException(e);
        }
    }
}
","// HtmlContentParser_0Test.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains ten unit test cases for the {@link HtmlContentParser#extractPlainText(String)} method.
*/
class HtmlContentParser_0Test {","// HtmlContentParser_0Test.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains ten unit test cases for the {@link HtmlContentParser#extractPlainText(String)} method.
*/
class HtmlContentParser_0Test {

		private static Log log = LogFactory.getLog(HtmlContentParser_0Test.class);
		
		/**
		 * Test case for method {@link HtmlContentParser#extractPlainText(String)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractPlainText_0() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractPlainText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractPlainText(String)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractPlainText_1() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractPlainText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractPlainText(String)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractPlainText_2() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractPlainText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractPlainText(String)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractPlainText_3() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractPlainText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractPlainText(String)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractPlainText_4() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractPlainText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractPlainText(String)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractPlainText_5() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractPlainText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractPlainText(String)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractPlainText_6() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractPlainText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractPlainText(String)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractPlainText_7() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractPlainText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractPlainText(String)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractPlainText_8() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractPlainText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractPlainText(String)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractPlainText_9() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractPlainText(textContent);
				assertEquals(""Test Test"", result);
		}
		
}

// HtmlContentParser_1Test.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains ten unit test cases for the {@link HtmlContentParser#extractText(Reader)} method.
*/
class HtmlContentParser_1Test {
		
		private static Log log = LogFactory.getLog(HtmlContentParser_1Test.class);
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(Reader)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_0() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(Reader)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_1() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(Reader)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_2() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(Reader)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_3() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(Reader)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_4() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(Reader)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_5() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(Reader)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_6() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(Reader)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_7() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(Reader)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_8() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(Reader)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_9() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
}

// HtmlContentParser_2Test.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains ten unit test cases for the {@link HtmlContentParser#extractText(InputStream)} method.
*/
class HtmlContentParser_2Test {
		
		private static Log log = LogFactory.getLog(HtmlContentParser_2Test.class);
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(InputStream)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_0() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(InputStream)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_1() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(InputStream)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_2() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(InputStream)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_3() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new HtmlContentParser().extractText(textContent);
				assertEquals(""Test Test"", result);
		}
		
		/**
		 * Test case for method {@link HtmlContentParser#extractText(InputStream)}.
		 * @throws ContentParserException 
		 */
		@Test
		void testExtractText_4() throws ContentParserException {
				String textContent = ""<html><head><title>Test</title></head><body><p>Test</p></body></html>"";
				String result = new"
