[
{
    "id": "cmpl-6wTlIr7PJd5qbc5j9ViuW4wkewLFG",
    "object": "text_completion",
    "created": 1679395448,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_0() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant fixture = new SimpleCombatant(CombatantSide.RED, new CombatantState(new Area(0, 0), 1, 1, false), 1, \"\", null, Weapon.BAYONET, \"\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = fixture._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(1, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_1() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant fixture = new SimpleCombatant(CombatantSide.RED, new CombatantState(new Area(0, 0), 1, 1, false), 1, \"\", null, Weapon.BAYONET, \"\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = fixture._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(1, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_2() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant fixture = new SimpleCombatant(CombatantSide.RED, new CombatantState(new Area(0, 0), 1, 1, false), 1, \"\", null, Weapon.BAYONET, \"\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = fixture._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(1, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_3() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant fixture = new SimpleCombatant(CombatantSide.RED, new CombatantState(new Area(0, 0), 1, 1, false), 1, \"\", null, Weapon.BAYONET, \"\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = fixture._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(1, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_4() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant fixture = new SimpleCombatant(CombatantSide.RED, new CombatantState(new Area(0, 0), 1, 1, false), 1, \"\", null, Weapon.BAYONET, \"\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = fixture._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(1, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_5() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant fixture = new SimpleCombatant(CombatantSide.RED, new CombatantState(new Area(0, 0), 1, 1, false), 1, \"\", null, Weapon.BAYONET, \"\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = fixture._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(1, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_6() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant fixture = new SimpleCombatant(CombatantSide.RED, new CombatantState(new Area(0, 0), 1, 1, false), 1, \"\", null, Weapon.BAYONET, \"\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = fixture._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(1, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_7() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant fixture = new SimpleCombatant(CombatantSide.RED, new CombatantState(new Area(0, 0), 1, 1, false), 1, \"\", null, Weapon.BAYONET, \"\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = fixture._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(1, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_8() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant fixture = new SimpleCombatant(CombatantSide.RED, new CombatantState(new Area(0, 0), 1, 1, false), 1, \"\", null, Weapon.BAYONET, \"\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = fixture._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(1, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_9() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant fixture = new SimpleCombatant(CombatantSide.RED, new CombatantState(new Area(0, 0), 1, 1, false), 1, \"\", null, Weapon.BAYONET, \"\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = fixture._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(1, result);\n\t\t}\n\t\t\n}\n\n// SimpleCombatant_1Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 4843,
        "completion_tokens": 2000,
        "total_tokens": 6843
    },
    "time_taken": 54.95535850524902,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_0Test.java",
    "original_code": "// SimpleCombatant.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\n\n/**\n * A Combatant with basic attributes (position, health)\n *\n * @author daniel\n */\npublic class SimpleCombatant implements Combatant {\n\n    private static final transient Logger LOG = Logger.getLogger(SimpleCombatant.class.getName());\n\n    private final int maxHealth;\n\n    private final CombatantSide side;\n\n    private final String name;\n\n    private final String city;\n\n    private final Set<CombatantObserver> observers = new HashSet<CombatantObserver>();\n\n    private final Object stateChangeLock = new Object();\n\n    private final CharacterClass charClass;\n\n    private final Weapon weapon;\n\n    private CombatantState state;\n\n    private Combatant aimingAt = null;\n\n    /**\n     * Create a new {@link Combatant} at the given position and the given amount\n     * of health.\n     *\n     * @param side\n     *            not null\n     * @param initialState\n     *            not null\n     * @param maxHealth\n     *            > 0\n     * @param name\n     *            the name of the player of this Combatant\n     * @param characterClass\n     *            maybe null for old logs\n     * @param weapon\n     *            not null\n     * @param city\n     *            not null\n     */\n    public SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {\n        assert side != null && initialState != null && weapon != null && city != null : \"parameters may not be null!\";\n        assert maxHealth > 0 : \"health must be positive!\";\n        assert maxHealth >= initialState.getHealth() && initialState.getHealth() > 0 : \"currentHealth must be inbetween 1 and max, is \" + initialState.getHealth();\n        this.side = side;\n        this.maxHealth = maxHealth;\n        this.name = name;\n        this.city = city;\n        state = initialState;\n        charClass = characterClass;\n        this.weapon = weapon;\n        // move to current location\n        state.getPosition().occupy(this, null);\n    }\n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        return getSide() + \" \" + name;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getName()\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()\n     */\n    public Weapon getWeapon() {\n        return weapon;\n    }\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the maximal health\n     */\n    public int _getMaxLP() {\n        return maxHealth;\n    }\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the current health\n     */\n    public int _getCurrentLP() {\n        return state.getHealth();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void move(final Area target) {\n        LOG.fine(name + \" moving to \" + target);\n        synchronized (stateChangeLock) {\n            final Area oldPosition = state.getPosition();\n            moveAway(oldPosition);\n            state = state.changePosition(target);\n            final Combatant swapped = target.occupy(this, oldPosition);\n            fireHasMoved();\n            if (swapped != null) {\n                fireHasSwapped(swapped);\n            }\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void shoot(final int power) {\n        LOG.fine(name + \" shooting with \" + power);\n        aimingAt.hit(power);\n        final int sectorBonusDamage = state.getPosition().getSectorBonus(this).additionalDamage;\n        if (charClass == CharacterClass.DUELANT && power > weapon.maxDamage() + sectorBonusDamage) {\n            final double tenPercent = aimingAt._maxHealth() * 0.1;\n            if (power > weapon.minDamage() + tenPercent) {\n                fireCriticalShot(power);\n            } else {\n                LOG.fine(\"almost crit by \" + name + \": \" + power);\n            }\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)\n     */\n    public boolean hit(final int damageAmount) {\n        LOG.fine(name + \" was hit and lost \" + damageAmount + \" health points\");\n        synchronized (stateChangeLock) {\n            final int oldHealth = state.getHealth();\n            state = state.reduceHealthBy(damageAmount);\n            fireWasHit(damageAmount, oldHealth);\n            if (state.getHealth() <= 0) {\n                moveAway(state.getPosition());\n                fireIsDead();\n            }\n            return state.getHealth() > 0;\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)\n     */\n    public void aimAt(final Combatant target) {\n        LOG.fine(name + \" aims at \" + target);\n        aimingAt = target;\n        fireAimingAt();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void setDestination(final Area destination) {\n        LOG.fine(name + \" wants to move to \" + destination);\n        synchronized (stateChangeLock) {\n            state = state.changeTarget(destination);\n            fireNewTarget();\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void addObserver(final CombatantObserver observer) {\n        observers.add(observer);\n        // send current state\n        observer.hasMoved(this, state.getPosition());\n        if (aimingAt != null) {\n            observer.aimsAt(this, aimingAt);\n        }\n        if (state.getHealth() <= 0) {\n            observer.isDead(this);\n        } else {\n            observer.isAlive(this);\n        }\n        observer.isOnline(this, false);\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void removeObserver(final CombatantObserver observer) {\n        observers.remove(observer);\n    }\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireHasMoved() {\n        for (final CombatantObserver observer : observers) {\n            observer.hasMoved(this, state.getPosition());\n        }\n    }\n\n    /**\n     * notify all observers about the current position\n     *\n     * @param swappedWith\n     */\n    protected void fireHasSwapped(final Combatant swappedWith) {\n        for (final CombatantObserver observer : observers) {\n            observer.hasSwappedPosition(this, swappedWith);\n        }\n    }\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireNewTarget() {\n        for (final CombatantObserver observer : observers) {\n            observer.newDestination(this, state.getTarget());\n        }\n    }\n\n    /**\n     * notify all observers that I shot at somebody.\n     */\n    protected void fireAimingAt() {\n        if (aimingAt != null) {\n            for (final CombatantObserver observer : observers) {\n                observer.aimsAt(this, aimingAt);\n            }\n        }\n    }\n\n    /**\n     * notify all observers about a loss of health\n     *\n     * @param damage\n     *            amount of healthpoints lost\n     * @param healthBefore\n     *            original health amount before it was decreased by\n     *            <code>damage</code>\n     */\n    protected void fireWasHit(final int damage, final int healthBefore) {\n        for (final CombatantObserver observer : observers) {\n            observer.isHit(this, damage, healthBefore);\n        }\n    }\n\n    /**\n     * notify all observers about our dead\n     */\n    protected void fireIsDead() {\n        for (final CombatantObserver observer : observers) {\n            observer.isDead(this);\n        }\n    }\n\n    /**\n     * notify all observers about our resurrection\n     */\n    protected void fireIsAlive() {\n        for (final CombatantObserver observer : observers) {\n            observer.isAlive(this);\n        }\n    }\n\n    /**\n     * notify all observers about changed online state\n     *\n     * @param changed\n     *            if the value was changed or only set\n     */\n    protected void fireOnlineChange(final boolean changed) {\n        for (final CombatantObserver observer : observers) {\n            observer.isOnline(this, changed);\n        }\n    }\n\n    /**\n     * notify all observers that i have done a critical shot\n     *\n     * @param damage\n     *            the actual caused damage\n     */\n    protected void fireCriticalShot(final int damage) {\n        for (final CombatantObserver observer : observers) {\n            observer.criticalShot(this, aimingAt, damage);\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()\n     */\n    public Area _getLocation() {\n        return state.getPosition();\n    }\n\n    /**\n     * @return the side\n     */\n    public CombatantSide getSide() {\n        return side;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_health()\n     */\n    public int _health() {\n        return state.getHealth();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()\n     */\n    public int _maxHealth() {\n        return maxHealth;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)\n     */\n    public void _setState(final CombatantState newState) {\n        final CombatantState oldState = state;\n        // TODO maybe a PropertyChangeListener for the state\n        synchronized (stateChangeLock) {\n            state = newState;\n            // new pos has not to be null!\n            if (state.getPosition() != null) {\n                final Area oldPos = oldState.getPosition();\n                // fix for swapping:\n                // 1. go away from battlefield\n                moveAway(oldPos);\n                // 2. come from nowhere to new position (avoids swapping)\n                state.getPosition().occupy(this, null);\n                if (oldPos == null || !oldPos.equals(state.getPosition())) {\n                    fireHasMoved();\n                }\n            }\n            if (oldState.getHealth() != state.getHealth()) {\n                fireWasHit(oldState.getHealth() - state.getHealth(), oldState.getHealth());\n            }\n            if (state.getHealth() > 0 && oldState.getHealth() <= 0) {\n                fireIsAlive();\n            }\n            if (state.getHealth() <= 0 && oldState.getHealth() > 0) {\n                fireIsDead();\n            }\n            if (oldState.isGamerOnline() != state.isGamerOnline()) {\n                fireOnlineChange(true);\n            }\n            if (!oldState.getTarget().equals(state.getTarget())) {\n                fireNewTarget();\n            }\n        }\n    }\n\n    /**\n     * @param position\n     */\n    private void moveAway(final Area position) {\n        if (position != null && equals(position.getOccupier())) {\n            position.free();\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_state()\n     */\n    public CombatantState _state() {\n        return state;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()\n     */\n    public boolean isOnline() {\n        return state.isGamerOnline();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()\n     */\n    public void setOnline(final boolean isOnline) {\n        synchronized (stateChangeLock) {\n            final boolean changed = isOnline() != isOnline;\n            if (changed) {\n                LOG.fine(name + \" is now \" + (isOnline ? \"online\" : \"offline\"));\n                state = state.setOnline(isOnline);\n            }\n            fireOnlineChange(changed);\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()\n     */\n    public CharacterClass getCharacterClass() {\n        return charClass;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()\n     */\n    public SectorBonus getSectorBonus() {\n        return _getLocation().getSectorBonus(this);\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCity()\n     */\n    public String getCity() {\n        return city;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()\n     */\n    public boolean usesBayonet() {\n        final WeaponData weaponData = new JSWeaponData();\n        return weaponData.hasBayonet(getWeapon());\n    }\n\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        final int prime = 13;\n        int result = 1;\n        result = prime * result + ((name == null) ? 0 : name.hashCode());\n        result = prime * result + ((charClass == null) ? 0 : charClass.hashCode());\n        result = prime * result + ((city == null) ? 0 : city.hashCode());\n        return result;\n    }\n\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (!(obj instanceof SimpleCombatant)) {\n            return false;\n        }\n        final SimpleCombatant other = (SimpleCombatant) obj;\n        if (name == null) {\n            if (other.name != null) {\n                return false;\n            }\n        } else if (!name.equals(other.name)) {\n            return false;\n        }\n        if (charClass != other.charClass) {\n            return false;\n        }\n        if (city == null) {\n            if (other.city != null) {\n                return false;\n            }\n        } else if (!city.equals(other.city)) {\n            return false;\n        }\n        return true;\n    }\n}\n",
    "test_prompt": "// SimpleCombatant_0Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCombatant}.\n* It contains ten unit test cases for the {@link SimpleCombatant#_getMaxLP()} method.\n*/\nclass SimpleCombatant_0Test {"
},
{
    "id": "cmpl-6wTmLYch8eFB9FHOrpBUgXVQy3L0u",
    "object": "text_completion",
    "created": 1679395513,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getCurrentLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP() {\n\t\t\t\t// TODO: implement this test\n\t\t}\n}\n\n// SimpleCombatant_2Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCombatant}.\n* It contains ten unit test cases for the {@link SimpleCombatant#_getMaxLP()} method.\n*/\nclass SimpleCombatant_2Test {\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getMaxLP()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP() {\n\t\t\t\t// TODO: implement this test\n\t\t}\n}\n\n// SimpleCombatant_3Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCombatant}.\n* It contains ten unit test cases for the {@link SimpleCombatant#_getLocation()} method.\n*/\nclass SimpleCombatant_3Test {\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_getLocation()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_getLocation() {\n\t\t\t\t// TODO: implement this test\n\t\t}\n}\n\n// SimpleCombatant_4Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCombatant}.\n* It contains ten unit test cases for the {@link SimpleCombatant#_health()} method.\n*/\nclass SimpleCombatant_4Test {\n\t\t\n\t\t/**\n\t\t * Test method for {@link SimpleCombatant#_health()}.\n\t\t */\n\t\t@Test\n\t\tvoid test_health() {\n\t\t\t\t// TODO: implement this test\n\t\t}\n}\n\n// SimpleCombatant_5Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 4843,
        "completion_tokens": 2000,
        "total_tokens": 6843
    },
    "time_taken": 61.437615156173706,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_1Test.java",
    "original_code": "// SimpleCombatant.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\n\n/**\n * A Combatant with basic attributes (position, health)\n *\n * @author daniel\n */\npublic class SimpleCombatant implements Combatant {\n\n    private static final transient Logger LOG = Logger.getLogger(SimpleCombatant.class.getName());\n\n    private final int maxHealth;\n\n    private final CombatantSide side;\n\n    private final String name;\n\n    private final String city;\n\n    private final Set<CombatantObserver> observers = new HashSet<CombatantObserver>();\n\n    private final Object stateChangeLock = new Object();\n\n    private final CharacterClass charClass;\n\n    private final Weapon weapon;\n\n    private CombatantState state;\n\n    private Combatant aimingAt = null;\n\n    /**\n     * Create a new {@link Combatant} at the given position and the given amount\n     * of health.\n     *\n     * @param side\n     *            not null\n     * @param initialState\n     *            not null\n     * @param maxHealth\n     *            > 0\n     * @param name\n     *            the name of the player of this Combatant\n     * @param characterClass\n     *            maybe null for old logs\n     * @param weapon\n     *            not null\n     * @param city\n     *            not null\n     */\n    public SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {\n        assert side != null && initialState != null && weapon != null && city != null : \"parameters may not be null!\";\n        assert maxHealth > 0 : \"health must be positive!\";\n        assert maxHealth >= initialState.getHealth() && initialState.getHealth() > 0 : \"currentHealth must be inbetween 1 and max, is \" + initialState.getHealth();\n        this.side = side;\n        this.maxHealth = maxHealth;\n        this.name = name;\n        this.city = city;\n        state = initialState;\n        charClass = characterClass;\n        this.weapon = weapon;\n        // move to current location\n        state.getPosition().occupy(this, null);\n    }\n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        return getSide() + \" \" + name;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getName()\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()\n     */\n    public Weapon getWeapon() {\n        return weapon;\n    }\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the maximal health\n     */\n    public int _getMaxLP() {\n        return maxHealth;\n    }\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the current health\n     */\n    public int _getCurrentLP() {\n        return state.getHealth();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void move(final Area target) {\n        LOG.fine(name + \" moving to \" + target);\n        synchronized (stateChangeLock) {\n            final Area oldPosition = state.getPosition();\n            moveAway(oldPosition);\n            state = state.changePosition(target);\n            final Combatant swapped = target.occupy(this, oldPosition);\n            fireHasMoved();\n            if (swapped != null) {\n                fireHasSwapped(swapped);\n            }\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void shoot(final int power) {\n        LOG.fine(name + \" shooting with \" + power);\n        aimingAt.hit(power);\n        final int sectorBonusDamage = state.getPosition().getSectorBonus(this).additionalDamage;\n        if (charClass == CharacterClass.DUELANT && power > weapon.maxDamage() + sectorBonusDamage) {\n            final double tenPercent = aimingAt._maxHealth() * 0.1;\n            if (power > weapon.minDamage() + tenPercent) {\n                fireCriticalShot(power);\n            } else {\n                LOG.fine(\"almost crit by \" + name + \": \" + power);\n            }\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)\n     */\n    public boolean hit(final int damageAmount) {\n        LOG.fine(name + \" was hit and lost \" + damageAmount + \" health points\");\n        synchronized (stateChangeLock) {\n            final int oldHealth = state.getHealth();\n            state = state.reduceHealthBy(damageAmount);\n            fireWasHit(damageAmount, oldHealth);\n            if (state.getHealth() <= 0) {\n                moveAway(state.getPosition());\n                fireIsDead();\n            }\n            return state.getHealth() > 0;\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)\n     */\n    public void aimAt(final Combatant target) {\n        LOG.fine(name + \" aims at \" + target);\n        aimingAt = target;\n        fireAimingAt();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void setDestination(final Area destination) {\n        LOG.fine(name + \" wants to move to \" + destination);\n        synchronized (stateChangeLock) {\n            state = state.changeTarget(destination);\n            fireNewTarget();\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void addObserver(final CombatantObserver observer) {\n        observers.add(observer);\n        // send current state\n        observer.hasMoved(this, state.getPosition());\n        if (aimingAt != null) {\n            observer.aimsAt(this, aimingAt);\n        }\n        if (state.getHealth() <= 0) {\n            observer.isDead(this);\n        } else {\n            observer.isAlive(this);\n        }\n        observer.isOnline(this, false);\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void removeObserver(final CombatantObserver observer) {\n        observers.remove(observer);\n    }\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireHasMoved() {\n        for (final CombatantObserver observer : observers) {\n            observer.hasMoved(this, state.getPosition());\n        }\n    }\n\n    /**\n     * notify all observers about the current position\n     *\n     * @param swappedWith\n     */\n    protected void fireHasSwapped(final Combatant swappedWith) {\n        for (final CombatantObserver observer : observers) {\n            observer.hasSwappedPosition(this, swappedWith);\n        }\n    }\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireNewTarget() {\n        for (final CombatantObserver observer : observers) {\n            observer.newDestination(this, state.getTarget());\n        }\n    }\n\n    /**\n     * notify all observers that I shot at somebody.\n     */\n    protected void fireAimingAt() {\n        if (aimingAt != null) {\n            for (final CombatantObserver observer : observers) {\n                observer.aimsAt(this, aimingAt);\n            }\n        }\n    }\n\n    /**\n     * notify all observers about a loss of health\n     *\n     * @param damage\n     *            amount of healthpoints lost\n     * @param healthBefore\n     *            original health amount before it was decreased by\n     *            <code>damage</code>\n     */\n    protected void fireWasHit(final int damage, final int healthBefore) {\n        for (final CombatantObserver observer : observers) {\n            observer.isHit(this, damage, healthBefore);\n        }\n    }\n\n    /**\n     * notify all observers about our dead\n     */\n    protected void fireIsDead() {\n        for (final CombatantObserver observer : observers) {\n            observer.isDead(this);\n        }\n    }\n\n    /**\n     * notify all observers about our resurrection\n     */\n    protected void fireIsAlive() {\n        for (final CombatantObserver observer : observers) {\n            observer.isAlive(this);\n        }\n    }\n\n    /**\n     * notify all observers about changed online state\n     *\n     * @param changed\n     *            if the value was changed or only set\n     */\n    protected void fireOnlineChange(final boolean changed) {\n        for (final CombatantObserver observer : observers) {\n            observer.isOnline(this, changed);\n        }\n    }\n\n    /**\n     * notify all observers that i have done a critical shot\n     *\n     * @param damage\n     *            the actual caused damage\n     */\n    protected void fireCriticalShot(final int damage) {\n        for (final CombatantObserver observer : observers) {\n            observer.criticalShot(this, aimingAt, damage);\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()\n     */\n    public Area _getLocation() {\n        return state.getPosition();\n    }\n\n    /**\n     * @return the side\n     */\n    public CombatantSide getSide() {\n        return side;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_health()\n     */\n    public int _health() {\n        return state.getHealth();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()\n     */\n    public int _maxHealth() {\n        return maxHealth;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)\n     */\n    public void _setState(final CombatantState newState) {\n        final CombatantState oldState = state;\n        // TODO maybe a PropertyChangeListener for the state\n        synchronized (stateChangeLock) {\n            state = newState;\n            // new pos has not to be null!\n            if (state.getPosition() != null) {\n                final Area oldPos = oldState.getPosition();\n                // fix for swapping:\n                // 1. go away from battlefield\n                moveAway(oldPos);\n                // 2. come from nowhere to new position (avoids swapping)\n                state.getPosition().occupy(this, null);\n                if (oldPos == null || !oldPos.equals(state.getPosition())) {\n                    fireHasMoved();\n                }\n            }\n            if (oldState.getHealth() != state.getHealth()) {\n                fireWasHit(oldState.getHealth() - state.getHealth(), oldState.getHealth());\n            }\n            if (state.getHealth() > 0 && oldState.getHealth() <= 0) {\n                fireIsAlive();\n            }\n            if (state.getHealth() <= 0 && oldState.getHealth() > 0) {\n                fireIsDead();\n            }\n            if (oldState.isGamerOnline() != state.isGamerOnline()) {\n                fireOnlineChange(true);\n            }\n            if (!oldState.getTarget().equals(state.getTarget())) {\n                fireNewTarget();\n            }\n        }\n    }\n\n    /**\n     * @param position\n     */\n    private void moveAway(final Area position) {\n        if (position != null && equals(position.getOccupier())) {\n            position.free();\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_state()\n     */\n    public CombatantState _state() {\n        return state;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()\n     */\n    public boolean isOnline() {\n        return state.isGamerOnline();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()\n     */\n    public void setOnline(final boolean isOnline) {\n        synchronized (stateChangeLock) {\n            final boolean changed = isOnline() != isOnline;\n            if (changed) {\n                LOG.fine(name + \" is now \" + (isOnline ? \"online\" : \"offline\"));\n                state = state.setOnline(isOnline);\n            }\n            fireOnlineChange(changed);\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()\n     */\n    public CharacterClass getCharacterClass() {\n        return charClass;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()\n     */\n    public SectorBonus getSectorBonus() {\n        return _getLocation().getSectorBonus(this);\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCity()\n     */\n    public String getCity() {\n        return city;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()\n     */\n    public boolean usesBayonet() {\n        final WeaponData weaponData = new JSWeaponData();\n        return weaponData.hasBayonet(getWeapon());\n    }\n\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        final int prime = 13;\n        int result = 1;\n        result = prime * result + ((name == null) ? 0 : name.hashCode());\n        result = prime * result + ((charClass == null) ? 0 : charClass.hashCode());\n        result = prime * result + ((city == null) ? 0 : city.hashCode());\n        return result;\n    }\n\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (!(obj instanceof SimpleCombatant)) {\n            return false;\n        }\n        final SimpleCombatant other = (SimpleCombatant) obj;\n        if (name == null) {\n            if (other.name != null) {\n                return false;\n            }\n        } else if (!name.equals(other.name)) {\n            return false;\n        }\n        if (charClass != other.charClass) {\n            return false;\n        }\n        if (city == null) {\n            if (other.city != null) {\n                return false;\n            }\n        } else if (!city.equals(other.city)) {\n            return false;\n        }\n        return true;\n    }\n}\n",
    "test_prompt": "// SimpleCombatant_1Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCombatant}.\n* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.\n*/\nclass SimpleCombatant_1Test {"
},
{
    "id": "cmpl-6wTnLUk22y7VLYYOnixnzGTYjW1ez",
    "object": "text_completion",
    "created": 1679395575,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "private static final transient Logger LOG = Logger.getLogger(Battleplan_0Test.class.getName());\n\n\t\t/**\n\t\t * Test method for {@link Battleplan#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds() {\n\t\t\t\tfinal SortedMap<Integer, Round> rounds = new TreeMap<Integer, Round>();\n\t\t\t\tfinal Battleplan plan = new Battleplan(rounds.values());\n\t\t\t\tassertEquals(0, plan.numberOfRounds());\n\t\t}\n}\n\n// Battleplan_1Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.Collection;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Battleplan}.\n* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.\n*/\nclass Battleplan_1Test {\n\t\tprivate static final transient Logger LOG = Logger.getLogger(Battleplan_1Test.class.getName());\n\n\t\t/**\n\t\t * Test method for {@link Battleplan#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds() {\n\t\t\t\tfinal SortedMap<Integer, Round> rounds = new TreeMap<Integer, Round>();\n\t\t\t\trounds.put(Integer.valueOf(1), new Round(1));\n\t\t\t\tfinal Battleplan plan = new Battleplan(rounds.values());\n\t\t\t\tassertEquals(1, plan.numberOfRounds());\n\t\t}\n}\n\n// Battleplan_2Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.Collection;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Battleplan}.\n* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.\n*/\nclass Battleplan_2Test {\n\t\tprivate static final transient Logger LOG = Logger.getLogger(Battleplan_2Test.class.getName());\n\n\t\t/**\n\t\t * Test method for {@link Battleplan#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds() {\n\t\t\t\tfinal SortedMap<Integer, Round> rounds = new TreeMap<Integer, Round>();\n\t\t\t\trounds.put(Integer.valueOf(1), new Round(1));\n\t\t\t\trounds.put(Integer.valueOf(2), new Round(2));\n\t\t\t\tfinal Battleplan plan = new Battleplan(rounds.values());\n\t\t\t\tassertEquals(2, plan.numberOfRounds());\n\t\t}\n}\n\n// Battleplan_3Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.Collection;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Battleplan}.\n* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.\n*/\nclass Battleplan_3Test {\n\t\tprivate static final transient Logger LOG = Logger.getLogger(Battleplan_3Test.class.getName());\n\n\t\t/**\n\t\t * Test method for {@link Battleplan#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds() {\n\t\t\t\tfinal SortedMap<Integer, Round> rounds = new TreeMap<Integer, Round>();\n\t\t\t\trounds.put(Integer.valueOf(1), new Round(1));\n\t\t\t\trounds.put(Integer.valueOf(2), new Round(2));\n\t\t\t\trounds.put(Integer.valueOf(3), new Round(3));\n\t\t\t\tfinal Battleplan plan = new Battleplan(rounds.values());\n\t\t\t\tassertEquals(3, plan.numberOfRounds());\n\t\t}\n}\n\n// Battleplan_4Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1689,
        "completion_tokens": 2000,
        "total_tokens": 3689
    },
    "time_taken": 53.33716678619385,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplan_0Test.java",
    "original_code": "// Battleplan.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.Collection;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.logging.Logger;\n\n/**\n * A plan which determines each step of the battle. A battle is divided into\n * {@link Round}s.\n *\n * @author daniel\n */\npublic class Battleplan {\n\n    private static final transient Logger LOG = Logger.getLogger(Battleplan.class.getName());\n\n    private final SortedMap<Integer, Round> rounds = new TreeMap<Integer, Round>();\n\n    /**\n     * Create a new plan with the given rounds\n     *\n     * @param roundsOfPlan\n     */\n    public Battleplan(final Collection<Round> roundsOfPlan) {\n        mapRoundsToNumbers(roundsOfPlan);\n    }\n\n    /**\n     * @param roundsOfPlan\n     */\n    private void mapRoundsToNumbers(final Collection<Round> roundsOfPlan) {\n        for (final Round round : roundsOfPlan) {\n            final int no = round.getNo();\n            final Integer roundNo = Integer.valueOf(no);\n            if (rounds.containsKey(roundNo)) {\n                LOG.warning(\"multiple rounds with number \" + roundNo + \"! overwriting\");\n            }\n            rounds.put(roundNo, round);\n        }\n    }\n\n    /**\n     * @return the number of rounds this plan has\n     */\n    public int numberOfRounds() {\n        return rounds.size();\n    }\n\n    /**\n     * executes the given {@link Round} of this plan\n     *\n     * @param roundNo\n     *            0 <= roundNo <= numberOfRounds()\n     * @param config\n     */\n    public void executeRound(final int roundNo, final PlayerConfiguration config) {\n        getRound(roundNo).execute(config);\n    }\n\n    /**\n     * @param roundNo\n     * @return\n     * @throws IllegalArgumentException\n     */\n    private Round getRound(final int roundNo) throws IllegalArgumentException {\n        final Integer roundKey = Integer.valueOf(roundNo);\n        if (!rounds.containsKey(roundKey)) {\n            throw new IllegalArgumentException(\"the given round number does not exist: \" + roundNo);\n        }\n        final Round round = rounds.get(roundKey);\n        return round;\n    }\n\n    /**\n     * @param no\n     * @return <code>true</code> if this plan contains a round with the given\n     *         number\n     */\n    public boolean hasRoundNo(final int no) {\n        final Integer roundKey = Integer.valueOf(no);\n        return rounds.containsKey(roundKey);\n    }\n\n    /**\n     * @param roundNo\n     */\n    public void resetToRound(final int roundNo) {\n        if (hasRoundNo(roundNo)) {\n            getRound(roundNo).setInitialState();\n        }\n    }\n\n    /**\n     * @param roundNo\n     * @return <code>true</code> if more rounds follow after the given round\n     *         number.\n     */\n    public boolean hasMoreRounds(final int roundNo) {\n        return !getRemainingRounds(roundNo).isEmpty();\n    }\n\n    /**\n     * @require hasMoreRounds(currentRoundNo)\n     * @param currentRoundNo\n     * @return the number of the following round\n     */\n    public int getNextRound(final int currentRoundNo) {\n        final SortedMap<Integer, Round> remainingRounds = getRemainingRounds(currentRoundNo);\n        assert remainingRounds.size() > 0 : \"more rounds must exist!\";\n        return remainingRounds.firstKey().intValue();\n    }\n\n    /**\n     * @param currentRoundNo\n     * @return all rounds that follow after the given round number\n     */\n    private SortedMap<Integer, Round> getRemainingRounds(final int currentRoundNo) {\n        final Integer nextRoundNo = Integer.valueOf(currentRoundNo + 1);\n        final SortedMap<Integer, Round> remainingRounds = rounds.tailMap(nextRoundNo);\n        return remainingRounds;\n    }\n}\n",
    "test_prompt": "// Battleplan_0Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.Collection;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Battleplan}.\n* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.\n*/\nclass Battleplan_0Test {"
},
{
    "id": "cmpl-6wToO5X9hMXMTxcwuk2PU2suQj4yb",
    "object": "text_completion",
    "created": 1679395640,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "private static final transient Logger LOG = Logger.getLogger(BattleplayerTest.class.getName());\n\n\t\t/**\n\t\t * Test method for {@link Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tpublic void testNumberOfRounds() {\n\t\t\t\tfinal Battleplan plan = new Battleplan();\n\t\t\t\tfinal Battleplayer player = new Battleplayer(plan);\n\t\t\t\tassertEquals(0, player.numberOfRounds());\n\t\t\t\tplan.addRound(new Round(new HashSet<Combatant>()));\n\t\t\t\tassertEquals(1, player.numberOfRounds());\n\t\t\t\tplan.addRound(new Round(new HashSet<Combatant>()));\n\t\t\t\tassertEquals(2, player.numberOfRounds());\n\t\t\t\tplan.addRound(new Round(new HashSet<Combatant>()));\n\t\t\t\tassertEquals(3, player.numberOfRounds());\n\t\t\t\tplan.addRound(new Round(new HashSet<Combatant>()));\n\t\t\t\tassertEquals(4, player.numberOfRounds());\n\t\t\t\tplan.addRound(new Round(new HashSet<Combatant>()));\n\t\t\t\tassertEquals(5, player.numberOfRounds());\n\t\t\t\tplan.addRound(new Round(new HashSet<Combatant>()));\n\t\t\t\tassertEquals(6, player.numberOfRounds());\n\t\t\t\tplan.addRound(new Round(new HashSet<Combatant>()));\n\t\t\t\tassertEquals(7, player.numberOfRounds());\n\t\t\t\tplan.addRound(new Round(new HashSet<Combatant>()));\n\t\t\t\tassertEquals(8, player.numberOfRounds());\n\t\t\t\tplan.addRound(new Round(new HashSet<Combatant>()));\n\t\t\t\tassertEquals(9, player.numberOfRounds());\n\t\t\t\tplan.addRound(new Round(new HashSet<Combatant>()));\n\t\t\t\tassertEquals(10, player.numberOfRounds());\n\t\t}\n}\n\n// Player.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.List;\n\n/**\n * A Player controls the battle. It is a puppet player controlling the behavior\n * of the {@link Combatant}s.\n *\n * @author daniel\n */\npublic interface Player {\n\n    /**\n     * let the battle begin! The whole battle is done by executing the\n     * {@link Battleplan}.\n     */\n    public void play();\n\n    /**\n     * blocks until current round has ended\n     *\n     * @param round\n     */\n    public void gotoRound(int round);\n\n    /**\n     * stop playing\n     */\n    public void stop();\n\n    /**\n     * @return the number of rounds this player shows\n     */\n    public int numberOfRounds();\n\n    /**\n     * @return the round numbers of this player\n     */\n    public List<Integer> getRoundNumbers();\n}\n\n// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * PlayerConfiguration controls some aspects of the behavior of the player.\n *\n * @author daniel\n */\npublic class PlayerConfiguration {\n\n    /**\n     * the delay between two rounds in milliseconds\n     */\n    public int ROUND_DELAY = 1000;\n\n    private final Lock lock = new ReentrantLock();\n\n    /**\n     * @return the lock\n     */\n    public Lock getLock() {\n        return lock;\n    }\n\n    /**\n     * @see java.util.concurrent.locks.Lock#lock()\n     */\n    public void lock() {\n        lock.lock();\n    }\n\n    /**\n     * @see java.util.concurrent.locks.Lock#unlock()\n     */\n    public void unlock() {\n        lock.unlock();\n    }\n}\n\n// Round.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport de.outstare.fortbattleplayer.model.Combatant;\n\n/**\n * A Round is a set of {@link Combatant}s.\n *\n * @author daniel\n */\npublic class Round {\n\n    private final Set<Combatant> combatants;\n\n    /**\n     * @param combatants\n     */\n    public Round(final Set<Combatant> combatants) {\n        this.combatants = new HashSet<Combatant>(combatants);\n    }\n\n    /**\n     * @return the combatants\n     */\n    public Set<Combatant> getCombatants() {\n        return combatants;\n    }\n}\n\n// RoundTest.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge,",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 2275,
        "completion_tokens": 2000,
        "total_tokens": 4275
    },
    "time_taken": 45.50235986709595,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplayer.java",
    "original_code": "// Battleplayer.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Combatant;\n\n/**\n * A {@link Battleplayer} controls the battle. It is a puppet player controlling\n * the behavior of the {@link Combatant}s.\n *\n * @author daniel\n */\npublic class Battleplayer implements Player {\n\n    private static final transient Logger LOG = Logger.getLogger(Battleplayer.class.getName());\n\n    private final Battleplan plan;\n\n    private final Set<RoundListener> listeners = new HashSet<RoundListener>();\n\n    private boolean isPaused = false;\n\n    /**\n     * round numbers may not be sequential (this variable is also used for\n     * locking during a round)\n     */\n    private int currentRoundNo;\n\n    private volatile boolean isPlaying = false;\n\n    private volatile boolean shouldStop = false;\n\n    /**\n     * controls some aspects of the behavior of the player\n     */\n    public final PlayerConfiguration config;\n\n    /**\n     * @param plan\n     * @param config\n     */\n    public Battleplayer(final Battleplan plan, final PlayerConfiguration config) {\n        this.plan = plan;\n        this.config = config;\n        if (!plan.hasMoreRounds(0)) {\n            throw new IllegalStateException(\"Cannot play a battle without rounds!\");\n        }\n        currentRoundNo = plan.getNextRound(0);\n    }\n\n    /**\n     * @param plan\n     */\n    public Battleplayer(final Battleplan plan) {\n        this(plan, new PlayerConfiguration());\n    }\n\n    /**\n     * let the battle begin! The whole battle is done by executing the\n     * {@link Battleplan}.\n     */\n    public void play() {\n        isPlaying = true;\n        LOG.info(\"now playing\");\n        while (!shouldStop) {\n            playCurrentRound(currentRoundNo);\n            if (plan.hasMoreRounds(currentRoundNo)) {\n                currentRoundNo = plan.getNextRound(currentRoundNo);\n            } else {\n                break;\n            }\n        }\n        shouldStop = false;\n        isPlaying = false;\n        LOG.info(\"stopped playing\");\n    }\n\n    /**\n     * blocks until current round has ended\n     *\n     * @see de.outstare.fortbattleplayer.player.Player#gotoRound(de.outstare.fortbattleplayer.player.Round)\n     */\n    public void gotoRound(final int i) {\n        assert plan.hasRoundNo(i) : \"round with number \" + i + \" must exist!\";\n        stop();\n        while (isPlaying) {\n            try {\n                LOG.fine(\"waiting for round \" + currentRoundNo + \" to end to go to round \" + i);\n                Thread.sleep(500);\n            } catch (final InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        synchronized (this) {\n            currentRoundNo = i;\n        }\n        plan.resetToRound(currentRoundNo);\n    }\n\n    /**\n     * executes the round of the internal state\n     */\n    private void playCurrentRound(final int roundNo) {\n        fireNewRoundEvent(roundNo);\n        plan.executeRound(roundNo, config);\n        delayNextRound();\n    }\n\n    /**\n     * wait the time given in {@link PlayerConfiguration#ROUND_DELAY}\n     */\n    private void delayNextRound() {\n        try {\n            Thread.sleep(config.ROUND_DELAY);\n        } catch (final InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * tell all listeners that a new round will start now\n     *\n     * @param roundNo\n     */\n    private void fireNewRoundEvent(final int roundNo) {\n        for (final RoundListener listener : listeners) {\n            listener.nextRound(roundNo);\n        }\n    }\n\n    /**\n     * @param listener\n     */\n    public void addRoundListener(final RoundListener listener) {\n        listeners.add(listener);\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.player.Player#stop()\n     */\n    public void stop() {\n        if (isPlaying) {\n            LOG.fine(\"stopping\");\n            shouldStop = true;\n        } else {\n            LOG.fine(\"already stopped\");\n        }\n    }\n\n    /**\n     * A RoundListener waits for Round events.\n     *\n     * @author daniel\n     */\n    public static interface RoundListener {\n\n        /**\n         * a new round will begin immediatly\n         *\n         * @param roundNo\n         */\n        void nextRound(int roundNo);\n    }\n\n    /**\n     * @return the number of rounds this player shows\n     */\n    public int numberOfRounds() {\n        return plan.numberOfRounds();\n    }\n\n    /**\n     * toggles pause which holds playing rounds. if this player is currently\n     * paused can be checked with isPaused()\n     */\n    public void pause() {\n        if (isPaused) {\n            config.unlock();\n            isPaused = false;\n        } else {\n            config.lock();\n            isPaused = true;\n        }\n    }\n\n    /**\n     * @return <code>true</code> if this player is playing and is currently hold\n     */\n    public boolean isPaused() {\n        return isPaused;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.player.Player#getRoundNumbers()\n     */\n    public List<Integer> getRoundNumbers() {\n        // always generating a new list\n        final List<Integer> rounds = new ArrayList<Integer>(plan.numberOfRounds());\n        // check if first round exists\n        final int firstRound = 0;\n        if (plan.hasRoundNo(firstRound)) {\n            rounds.add(Integer.valueOf(firstRound));\n        }\n        // add all following rounds\n        int roundNo;\n        for (roundNo = plan.getNextRound(firstRound); plan.hasMoreRounds(roundNo); roundNo = plan.getNextRound(roundNo)) {\n            rounds.add(Integer.valueOf(roundNo));\n        }\n        // add last round (has no round after it)\n        rounds.add(Integer.valueOf(roundNo));\n        return rounds;\n    }\n}\n",
    "test_prompt": "// BattleplayerTest.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Battleplayer}.\n* It contains ten unit test cases for the {@link Battleplayer#numberOfRounds()} method.\n*/\nclass BattleplayerTest {"
},
{
    "id": "cmpl-6wTpREQWoT19oVpUCsS6gKAAAAtDE",
    "object": "text_completion",
    "created": 1679395705,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t * Test method for {@link PlayerConfiguration#copy()}.\n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testCopy() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.ROUND_DELAY = 1;\n\t\t\t\tconfig.PLAYER_DELAY = 2;\n\t\t\t\tconfig.ACTION_DELAY = 3;\n\t\t\t\tconfig.setShowMoveTargets(true);\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\tfinal PlayerConfigurationListener listener = new PlayerConfigurationListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void changedShowMoveTarget(final boolean show) {\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void changedShowShootingLine(final boolean show) {\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tconfig.addListener(listener);\n\t\t\t\t// when\n\t\t\t\tfinal PlayerConfiguration copy = config.copy();\n\t\t\t\t// then\n\t\t\t\tassertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);\n\t\t\t\tassertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);\n\t\t\t\tassertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);\n\t\t\t\tassertEquals(config.showMoveTargets(), copy.showMoveTargets());\n\t\t\t\tassertEquals(config.showShootline(), copy.showShootline());\n\t\t\t\tassertEquals(config.listeners.size(), copy.listeners.size());\n\t\t\t\tassertFalse(config.listeners.contains(listener));\n\t\t\t\tassertTrue(copy.listeners.contains(listener));\n\t\t}\n}\n\n// PlayerConfigurationListener.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\n/**\n * A PlayerConfigurationListener is notified about changes in a\n * PlayerConfiguration.\n *\n * @author daniel\n */\npublic interface PlayerConfigurationListener {\n    /**\n     * @param show\n     */\n    void changedShowMoveTarget(boolean show);\n\n    /**\n     * @param show\n     */\n    void changedShowShootingLine(boolean show);\n}\n\n// PlayerState.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\n/**\n * A PlayerState is used to control the player.\n *\n * @author daniel\n */\npublic enum PlayerState {\n    /**\n     * the player is playing\n     */\n    PLAY,\n    /**\n     * the player is paused\n     */\n    PAUSE,\n    /**\n     * the player is stopped\n     */\n    STOP\n}\n\n// PlayerThread.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\nimport de.outstare.fortbattleplayer.Battleplayer;\n\n/**\n * A PlayerThread is used to play a game in a separate thread.\n *\n * @author daniel\n */\npublic class PlayerThread extends Thread {\n    private final Battleplayer player;\n    private final Lock playLock = new ReentrantLock();\n\n    /**\n     * @param player\n     */\n    public PlayerThread(final Battleplayer player) {\n        this.player = player;\n    }\n\n    @Override\n    public void run() {\n        playLock.lock();\n        try {\n            player.play();\n        } finally {\n            playLock.unlock();\n        }\n    }\n\n    /**\n     * @return true if the player is playing\n     */\n    public boolean isPlaying() {\n        return player.isPlaying();\n    }\n\n    /**\n     * @return true if the player is paused\n     */\n    public boolean isPaused() {\n        return player.isPaused();\n    }\n\n    /**\n     * @return true if the player is stopped\n     */\n    public boolean isStopped() {\n        return player.isStopped();\n    }\n\n    /**\n     * @return the player\n     */\n    public Battleplayer getPlayer() {\n        return player;\n    }\n\n    /**\n     * @return true if the player is currently playing\n     */\n    public boolean isLocked() {\n        return playLock.isLocked();\n    }\n}\n\n// PlayerThread_0Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1987,
        "completion_tokens": 2000,
        "total_tokens": 3987
    },
    "time_taken": 41.60124611854553,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_0Test.java",
    "original_code": "// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\n\n/**\n * An instance of this will be used by the player to hold its tunable\n * parameters.\n *\n * @author daniel\n */\npublic class PlayerConfiguration implements Cloneable {\n\n    /**\n     * a configuration which skips animation (used for purposes where the user\n     * should not see whats going on)\n     */\n    public static final PlayerConfiguration NO_DELAY = new PlayerConfiguration();\n\n    static {\n        NO_DELAY.ACTION_DELAY = 0;\n        NO_DELAY.PLAYER_DELAY = 0;\n        NO_DELAY.ROUND_DELAY = 0;\n        NO_DELAY.setShowMoveTargets(false);\n        NO_DELAY.setShowShootline(false);\n    }\n\n    /**\n     * this is used to control who currently does something with the player\n     */\n    private final Lock playLock = new ReentrantLock();\n\n    private final Set<PlayerConfigurationListener> listeners = new HashSet<PlayerConfigurationListener>();\n\n    /**\n     * current state of the player\n     */\n    private PlayerState state = PlayerState.STOP;\n\n    /**\n     * pause between two rounds in milliseconds\n     */\n    public volatile int ROUND_DELAY = Configuration.ROUND_DELAY;\n\n    /**\n     * pause between two players in a round in milliseconds\n     */\n    public volatile int PLAYER_DELAY = Configuration.PLAYER_DELAY;\n\n    /**\n     * pause between two actions in milliseconds\n     */\n    public volatile int ACTION_DELAY = Configuration.ACTION_DELAY;\n\n    /**\n     * draw a line to the point, where the player wants to go\n     */\n    private volatile boolean SHOW_MOVETARGETS = Configuration.SHOW_MOVETARGETS;\n\n    /**\n     * draw a line to the enemy ath wich the player shoots\n     */\n    private volatile boolean SHOW_SHOOTLINE = Configuration.SHOW_SHOOTLINE;\n\n    /**\n     * @param other\n     */\n    public void setTo(final PlayerConfiguration other) {\n        ROUND_DELAY = other.ROUND_DELAY;\n        PLAYER_DELAY = other.PLAYER_DELAY;\n        ACTION_DELAY = other.ACTION_DELAY;\n    }\n\n    /**\n     * @return a copy of this object\n     * @throws CloneNotSupportedException\n     */\n    public PlayerConfiguration copy() throws CloneNotSupportedException {\n        return (PlayerConfiguration) clone();\n    }\n\n    /**\n     * should only be called by {@link Battleplayer}!\n     *\n     * @param newState\n     */\n    synchronized void setState(final PlayerState newState) {\n        state = newState;\n    }\n\n    /**\n     * @return true if the player should be playing\n     */\n    public synchronized boolean isPlaying() {\n        return state == PlayerState.PLAY;\n    }\n\n    /**\n     * @return true if the player is hold\n     */\n    public synchronized boolean isPaused() {\n        return state == PlayerState.PAUSE;\n    }\n\n    /**\n     * @return true if the player is stopped\n     */\n    public synchronized boolean isStopped() {\n        return state == PlayerState.STOP;\n    }\n\n    /**\n     * exclusive use of the player\n     */\n    void lock() {\n        playLock.lock();\n    }\n\n    /**\n     * release the player\n     */\n    void unlock() {\n        playLock.unlock();\n    }\n\n    /**\n     * @return <code>true</code> if lines to movement targets should be\n     *         displayed\n     */\n    public boolean showMoveTargets() {\n        return SHOW_MOVETARGETS;\n    }\n\n    /**\n     * @param showMovetargets\n     */\n    public void setShowMoveTargets(final boolean showMovetargets) {\n        SHOW_MOVETARGETS = showMovetargets;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowMoveTarget(SHOW_MOVETARGETS);\n        }\n    }\n\n    /**\n     * @return <code>true</code> if shooting lines should be displayed\n     */\n    public boolean showShootline() {\n        return SHOW_SHOOTLINE;\n    }\n\n    /**\n     * @param showShootline\n     */\n    public void setShowShootline(final boolean showShootline) {\n        SHOW_SHOOTLINE = showShootline;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowShootingLine(SHOW_SHOOTLINE);\n        }\n    }\n\n    /**\n     * Adds a listener which will be notified about changes.\n     *\n     * @param listener\n     */\n    public void addListener(final PlayerConfigurationListener listener) {\n        listeners.add(listener);\n    }\n\n    /**\n     * Removes the listener from the registered ones.\n     *\n     * @param listener\n     */\n    public void removeListener(final PlayerConfigurationListener listener) {\n        listeners.remove(listener);\n    }\n}\n",
    "test_prompt": "// PlayerConfiguration_0Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#copy()} method.\n*/\nclass PlayerConfiguration_0Test {"
},
{
    "id": "cmpl-6wTqU7RX9R4RD1ePDuXRJ3L6CvNRN",
    "object": "text_completion",
    "created": 1679395770,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets_1() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets_2() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets_3() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets_4() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets_5() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets_6() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets_7() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets_8() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets_9() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws Exception\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets_10() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n}\n\n// PlayerConfiguration_2Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.\n*/\nclass PlayerConfiguration_2",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1991,
        "completion_tokens": 2000,
        "total_tokens": 3991
    },
    "time_taken": 57.86239838600159,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_1Test.java",
    "original_code": "// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\n\n/**\n * An instance of this will be used by the player to hold its tunable\n * parameters.\n *\n * @author daniel\n */\npublic class PlayerConfiguration implements Cloneable {\n\n    /**\n     * a configuration which skips animation (used for purposes where the user\n     * should not see whats going on)\n     */\n    public static final PlayerConfiguration NO_DELAY = new PlayerConfiguration();\n\n    static {\n        NO_DELAY.ACTION_DELAY = 0;\n        NO_DELAY.PLAYER_DELAY = 0;\n        NO_DELAY.ROUND_DELAY = 0;\n        NO_DELAY.setShowMoveTargets(false);\n        NO_DELAY.setShowShootline(false);\n    }\n\n    /**\n     * this is used to control who currently does something with the player\n     */\n    private final Lock playLock = new ReentrantLock();\n\n    private final Set<PlayerConfigurationListener> listeners = new HashSet<PlayerConfigurationListener>();\n\n    /**\n     * current state of the player\n     */\n    private PlayerState state = PlayerState.STOP;\n\n    /**\n     * pause between two rounds in milliseconds\n     */\n    public volatile int ROUND_DELAY = Configuration.ROUND_DELAY;\n\n    /**\n     * pause between two players in a round in milliseconds\n     */\n    public volatile int PLAYER_DELAY = Configuration.PLAYER_DELAY;\n\n    /**\n     * pause between two actions in milliseconds\n     */\n    public volatile int ACTION_DELAY = Configuration.ACTION_DELAY;\n\n    /**\n     * draw a line to the point, where the player wants to go\n     */\n    private volatile boolean SHOW_MOVETARGETS = Configuration.SHOW_MOVETARGETS;\n\n    /**\n     * draw a line to the enemy ath wich the player shoots\n     */\n    private volatile boolean SHOW_SHOOTLINE = Configuration.SHOW_SHOOTLINE;\n\n    /**\n     * @param other\n     */\n    public void setTo(final PlayerConfiguration other) {\n        ROUND_DELAY = other.ROUND_DELAY;\n        PLAYER_DELAY = other.PLAYER_DELAY;\n        ACTION_DELAY = other.ACTION_DELAY;\n    }\n\n    /**\n     * @return a copy of this object\n     * @throws CloneNotSupportedException\n     */\n    public PlayerConfiguration copy() throws CloneNotSupportedException {\n        return (PlayerConfiguration) clone();\n    }\n\n    /**\n     * should only be called by {@link Battleplayer}!\n     *\n     * @param newState\n     */\n    synchronized void setState(final PlayerState newState) {\n        state = newState;\n    }\n\n    /**\n     * @return true if the player should be playing\n     */\n    public synchronized boolean isPlaying() {\n        return state == PlayerState.PLAY;\n    }\n\n    /**\n     * @return true if the player is hold\n     */\n    public synchronized boolean isPaused() {\n        return state == PlayerState.PAUSE;\n    }\n\n    /**\n     * @return true if the player is stopped\n     */\n    public synchronized boolean isStopped() {\n        return state == PlayerState.STOP;\n    }\n\n    /**\n     * exclusive use of the player\n     */\n    void lock() {\n        playLock.lock();\n    }\n\n    /**\n     * release the player\n     */\n    void unlock() {\n        playLock.unlock();\n    }\n\n    /**\n     * @return <code>true</code> if lines to movement targets should be\n     *         displayed\n     */\n    public boolean showMoveTargets() {\n        return SHOW_MOVETARGETS;\n    }\n\n    /**\n     * @param showMovetargets\n     */\n    public void setShowMoveTargets(final boolean showMovetargets) {\n        SHOW_MOVETARGETS = showMovetargets;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowMoveTarget(SHOW_MOVETARGETS);\n        }\n    }\n\n    /**\n     * @return <code>true</code> if shooting lines should be displayed\n     */\n    public boolean showShootline() {\n        return SHOW_SHOOTLINE;\n    }\n\n    /**\n     * @param showShootline\n     */\n    public void setShowShootline(final boolean showShootline) {\n        SHOW_SHOOTLINE = showShootline;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowShootingLine(SHOW_SHOOTLINE);\n        }\n    }\n\n    /**\n     * Adds a listener which will be notified about changes.\n     *\n     * @param listener\n     */\n    public void addListener(final PlayerConfigurationListener listener) {\n        listeners.add(listener);\n    }\n\n    /**\n     * Removes the listener from the registered ones.\n     *\n     * @param listener\n     */\n    public void removeListener(final PlayerConfigurationListener listener) {\n        listeners.remove(listener);\n    }\n}\n",
    "test_prompt": "// PlayerConfiguration_1Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.\n*/\nclass PlayerConfiguration_1Test {"
},
{
    "id": "cmpl-6wTrXpQMYHz5XEXJYtyRFdnm2fabL",
    "object": "text_completion",
    "created": 1679395835,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showShootline()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowShootline() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showShootline()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowShootline2() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.setShowShootline(false);\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertFalse(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showShootline()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowShootline3() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showShootline()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowShootline4() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.setShowShootline(false);\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertFalse(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showShootline()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowShootline5() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showShootline()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowShootline6() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.setShowShootline(false);\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertFalse(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showShootline()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowShootline7() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showShootline()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowShootline8() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.setShowShootline(false);\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertFalse(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showShootline()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowShootline9() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showShootline()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowShootline10() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.setShowShootline(false);\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertFalse(result);\n\t\t}\n\t\t\n}\n\n// PlayerConfiguration_3Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.\n*/\nclass PlayerConfiguration_3Test {\n\t\t\n\t\t/**\n\t\t * Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t * \n\t\t * @throws CloneNotSupportedException\n\t\t */\n\t\t@Test\n\t\tvoid testShowMoveTargets() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1990,
        "completion_tokens": 2000,
        "total_tokens": 3990
    },
    "time_taken": 53.63105487823486,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_2Test.java",
    "original_code": "// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\n\n/**\n * An instance of this will be used by the player to hold its tunable\n * parameters.\n *\n * @author daniel\n */\npublic class PlayerConfiguration implements Cloneable {\n\n    /**\n     * a configuration which skips animation (used for purposes where the user\n     * should not see whats going on)\n     */\n    public static final PlayerConfiguration NO_DELAY = new PlayerConfiguration();\n\n    static {\n        NO_DELAY.ACTION_DELAY = 0;\n        NO_DELAY.PLAYER_DELAY = 0;\n        NO_DELAY.ROUND_DELAY = 0;\n        NO_DELAY.setShowMoveTargets(false);\n        NO_DELAY.setShowShootline(false);\n    }\n\n    /**\n     * this is used to control who currently does something with the player\n     */\n    private final Lock playLock = new ReentrantLock();\n\n    private final Set<PlayerConfigurationListener> listeners = new HashSet<PlayerConfigurationListener>();\n\n    /**\n     * current state of the player\n     */\n    private PlayerState state = PlayerState.STOP;\n\n    /**\n     * pause between two rounds in milliseconds\n     */\n    public volatile int ROUND_DELAY = Configuration.ROUND_DELAY;\n\n    /**\n     * pause between two players in a round in milliseconds\n     */\n    public volatile int PLAYER_DELAY = Configuration.PLAYER_DELAY;\n\n    /**\n     * pause between two actions in milliseconds\n     */\n    public volatile int ACTION_DELAY = Configuration.ACTION_DELAY;\n\n    /**\n     * draw a line to the point, where the player wants to go\n     */\n    private volatile boolean SHOW_MOVETARGETS = Configuration.SHOW_MOVETARGETS;\n\n    /**\n     * draw a line to the enemy ath wich the player shoots\n     */\n    private volatile boolean SHOW_SHOOTLINE = Configuration.SHOW_SHOOTLINE;\n\n    /**\n     * @param other\n     */\n    public void setTo(final PlayerConfiguration other) {\n        ROUND_DELAY = other.ROUND_DELAY;\n        PLAYER_DELAY = other.PLAYER_DELAY;\n        ACTION_DELAY = other.ACTION_DELAY;\n    }\n\n    /**\n     * @return a copy of this object\n     * @throws CloneNotSupportedException\n     */\n    public PlayerConfiguration copy() throws CloneNotSupportedException {\n        return (PlayerConfiguration) clone();\n    }\n\n    /**\n     * should only be called by {@link Battleplayer}!\n     *\n     * @param newState\n     */\n    synchronized void setState(final PlayerState newState) {\n        state = newState;\n    }\n\n    /**\n     * @return true if the player should be playing\n     */\n    public synchronized boolean isPlaying() {\n        return state == PlayerState.PLAY;\n    }\n\n    /**\n     * @return true if the player is hold\n     */\n    public synchronized boolean isPaused() {\n        return state == PlayerState.PAUSE;\n    }\n\n    /**\n     * @return true if the player is stopped\n     */\n    public synchronized boolean isStopped() {\n        return state == PlayerState.STOP;\n    }\n\n    /**\n     * exclusive use of the player\n     */\n    void lock() {\n        playLock.lock();\n    }\n\n    /**\n     * release the player\n     */\n    void unlock() {\n        playLock.unlock();\n    }\n\n    /**\n     * @return <code>true</code> if lines to movement targets should be\n     *         displayed\n     */\n    public boolean showMoveTargets() {\n        return SHOW_MOVETARGETS;\n    }\n\n    /**\n     * @param showMovetargets\n     */\n    public void setShowMoveTargets(final boolean showMovetargets) {\n        SHOW_MOVETARGETS = showMovetargets;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowMoveTarget(SHOW_MOVETARGETS);\n        }\n    }\n\n    /**\n     * @return <code>true</code> if shooting lines should be displayed\n     */\n    public boolean showShootline() {\n        return SHOW_SHOOTLINE;\n    }\n\n    /**\n     * @param showShootline\n     */\n    public void setShowShootline(final boolean showShootline) {\n        SHOW_SHOOTLINE = showShootline;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowShootingLine(SHOW_SHOOTLINE);\n        }\n    }\n\n    /**\n     * Adds a listener which will be notified about changes.\n     *\n     * @param listener\n     */\n    public void addListener(final PlayerConfigurationListener listener) {\n        listeners.add(listener);\n    }\n\n    /**\n     * Removes the listener from the registered ones.\n     *\n     * @param listener\n     */\n    public void removeListener(final PlayerConfigurationListener listener) {\n        listeners.remove(listener);\n    }\n}\n",
    "test_prompt": "// PlayerConfiguration_2Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.\n*/\nclass PlayerConfiguration_2Test {"
}
]