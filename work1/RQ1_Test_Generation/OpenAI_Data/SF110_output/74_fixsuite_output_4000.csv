ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wn5mkFNb55dPhLdq6L9fb6EhnTkh,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_0Test.java,184.91197109222412,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {

		private DictionaryInfo dictionaryInfo;
		
		private FieldInfo fieldInfo;
		
		private TreeMap<Integer, FieldInfo> fieldsByTagNumber;
		
		private TreeMap<String, FieldInfo> fieldsByName;
		
		private List<FieldInfo> fields;
		
		private int tagNumber;
		
		private String name;
		
		private String type;
		
		private String description;
		
		private String value;
		
		private String enumType;
		
		private String[] enums;
		
		private String[] enumsDescriptions;
		
		private String[] enumsAbbreviations;
		
		private String[] enumsValues;
		
		private String[] enumsAbbreviationsValues;
		
		private String[] enumsAbbreviationsDescriptions;
		
		private String[] enumsValuesDescriptions;
		
		private String[] enumsAbbreviationsValuesDescriptions;
		
		private String[] enumsAbbreviationsValuesDescriptions2;
		
		private String[] enumsAbbreviationsValuesDescriptions3;
		
		private String[] enumsAbbreviationsValuesDescriptions4;
		
		private String[] enumsAbbreviationsValuesDescriptions5;
		
		private String[] enumsAbbreviationsValuesDescriptions6;
		
		private String[] enumsAbbreviationsValuesDescriptions7;
		
		private String[] enumsAbbreviationsValuesDescriptions8;
		
		private String[] enumsAbbreviationsValuesDescriptions9;
		
		private String[] enumsAbbreviationsValuesDescriptions10;
		
		private String[] enumsAbbreviationsValuesDescriptions11;
		
		private String[] enumsAbbreviationsValuesDescriptions12;
		
		private String[] enumsAbbreviationsValuesDescriptions13;
		
		private String[] enumsAbbreviationsValuesDescriptions14;
		
		private String[] enumsAbbreviationsValuesDescriptions15;
		
		private String[] enumsAbbreviationsValuesDescriptions16;
		
		private String[] enumsAbbreviationsValuesDescriptions17;
		
		private String[] enumsAbbreviationsValuesDescriptions18;
		
		private String[] enumsAbbreviationsValuesDescriptions19;
		
		private String[] enumsAbbreviationsValuesDescriptions20;
		
		private String[] enumsAbbreviationsValuesDescriptions21;
		
		private String[] enumsAbbreviationsValuesDescriptions22;
		
		private String[] enumsAbbreviationsValuesDescriptions23;
		
		private String[] enumsAbbreviationsValuesDescriptions24;
		
		private String[] enumsAbbreviationsValuesDescriptions25;
		
		private String[] enumsAbbreviationsValuesDescriptions26;
		
		private String[] enumsAbbreviationsValuesDescriptions27;
		
		private String[] enumsAbbreviationsValuesDescriptions28;
		
		private String[] enumsAbbreviationsValuesDescriptions29;
		
		private String[] enumsAbbreviationsValuesDescriptions30;
		
		private String[] enumsAbbreviationsValuesDescriptions31;
		
		private String[] enumsAbbreviationsValuesDescriptions32;
		
		private String[] enumsAbbreviationsValuesDescriptions33;
		
		private String[] enumsAbbreviationsValuesDescriptions34;
		
		private String[] enumsAbbreviationsValuesDescriptions35;
		
		private String[] enumsAbbreviationsValuesDescriptions36;
		
		private String[] enumsAbbreviationsValuesDescriptions37;
		
		private String[] enumsAbbreviationsValuesDescriptions38;
		
		private String[] enumsAbbreviationsValuesDescriptions39;
		
		private String[] enumsAbbreviationsValuesDescriptions40;
		
		private String[] enumsAbbreviationsValuesDescriptions41;
		
		private String[] enumsAbbreviationsValuesDescriptions42;
		
		private String[] enumsAbbreviationsValuesDescriptions43;
		
		private String[] enumsAbbreviationsValuesDescriptions44;
		
		private String[] enumsAbbreviationsValuesDescriptions45;
		
		private String[] enumsAbbreviationsValuesDescriptions46;
		
		private String[] enumsAbbreviationsValuesDescriptions47;
		
		private String[] enumsAbbreviationsValuesDescriptions48;
		
		private String[] enumsAbbreviationsValuesDescriptions49;
		
		private String[] enumsAbbreviationsValuesDescriptions50;
		
		private String[] enumsAbbreviationsValuesDescriptions51;
		
		private String[] enumsAbbreviationsValuesDescriptions52;
		
		private String[] enumsAbbreviationsValuesDescriptions53;
		
		private String[] enumsAbbreviationsValuesDescriptions54;
		
		private String[] enumsAbbreviationsValuesDescriptions55;
		
		private String[] enumsAbbreviationsValuesDescriptions56;
		
		private String[] enumsAbbreviationsValuesDescriptions57;
		
		private String[] enumsAbbreviationsValuesDescriptions58;
		
		private String[] enumsAbbreviationsValuesDescriptions59;
		
		private String[] enumsAbbreviationsValuesDescriptions60;
		
		private String[] enumsAbbreviationsValuesDescriptions61;
		
		private String[] enumsAbbreviationsValuesDescriptions62;
		
		private String[] enumsAbbreviationsValuesDescriptions63;
		
		private String[] enumsAbbreviationsValuesDescriptions64;
		
		private String[] enumsAbbreviationsValuesDescriptions65;
		
		private String[] enumsAbbreviationsValuesDescriptions66;
		
		private String[] enumsAbbreviationsValuesDescriptions67;
		
		private String[] enumsAbbreviationsValuesDescriptions68;
		
		private String[] enumsAbbreviationsValuesDescriptions69;
		
		private String[] enumsAbbreviationsValuesDescriptions70;
		
		private String[] enumsAbbreviationsValuesDescriptions71;
		
		private String[] enumsAbbreviationsValuesDescriptions72;
		
		private String[] enumsAbbreviationsValuesDescriptions73;
		
		private String[] enumsAbbreviationsValuesDescriptions74;
		
		private String[] enumsAbbreviationsValuesDescriptions75;
		
		private String[] enumsAbbreviationsValuesDescriptions76;
		
		private String[] enumsAbbreviationsValuesDescriptions77;
		
		private String[] enumsAbbreviationsValuesDescriptions78;
		
		private String[] enumsAbbreviationsValuesDescriptions79;
		
		private String[] enumsAbbreviationsValuesDescriptions80;
		
		private String[] enumsAbbreviationsValuesDescriptions81;
		
		private String[] enumsAbbreviationsValuesDescriptions82;
		
		private String[] enumsAbbreviationsValuesDescriptions83;
		
		private String[] enumsAbbreviationsValuesDescriptions84;
		
		private String[] enumsAbbreviationsValuesDescriptions85;
		
		private String[] enumsAbbreviationsValuesDescriptions86;
		
		private String[] enumsAbbreviationsValuesDescriptions87;
		
		private String[] enumsAbbreviationsValuesDescriptions88;
		
		private String[] enumsAbbreviationsValuesDescriptions89;
		
		private String[] enumsAbbreviationsValuesDescriptions90;
		
		private String[] enumsAbbreviationsValuesDescriptions91;
		
		private String[] enumsAbbreviationsValuesDescriptions92;
		
		private String[] enumsAbbreviationsValuesDescriptions93;
		
		private String[] enumsAbbreviationsValuesDescriptions94;
		
		private String[] enumsAbbreviationsValuesDescriptions95;
		
		private String[] enumsAbbreviationsValuesDescriptions96;
		
		private String[] enumsAbbreviationsValuesDescriptions97;
		
		private String[] enumsAbbreviationsValuesDescriptions98;
		
		private String[] enumsAbbreviationsValuesDescriptions99;
		
		private String[] enumsAbbreviationsValuesDescriptions100;
		
		private String[] enumsAbbreviationsValuesDescriptions101;
		
		private String[] enumsAbbreviationsValuesDescriptions102;
		
		private String[] enumsAbbreviationsValuesDescriptions103;
		
		private String[] enumsAbbreviationsValuesDescriptions104;
		
		private String[] enumsAbbreviationsValuesDescriptions105;
		
		private String[] enumsAbbreviationsValuesDescriptions106;
		
		private String[] enumsAbbreviationsValuesDescriptions107;
		
		private String[] enumsAbbreviationsValuesDescriptions108;
		
		private String[] enumsAbbreviationsValuesDescriptions109;
		
		private String[] enumsAbbreviationsValuesDescriptions110;
		
		private String[] enumsAbbreviationsValuesDescriptions111;
		
		private String[] enumsAbbreviationsValuesDescriptions112;
		
		private String[] enumsAbbreviationsValuesDescriptions113;
		
		private String[] enumsAbbreviationsValuesDescriptions114;
		
		private String[] enumsAbbreviationsValuesDescriptions115;
		
		private String[] enumsAbbreviationsValuesDescriptions116;
		
		private String[] enumsAbbreviationsValuesDescriptions117;
		
		private String[] enumsAbbreviationsValuesDescriptions118;
		
		private String[] enumsAbbreviationsValuesDescriptions119;
		
		private String[] enumsAbbreviationsValuesDescriptions120;
		
		private String[] enumsAbbreviationsValuesDescriptions121;
		
		private String[] enumsAbbreviationsValuesDescriptions122;
		
		private String[] enumsAbbreviationsValuesDescriptions123;
		
		private String[] enumsAbbreviationsValuesDescriptions124;
		
		private String[] enumsAbbreviationsValuesDescriptions125;
		
		private String[] enumsAbbreviationsValuesDescriptions126;
		
		private String[] enumsAbbreviationsValuesDescriptions127;
		
		private String[] enumsAbbreviationsValuesDescriptions128;
		
		private String[] enumsAbbreviationsValuesDescriptions129;
		
		private String[] enumsAbbreviationsValuesDescriptions130;
		
		private String[] enumsAbbreviationsValuesDescriptions131;
		
		private String[] enumsAbbreviationsValuesDescriptions132;
		
		private String[] enumsAbbreviationsValuesDescriptions133;
		
		private String[] enumsAbbreviationsValuesDescriptions134;
		
		private String[] enumsAbbreviationsValuesDescriptions135;
		
		private String[] enumsAbbreviationsValuesDescriptions136;
		
		private String[] enumsAbbreviationsValuesDescriptions137;
		
		private String[] enumsAbbreviationsValuesDescriptions138;
		
		private String[] enumsAbbreviationsValuesDescriptions139;
		
		private String[] enumsAbbreviationsValuesDescriptions140;
		
		private String[] enumsAbbreviationsValuesDescriptions141;
		
		private String[] enumsAbbreviationsValuesDescriptions142;
		
		private String[] enumsAbbreviationsValuesDescriptions143;
		
		private String[] enumsAbbreviationsValuesDescriptions144;
		
		private String[] enumsAbbreviationsValuesDescriptions145;
		
		private String[] enumsAbbreviationsValuesDescriptions146;
		
		private String[] enumsAbbreviationsValuesDescriptions147;
		
		private String[] enumsAbbreviationsValuesDescriptions148;
		
		private String[] enumsAbbreviationsValuesDescriptions149;
		
		private String[] enumsAbbreviationsValuesDescriptions150;
		
		private String[] enumsAbbreviationsValuesDescriptions151;
		
		private String[] enumsAbbreviationsValuesDescriptions152;
		
		private String[] enumsAbbreviationsValuesDescriptions153;
		
		private String[] enumsAbbreviationsValuesDescriptions154;
		
		private String[] enumsAbbreviationsValuesDescriptions155;
		
		private String[] enumsAbbreviationsValuesDescriptions156;
		
		private String[] enumsAbbreviationsValuesDescriptions157;
		
		private String[] enumsAbbreviationsValuesDescriptions158;
		
		private String[] enumsAbbreviationsValuesDescriptions159;
		
		private String[] enumsAbbreviationsValuesDescriptions160;
		
		private String[] enumsAbbreviationsValuesDescriptions161;
		
		private String[] enumsAbbreviationsValuesDescriptions162;
		
		private String[] enumsAbbreviationsValuesDescriptions163;
		
		private String[] enumsAbbreviationsValuesDescriptions164;
		
		private String[] enumsAbbreviationsValuesDescriptions165;
		
		private String[] enumsAbbreviationsValuesDescriptions166;
		
		private String[] enumsAbbreviationsValuesDescriptions167;
		
		private String[] enumsAbbreviationsValuesDescriptions168;
		
		private String[] enumsAbbreviationsValuesDescriptions169;
		
		private String[] enumsAbbreviationsValuesDescriptions170;
		
		private String[] enumsAbbreviationsValuesDescriptions171;
		
		private String[] enumsAbbreviationsValuesDescriptions172;
		
		private String[] enumsAbbreviationsValuesDescriptions173;
		
		private String[] enumsAbbreviationsValuesDescriptions174;
		
		private String[] enumsAbbreviationsValuesDescriptions175;
		
		private String[] enumsAbbreviationsValuesDescriptions176;
		
		private String[] enumsAbbreviationsValuesDescriptions177;
		
		private String[] enumsAbbreviationsValuesDescriptions178;
		
		private String[] enumsAbbreviationsValuesDescriptions"
cmpl-6wn8kzPH4knjObXf1XioaiTVqXCv9,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_1Test.java,237.49885773658752,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {

		private DictionaryInfo dictionaryInfo;
		
		private FieldInfo fieldInfo;
		
		private TreeMap<String, FieldInfo> fieldsByName;
		
		private String name;
		
		private FieldInfo result;
		
		private List<FieldInfo> fields;
		
		private TreeMap<Integer, FieldInfo> fieldsByTagNumber;
		
		private int tagNumber;
		
		private TreeMap<String, ComponentInfo> componentsByName;
		
		private TreeMap<Integer, ComponentInfo> componentsById;
		
		private TreeMap<String, MessageInfo> messagesByName;
		
		private TreeMap<Integer, MessageInfo> messagesById;
		
		private String version;
		
		private int loadCount;
		
		private boolean result2;
		
		private ComponentInfo componentInfo;
		
		private List<ComponentInfo> components;
		
		private MessageInfo messageInfo;
		
		private List<MessageInfo> messages;
		
		private FieldInfo fieldInfo2;
		
		private GroupInfo groupInfo;
		
		private int id;
		
		private MessageInfo messageInfo2;
		
		private int id2;
		
		private String name2;
		
		private String name3;
		
		private String name4;
		
		private String name5;
		
		private String name6;
		
		private String name7;
		
		private String name8;
		
		private String name9;
		
		private String name10;
		
		private String name11;
		
		private String name12;
		
		private String name13;
		
		private String name14;
		
		private String name15;
		
		private String name16;
		
		private String name17;
		
		private String name18;
		
		private String name19;
		
		private String name20;
		
		private String name21;
		
		private String name22;
		
		private String name23;
		
		private String name24;
		
		private String name25;
		
		private String name26;
		
		private String name27;
		
		private String name28;
		
		private String name29;
		
		private String name30;
		
		private String name31;
		
		private String name32;
		
		private String name33;
		
		private String name34;
		
		private String name35;
		
		private String name36;
		
		private String name37;
		
		private String name38;
		
		private String name39;
		
		private String name40;
		
		private String name41;
		
		private String name42;
		
		private String name43;
		
		private String name44;
		
		private String name45;
		
		private String name46;
		
		private String name47;
		
		private String name48;
		
		private String name49;
		
		private String name50;
		
		private String name51;
		
		private String name52;
		
		private String name53;
		
		private String name54;
		
		private String name55;
		
		private String name56;
		
		private String name57;
		
		private String name58;
		
		private String name59;
		
		private String name60;
		
		private String name61;
		
		private String name62;
		
		private String name63;
		
		private String name64;
		
		private String name65;
		
		private String name66;
		
		private String name67;
		
		private String name68;
		
		private String name69;
		
		private String name70;
		
		private String name71;
		
		private String name72;
		
		private String name73;
		
		private String name74;
		
		private String name75;
		
		private String name76;
		
		private String name77;
		
		private String name78;
		
		private String name79;
		
		private String name80;
		
		private String name81;
		
		private String name82;
		
		private String name83;
		
		private String name84;
		
		private String name85;
		
		private String name86;
		
		private String name87;
		
		private String name88;
		
		private String name89;
		
		private String name90;
		
		private String name91;
		
		private String name92;
		
		private String name93;
		
		private String name94;
		
		private String name95;
		
		private String name96;
		
		private String name97;
		
		private String name98;
		
		private String name99;
		
		private String name100;
		
		private String name101;
		
		private String name102;
		
		private String name103;
		
		private String name104;
		
		private String name105;
		
		private String name106;
		
		private String name107;
		
		private String name108;
		
		private String name109;
		
		private String name110;
		
		private String name111;
		
		private String name112;
		
		private String name113;
		
		private String name114;
		
		private String name115;
		
		private String name116;
		
		private String name117;
		
		private String name118;
		
		private String name119;
		
		private String name120;
		
		private String name121;
		
		private String name122;
		
		private String name123;
		
		private String name124;
		
		private String name125;
		
		private String name126;
		
		private String name127;
		
		private String name128;
		
		private String name129;
		
		private String name130;
		
		private String name131;
		
		private String name132;
		
		private String name133;
		
		private String name134;
		
		private String name135;
		
		private String name136;
		
		private String name137;
		
		private String name138;
		
		private String name139;
		
		private String name140;
		
		private String name141;
		
		private String name142;
		
		private String name143;
		
		private String name144;
		
		private String name145;
		
		private String name146;
		
		private String name147;
		
		private String name148;
		
		private String name149;
		
		private String name150;
		
		private String name151;
		
		private String name152;
		
		private String name153;
		
		private String name154;
		
		private String name155;
		
		private String name156;
		
		private String name157;
		
		private String name158;
		
		private String name159;
		
		private String name160;
		
		private String name161;
		
		private String name162;
		
		private String name163;
		
		private String name164;
		
		private String name165;
		
		private String name166;
		
		private String name167;
		
		private String name168;
		
		private String name169;
		
		private String name170;
		
		private String name171;
		
		private String name172;
		
		private String name173;
		
		private String name174;
		
		private String name175;
		
		private String name176;
		
		private String name177;
		
		private String name178;
		
		private String name179;
		
		private String name180;
		
		private String name181;
		
		private String name182;
		
		private String name183;
		
		private String name184;
		
		private String name185;
		
		private String name186;
		
		private String name187;
		
		private String name188;
		
		private String name189;
		
		private String name190;
		
		private String name191;
		
		private String name192;
		
		private String name193;
		
		private String name194;
		
		private String name195;
		
		private String name196;
		
		private String name197;
		
		private String name198;
		
		private String name199;
		
		private String name200;
		
		private String name201;
		
		private String name202;
		
		private String name203;
		
		private String name204;
		
		private String name205;
		
		private String name206;
		
		private String name207;
		
		private String name208;
		
		private String name209;
		
		private String name210;
		
		private String name211;
		
		private String name212;
		
		private String name213;
		
		private String name214;
		
		private String name215;
		
		private String name216;
		
		private String name217;
		
		private String name218;
		
		private String name219;
		
		private String name220;
		
		private String name221;
		
		private String name222;
		
		private String name223;
		
		private String name224;
		
		private String name225;
		
		private String name226;
		
		private String name227;
		
		private String name228;
		
		private String name229;
		
		private String name230;
		
		private String name231;
		
		private String name232;
		
		private String name233;
		
		private String name234;
		
		private String name235;
		
		private String name236;
		
		private String name237;
		
		private String name238;
		
		private String name239;
		
		private String name240;
		
		private String name241;
		
		private String name242;
		
		private String name243;
		
		private String name244;
		
		private String name245;
		
		private String name246;
		
		private String name247;
		
		private String name248;
		
		private String name249;
		
		private String name250;
		
		private String name251;
		
		private String name252;
		
		private String name253;
		
		private String name254;
		
		private String name255;
		
		private String name256;
		
		private String name257;
		
		private String name258;
		
		private String name259;
		
		private String name260;
		
		private String name261;
		
		private String name262;
		
		private String name263;
		
		private String name264;
		
		private String name265;
		
		private String name266;
		
		private String name267;
		
		private String name268;
		
		private String name269;
		
		private String name270;
		
		private String name271;
		
		private String name272;
		
		private String name273;
		
		private String name274;
		
		private String name275;
		
		private String name276;
		
		private String name277;
		
		private String name278;
		
		private String name279;
		
		private String name280;
		
		private String name281;
		
		private String name282;
		
		private String name283;
		
		private String name284;
		
		private String name285;
		
		private String name286;
		
		private String name287;
		
		private String name288;
		
		private String name289;
		
		private String name290;
		
		private String name291;
		
		private String name292;
		
		private String name293;
		
		private String name294;
		
		private String name295;
		
		private String name296;
		
		private String name297;
		
		private String name298;
		
		private String name299;
		
		private String name300;
		
		private String name301;
		
		private String name302;
		
		private String name303;
		
		private String name304;
		
		private String name305;
		
		private String name306;
		
		private String name307;
		
		private String name308;
		
		private String name309;
		
		private String name310;
		
		private String name311;
		
		private String name312;
		
		private String name313;
		
		private String name314;
		
		private String name315;
		
		private String name316;
		
		private String name317;
		
		private String name318;
		
		private String name319;
		
		private String name320;
		
		private String name321;
		
		private String name322;
		
		private String name323;
		
		private String name324;
		
		private String name325;
		
		private String name326;
		
		private String name327;
		
		private String name328;
		
		private String name329;
		
		private String name330;
		
		private String name331;
		
		private String name332;
		
		private String name333;
		
		private String name334;
		
		private String name335;
		"
cmpl-6wnCaWc5nXr2ao1lynnfajIC8q9CB,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_2Test.java,198.50744581222534,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {

		/**
		 * Test case 1 for method getComponent(int).
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the normal case.
		 * 
		 * Test case 1 expects the method to return the component with the given id.
		 */
		@Test
		void testGetComponent_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 2 for method getComponent(int).
		 * 
		 * Test case 2 is a negative test case.
		 * 
		 * Test case 2 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 2 expects the method to return null.
		 */
		@Test
		void testGetComponent_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(2));
		}
		
		/**
		 * Test case 3 for method getComponent(int).
		 * 
		 * Test case 3 is a negative test case.
		 * 
		 * Test case 3 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 3 expects the method to return null.
		 */
		@Test
		void testGetComponent_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(3));
		}
		
		/**
		 * Test case 4 for method getComponent(int).
		 * 
		 * Test case 4 is a negative test case.
		 * 
		 * Test case 4 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 4 expects the method to return null.
		 */
		@Test
		void testGetComponent_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(4));
		}
		
		/**
		 * Test case 5 for method getComponent(int).
		 * 
		 * Test case 5 is a negative test case.
		 * 
		 * Test case 5 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 5 expects the method to return null.
		 */
		@Test
		void testGetComponent_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(5));
		}
		
		/**
		 * Test case 6 for method getComponent(int).
		 * 
		 * Test case 6 is a negative test case.
		 * 
		 * Test case 6 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 6 expects the method to return null.
		 */
		@Test
		void testGetComponent_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(6));
		}
		
		/**
		 * Test case 7 for method getComponent(int).
		 * 
		 * Test case 7 is a negative test case.
		 * 
		 * Test case 7 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 7 expects the method to return null.
		 */
		@Test
		void testGetComponent_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(7));
		}
		
		/**
		 * Test case 8 for method getComponent(int).
		 * 
		 * Test case 8 is a negative test case.
		 * 
		 * Test case 8 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 8 expects the method to return null.
		 */
		@Test
		void testGetComponent_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(8));
		}
		
		/**
		 * Test case 9 for method getComponent(int).
		 * 
		 * Test case 9 is a negative test case.
		 * 
		 * Test case 9 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 9 expects the method to return null.
		 */
		@Test
		void testGetComponent_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(9));
		}
		
		/**
		 * Test case 10 for method getComponent(int).
		 * 
		 * Test case 10 is a negative test case.
		 * 
		 * Test case 10 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 10 expects the method to return null.
		 */
		@Test
		void testGetComponent_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(10));
		}
}

// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {
		
		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the normal case.
		 * 
		 * Test case 1 expects the method to return the component with the given name.
		 */
		@Test
		void testGetComponent_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(""TestComponent""));
		}
		
		/**
		 * Test case 2 for method getComponent(String).
		 * 
		 * Test case 2 is a negative test case.
		 * 
		 * Test case 2 tests the case where the component with the given name does not exist.
		 * 
		 * Test case 2 expects the method to return null.
		 */
		@Test
		void testGetComponent_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(""TestComponent2""));
		}
		
		/**
		 * Test case 3 for method getComponent(String).
		 * 
		 * Test case 3 is a negative test case.
		 * 
		 * Test case 3 tests the case where the component with the given name does not exist.
		 * 
		 * Test case 3 expects the method to return null.
		 */
		@Test
		void testGetComponent_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(""TestComponent3""));
		}
		
		/**
		 * Test case 4 for method getComponent(String).
		 * 
		 * Test case 4 is a negative test case.
		 * 
		 * Test case 4 tests the case where the component with the given name does not exist.
		 * 
		 * Test case 4 expects the method to return null.
		 */
		@Test
		void testGetComponent_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(""TestComponent4""));
		}
		
		/**
		 * Test case 5 for method getComponent(String).
		 * 
		 * Test case 5 is a negative test case.
		 * 
		 * Test case 5 tests the case where the component with the given name does not exist.
		 * 
		 * Test case 5 expects the method to return null.
		 */
		@Test
		void testGetComponent_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(""TestComponent5""));
		}
		
		/**
		 * Test case 6 for method getComponent(String).
		 * 
		 * Test case 6 is a negative test case.
		 * 
		 * Test case 6 tests the case where the component with the given name does not exist.
		 * 
		 * Test case 6 expects the method to return null.
		 */
		@Test
		void testGetComponent_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(""TestComponent6""));
		}
		
		/**
		 * Test case 7 for method getComponent(String).
		 * 
		 * Test case 7 is a negative test case.
		 * 
		 * Test case 7 tests the case where the component with the given name does not exist.
		 * 
		 * Test case 7 expects the method to return null.
		 */
		@Test
		void testGetComponent_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(""TestComponent7""));
		}
		
		/**
		 * Test case 8 for method getComponent(String).
		 * 
		 * Test case 8 is a negative test case.
		 * 
		 * Test case 8 tests the case where the component with the given name does not exist.
		 * 
		 * Test case 8 expects the method to return null.
		 */
		@Test
		void testGetComponent_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(""TestComponent8""));
		}
		
		/**
		 * Test case 9 for method getComponent(String).
		 * 
		 * Test case 9 is a negative test case.
		 * 
		 * Test case 9 tests the case where the component with the given name does not exist.
		 * 
		 * Test case 9 expects the method to return null.
		 */
		@Test
		void testGetComponent_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(""TestComponent9""));
		}
		
		/**
		 * Test case 10 for method getComponent(String).
		 * 
		 * Test case 10 is a negative test case.
		 * 
		 * Test case 10 tests the case where the component with the given name does not exist.
		 * 
		 * Test case 10 expects the method to return null.
		 */
		@Test
		void testGetComponent_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(""TestComponent10""));
		}
}

// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_4Test {
		
		/**
		 * Test case 1 for method getField(int).
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the normal case.
		 * 
		 * Test case 1 expects the method to return the field with the given tag number.
		 */
		@Test
		void testGet"
d5051073-52ec-4bce-af14-a930639062c7,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_3Test.java,-1,"ERROR - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)","// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {
"
cmpl-6wnQRessPI0SQ2pimUh1mCzTr7Jzk,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_4Test.java,181.21491742134094,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {

		/**
		 * Test case 1 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(1);
				assertEquals(messageInfo, result);
		}
		
		/**
		 * Test case 2 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(2);
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(0);
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(-1);
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MAX_VALUE);
				assertNull(result);
		}
		
		/**
		 * Test case 6 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MIN_VALUE);
				assertNull(result);
		}
		
		/**
		 * Test case 7 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MAX_VALUE - 1);
				assertNull(result);
		}
		
		/**
		 * Test case 8 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MIN_VALUE + 1);
				assertNull(result);
		}
		
		/**
		 * Test case 9 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MAX_VALUE / 2);
				assertNull(result);
		}
		
		/**
		 * Test case 10 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MIN_VALUE / 2);
				assertNull(result);
		}
}

// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {
		
		/**
		 * Test case 1 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * @see DictionaryInfo#getMessage(String)
		 */
		@Test
		public void testGetMessage_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""Heartbeat"");
				assertEquals(messageInfo, result);
		}
		
		/**
		 * Test case 2 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * @see DictionaryInfo#getMessage(String)
		 */
		@Test
		public void testGetMessage_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""TestRequest"");
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * @see DictionaryInfo#getMessage(String)
		 */
		@Test
		public void testGetMessage_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage("""");
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * @see DictionaryInfo#getMessage(String)
		 */
		@Test
		public void testGetMessage_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(null);
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * @see DictionaryInfo#getMessage(String)
		 */
		@Test
		public void testGetMessage_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""HeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeartbeatHeart"
cmpl-6wnTMjTDBq1Q3rVzTZ4p4rGa0V2fW,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_5Test.java,183.568354845047,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {

		/**
		 * Test case 1 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the normal case.
		 * 
		 * Test case 1 expects the method to return the message with the given name.
		 */
		@Test
		void testGetMessage_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""Heartbeat"");
				assertEquals(messageInfo, result);
		}
		
		/**
		 * Test case 2 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 2 is a negative test case.
		 * 
		 * Test case 2 tests the case where the message with the given name does not exist.
		 * 
		 * Test case 2 expects the method to return null.
		 */
		@Test
		void testGetMessage_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""TestRequest"");
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 3 is a negative test case.
		 * 
		 * Test case 3 tests the case where the message with the given name does not exist.
		 * 
		 * Test case 3 expects the method to return null.
		 */
		@Test
		void testGetMessage_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""Heartbeat1"");
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 4 is a negative test case.
		 * 
		 * Test case 4 tests the case where the message with the given name does not exist.
		 * 
		 * Test case 4 expects the method to return null.
		 */
		@Test
		void testGetMessage_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""Heartbeat2"");
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 5 is a negative test case.
		 * 
		 * Test case 5 tests the case where the message with the given name does not exist.
		 * 
		 * Test case 5 expects the method to return null.
		 */
		@Test
		void testGetMessage_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""Heartbeat3"");
				assertNull(result);
		}
		
		/**
		 * Test case 6 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 6 is a negative test case.
		 * 
		 * Test case 6 tests the case where the message with the given name does not exist.
		 * 
		 * Test case 6 expects the method to return null.
		 */
		@Test
		void testGetMessage_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""Heartbeat4"");
				assertNull(result);
		}
		
		/**
		 * Test case 7 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 7 is a negative test case.
		 * 
		 * Test case 7 tests the case where the message with the given name does not exist.
		 * 
		 * Test case 7 expects the method to return null.
		 */
		@Test
		void testGetMessage_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""Heartbeat5"");
				assertNull(result);
		}
		
		/**
		 * Test case 8 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 8 is a negative test case.
		 * 
		 * Test case 8 tests the case where the message with the given name does not exist.
		 * 
		 * Test case 8 expects the method to return null.
		 */
		@Test
		void testGetMessage_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""Heartbeat6"");
				assertNull(result);
		}
		
		/**
		 * Test case 9 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 9 is a negative test case.
		 * 
		 * Test case 9 tests the case where the message with the given name does not exist.
		 * 
		 * Test case 9 expects the method to return null.
		 */
		@Test
		void testGetMessage_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""Heartbeat7"");
				assertNull(result);
		}
		
		/**
		 * Test case 10 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 10 is a negative test case.
		 * 
		 * Test case 10 tests the case where the message with the given name does not exist.
		 * 
		 * Test case 10 expects the method to return null.
		 */
		@Test
		void testGetMessage_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(""Heartbeat8"");
				assertNull(result);
		}
}

// MessageInfo.java
/**
 * MessageInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX message.
 *
 * @author jramoyo
 */
public class MessageInfo {

    private int id;

    private String name;

    private String msgType;

    private String msgCategory;

    private boolean admin;

    private boolean app;

    private boolean repeatingGroup;

    private List<FieldInfo> fields;

    private List<FieldInfo> headerFields;

    private List<FieldInfo> trailerFields;

    private List<FieldInfo> requiredFields;

    private List<FieldInfo> optionalFields;

    private List<FieldInfo> repeatingFields;

    private List<FieldInfo> nonRepeatingFields;

    private List<FieldInfo> nonHeaderFields;

    private List<FieldInfo> nonTrailerFields;

    private List<FieldInfo> nonRequiredFields;

    private List<FieldInfo> nonOptionalFields;

    private List<FieldInfo> nonRepeatingGroupFields;

    private List<FieldInfo> nonRepeatingGroupHeaderFields;

    private List<FieldInfo> nonRepeatingGroupTrailerFields;

    private List<FieldInfo> nonRepeatingGroupRequiredFields;

    private List<FieldInfo> nonRepeatingGroupOptionalFields;

    private List<FieldInfo> nonRepeatingGroupNonHeaderFields;

    private List<FieldInfo> nonRepeatingGroupNonTrailerFields;

    private List<FieldInfo> nonRepeatingGroupNonRequiredFields;

    private List<FieldInfo> nonRepeatingGroupNonOptionalFields;

    private List<FieldInfo> repeatingGroupFields;

    private List<FieldInfo> repeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRequiredFields;

    private List<FieldInfo> repeatingGroupOptionalFields;

    private List<FieldInfo> repeatingGroupNonHeaderFields;

    private List<FieldInfo> repeatingGroupNonTrailerFields;

    private List<FieldInfo> repeatingGroupNonRequiredFields;

    private List<FieldInfo> repeatingGroupNonOptionalFields;

    private List<FieldInfo> repeatingGroupRepeatingFields;

    private List<FieldInfo> repeatingGroupNonRepeatingFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRequiredFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupOptionalFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupNonHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupNonTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupNonRequiredFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupNonOptionalFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupNonRepeatingFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupNonRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRequiredFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupOptionalFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupNonHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupNonTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupNonRequiredFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupNonOptionalFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupNonRepeatingFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupNonRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRequiredFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupOptionalFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupNonHeaderFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupNonTrailerFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupNonRequiredFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupNonOptionalFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupNonRepeatingFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupNonRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupRequiredFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupOptionalFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupNonHeaderFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupNonTrailerFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupNonRequiredFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupNonOptionalFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupRepeatingFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupNonRepeatingFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupNonRepeatingGroupRepeatingGroupNonRepeatingGroupFields;

    private List"
cmpl-6wnWJdZh5b6opDtk4N5Hztmkp2RvM,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_0Test.java,122.96319627761841,length,"// FieldInfo.java
/**
 * FieldInfo.java 9:05:06 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    private int tagNumber;

    private String name;

    private String dataType;

    private String description;

    private String abbreviation;

    private String overrideXmlName;

    private String baseCategory;

    private String baseCategoryXmlName;

    private String unionDataType;

    private String usesEnumFromTag;

    private String comments;

    private int length;

    private boolean isNotRequiredXml;

    private String deprecatingVersion;

    private List<ComponentInfo> requiringComponents;

    private TreeMap<String, ValueInfo> validValues;

    /**
     * Returns the tagNumber
     *
     * @return the tagNumber
     */
    public int getTagNumber() {
        return tagNumber;
    }

    /**
     * Modifies the tagNumber
     *
     * @param tagNumber - the tagNumber to set
     */
    public void setTagNumber(int tagNumber) {
        this.tagNumber = tagNumber;
    }

    /**
     * Returns the fieldName
     *
     * @return the fieldName
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the fieldName
     *
     * @param name - the fieldName to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the dataType
     *
     * @return the dataType
     */
    public String getDataType() {
        return dataType;
    }

    /**
     * Modifies the dataType
     *
     * @param dataType - the dataType to set
     */
    public void setDataType(String dataType) {
        this.dataType = dataType;
    }

    /**
     * Returns the description
     *
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Modifies the description
     *
     * @param description - the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Returns the comments
     *
     * @return the comments
     */
    public String getComments() {
        return comments;
    }

    /**
     * Modifies the comments
     *
     * @param comments - the comments to set
     */
    public void setComments(String comments) {
        this.comments = comments;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the overrideXmlName
     *
     * @return the overrideXmlName
     */
    public String getOverrideXmlName() {
        return overrideXmlName;
    }

    /**
     * Modifies the overrideXmlName
     *
     * @param overrideXmlName - the overrideXmlName to set
     */
    public void setOverrideXmlName(String overrideXmlName) {
        this.overrideXmlName = overrideXmlName;
    }

    /**
     * Returns the baseCategory
     *
     * @return the baseCategory
     */
    public String getBaseCategory() {
        return baseCategory;
    }

    /**
     * Modifies the baseCategory
     *
     * @param baseCategory - the baseCategory to set
     */
    public void setBaseCategory(String baseCategory) {
        this.baseCategory = baseCategory;
    }

    /**
     * Returns the baseCategoryXmlName
     *
     * @return the baseCategoryXmlName
     */
    public String getBaseCategoryXmlName() {
        return baseCategoryXmlName;
    }

    /**
     * Modifies the baseCategoryXmlName
     *
     * @param baseCategoryXmlName - the baseCategoryXmlName to set
     */
    public void setBaseCategoryXmlName(String baseCategoryXmlName) {
        this.baseCategoryXmlName = baseCategoryXmlName;
    }

    /**
     * Returns the unionDataType
     *
     * @return the unionDataType
     */
    public String getUnionDataType() {
        return unionDataType;
    }

    /**
     * Modifies the unionDataType
     *
     * @param unionDataType - the unionDataType to set
     */
    public void setUnionDataType(String unionDataType) {
        this.unionDataType = unionDataType;
    }

    /**
     * Returns the usesEnumFromTag
     *
     * @return the usesEnumFromTag
     */
    public String getUsesEnumFromTag() {
        return usesEnumFromTag;
    }

    /**
     * Modifies the usesEnumFromTag
     *
     * @param usesEnumFromTag - the usesEnumFromTag to set
     */
    public void setUsesEnumFromTag(String usesEnumFromTag) {
        this.usesEnumFromTag = usesEnumFromTag;
    }

    /**
     * Returns the length
     *
     * @return the length
     */
    public int getLength() {
        return length;
    }

    /**
     * Modifies the length
     *
     * @param length - the length to set
     */
    public void setLength(int length) {
        this.length = length;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the deprecatingVersion
     *
     * @return the deprecatingVersion
     */
    public String getDeprecatingVersion() {
        return deprecatingVersion;
    }

    /**
     * Modifies the deprecatingVersion
     *
     * @param deprecatingVersion - the deprecatingVersion to set
     */
    public void setDeprecatingVersion(String deprecatingVersion) {
        this.deprecatingVersion = deprecatingVersion;
    }

    /**
     * Returns the requiringComponents
     *
     * @return the requiringComponents
     */
    public List<ComponentInfo> getRequiringComponents() {
        return requiringComponents;
    }

    /**
     * Add a requiringComponent
     *
     * @param component - a requiringComponent
     */
    public void addRequiringComponent(ComponentInfo component) {
        if (requiringComponents == null) {
            requiringComponents = new ArrayList<ComponentInfo>();
        }
        requiringComponents.add(component);
    }

    /**
     * Modifies the requiringComponents
     *
     * @param requiringComponents - the requiringComponent to set
     */
    protected void setRequiringComponents(List<ComponentInfo> requiringComponents) {
        this.requiringComponents = requiringComponents;
    }

    /**
     * Returns whether this field is required in the specified component
     *
     * @param component - a component
     * @return whether this field is required in the specified component
     */
    public boolean isRequiredInComponent(ComponentInfo component) {
        if (requiringComponents != null) {
            return requiringComponents.contains(component);
        } else {
            return false;
        }
    }

    /**
     * Returns the validValues
     *
     * @return the validValues
     */
    public List<ValueInfo> getValidValues() {
        if (validValues != null) {
            return new ArrayList<ValueInfo>(validValues.values());
        } else {
            return null;
        }
    }

    /**
     * Adds a value
     *
     * @param value - a value
     */
    public void addValidValue(ValueInfo value) {
        if (validValues == null) {
            validValues = new TreeMap<String, ValueInfo>();
        }
        validValues.put(value.getValue(), value);
    }

    /**
     * Returns whether a given value is valid
     *
     * @param value - a value
     * @return whether a given value is valid
     */
    public boolean isValidValue(String value) {
        return validValues.keySet().contains(value);
    }

    /**
     * Modifies the validValues
     *
     * @param validValues - the validValues to set
     */
    protected void setValidValues(TreeMap<String, ValueInfo> validValues) {
        this.validValues = validValues;
    }

    /**
     * Returns the validValues Map
     *
     * @return the validValues Map
     */
    protected TreeMap<String, ValueInfo> getValidValuesMap() {
        return validValues;
    }
}
","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {

		/**
		 * Test case 1 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_1() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
		}
		
		/**
		 * Test case 2 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_2() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
		}
		
		/**
		 * Test case 3 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_3() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(null));
		}
		
		/**
		 * Test case 4 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_4() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 5 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_5() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 6 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_6() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 7 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_7() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 8 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_8() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 9 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_9() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 10 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_10() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
}

// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_1Test {
		
		/**
		 * Test case 1 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_1() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
		}
		
		/**
		 * Test case 2 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_2() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
		}
		
		/**
		 * Test case 3 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_3() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(null));
		}
		
		/**
		 * Test case 4 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_4() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 5 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_5() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 6 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_6() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 7 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_7() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 8 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_8() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 9 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_9() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 10 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_10() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
}

// FieldInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_2Test {
		
		/**
		 * Test case 1 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_1() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
		}
		
		/**
		 * Test case 2 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_2() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
		}
		
		/**
		 * Test case 3 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_3() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(null));
		}
		
		/**
		 * Test case 4 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_4() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 5 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_5() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 6 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_6() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 7 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_7() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 8 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_8() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 9 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
	"
cmpl-6wnYIN2Suv6WIxyseQtcXUH3MCbSm,/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_1Test.java,137.77851057052612,length,"// FieldInfo.java
/**
 * FieldInfo.java 9:05:06 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    private int tagNumber;

    private String name;

    private String dataType;

    private String description;

    private String abbreviation;

    private String overrideXmlName;

    private String baseCategory;

    private String baseCategoryXmlName;

    private String unionDataType;

    private String usesEnumFromTag;

    private String comments;

    private int length;

    private boolean isNotRequiredXml;

    private String deprecatingVersion;

    private List<ComponentInfo> requiringComponents;

    private TreeMap<String, ValueInfo> validValues;

    /**
     * Returns the tagNumber
     *
     * @return the tagNumber
     */
    public int getTagNumber() {
        return tagNumber;
    }

    /**
     * Modifies the tagNumber
     *
     * @param tagNumber - the tagNumber to set
     */
    public void setTagNumber(int tagNumber) {
        this.tagNumber = tagNumber;
    }

    /**
     * Returns the fieldName
     *
     * @return the fieldName
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the fieldName
     *
     * @param name - the fieldName to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the dataType
     *
     * @return the dataType
     */
    public String getDataType() {
        return dataType;
    }

    /**
     * Modifies the dataType
     *
     * @param dataType - the dataType to set
     */
    public void setDataType(String dataType) {
        this.dataType = dataType;
    }

    /**
     * Returns the description
     *
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Modifies the description
     *
     * @param description - the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Returns the comments
     *
     * @return the comments
     */
    public String getComments() {
        return comments;
    }

    /**
     * Modifies the comments
     *
     * @param comments - the comments to set
     */
    public void setComments(String comments) {
        this.comments = comments;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the overrideXmlName
     *
     * @return the overrideXmlName
     */
    public String getOverrideXmlName() {
        return overrideXmlName;
    }

    /**
     * Modifies the overrideXmlName
     *
     * @param overrideXmlName - the overrideXmlName to set
     */
    public void setOverrideXmlName(String overrideXmlName) {
        this.overrideXmlName = overrideXmlName;
    }

    /**
     * Returns the baseCategory
     *
     * @return the baseCategory
     */
    public String getBaseCategory() {
        return baseCategory;
    }

    /**
     * Modifies the baseCategory
     *
     * @param baseCategory - the baseCategory to set
     */
    public void setBaseCategory(String baseCategory) {
        this.baseCategory = baseCategory;
    }

    /**
     * Returns the baseCategoryXmlName
     *
     * @return the baseCategoryXmlName
     */
    public String getBaseCategoryXmlName() {
        return baseCategoryXmlName;
    }

    /**
     * Modifies the baseCategoryXmlName
     *
     * @param baseCategoryXmlName - the baseCategoryXmlName to set
     */
    public void setBaseCategoryXmlName(String baseCategoryXmlName) {
        this.baseCategoryXmlName = baseCategoryXmlName;
    }

    /**
     * Returns the unionDataType
     *
     * @return the unionDataType
     */
    public String getUnionDataType() {
        return unionDataType;
    }

    /**
     * Modifies the unionDataType
     *
     * @param unionDataType - the unionDataType to set
     */
    public void setUnionDataType(String unionDataType) {
        this.unionDataType = unionDataType;
    }

    /**
     * Returns the usesEnumFromTag
     *
     * @return the usesEnumFromTag
     */
    public String getUsesEnumFromTag() {
        return usesEnumFromTag;
    }

    /**
     * Modifies the usesEnumFromTag
     *
     * @param usesEnumFromTag - the usesEnumFromTag to set
     */
    public void setUsesEnumFromTag(String usesEnumFromTag) {
        this.usesEnumFromTag = usesEnumFromTag;
    }

    /**
     * Returns the length
     *
     * @return the length
     */
    public int getLength() {
        return length;
    }

    /**
     * Modifies the length
     *
     * @param length - the length to set
     */
    public void setLength(int length) {
        this.length = length;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the deprecatingVersion
     *
     * @return the deprecatingVersion
     */
    public String getDeprecatingVersion() {
        return deprecatingVersion;
    }

    /**
     * Modifies the deprecatingVersion
     *
     * @param deprecatingVersion - the deprecatingVersion to set
     */
    public void setDeprecatingVersion(String deprecatingVersion) {
        this.deprecatingVersion = deprecatingVersion;
    }

    /**
     * Returns the requiringComponents
     *
     * @return the requiringComponents
     */
    public List<ComponentInfo> getRequiringComponents() {
        return requiringComponents;
    }

    /**
     * Add a requiringComponent
     *
     * @param component - a requiringComponent
     */
    public void addRequiringComponent(ComponentInfo component) {
        if (requiringComponents == null) {
            requiringComponents = new ArrayList<ComponentInfo>();
        }
        requiringComponents.add(component);
    }

    /**
     * Modifies the requiringComponents
     *
     * @param requiringComponents - the requiringComponent to set
     */
    protected void setRequiringComponents(List<ComponentInfo> requiringComponents) {
        this.requiringComponents = requiringComponents;
    }

    /**
     * Returns whether this field is required in the specified component
     *
     * @param component - a component
     * @return whether this field is required in the specified component
     */
    public boolean isRequiredInComponent(ComponentInfo component) {
        if (requiringComponents != null) {
            return requiringComponents.contains(component);
        } else {
            return false;
        }
    }

    /**
     * Returns the validValues
     *
     * @return the validValues
     */
    public List<ValueInfo> getValidValues() {
        if (validValues != null) {
            return new ArrayList<ValueInfo>(validValues.values());
        } else {
            return null;
        }
    }

    /**
     * Adds a value
     *
     * @param value - a value
     */
    public void addValidValue(ValueInfo value) {
        if (validValues == null) {
            validValues = new TreeMap<String, ValueInfo>();
        }
        validValues.put(value.getValue(), value);
    }

    /**
     * Returns whether a given value is valid
     *
     * @param value - a value
     * @return whether a given value is valid
     */
    public boolean isValidValue(String value) {
        return validValues.keySet().contains(value);
    }

    /**
     * Modifies the validValues
     *
     * @param validValues - the validValues to set
     */
    protected void setValidValues(TreeMap<String, ValueInfo> validValues) {
        this.validValues = validValues;
    }

    /**
     * Returns the validValues Map
     *
     * @return the validValues Map
     */
    protected TreeMap<String, ValueInfo> getValidValuesMap() {
        return validValues;
    }
}
","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {

		/**
		 * Test case 1.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns true if the given value is valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_1() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertTrue(fieldInfo.isValidValue(""1""));
				assertTrue(fieldInfo.isValidValue(""2""));
				assertTrue(fieldInfo.isValidValue(""3""));
				assertTrue(fieldInfo.isValidValue(""4""));
				assertTrue(fieldInfo.isValidValue(""5""));
				assertTrue(fieldInfo.isValidValue(""6""));
				assertTrue(fieldInfo.isValidValue(""7""));
				assertTrue(fieldInfo.isValidValue(""8""));
				assertTrue(fieldInfo.isValidValue(""9""));
				assertTrue(fieldInfo.isValidValue(""10""));
		}
		
		/**
		 * Test case 2.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is invalid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_2() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""11""));
				assertFalse(fieldInfo.isValidValue(""12""));
				assertFalse(fieldInfo.isValidValue(""13""));
				assertFalse(fieldInfo.isValidValue(""14""));
				assertFalse(fieldInfo.isValidValue(""15""));
				assertFalse(fieldInfo.isValidValue(""16""));
				assertFalse(fieldInfo.isValidValue(""17""));
				assertFalse(fieldInfo.isValidValue(""18""));
				assertFalse(fieldInfo.isValidValue(""19""));
				assertFalse(fieldInfo.isValidValue(""20""));
		}
		
		/**
		 * Test case 3.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is invalid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_3() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""21""));
				assertFalse(fieldInfo.isValidValue(""22""));
				assertFalse(fieldInfo.isValidValue(""23""));
				assertFalse(fieldInfo.isValidValue(""24""));
				assertFalse(fieldInfo.isValidValue(""25""));
				assertFalse(fieldInfo.isValidValue(""26""));
				assertFalse(fieldInfo.isValidValue(""27""));
				assertFalse(fieldInfo.isValidValue(""28""));
				assertFalse(fieldInfo.isValidValue(""29""));
				assertFalse(fieldInfo.isValidValue(""30""));
		}
		
		/**
		 * Test case 4.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is invalid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_4() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""31""));
				assertFalse(fieldInfo.isValidValue(""32""));
				assertFalse(fieldInfo.isValidValue(""33""));
				assertFalse(fieldInfo.isValidValue(""34""));
				assertFalse(fieldInfo.isValidValue(""35""));
				assertFalse(fieldInfo.isValidValue(""36""));
				assertFalse(fieldInfo.isValidValue(""37""));
				assertFalse(fieldInfo.isValidValue(""38""));
				assertFalse(fieldInfo.isValidValue(""39""));
				assertFalse(fieldInfo.isValidValue(""40""));
		}
		
		/**
		 * Test case 5.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is invalid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_5() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""41""));
				assertFalse(fieldInfo.isValidValue(""42""));
				assertFalse(fieldInfo.isValidValue(""43""));
				assertFalse(fieldInfo.isValidValue(""44""));
				assertFalse(fieldInfo.isValidValue(""45""));
				assertFalse(fieldInfo.isValidValue(""46""));
				assertFalse(fieldInfo.isValidValue(""47""));
				assertFalse(fieldInfo.isValidValue(""48""));
				assertFalse(fieldInfo.isValidValue(""49""));
				assertFalse(fieldInfo.isValidValue(""50""));
		}
		
		/**
		 * Test case 6.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is invalid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_6() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""51""));
				assertFalse(fieldInfo.isValidValue(""52""));
				assertFalse(fieldInfo.isValidValue(""53""));
				assertFalse(fieldInfo.isValidValue(""54""));
				assertFalse(fieldInfo.isValidValue(""55""));
				assertFalse(fieldInfo.isValidValue(""56""));
				assertFalse(fieldInfo.isValidValue(""57""));
				assertFalse(fieldInfo.isValidValue(""58""));
				assertFalse(fieldInfo.isValidValue(""59""));
				assertFalse(fieldInfo.isValidValue(""60""));
		}
		
		/**
		 * Test case 7.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is invalid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_7() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""61""));
				assertFalse(fieldInfo.isValidValue(""62""));
				assertFalse(fieldInfo.isValidValue(""63""));
				assertFalse(fieldInfo.isValidValue(""64""));
				assertFalse(fieldInfo.isValidValue(""65""));
	"
