[
    {
        "id": "cmpl-6wcG0yDsUZyckIiJXzlBTVUnVQe87",
        "object": "text_completion",
        "created": 1679428104,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// SBMLFilter_0Test.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.\n*/\nclass SBMLFilter_0Test {\n\t\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_0() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_1() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_2() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_3() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml.gz\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_4() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml.gz\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_5() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt.gz\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_6() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml.zip\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_7() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml.zip\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_8() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt.zip\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_9() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml.bz2\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_10() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml.bz2\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_11() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt.bz2\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1655,
            "completion_tokens": 4000,
            "total_tokens": 5655
        },
        "time_taken": 122.21838450431824,
        "prompt_id": "/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_0Test.java",
        "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n//import java.util.Properties;\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    /**\n     * XGMML Files are Graphs.\n     */\n    private static String fileNature = ImportHandler.GRAPH_NATURE;\n\n    /**\n     * File Extensions.\n     */\n    private static String[] fileExtensions = { \"xml\", \"sbml\" };\n\n    /**\n     * Filter Description.\n     */\n    private static String description = \"SBML files\";\n\n    /**\n     * Constructor.\n     */\n    public SBMLFilter() {\n        super(fileExtensions, description, fileNature);\n    }\n\n    /**\n     * Indicates which files the SBMLFilter accepts.\n     * <p/>\n     * This method will return true only if:\n     * <UL>\n     * <LI>File ends in .xml or .sbml;  and\n     * <LI>File headers includes the www.sbml.org namespace declaration.\n     * </UL>\n     *\n     * @param file File\n     * @return true or false.\n     */\n    public boolean accept(File file) {\n        String fileName = file.getName();\n        boolean firstPass = false;\n        //  First test:  file must end with one of the registered file extensions.\n        for (int i = 0; i < fileExtensions.length; i++) {\n            if (fileName.endsWith(fileExtensions[i])) {\n                firstPass = true;\n            }\n        }\n        if (firstPass) {\n            //  Second test:  file header must contain the biopax declaration\n            try {\n                String header = getHeader(file);\n                if (header.indexOf(\"www.sbml.org\") > 0) {\n                    return true;\n                }\n            } catch (IOException e) {\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Gets the appropirate GraphReader object.\n     * If the libsbml is not available use the old sbml library.\n     *\n     * @author Matthias Koenig\n     * @param fileName File Name.\n     * @return GraphReader Object.\n     */\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader ...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n",
        "test_prompt": "// SBMLFilter_0Test.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.\n*/\nclass SBMLFilter_0Test {",
        "original_generated_code": "\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_0() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_1() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_2() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_3() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml.gz\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_4() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml.gz\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_5() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt.gz\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_6() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml.zip\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_7() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml.zip\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_8() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt.zip\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_9() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml.bz2\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_10() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml.bz2\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_11() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt.bz2\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n}\n\n// SBMLFilter_1Test.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_0() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_1() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_2() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_3() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml.gz\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_4() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml.gz\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_5() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt.gz\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_6() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml.zip\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_7() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml.zip\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_8() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt.zip\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_9() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml.bz2\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_10() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml.bz2\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_File_11() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.txt.bz2\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n}\n\n// SBMLGraphReader.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.CyNetwork;\nimport cytoscape.Cytoscape;\nimport cytoscape.data.CyAttributes;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.data.readers.MetadataEntries;\nimport cytoscape.data.readers.MetadataParser;\nimport cytoscape.data.readers.MetadataParser.MetadataType;\nimport cytoscape.data.readers.TextFileReader;\nimport cytoscape.data.readers.TextJarReader;\nimport cytoscape.data.readers.TextJarReader.",
        "applied_heuristics": "H1"
    },
    {
        "id": "cmpl-6wcHyReIVjjM5eMKxIq3hQYCIUMsp",
        "object": "text_completion",
        "created": 1679428226,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// SBMLFilter_1Test.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {\n\t\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_1() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000012.xml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_2() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000012.sbml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_3() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000013.xml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_4() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000013.sbml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_5() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000014.xml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_6() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000014.sbml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_7() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000015.xml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_8() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000015.sbml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_9() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000016.xml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_10() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000016.sbml\");\n\t\tassertNotNull(result);\n\t}\n\t\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1656,
            "completion_tokens": 4000,
            "total_tokens": 5656
        },
        "time_taken": 120.37230968475342,
        "prompt_id": "/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_1Test.java",
        "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n//import java.util.Properties;\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    /**\n     * XGMML Files are Graphs.\n     */\n    private static String fileNature = ImportHandler.GRAPH_NATURE;\n\n    /**\n     * File Extensions.\n     */\n    private static String[] fileExtensions = { \"xml\", \"sbml\" };\n\n    /**\n     * Filter Description.\n     */\n    private static String description = \"SBML files\";\n\n    /**\n     * Constructor.\n     */\n    public SBMLFilter() {\n        super(fileExtensions, description, fileNature);\n    }\n\n    /**\n     * Indicates which files the SBMLFilter accepts.\n     * <p/>\n     * This method will return true only if:\n     * <UL>\n     * <LI>File ends in .xml or .sbml;  and\n     * <LI>File headers includes the www.sbml.org namespace declaration.\n     * </UL>\n     *\n     * @param file File\n     * @return true or false.\n     */\n    public boolean accept(File file) {\n        String fileName = file.getName();\n        boolean firstPass = false;\n        //  First test:  file must end with one of the registered file extensions.\n        for (int i = 0; i < fileExtensions.length; i++) {\n            if (fileName.endsWith(fileExtensions[i])) {\n                firstPass = true;\n            }\n        }\n        if (firstPass) {\n            //  Second test:  file header must contain the biopax declaration\n            try {\n                String header = getHeader(file);\n                if (header.indexOf(\"www.sbml.org\") > 0) {\n                    return true;\n                }\n            } catch (IOException e) {\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Gets the appropirate GraphReader object.\n     * If the libsbml is not available use the old sbml library.\n     *\n     * @author Matthias Koenig\n     * @param fileName File Name.\n     * @return GraphReader Object.\n     */\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader ...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n",
        "test_prompt": "// SBMLFilter_1Test.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilter_1Test {",
        "original_generated_code": "\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_1() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000012.xml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_2() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000012.sbml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_3() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000013.xml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_4() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000013.sbml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_5() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000014.xml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_6() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000014.sbml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_7() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000015.xml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_8() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000015.sbml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_9() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000016.xml\");\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.lang.Exception\n\t */\n\t@Test\n\tvoid testGetReader_10() throws Exception {\n\t\tSystem.out.println(\"getReader\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader result = instance.getReader(\"test/data/sbml/BIOMD0000000016.sbml\");\n\t\tassertNotNull(result);\n\t}\n\t\n}\n\n// SBMLFilter_2Test.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#accept(java.io.File)} method.\n*/\nclass SBMLFilter_2Test {\n\t\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_1() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.sbml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_2() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000013.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_3() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000013.sbml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_4() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000014.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_5() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000014.sbml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_6() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000015.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_7() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000015.sbml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_8() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000016.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t */\n\t@Test\n\tvoid testAccept_9() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000016.sbml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n}\n\n// SBMLGraphReader.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.CyNetwork;\nimport cytoscape.Cytoscape;\nimport cytoscape.data.CyAttributes;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.data.readers.TextFileReader;\nimport cytoscape.data.readers.TextJarReader;\nimport cytoscape.data.readers.TextJarReader.JarEntryReader;\nimport cytoscape.data.readers.TextJarReader.JarInputStreamReader;\nimport cytoscape.data.readers.TextJarReader.URLJarReader;\nimport cytoscape.data.readers.TextJarReader.URLReader;\nimport cytoscape.data.readers.TextJarReader.ZipEntryReader;\nimport cytoscape.data.readers.TextJarReader.ZipInputStreamReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader.ZipInputStreamURLReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader.ZipInputStreamURLReader.ZipInputStreamURLJarReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader.ZipInputStreamURLReader.ZipInputStreamURLJarReader.ZipInputStreamURLJarEntryReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader.ZipInputStreamURLReader.ZipInputStreamURLReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader.ZipInputStreamURLReader.ZipInputStreamURLReader.ZipInputStreamURLJarReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader.ZipInputStreamURLReader.ZipInputStreamURLReader.ZipInputStreamURLJarReader.ZipInputStreamURLJarEntryReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader.ZipInputStreamURLReader.ZipInputStreamURLReader.ZipInputStreamURLReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader.ZipInputStreamURLReader.ZipInputStreamURLReader.ZipInputStreamURLReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader.ZipInputStreamURLReader.ZipInputStreamURLReader.ZipInputStreamURLReader.ZipInputStreamURLJarReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader.ZipInputStreamURLReader.ZipInputStreamURLReader.ZipInputStreamURLReader.ZipInputStreamURLJarReader.ZipInputStreamURLJarEntryReader;\nimport cytoscape.data.readers.TextJarReader.ZipURLStreamReader",
        "applied_heuristics": "H1"
    },
    {
        "id": "cmpl-6wcJuccyPs4znLIIKeU4JxqCiddjA",
        "object": "text_completion",
        "created": 1679428346,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// SBMLVisualStyleFactoryTest.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLVisualStyleFactory}.\n* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n*/\nclass SBMLVisualStyleFactoryTest {\n\t\t\n\t/**\n\t * Test of createVisualStyle method, of class SBMLVisualStyleFactory.\n\t */\n\t@Test\n\tvoid testCreateVisualStyle() {\n\t\tSystem.out.println(\"createVisualStyle\");\n\t\tCyNetwork network = null;\n\t\tVisualStyle result = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertNotNull(result);\n\t}\n\t\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 2170,
            "completion_tokens": 4000,
            "total_tokens": 6170
        },
        "time_taken": 152.0298216342926,
        "prompt_id": "/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLVisualStyleFactory.java",
        "original_code": "// SBMLVisualStyleFactory.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\n\n/**\n * VisualStyleFactory.java\n * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.\n *\n * @author W.P.A. Ligtenberg, Eindhoven University of Technology\n */\npublic class SBMLVisualStyleFactory {\n\n    /**\n     */\n    public static final String SBMLReader_VS = \"SBMLReader Style\";\n\n    /**\n     */\n    public static final String NODE_TYPE_ATT = \"sbml type\";\n\n    /**\n     */\n    public static final String EDGE_TYPE_ATT = \"interaction\";\n\n    /**\n     *  DOCUMENT ME!\n     *\n     * @param network DOCUMENT ME!\n     *\n     * @return  DOCUMENT ME!\n     */\n    public static VisualStyle createVisualStyle(CyNetwork network) {\n        VisualMappingManager vmManager = Cytoscape.getVisualMappingManager();\n        NodeAppearanceCalculator nodeAppCalc = new NodeAppearanceCalculator();\n        EdgeAppearanceCalculator edgeAppCalc = new EdgeAppearanceCalculator();\n        CalculatorCatalog calculatorCatalog = vmManager.getCalculatorCatalog();\n        // ------------------------------ Set node shapes ---------------------------//\n        DiscreteMapping disMapping = new DiscreteMapping(NodeShape.RECT, ObjectMapping.NODE_MAPPING);\n        disMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);\n        disMapping.putMapValue(\"species\", NodeShape.DIAMOND);\n        disMapping.putMapValue(\"reaction\", NodeShape.ELLIPSE);\n        Calculator shapeCalculator = new BasicCalculator(\"SBMLReader Shape Calculator\", disMapping, VisualPropertyType.NODE_SHAPE);\n        nodeAppCalc.setCalculator(shapeCalculator);\n        // ------------------------------ Set the label ------------------------------//\n        // Display the value for geneName as a label\n        String cName = \"sbml name\";\n        Calculator nlc = calculatorCatalog.getCalculator(VisualPropertyType.NODE_LABEL, cName);\n        if (nlc == null) {\n            PassThroughMapping m = new PassThroughMapping(new String(), cName);\n            nlc = new BasicCalculator(cName, m, VisualPropertyType.NODE_LABEL);\n        }\n        nodeAppCalc.setCalculator(nlc);\n        //--------------------- Set the size of the nodes --------------------------//\n        //Discrete mapping on nodeType\n        Double speciesNodeSize = new Double(30);\n        Double reactionNodeSize = new Double(30);\n        DiscreteMapping sizeMapping = new DiscreteMapping(reactionNodeSize, ObjectMapping.NODE_MAPPING);\n        sizeMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);\n        sizeMapping.putMapValue(\"species\", speciesNodeSize);\n        sizeMapping.putMapValue(\"reaction\", reactionNodeSize);\n        Calculator sizeCalculator = new BasicCalculator(\"SBMLReader Size Calculator\", sizeMapping, VisualPropertyType.NODE_SIZE);\n        nodeAppCalc.setCalculator(sizeCalculator);\n        nodeAppCalc.setNodeSizeLocked(true);\n        // ------------------------------ Set edge arrow shape ---------------------------//\n        DiscreteMapping arrowMapping = new DiscreteMapping(ArrowShape.DELTA, ObjectMapping.NODE_MAPPING);\n        arrowMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);\n        arrowMapping.putMapValue(\"reaction-product\", ArrowShape.ARROW);\n        arrowMapping.putMapValue(\"reaction-reactant\", ArrowShape.NONE);\n        arrowMapping.putMapValue(\"reaction-modifier\", ArrowShape.CIRCLE);\n        Calculator edgeArrowCalculator = new BasicCalculator(\"SBMLReader Edge Arrow Calculator\", arrowMapping, VisualPropertyType.EDGE_SRCARROW_SHAPE);\n        edgeAppCalc.setCalculator(edgeArrowCalculator);\n        // ------------------------------ Set edge colour ---------------------------//\n        DiscreteMapping edgeColorMapping = new DiscreteMapping(Color.BLACK, ObjectMapping.NODE_MAPPING);\n        edgeColorMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);\n        edgeColorMapping.putMapValue(\"reaction-product\", Color.GREEN);\n        edgeColorMapping.putMapValue(\"reaction-reactant\", Color.RED);\n        edgeColorMapping.putMapValue(\"reaction-modifier\", Color.BLACK);\n        Calculator edgeColorCalculator = new BasicCalculator(\"SBMLReader Edge Color Calculator\", edgeColorMapping, VisualPropertyType.EDGE_COLOR);\n        edgeAppCalc.setCalculator(edgeColorCalculator);\n        //------------------------- Create a visual style -------------------------------//\n        GlobalAppearanceCalculator gac = vmManager.getVisualStyle().getGlobalAppearanceCalculator();\n        VisualStyle visualStyle = new VisualStyle(SBMLReader_VS, nodeAppCalc, edgeAppCalc, gac);\n        return visualStyle;\n    }\n}\n",
        "test_prompt": "// SBMLVisualStyleFactoryTest.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLVisualStyleFactory}.\n* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n*/\nclass SBMLVisualStyleFactoryTest {",
        "original_generated_code": "\n\t/**\n\t * Test of createVisualStyle method, of class SBMLVisualStyleFactory.\n\t */\n\t@Test\n\tvoid testCreateVisualStyle() {\n\t\tSystem.out.println(\"createVisualStyle\");\n\t\tCyNetwork network = null;\n\t\tVisualStyle result = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertNotNull(result);\n\t}\n\t\n}\n\n// SBMLReader.java\npackage sbmlreader2;\n\n/*\n Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)\n\n The Cytoscape Consortium is:\n - Institute for Systems Biology\n - University of California San Diego\n - Memorial Sloan-Kettering Cancer Center\n - Institut Pasteur\n - Agilent Technologies\n\n This library is free software; you can redistribute it and/or modify it\n under the terms of the GNU Lesser General Public License as published\n by the Free Software Foundation; either version 2.1 of the License, or\n any later version.\n\n This library is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF\n MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and\n documentation provided hereunder is on an \"as is\" basis, and the\n Institute for Systems Biology and the Whitehead Institute\n have no obligations to provide maintenance, support,\n updates, enhancements or modifications.  In no event shall the\n Institute for Systems Biology and the Whitehead Institute\n be liable to any party for direct, indirect, special,\n incidental or consequential damages, including lost profits, arising\n out of the use of this software and its documentation, even if the\n Institute for Systems Biology and the Whitehead Institute\n have been advised of the possibility of such damage.  See\n the GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this library; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n*/\nimport cytoscape.*;\nimport cytoscape.data.*;\nimport cytoscape.data.readers.*;\nimport cytoscape.plugin.*;\nimport cytoscape.util.*;\nimport cytoscape.view.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport giny.model.*;\nimport giny.view.*;\nimport java.awt.Color;\nimport java.io.*;\nimport java.util.*;\nimport javax.swing.JOptionPane;\nimport javax.xml.stream.*;\nimport org.sbml.jsbml.*;\n\n/**\n * SBMLReader.java\n * This class reads SBML files and creates a CyNetwork.\n *\n * @author W.P.A. Ligtenberg, Eindhoven University of Technology\n */\npublic class SBMLReader implements CytoscapePlugin {\n\n    /**\n     *  DOCUMENT ME!\n     *\n     * @param args DOCUMENT ME!\n     */\n    public static void main(String[] args) {\n        SBMLReader reader = new SBMLReader();\n        reader.readFile(args[0]);\n    }\n\n    /**\n     *  DOCUMENT ME!\n     */\n    public SBMLReader() {\n        Cytoscape.getDesktop().getCyMenus().addCytoscapeAction(new SBMLReaderAction());\n    }\n\n    /**\n     *  DOCUMENT ME!\n     *\n     * @param fileName DOCUMENT ME!\n     */\n    public void readFile(String fileName) {\n        try {\n            // Create a new SBML document\n            SBMLDocument doc = new SBMLDocument(2, 4);\n            // Read the file\n            XMLInputStream xis = new XMLInputStream(new FileInputStream(fileName), false);\n            doc = doc.readSBML(xis);\n            // Create a new CyNetwork\n            CyNetwork network = Cytoscape.createNetwork(fileName);\n            // Create a new CyAttributes\n            CyAttributes nodeAttributes = Cytoscape.getNodeAttributes();\n            CyAttributes edgeAttributes = Cytoscape.getEdgeAttributes();\n            // Create a new SBMLVisualStyleFactory\n            SBMLVisualStyleFactory visualStyleFactory = new SBMLVisualStyleFactory();\n            // Create a new VisualStyle\n            VisualStyle visualStyle = visualStyleFactory.createVisualStyle(network);\n            // Add the VisualStyle to the VisualMappingManager\n            Cytoscape.getVisualMappingManager().setVisualStyle(visualStyle);\n            // Get the model\n            Model model = doc.getModel();\n            // Get the listOfSpecies\n            ListOf<Species> listOfSpecies = model.getListOfSpecies();\n            // Get the listOfReactions\n            ListOf<Reaction> listOfReactions = model.getListOfReactions();\n            // Create a new HashMap\n            HashMap<String, Node> nodeMap = new HashMap<String, Node>();\n            // Create a new HashMap\n            HashMap<String, Edge> edgeMap = new HashMap<String, Edge>();\n            // Create a new HashMap\n            HashMap<String, String> speciesMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesNameMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionNameMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierNameMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productNameMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantNameMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesIdMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionIdMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierIdMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productIdMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantIdMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesCompartmentMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionCompartmentMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierCompartmentMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productCompartmentMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantCompartmentMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesInitialAmountMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionInitialAmountMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierInitialAmountMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productInitialAmountMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantInitialAmountMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesInitialConcentrationMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionInitialConcentrationMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierInitialConcentrationMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productInitialConcentrationMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantInitialConcentrationMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesSubstanceUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionSubstanceUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierSubstanceUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productSubstanceUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantSubstanceUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesSpatialSizeUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionSpatialSizeUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierSpatialSizeUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productSpatialSizeUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantSpatialSizeUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesConversionFactorMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionConversionFactorMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierConversionFactorMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productConversionFactorMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantConversionFactorMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesBoundaryConditionMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionBoundaryConditionMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierBoundaryConditionMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productBoundaryConditionMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantBoundaryConditionMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesChargeMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionChargeMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierChargeMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productChargeMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantChargeMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesConstantMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionConstantMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierConstantMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productConstantMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantConstantMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesHasOnlySubstanceUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionHasOnlySubstanceUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierHasOnlySubstanceUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productHasOnlySubstanceUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantHasOnlySubstanceUnitsMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesIdentityMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionIdentityMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierIdentityMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productIdentityMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantIdentityMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesMetaIdMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionMetaIdMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierMetaIdMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productMetaIdMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantMetaIdMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesNotesMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionNotesMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierNotesMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> productNotesMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactantNotesMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> speciesAnnotationMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> reactionAnnotationMap = new HashMap<String, String>();\n            // Create a new HashMap\n            HashMap<String, String> modifierAnnotationMap = new",
        "applied_heuristics": "H7"
    }
]