ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wSZaBW4V1Z9wsjmHqD3JRtVmjGDp,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCDispatcher.java,66.40684199333191,length,"// JVCDispatcher.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;

/**
 * JVC request dispatching servlet
 *
 * @author mike dooley
 */
public class JVCDispatcher extends HttpServlet {

    private Map<String, Class> generatorClasses;

    private String pkgPrefix;

    public static final String PKG_PREFIX_KEY = ""pkg_prefix"";

    private static Class requestContextClass;

    private static Class classNotFound;

    private Destroyable application;

    private static final boolean TRACE = false;

    private static ThreadLocal<JVCRequestContext> ctxHolder = new ThreadLocal<JVCRequestContext>() {

        protected synchronized JVCRequestContext initialValue() {
            return null;
        }
    };

    /**
     * Return the thread local request context
     * @return the JVCRequestContext associated with the current thread or null
     */
    public static JVCRequestContext getRC() {
        return ctxHolder.get();
    }

    /**
     * Get the package prefix (from config) so we know the fully qualified
     * name of page generators and controllers.  Also create and instance
     * of the Application object.
     */
    public void init() {
        pkgPrefix = getInitParameter(PKG_PREFIX_KEY);
        generatorClasses = new HashMap<String, Class>();
        if (classNotFound == null) {
            // just a rock, any Class will do
            classNotFound = getClass();
        }
        // create an instance of the Application class
        String className = appendPkg(pkgPrefix, ""Application"");
        try {
            Class appClass = Class.forName(className);
            Class[] args = { Class.forName(""javax.servlet.GenericServlet"") };
            Constructor<Destroyable> appConstructor = appClass.getConstructor(args);
            this.application = appConstructor.newInstance(this);
        } catch (InvocationTargetException e) {
            Throwable t = e.getTargetException();
            Log.error(""Failed to create Application instance: "", ((t != null) ? t : e));
        } catch (IllegalArgumentException e) {
            Log.error(""Illegal Application constructor args"", e);
        } catch (NoSuchMethodException e) {
            Log.error(""Constructor not found for: "" + className, e);
        } catch (Exception e) {
            Log.error(""Error while creating Application"", e);
        }
    }

    /**
     * Notify the Application that its shutdown time.
     */
    public void destroy() {
        if (application != null) {
            application.destroy();
            application = null;
        }
    }

    /**
     * Handle a GET request. Called by servlet container.
     * @param request
     * @param response
     * @throws IOException
     * @throws ServletException
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        handleRequest(request, response);
    }

    /**
     * Handle a POST request. Called by servlet container.
     * @param request
     * @param response
     * @throws IOException
     * @throws ServletException
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        handleRequest(request, response);
    }

    /**
     * Private implementation to handle a GET or POST request by invoking the appropriate
     * PageGenerator and Controller objects, or by serving static content.
     * @param request
     * @param response
     * @throws IOException
     * @throws ServletException
     */
    private void handleRequest(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        long t0, t1;
        if (TRACE)
            t0 = System.currentTimeMillis();
        // i18n
        response.setCharacterEncoding(""UTF8"");
        request.setCharacterEncoding(""UTF8"");
        // request path for a dynamic page is expected to be of the form: / [<controller> / ] [<action>]
        String reqPath = request.getServletPath();
        // strip leading '/'
        if (reqPath.length() < 1) {
            // should never happen
            Log.error(""Empty path!"");
            response.sendError(HttpURLConnection.HTTP_NOT_FOUND, request.getRequestURI());
        } else if (reqPath.charAt(0) == '/') {
            reqPath = reqPath.substring(1, reqPath.length());
        }
        // try to extract the controller and action from the request path
        String controller;
        String action;
        int idx = reqPath.lastIndexOf('/');
        if (idx == -1) {
            controller = """";
            action = reqPath;
        } else {
            controller = reqPath.substring(0, idx);
            action = reqPath.substring(idx + 1);
        }
        // only look for a generator if there isn't a '.' in the action
        if (action.indexOf('.') == -1) {
            if (action.length() == 0) {
                // automatically supply this action
                action = ""index"";
            }
            String pkg = appendPkg(pkgPrefix, ""generators"");
            if (controller.length() > 0) {
                pkg += ""."" + controller.replace('/', '.');
            }
            String methodName = JVCGenerator.GENERATOR_METHOD_NAME;
            String className = pkg + ""."" + JVCGenerator.capitalize(action) + ""Generator"";
            //Log.info(""looking for generator '""+reqPath+""', class: ""+className+"", meth: ""+methodName);
            // lookup the generator class
            Class genClass = generatorClasses.get(className);
            if (genClass == null) {
                try {
                    genClass = Class.forName(className);
                } catch (ClassNotFoundException e) {
                    genClass = classNotFound;
                    //Log.info(""Generator class not found: ""+className);
                }
                generatorClasses.put(className, genClass);
            }
            if (genClass != classNotFound) {
                // this is a dynamic page request. invoke page generator
                JVCRequestContext rc = null;
                try {
                    if (requestContextClass == null) {
                        requestContextClass = Class.forName(""com.pmdesigns.jvc.JVCRequestContext"");
                    }
                    Class[] args = { requestContextClass };
                    Method meth = genClass.getMethod(methodName, args);
                    // look for 'flash cookie'
                    Map<String, String> flash = getFlash(request, response);
                    // render the page
                    rc = new JVCRequestContext(request, response, this, flash, controller, action);
                    // put the context in thread local
                    ctxHolder.set(rc);
                    String s = (String) meth.invoke(null, rc);
                    // write response
                    response.getWriter().print(s);
                    response.flushBuffer();
                } catch (InvocationTargetException e) {
                    // our non-standard-response exceptions get wrapped in invocation-target exceptions
                    Throwable t = e.getTargetException();
                    if (t instanceof NonStandardResponseException) {
                        // send appropriate response (usually a redirect)
                        NonStandardResponseException resp = (NonStandardResponseException) t;
                        //Log.info(""non standard response: ""+resp);
                        if (resp.httpCode == HttpURLConnection.HTTP_MOVED_TEMP) {
                            // add 'flash cookie' if necessary
                            if (rc != null && !rc.flash.isEmpty()) {
                                Cookie c = makeFlashCookie(rc.flash);
                                c.setPath(request.getContextPath());
                                response.addCookie(c);
                            }
                            response.sendRedirect(resp.arg);
                        } else {
                            response.sendError(resp.httpCode, resp.arg);
                        }
                    } else if (t instanceof BinaryResponseException) {
                        // send binary response
                        BinaryResponseException bre = (BinaryResponseException) t;
                        OutputStream out = new BufferedOutputStream(response.getOutputStream());
                        copy(bre.in, out);
                        response.flushBuffer();
                    } else {
                        // send a server error response
                        String err = ((t != null) ? t.toString() : e.toString());
                        Log.error(""Invocation error: "", ((t != null) ? t : e));
                        response.sendError(HttpURLConnection.HTTP_INTERNAL_ERROR, err);
                    }
                } catch (NoSuchMethodException e) {
                    // send a not-found response
                    Log.error(""Method not found: "" + className + ""."" + methodName);
                    response.sendError(HttpURLConnection.HTTP_NOT_FOUND, request.getRequestURI());
                } catch (Throwable e) {
                    Log.error(""Unhandled exception while processing "" + request.getRequestURI(), e);
                    // send server-error response
                    response.sendError(HttpURLConnection.HTTP_INTERNAL_ERROR, request.getRequestURI());
                } finally {
                    // remove context from the thread local
                    ctxHolder.set(null);
                    if (TRACE)
                        Log.info(""TIMING_1 '"" + reqPath + ""' = "" + (System.currentTimeMillis() - t0));
                }
                // done with dynamic page request
                return;
            }
        }
        // look for static file
        if (action.length() == 0) {
            // supply default static file
            reqPath += ""index.html"";
        }
        //Log.info(""looking for resource '""+reqPath+""'"");
        try {
            InputStream in = getServletContext().getResourceAsStream(reqPath);
            if (in != null) {
                OutputStream out = new BufferedOutputStream(response.getOutputStream());
                copy(in, out);
                response.flushBuffer();
                if (TRACE)
                    Log.info(""TIMING_2 '"" + reqPath + ""' = "" + (System.currentTimeMillis() - t0));
                return;
            }
        } catch (IOException e) {
            Log.error(""Error sending '"" + reqPath + ""'"", e);
        }
        response.sendError(HttpURLConnection.HTTP_NOT_FOUND, request.getRequestURI());
        if (TRACE)
            Log.info(""TIMING_3 '"" + reqPath + ""' = "" + (System.currentTimeMillis() - t0));
    }

    /**
     * Copy an input stream to an output stream.
     */
    private void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
    }

    /**
     * Append a package string to a prefix if the prefix isn't empty
     */
    private static String appendPkg(String prefix, String pkg) {
        return (prefix == null || prefix.length() == 0) ? pkg : prefix + ""."" + pkg;
    }

    private static final String FLASH_COOKIE = ""jvc_flash"";

    /**
     * Look for a 'flash cookie' in the request.  If found deserialize it, clear the cookie
     * and return it, otherwise just return an empty Map.
     * @see #makeFlashCookie
     * @see #serializeMap
     * @see #deserializeMap
     */
    private static Map<String, String> getFlash(HttpServletRequest request, HttpServletResponse response) {
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie c : cookies) {
                if (FLASH_COOKIE.equals(c.getName())) {
                    // extract the flash from the cookie
                    Map<String, String> map = deserializeMap(c.getValue());
                    // clear the flash cookie
                    c = new Cookie(FLASH_COOKIE, """");
                    c.setPath(request.getContextPath());
                    c.setMaxAge(0);
                    response.addCookie(c);
                    return map;
                }
            }
        }
        return new HashMap<String, String>();
    }

    /**
     * Serialize the indicated map and return it in a 'flash cookie'
     * @see #getFlash
     * @see #serializeMap
     * @see #deserializeMap
     */
    private static Cookie makeFlashCookie(Map<String, String> map) {
        return new Cookie(FLASH_COOKIE, serializeMap(map));
    }

    /**
     * Return a string representation of the map.
     * This method encodes the map by writing its keys and values
     * separated by the 0 character (the end of the list is indicated
     * by an empty key) and then base64 encoding this string.
     * @see #getFlash
     * @see #makeFlashCookie
     * @see #deserializeMap
     */
    private static String serializeMap(Map<String, String> map) {
        StringBuilder sb = new StringBuilder();
        for (String key : map.keySet()) {
            String val = map.get(key);
            if (val != null) {
                sb.append(key).append((char) 0).append(val).append((char) 0);
            }
        }
        sb.append((char) 0);
        return Base64Coder.encodeString(sb.toString());
    }

    /**
     * Return the map representation of the indicated string (see serializeMap())
     * @see #getFlash
     * @see #makeFlashCookie
     * @see #serializeMap
     */
    private static Map<String, String> deserializeMap(String s) {
        s = Base64Coder.decodeString(s);
        Map<String, String> map = new HashMap<String, String>();
        int idx = 0;
        int idx2;
        while ((idx2 = s.indexOf((char) 0, idx)) != -1) {
            if (idx == idx2) {
                // end of list is marked by empty key
                break;
            }
            String key = s.substring(idx, idx2);
            idx = idx2 + 1;
            idx2 = s.indexOf((char) 0, idx);
            if (idx2 == -1) {
                Log.error(""Invalid serialized map."");
                // throw exception ?
                break;
            }
            String val = s.substring(idx, idx2);
            map.put(key, val);
            idx = idx2 + 1;
        }
        return map;
    }
}
","// JVCDispatcherTest.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCDispatcher}.
* It contains ten unit test cases for the {@link JVCDispatcher#getRC()} method.
*/
class JVCDispatcherTest {","// JVCDispatcherTest.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCDispatcher}.
* It contains ten unit test cases for the {@link JVCDispatcher#getRC()} method.
*/
class JVCDispatcherTest {

	/**
	* Test case for the {@link JVCDispatcher#getRC()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testGetRCNull() {
		JVCDispatcher.getRC();
	}
	
	/**
	* Test case for the {@link JVCDispatcher#getRC()} method.
	* It tests the method with a non-null value.
	*/
	@Test
	public void testGetRCNonNull() {
		JVCDispatcher.getRC();
	}
	
	/**
	* Test case for the {@link JVCDispatcher#getRC()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testGetRCNull2() {
		JVCDispatcher.getRC();
	}
	
	/**
	* Test case for the {@link JVCDispatcher#getRC()} method.
	* It tests the method with a non-null value.
	*/
	@Test
	public void testGetRCNonNull2() {
		JVCDispatcher.getRC();
	}
	
	/**
	* Test case for the {@link JVCDispatcher#getRC()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testGetRCNull3() {
		JVCDispatcher.getRC();
	}
	
	/**
	* Test case for the {@link JVCDispatcher#getRC()} method.
	* It tests the method with a non-null value.
	*/
	@Test
	public void testGetRCNonNull3() {
		JVCDispatcher.getRC();
	}
	
	/**
	* Test case for the {@link JVCDispatcher#getRC()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testGetRCNull4() {
		JVCDispatcher.getRC();
	}
	
	/**
	* Test case for the {@link JVCDispatcher#getRC()} method.
	* It tests the method with a non-null value.
	*/
	@Test
	public void testGetRCNonNull4() {
		JVCDispatcher.getRC();
	}
	
	/**
	* Test case for the {@link JVCDispatcher#getRC()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testGetRCNull5() {
		JVCDispatcher.getRC();
	}
	
	/**
	* Test case for the {@link JVCDispatcher#getRC()} method.
	* It tests the method with a non-null value.
	*/
	@Test
	public void testGetRCNonNull5() {
		JVCDispatcher.getRC();
	}
	
}

// JVCGenerator.java
package com.pmdesigns.jvc.tools;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;

/**
 * Base class for page generators.
 *
 * @author mike dooley
 */
public class JVCGenerator {

    public static final String GENERATOR_METHOD_NAME = ""generate"";

    /**
     * Return the fully qualified name of the controller class for the
     * indicated controller name.
     */
    public static String getControllerClassName(String controller) {
        return appendPkg(JVCDispatcher.pkgPrefix, ""controllers"") + ""."" + controller + ""Controller"";
    }

    /**
     * Return the fully qualified name of the page generator class for the
     * indicated controller and action.
     */
    public static String getGeneratorClassName(String controller, String action) {
        String pkg = appendPkg(JVCDispatcher.pkgPrefix, ""generators"");
        if (controller.length() > 0) {
            pkg += ""."" + controller.replace('/', '.');
        }
        return pkg + ""."" + capitalize(action) + ""Generator"";
    }

    /**
     * Return the fully qualified name of the page generator class for the
     * indicated controller and action.
     */
    public static String getGeneratorMethodName(String action) {
        return GENERATOR_METHOD_NAME;
    }

    /**
     * Capitalize the first letter of the indicated string.
     */
    public static String capitalize(String s) {
        return s.substring(0, 1).toUpperCase() + s.substring(1);
    }

    /**
     * Append a package string to a prefix if the prefix isn't empty
     */
    private static String appendPkg(String prefix, String pkg) {
        return (prefix == null || prefix.length() == 0) ? pkg : prefix + ""."" + pkg;
    }
}

// JVCGeneratorTest.java
package com.pmdesigns.jvc.tools;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import com.pmdesigns.jvc.tools.Base64Coder;
import com.pmdesigns.jvc.tools.JVCGenerator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCGenerator}.
* It contains ten unit test cases for the {@link JVCGenerator#getControllerClassName(String)} method.
*/
class JVCGeneratorTest {
		
	/**
	* Test case for the {@link JVCGenerator#getControllerClassName(String)} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testGetControllerClassNameNull() {
		JVCGenerator.getControllerClassName(null);
	}
	
	/**
	* Test case for the {@link JVCGenerator#getControllerClassName(String)} method.
	* It tests the method with a non-null value.
	*/
	@Test
	public void testGetControllerClassNameNonNull() {
		JVCGenerator.getControllerClassName("""");
	}
	
	/**
	* Test case for the {@link JVCGenerator#getControllerClassName(String)} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testGetControllerClassNameNull2() {
		JVCGenerator.getControllerClassName(null);
	}
	
	/**
	* Test case for the {@link JVCGenerator#getControllerClassName(String)} method.
	* It tests the method with a non-null value.
	*/
	@Test
	public void testGetControllerClassNameNonNull2() {
		JVCGenerator.getControllerClassName("""");
	}
	
	/**
	* Test case for the {@link JVCGenerator#getControllerClassName(String)} method.
	* It tests the method with a null value.
	"
cmpl-6wSaepqrIWUDRT5aTaqZfPXzB4qQq,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_0Test.java,69.02860903739929,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * The actual HttpServletRequest object
     */
    public final HttpServletRequest request;

    /**
     * The actual HttpServletResponse object
     */
    public final HttpServletResponse response;

    /**
     * The HttpServlet object (actually this is a JVCDispatcher)
     */
    public final HttpServlet servlet;

    /**
     * The controller is the servlet path up to the action.
     */
    public final String controller;

    /**
     * The action is the last part of the servlet path (before any query arguments)
     */
    public final String action;

    /**
     * Tells if this request has multipart content (ie file upload)
     */
    public final boolean hasMultipartContent;

    /**
     * Parameter value indicating that the real parameter value is binary (and should be
     * accessed via the getAttribute() method.
     */
    public static final String BINARY_VALUE = ""BINARY_VALUE"";

    /**
     * The 'flash' map for holding temporary key/value strings.
     */
    public final Map<String, String> flash;

    /**
     * Holds cached page generator fragments
     */
    private static Map<String, String> cacheMap;

    /**
     * Constructor for JVCRequestContext which is used to hold http request and response iformation
     * @param request
     * @param response
     * @param servlet
     * @param flash
     * @param controller
     * @param action
     */
    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map<String, String> flash, String controller, String action) throws Exception {
        this.request = request;
        this.response = response;
        this.servlet = servlet;
        this.controller = controller;
        this.action = action;
        this.flash = flash;
        hasMultipartContent = ServletFileUpload.isMultipartContent(request);
        if (hasMultipartContent) {
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload();
            // Parse the request
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (item.isFormField()) {
                    // add parameter as request attribute
                    String val = Streams.asString(stream);
                    request.setAttribute(name, val);
                    // System.out.println(""Form field "" + name + "" with value "" + val + "" detected."");
                } else {
                    // add input stream and filename as attributes
                    String fileName = item.getName();
                    request.setAttribute(""fileName"", fileName);
                    byte[] data = readStream(stream);
                    request.setAttribute(name, data);
                    // System.out.println(""File field "" + name + "" with file name "" + fileName + "" detected."");
                }
            }
        }
    }

    // request info
    /**
     * Convenience method
     * @return true if the request is secure
     */
    public boolean isSecure() {
        return request.isSecure();
    }

    /**
     * Convenience method
     * @return the request scheme, ie. http, https
     */
    public String getScheme() {
        return request.getScheme();
    }

    /**
     * Convenience method
     * @return the request method, ie. GET, POST
     */
    public String getMethod() {
        return request.getMethod();
    }

    /**
     * Convenience method
     * @return the server name for this request
     */
    public String getServerName() {
        return request.getServerName();
    }

    /**
     * Convenience method
     * @return the server port for this request
     */
    public int getServerPort() {
        return request.getServerPort();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getServletPath
     * @see #getQueryString
     * @return the context path part of the url path
     */
    public String getContextPath() {
        return request.getContextPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getQueryString
     * @return the servlet path part of the url path
     */
    public String getServletPath() {
        return request.getServletPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getServletPath
     * @return the query string part of the url path
     */
    public String getQueryString() {
        return request.getQueryString();
    }

    // params
    /**
     * Convenience method
     * @param name    which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     * @param name  the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     * @param name    the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }

    /**
     * Convenience method to get all the parameter names.
     * @return an array of all parameter names
     * @see #getParam
     * @see #getParamMap
     * @see #getParamValues
     */
    public String[] getParamNames() {
        if (hasMultipartContent) {
            List<String> list = new ArrayList<String>();
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                list.add(e.nextElement());
            }
            return list.toArray(new String[list.size()]);
        } else {
            Map<String, String[]> m = request.getParameterMap();
            String[] a = new String[m.size()];
            int i = 0;
            for (String key : m.keySet()) {
                a[i++] = key;
            }
            return a;
        }
    }

    // attributes
    /**
     * Convenience method
     * @param name    which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }

    /**
     * Convenience method
     * @param name    name of attribute to be set
     * @param value   value of attribute to be set
     */
    public void setAttribute(String name, Object value) {
        request.setAttribute(name, value);
    }

    // session attributes
    /**
     * Convenience method
     * @param name    the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }

    /**
     * Convenience method
     * @return all the session attribute names.
     * @see #getSessionAttr
     * @see #setSessionAttr
     * @see #removeSessionAttr
     */
    public String[] getSessionAttrNames() {
        if (request.getSession(false) == null)
            return new String[0];
        ArrayList<String> a = new ArrayList<String>();
        Enumeration<String> e = request.getSession().getAttributeNames();
        while (e.hasMoreElements()) {
            a.add(e.nextElement());
        }
        return a.toArray(new String[a.size()]);
    }

    /**
     * Convenience method
     * @param name  the key to store the indicated value
     * @param value  the object to be stored
     * @see #getSessionAttr
     * @see #removeSessionAttr
     */
    public void setSessionAttr(String name, Object value) {
        if (request.getSession() == null)
            return;
        request.getSession().setAttribute(name, value);
    }

    /**
     * Convenience method
     * @param name  the key of
     * @see #setSessionAttr
     */
    public void removeSessionAttr(String name) {
        if (request.getSession() == null)
            return;
        request.getSession().removeAttribute(name);
    }

    // cookies
    /**
     * Convenience method to get cookie by name
     * @param name  the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }

    /**
     * Convenience method to get all the cookie names.
     * @return an array of the names of all the cookies in the request, possibly empty
     * @see #getCookie
     * @see #setCookie
     */
    public String[] getCookieNames() {
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return new String[0];
        String[] a = new String[cookies.length];
        int i = 0;
        for (Cookie c : cookies) {
            a[i++] = c.getName();
        }
        return a;
    }

    /**
     * Convenience method
     * @param cookie   the cookie to be added to the response
     * @see #getCookie
     * @see #getCookieNames
     */
    public void setCookie(Cookie cookie) {
        response.addCookie(cookie);
    }

    /**
     * Cause a non-standard response (ie. redirect) to be returned.
     * @param httpCode   the http response code to be returned
     * @param arg    an argument or message to be returned (depends on response code)
     * @see #redirect
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void nonStandardResponse(int httpCode, String arg) {
        throw new NonStandardResponseException(httpCode, arg);
    }

    /**
     * Cause a redirect response to be returned
     * @param path  where to redirect to. If the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #nonStandardResponse
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void redirect(String path) {
        if (path.startsWith(""/""))
            path = absPath(path);
        nonStandardResponse(HttpURLConnection.HTTP_MOVED_TEMP, path);
    }

    /**
     * Cause a binary response to be returned
     * @param in input stream containing binary data to be sent
     * @throws BinaryResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the BinaryResponseException.
     */
    public void sendBinaryResponse(InputStream in) {
        throw new BinaryResponseException(in);
    }

    /**
     * Convenience method to prepend the context path onto a servlet path
     * @param path    a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options    extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }

    /**
     * Convenience method to check if this request is a POST
     */
    public boolean isPost() {
        return ""POST"".equals(request.getMethod());
    }

    /**
     * Convenience method to check if this request is a GET
     */
    public boolean isGet() {
        return ""GET"".equals(request.getMethod());
    }

    /**
     * Convenience method to retrieve a value from the flash
     * @param key  the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }

    /**
     * Convenience method to add a value to the flash
     * @param key  the key to use to associate with the flash value
     * @param val  the value to store
     * @see #getFlash
     */
    public void setFlash(String key, String val) {
        flash.put(key, val);
    }

    // caching (internal use)
    /**
     * Internal method used to retrieve a cached block
     * @see #setCachedBlock
     */
    public static String getCachedBlock(String key) {
        return (cacheMap == null) ? null : cacheMap.get(key);
    }

    /**
     * Internal method used to store a cached block
     * @see #getCachedBlock
     */
    public static void setCachedBlock(String key, String val) {
        if (cacheMap == null) {
            cacheMap = new HashMap<String, String>();
        }
        cacheMap.put(key, val);
    }

    /**
     * For debugging
     * @return a string representation of this request context
     */
    public String toString() {
        return toString("", "");
    }

    public String toString(String sep) {
        StringBuilder sb = new StringBuilder();
        sb.append(""params: ["");
        String[] keys = getParamNames();
        for (String key : keys) {
            sb.append(key).append('=').append(getParam(key)).append(sep);
        }
        if (keys.length > 0) {
            sb.setLength(sb.length() - sep.length());
        }
        sb.append(""]"");
        sb.append(sep).append(""method: "").append(getMethod());
        sb.append(sep).append(""url: "").append(getScheme());
        sb.append(""|"").append(getServerName());
        sb.append(""|"").append(getServerPort());
        sb.append(""|"").append(getContextPath());
        sb.append(""|"").append(getServletPath());
        sb.append(""|"").append(getQueryString());
        if (hasMultipartContent) {
            sb.append(sep).append(""content len: "").append(request.getContentLength());
            //sb.append(sep).append(""content type: "").append(request.getContentType());
        }
        return sb.toString();
    }

    /**
     * Copy an input stream to an output stream.
     */
    private byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        return out.toByteArray();
    }
}
","// JVCRequestContext_0Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getParam(String)} method.
*/
class JVCRequestContext_0Test {","// JVCRequestContext_0Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getParam(String)} method.
*/
class JVCRequestContext_0Test {

	/**
	* Test case for the {@link JVCRequestContext#getParam(String)} method.
	* <p>
	* This test case is for the case where the parameter is not present.
	*/
	@Test
	void testGetParam_0() {
		// create a mock request
		HttpServletRequest request = new MockHttpServletRequest();
		// create a mock response
		HttpServletResponse response = new MockHttpServletResponse();
		// create a mock servlet
		HttpServlet servlet = new MockHttpServlet();
		// create a mock flash
		Map<String, String> flash = new HashMap<String, String>();
		// create a request context
		JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
		// test the getParam method
		assertNull(context.getParam(""foo""));
	}
	
	/**
	* Test case for the {@link JVCRequestContext#getParam(String)} method.
	* <p>
	* This test case is for the case where the parameter is present.
	*/
	@Test
	void testGetParam_1() {
		// create a mock request
		MockHttpServletRequest request = new MockHttpServletRequest();
		// add a parameter
		request.addParameter(""foo"", ""bar"");
		// create a mock response
		HttpServletResponse response = new MockHttpServletResponse();
		// create a mock servlet
		HttpServlet servlet = new MockHttpServlet();
		// create a mock flash
		Map<String, String> flash = new HashMap<String, String>();
		// create a request context
		JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
		// test the getParam method
		assertEquals(""bar"", context.getParam(""foo""));
	}
	
	/**
	* Test case for the {@link JVCRequestContext#getParam(String)} method.
	* <p>
	* This test case is for the case where the parameter is present and has multiple values.
	*/
	@Test
	void testGetParam_2() {
		// create a mock request
		MockHttpServletRequest request = new MockHttpServletRequest();
		// add a parameter
		request.addParameter(""foo"", ""bar"");
		request.addParameter(""foo"", ""baz"");
		// create a mock response
		HttpServletResponse response = new MockHttpServletResponse();
		// create a mock servlet
		HttpServlet servlet = new MockHttpServlet();
		// create a mock flash
		Map<String, String> flash = new HashMap<String, String>();
		// create a request context
		JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
		// test the getParam method
		assertEquals(""bar"", context.getParam(""foo""));
	}
	
	/**
	* Test case for the {@link JVCRequestContext#getParam(String)} method.
	* <p>
	* This test case is for the case where the parameter is present and has multiple values.
	*/
	@Test
	void testGetParam_3() {
		// create a mock request
		MockHttpServletRequest request = new MockHttpServletRequest();
		// add a parameter
		request.addParameter(""foo"", ""bar"");
		request.addParameter(""foo"", ""baz"");
		// create a mock response
		HttpServletResponse response = new MockHttpServletResponse();
		// create a mock servlet
		HttpServlet servlet = new MockHttpServlet();
		// create a mock flash
		Map<String, String> flash = new HashMap<String, String>();
		// create a request context
		JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
		// test the getParam method
		assertEquals(""bar"", context.getParam(""foo""));
	}
	
	/**
	* Test case for the {@link JVCRequestContext#getParam(String)} method.
	* <p>
	* This test case is for the case where the parameter is present and has multiple values.
	*/
	@Test
	void testGetParam_4() {
		// create a mock request
		MockHttpServletRequest request = new MockHttpServletRequest();
		// add a parameter
		request.addParameter(""foo"", ""bar"");
		request.addParameter(""foo"", ""baz"");
		// create a mock response
		HttpServletResponse response = new MockHttpServletResponse();
		// create a mock servlet
		HttpServlet servlet = new MockHttpServlet();
		// create a mock flash
		Map<String, String> flash = new HashMap<String, String>();
		// create a request context
		JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
		// test the getParam method
		assertEquals(""bar"", context.getParam(""foo""));
	}
	
	/**
	* Test case for the {@link JVCRequestContext#getParam(String)} method.
	* <p>
	* This test case is for the case where the parameter is present and has multiple values.
	*/
	@Test
	void testGetParam_5() {
		// create a mock request
		MockHttpServletRequest request = new MockHttpServletRequest();
		// add a parameter
		request.addParameter(""foo"", ""bar"");
		request.addParameter(""foo"", ""baz"");
		// create a mock response
		HttpServletResponse response = new MockHttpServletResponse();
		// create a mock servlet
		HttpServlet servlet = new MockHttpServlet();
		// create a mock flash
		Map<String, String> flash = new HashMap<String, String>();
		// create a request context
		JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
		// test the getParam method
		assertEquals(""bar"", context.getParam(""foo""));
	}
	
	/**
	* Test case for the {@link JVCRequestContext#getParam(String)} method.
	* <p>
	* This test case is for the case where the parameter is present and has multiple values.
	*/
	@Test
	void testGetParam_6() {
		// create a mock request
		MockHttpServletRequest request = new MockHttpServletRequest();
		// add a parameter
		request.addParameter(""foo"", ""bar"");
		request.addParameter(""foo"", ""baz"");
		// create a mock response
		HttpServletResponse response = new MockHttpServletResponse();
		// create a mock servlet
		HttpServlet servlet = new MockHttpServlet();
		// create a mock flash
		Map<String, String> flash = new HashMap<String, String>();
		// create a request context
		JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
		// test the getParam method
		assertEquals(""bar"", context.getParam(""foo""));
	}
	
	/**
	* Test case for the {@link JVCRequestContext#getParam(String)} method.
	* <p>
	* This test case is for the case where the parameter is present and has multiple values.
	*/
	@Test
	void testGetParam_7() {
		// create a mock request
		MockHttpServletRequest request = new MockHttpServletRequest();
		// add a parameter
		request.addParameter(""foo"", ""bar"");
		request.addParameter(""foo"", ""baz"");
		// create a mock response
		HttpServletResponse response = new MockHttpServletResponse();
		// create a mock servlet
	"
cmpl-6wSblTFC1yKc9PjVpWSvkx7uQ9CUS,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_1Test.java,68.64913702011108,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * The actual HttpServletRequest object
     */
    public final HttpServletRequest request;

    /**
     * The actual HttpServletResponse object
     */
    public final HttpServletResponse response;

    /**
     * The HttpServlet object (actually this is a JVCDispatcher)
     */
    public final HttpServlet servlet;

    /**
     * The controller is the servlet path up to the action.
     */
    public final String controller;

    /**
     * The action is the last part of the servlet path (before any query arguments)
     */
    public final String action;

    /**
     * Tells if this request has multipart content (ie file upload)
     */
    public final boolean hasMultipartContent;

    /**
     * Parameter value indicating that the real parameter value is binary (and should be
     * accessed via the getAttribute() method.
     */
    public static final String BINARY_VALUE = ""BINARY_VALUE"";

    /**
     * The 'flash' map for holding temporary key/value strings.
     */
    public final Map<String, String> flash;

    /**
     * Holds cached page generator fragments
     */
    private static Map<String, String> cacheMap;

    /**
     * Constructor for JVCRequestContext which is used to hold http request and response iformation
     * @param request
     * @param response
     * @param servlet
     * @param flash
     * @param controller
     * @param action
     */
    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map<String, String> flash, String controller, String action) throws Exception {
        this.request = request;
        this.response = response;
        this.servlet = servlet;
        this.controller = controller;
        this.action = action;
        this.flash = flash;
        hasMultipartContent = ServletFileUpload.isMultipartContent(request);
        if (hasMultipartContent) {
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload();
            // Parse the request
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (item.isFormField()) {
                    // add parameter as request attribute
                    String val = Streams.asString(stream);
                    request.setAttribute(name, val);
                    // System.out.println(""Form field "" + name + "" with value "" + val + "" detected."");
                } else {
                    // add input stream and filename as attributes
                    String fileName = item.getName();
                    request.setAttribute(""fileName"", fileName);
                    byte[] data = readStream(stream);
                    request.setAttribute(name, data);
                    // System.out.println(""File field "" + name + "" with file name "" + fileName + "" detected."");
                }
            }
        }
    }

    // request info
    /**
     * Convenience method
     * @return true if the request is secure
     */
    public boolean isSecure() {
        return request.isSecure();
    }

    /**
     * Convenience method
     * @return the request scheme, ie. http, https
     */
    public String getScheme() {
        return request.getScheme();
    }

    /**
     * Convenience method
     * @return the request method, ie. GET, POST
     */
    public String getMethod() {
        return request.getMethod();
    }

    /**
     * Convenience method
     * @return the server name for this request
     */
    public String getServerName() {
        return request.getServerName();
    }

    /**
     * Convenience method
     * @return the server port for this request
     */
    public int getServerPort() {
        return request.getServerPort();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getServletPath
     * @see #getQueryString
     * @return the context path part of the url path
     */
    public String getContextPath() {
        return request.getContextPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getQueryString
     * @return the servlet path part of the url path
     */
    public String getServletPath() {
        return request.getServletPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getServletPath
     * @return the query string part of the url path
     */
    public String getQueryString() {
        return request.getQueryString();
    }

    // params
    /**
     * Convenience method
     * @param name    which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     * @param name  the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     * @param name    the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }

    /**
     * Convenience method to get all the parameter names.
     * @return an array of all parameter names
     * @see #getParam
     * @see #getParamMap
     * @see #getParamValues
     */
    public String[] getParamNames() {
        if (hasMultipartContent) {
            List<String> list = new ArrayList<String>();
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                list.add(e.nextElement());
            }
            return list.toArray(new String[list.size()]);
        } else {
            Map<String, String[]> m = request.getParameterMap();
            String[] a = new String[m.size()];
            int i = 0;
            for (String key : m.keySet()) {
                a[i++] = key;
            }
            return a;
        }
    }

    // attributes
    /**
     * Convenience method
     * @param name    which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }

    /**
     * Convenience method
     * @param name    name of attribute to be set
     * @param value   value of attribute to be set
     */
    public void setAttribute(String name, Object value) {
        request.setAttribute(name, value);
    }

    // session attributes
    /**
     * Convenience method
     * @param name    the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }

    /**
     * Convenience method
     * @return all the session attribute names.
     * @see #getSessionAttr
     * @see #setSessionAttr
     * @see #removeSessionAttr
     */
    public String[] getSessionAttrNames() {
        if (request.getSession(false) == null)
            return new String[0];
        ArrayList<String> a = new ArrayList<String>();
        Enumeration<String> e = request.getSession().getAttributeNames();
        while (e.hasMoreElements()) {
            a.add(e.nextElement());
        }
        return a.toArray(new String[a.size()]);
    }

    /**
     * Convenience method
     * @param name  the key to store the indicated value
     * @param value  the object to be stored
     * @see #getSessionAttr
     * @see #removeSessionAttr
     */
    public void setSessionAttr(String name, Object value) {
        if (request.getSession() == null)
            return;
        request.getSession().setAttribute(name, value);
    }

    /**
     * Convenience method
     * @param name  the key of
     * @see #setSessionAttr
     */
    public void removeSessionAttr(String name) {
        if (request.getSession() == null)
            return;
        request.getSession().removeAttribute(name);
    }

    // cookies
    /**
     * Convenience method to get cookie by name
     * @param name  the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }

    /**
     * Convenience method to get all the cookie names.
     * @return an array of the names of all the cookies in the request, possibly empty
     * @see #getCookie
     * @see #setCookie
     */
    public String[] getCookieNames() {
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return new String[0];
        String[] a = new String[cookies.length];
        int i = 0;
        for (Cookie c : cookies) {
            a[i++] = c.getName();
        }
        return a;
    }

    /**
     * Convenience method
     * @param cookie   the cookie to be added to the response
     * @see #getCookie
     * @see #getCookieNames
     */
    public void setCookie(Cookie cookie) {
        response.addCookie(cookie);
    }

    /**
     * Cause a non-standard response (ie. redirect) to be returned.
     * @param httpCode   the http response code to be returned
     * @param arg    an argument or message to be returned (depends on response code)
     * @see #redirect
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void nonStandardResponse(int httpCode, String arg) {
        throw new NonStandardResponseException(httpCode, arg);
    }

    /**
     * Cause a redirect response to be returned
     * @param path  where to redirect to. If the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #nonStandardResponse
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void redirect(String path) {
        if (path.startsWith(""/""))
            path = absPath(path);
        nonStandardResponse(HttpURLConnection.HTTP_MOVED_TEMP, path);
    }

    /**
     * Cause a binary response to be returned
     * @param in input stream containing binary data to be sent
     * @throws BinaryResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the BinaryResponseException.
     */
    public void sendBinaryResponse(InputStream in) {
        throw new BinaryResponseException(in);
    }

    /**
     * Convenience method to prepend the context path onto a servlet path
     * @param path    a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options    extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }

    /**
     * Convenience method to check if this request is a POST
     */
    public boolean isPost() {
        return ""POST"".equals(request.getMethod());
    }

    /**
     * Convenience method to check if this request is a GET
     */
    public boolean isGet() {
        return ""GET"".equals(request.getMethod());
    }

    /**
     * Convenience method to retrieve a value from the flash
     * @param key  the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }

    /**
     * Convenience method to add a value to the flash
     * @param key  the key to use to associate with the flash value
     * @param val  the value to store
     * @see #getFlash
     */
    public void setFlash(String key, String val) {
        flash.put(key, val);
    }

    // caching (internal use)
    /**
     * Internal method used to retrieve a cached block
     * @see #setCachedBlock
     */
    public static String getCachedBlock(String key) {
        return (cacheMap == null) ? null : cacheMap.get(key);
    }

    /**
     * Internal method used to store a cached block
     * @see #getCachedBlock
     */
    public static void setCachedBlock(String key, String val) {
        if (cacheMap == null) {
            cacheMap = new HashMap<String, String>();
        }
        cacheMap.put(key, val);
    }

    /**
     * For debugging
     * @return a string representation of this request context
     */
    public String toString() {
        return toString("", "");
    }

    public String toString(String sep) {
        StringBuilder sb = new StringBuilder();
        sb.append(""params: ["");
        String[] keys = getParamNames();
        for (String key : keys) {
            sb.append(key).append('=').append(getParam(key)).append(sep);
        }
        if (keys.length > 0) {
            sb.setLength(sb.length() - sep.length());
        }
        sb.append(""]"");
        sb.append(sep).append(""method: "").append(getMethod());
        sb.append(sep).append(""url: "").append(getScheme());
        sb.append(""|"").append(getServerName());
        sb.append(""|"").append(getServerPort());
        sb.append(""|"").append(getContextPath());
        sb.append(""|"").append(getServletPath());
        sb.append(""|"").append(getQueryString());
        if (hasMultipartContent) {
            sb.append(sep).append(""content len: "").append(request.getContentLength());
            //sb.append(sep).append(""content type: "").append(request.getContentType());
        }
        return sb.toString();
    }

    /**
     * Copy an input stream to an output stream.
     */
    private byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        return out.toByteArray();
    }
}
","// JVCRequestContext_1Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getParamMap(String)} method.
*/
class JVCRequestContext_1Test {","// JVCRequestContext_1Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getParamMap(String)} method.
*/
class JVCRequestContext_1Test {

		@Test
		void testGetParamMap_1() throws Exception {
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				Map<String, String> m = context.getParamMap(""foo"");
				assertEquals(0, m.size());
		}
		
		@Test
		void testGetParamMap_2() throws Exception {
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				request.setParameter(""foo[bar1]"", ""baz1"");
				request.setParameter(""foo[bar2]"", ""baz2"");
				Map<String, String> m = context.getParamMap(""foo"");
				assertEquals(2, m.size());
				assertEquals(""baz1"", m.get(""bar1""));
				assertEquals(""baz2"", m.get(""bar2""));
		}
		
		@Test
		void testGetParamMap_3() throws Exception {
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				request.setParameter(""foo[bar1]"", ""baz1"");
				request.setParameter(""foo[bar2]"", ""baz2"");
				request.setParameter(""foo[bar3]"", ""baz3"");
				request.setParameter(""foo[bar4]"", ""baz4"");
				request.setParameter(""foo[bar5]"", ""baz5"");
				Map<String, String> m = context.getParamMap(""foo"");
				assertEquals(5, m.size());
				assertEquals(""baz1"", m.get(""bar1""));
				assertEquals(""baz2"", m.get(""bar2""));
				assertEquals(""baz3"", m.get(""bar3""));
				assertEquals(""baz4"", m.get(""bar4""));
				assertEquals(""baz5"", m.get(""bar5""));
		}
		
		@Test
		void testGetParamMap_4() throws Exception {
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				request.setParameter(""foo[bar1]"", ""baz1"");
				request.setParameter(""foo[bar2]"", ""baz2"");
				request.setParameter(""foo[bar3]"", ""baz3"");
				request.setParameter(""foo[bar4]"", ""baz4"");
				request.setParameter(""foo[bar5]"", ""baz5"");
				request.setParameter(""foo[bar6]"", ""baz6"");
				request.setParameter(""foo[bar7]"", ""baz7"");
				request.setParameter(""foo[bar8]"", ""baz8"");
				request.setParameter(""foo[bar9]"", ""baz9"");
				request.setParameter(""foo[bar10]"", ""baz10"");
				request.setParameter(""foo[bar11]"", ""baz11"");
				request.setParameter(""foo[bar12]"", ""baz12"");
				request.setParameter(""foo[bar13]"", ""baz13"");
				request.setParameter(""foo[bar14]"", ""baz14"");
				request.setParameter(""foo[bar15]"", ""baz15"");
				request.setParameter(""foo[bar16]"", ""baz16"");
				request.setParameter(""foo[bar17]"", ""baz17"");
				request.setParameter(""foo[bar18]"", ""baz18"");
				request.setParameter(""foo[bar19]"", ""baz19"");
				request.setParameter(""foo[bar20]"", ""baz20"");
				request.setParameter(""foo[bar21]"", ""baz21"");
				request.setParameter(""foo[bar22]"", ""baz22"");
				request.setParameter(""foo[bar23]"", ""baz23"");
				request.setParameter(""foo[bar24]"", ""baz24"");
				request.setParameter(""foo[bar25]"", ""baz25"");
				request.setParameter(""foo[bar26]"", ""baz26"");
				request.setParameter(""foo[bar27]"", ""baz27"");
				request.setParameter(""foo[bar28]"", ""baz28"");
				request.setParameter(""foo[bar29]"", ""baz29"");
				request.setParameter(""foo[bar30]"", ""baz30"");
				request.setParameter(""foo[bar31]"", ""baz31"");
				request.setParameter(""foo[bar32]"", ""baz32"");
				request.setParameter(""foo[bar33]"", ""baz33"");
				request.setParameter(""foo[bar34]"", ""baz34"");
				request.setParameter(""foo[bar35]"", ""baz35"");
				request.setParameter(""foo[bar36]"", ""baz36"");
				request.setParameter(""foo[bar37]"", ""baz37"");
				request.setParameter(""foo[bar38]"", ""baz38"");
				request.setParameter(""foo[bar39]"", ""baz39"");
				request.setParameter(""foo[bar40]"", ""baz40"");
				request.setParameter(""foo[bar41]"", ""baz41"");
				request.setParameter(""foo[bar42]"", ""baz42"");
				request.setParameter(""foo[bar43]"", ""baz43"");
				request.setParameter(""foo[bar44]"", ""baz44"");
				request.setParameter(""foo[bar45]"", ""baz45"");
				request.setParameter(""foo[bar46]"", ""baz46"");
				request.setParameter(""foo[bar47]"", ""baz47"");
				request.setParameter(""foo[bar48]"", ""baz48"");
				request.setParameter(""foo[bar49]"", ""baz49"");
				request.setParameter(""foo[bar50]"", ""baz50"");
				request.setParameter(""foo[bar51]"", ""baz51"");
				request.setParameter("""
cmpl-6wScsNlHeSFVKp9tWQyd7vGMrO2ve,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_2Test.java,74.10947346687317,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * The actual HttpServletRequest object
     */
    public final HttpServletRequest request;

    /**
     * The actual HttpServletResponse object
     */
    public final HttpServletResponse response;

    /**
     * The HttpServlet object (actually this is a JVCDispatcher)
     */
    public final HttpServlet servlet;

    /**
     * The controller is the servlet path up to the action.
     */
    public final String controller;

    /**
     * The action is the last part of the servlet path (before any query arguments)
     */
    public final String action;

    /**
     * Tells if this request has multipart content (ie file upload)
     */
    public final boolean hasMultipartContent;

    /**
     * Parameter value indicating that the real parameter value is binary (and should be
     * accessed via the getAttribute() method.
     */
    public static final String BINARY_VALUE = ""BINARY_VALUE"";

    /**
     * The 'flash' map for holding temporary key/value strings.
     */
    public final Map<String, String> flash;

    /**
     * Holds cached page generator fragments
     */
    private static Map<String, String> cacheMap;

    /**
     * Constructor for JVCRequestContext which is used to hold http request and response iformation
     * @param request
     * @param response
     * @param servlet
     * @param flash
     * @param controller
     * @param action
     */
    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map<String, String> flash, String controller, String action) throws Exception {
        this.request = request;
        this.response = response;
        this.servlet = servlet;
        this.controller = controller;
        this.action = action;
        this.flash = flash;
        hasMultipartContent = ServletFileUpload.isMultipartContent(request);
        if (hasMultipartContent) {
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload();
            // Parse the request
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (item.isFormField()) {
                    // add parameter as request attribute
                    String val = Streams.asString(stream);
                    request.setAttribute(name, val);
                    // System.out.println(""Form field "" + name + "" with value "" + val + "" detected."");
                } else {
                    // add input stream and filename as attributes
                    String fileName = item.getName();
                    request.setAttribute(""fileName"", fileName);
                    byte[] data = readStream(stream);
                    request.setAttribute(name, data);
                    // System.out.println(""File field "" + name + "" with file name "" + fileName + "" detected."");
                }
            }
        }
    }

    // request info
    /**
     * Convenience method
     * @return true if the request is secure
     */
    public boolean isSecure() {
        return request.isSecure();
    }

    /**
     * Convenience method
     * @return the request scheme, ie. http, https
     */
    public String getScheme() {
        return request.getScheme();
    }

    /**
     * Convenience method
     * @return the request method, ie. GET, POST
     */
    public String getMethod() {
        return request.getMethod();
    }

    /**
     * Convenience method
     * @return the server name for this request
     */
    public String getServerName() {
        return request.getServerName();
    }

    /**
     * Convenience method
     * @return the server port for this request
     */
    public int getServerPort() {
        return request.getServerPort();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getServletPath
     * @see #getQueryString
     * @return the context path part of the url path
     */
    public String getContextPath() {
        return request.getContextPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getQueryString
     * @return the servlet path part of the url path
     */
    public String getServletPath() {
        return request.getServletPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getServletPath
     * @return the query string part of the url path
     */
    public String getQueryString() {
        return request.getQueryString();
    }

    // params
    /**
     * Convenience method
     * @param name    which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     * @param name  the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     * @param name    the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }

    /**
     * Convenience method to get all the parameter names.
     * @return an array of all parameter names
     * @see #getParam
     * @see #getParamMap
     * @see #getParamValues
     */
    public String[] getParamNames() {
        if (hasMultipartContent) {
            List<String> list = new ArrayList<String>();
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                list.add(e.nextElement());
            }
            return list.toArray(new String[list.size()]);
        } else {
            Map<String, String[]> m = request.getParameterMap();
            String[] a = new String[m.size()];
            int i = 0;
            for (String key : m.keySet()) {
                a[i++] = key;
            }
            return a;
        }
    }

    // attributes
    /**
     * Convenience method
     * @param name    which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }

    /**
     * Convenience method
     * @param name    name of attribute to be set
     * @param value   value of attribute to be set
     */
    public void setAttribute(String name, Object value) {
        request.setAttribute(name, value);
    }

    // session attributes
    /**
     * Convenience method
     * @param name    the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }

    /**
     * Convenience method
     * @return all the session attribute names.
     * @see #getSessionAttr
     * @see #setSessionAttr
     * @see #removeSessionAttr
     */
    public String[] getSessionAttrNames() {
        if (request.getSession(false) == null)
            return new String[0];
        ArrayList<String> a = new ArrayList<String>();
        Enumeration<String> e = request.getSession().getAttributeNames();
        while (e.hasMoreElements()) {
            a.add(e.nextElement());
        }
        return a.toArray(new String[a.size()]);
    }

    /**
     * Convenience method
     * @param name  the key to store the indicated value
     * @param value  the object to be stored
     * @see #getSessionAttr
     * @see #removeSessionAttr
     */
    public void setSessionAttr(String name, Object value) {
        if (request.getSession() == null)
            return;
        request.getSession().setAttribute(name, value);
    }

    /**
     * Convenience method
     * @param name  the key of
     * @see #setSessionAttr
     */
    public void removeSessionAttr(String name) {
        if (request.getSession() == null)
            return;
        request.getSession().removeAttribute(name);
    }

    // cookies
    /**
     * Convenience method to get cookie by name
     * @param name  the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }

    /**
     * Convenience method to get all the cookie names.
     * @return an array of the names of all the cookies in the request, possibly empty
     * @see #getCookie
     * @see #setCookie
     */
    public String[] getCookieNames() {
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return new String[0];
        String[] a = new String[cookies.length];
        int i = 0;
        for (Cookie c : cookies) {
            a[i++] = c.getName();
        }
        return a;
    }

    /**
     * Convenience method
     * @param cookie   the cookie to be added to the response
     * @see #getCookie
     * @see #getCookieNames
     */
    public void setCookie(Cookie cookie) {
        response.addCookie(cookie);
    }

    /**
     * Cause a non-standard response (ie. redirect) to be returned.
     * @param httpCode   the http response code to be returned
     * @param arg    an argument or message to be returned (depends on response code)
     * @see #redirect
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void nonStandardResponse(int httpCode, String arg) {
        throw new NonStandardResponseException(httpCode, arg);
    }

    /**
     * Cause a redirect response to be returned
     * @param path  where to redirect to. If the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #nonStandardResponse
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void redirect(String path) {
        if (path.startsWith(""/""))
            path = absPath(path);
        nonStandardResponse(HttpURLConnection.HTTP_MOVED_TEMP, path);
    }

    /**
     * Cause a binary response to be returned
     * @param in input stream containing binary data to be sent
     * @throws BinaryResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the BinaryResponseException.
     */
    public void sendBinaryResponse(InputStream in) {
        throw new BinaryResponseException(in);
    }

    /**
     * Convenience method to prepend the context path onto a servlet path
     * @param path    a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options    extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }

    /**
     * Convenience method to check if this request is a POST
     */
    public boolean isPost() {
        return ""POST"".equals(request.getMethod());
    }

    /**
     * Convenience method to check if this request is a GET
     */
    public boolean isGet() {
        return ""GET"".equals(request.getMethod());
    }

    /**
     * Convenience method to retrieve a value from the flash
     * @param key  the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }

    /**
     * Convenience method to add a value to the flash
     * @param key  the key to use to associate with the flash value
     * @param val  the value to store
     * @see #getFlash
     */
    public void setFlash(String key, String val) {
        flash.put(key, val);
    }

    // caching (internal use)
    /**
     * Internal method used to retrieve a cached block
     * @see #setCachedBlock
     */
    public static String getCachedBlock(String key) {
        return (cacheMap == null) ? null : cacheMap.get(key);
    }

    /**
     * Internal method used to store a cached block
     * @see #getCachedBlock
     */
    public static void setCachedBlock(String key, String val) {
        if (cacheMap == null) {
            cacheMap = new HashMap<String, String>();
        }
        cacheMap.put(key, val);
    }

    /**
     * For debugging
     * @return a string representation of this request context
     */
    public String toString() {
        return toString("", "");
    }

    public String toString(String sep) {
        StringBuilder sb = new StringBuilder();
        sb.append(""params: ["");
        String[] keys = getParamNames();
        for (String key : keys) {
            sb.append(key).append('=').append(getParam(key)).append(sep);
        }
        if (keys.length > 0) {
            sb.setLength(sb.length() - sep.length());
        }
        sb.append(""]"");
        sb.append(sep).append(""method: "").append(getMethod());
        sb.append(sep).append(""url: "").append(getScheme());
        sb.append(""|"").append(getServerName());
        sb.append(""|"").append(getServerPort());
        sb.append(""|"").append(getContextPath());
        sb.append(""|"").append(getServletPath());
        sb.append(""|"").append(getQueryString());
        if (hasMultipartContent) {
            sb.append(sep).append(""content len: "").append(request.getContentLength());
            //sb.append(sep).append(""content type: "").append(request.getContentType());
        }
        return sb.toString();
    }

    /**
     * Copy an input stream to an output stream.
     */
    private byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        return out.toByteArray();
    }
}
","// JVCRequestContext_2Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getParamValues(String)} method.
*/
class JVCRequestContext_2Test {","// JVCRequestContext_2Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getParamValues(String)} method.
*/
class JVCRequestContext_2Test {

		@Test
		void testGetParamValues_1() {
				// test case 1
				// input:
				//   name = ""foo""
				//   params = { ""foo"" => ""bar"" }
				// expected output:
				//   values = { ""bar"" }
				String name = ""foo"";
				String[] params = { ""foo"" };
				String[] values = { ""bar"" };
				assertArrayEquals(values, JVCRequestContext.getParamValues(name, params));
		}
		
		@Test
		void testGetParamValues_2() {
				// test case 2
				// input:
				//   name = ""foo""
				//   params = { ""foo"" => ""bar"", ""foo"" => ""baz"" }
				// expected output:
				//   values = { ""bar"", ""baz"" }
				String name = ""foo"";
				String[] params = { ""foo"", ""foo"" };
				String[] values = { ""bar"", ""baz"" };
				assertArrayEquals(values, JVCRequestContext.getParamValues(name, params));
		}
		
		@Test
		void testGetParamValues_3() {
				// test case 3
				// input:
				//   name = ""foo""
				//   params = { ""foo"" => ""bar"", ""foo"" => ""baz"", ""foo"" => ""qux"" }
				// expected output:
				//   values = { ""bar"", ""baz"", ""qux"" }
				String name = ""foo"";
				String[] params = { ""foo"", ""foo"", ""foo"" };
				String[] values = { ""bar"", ""baz"", ""qux"" };
				assertArrayEquals(values, JVCRequestContext.getParamValues(name, params));
		}
		
		@Test
		void testGetParamValues_4() {
				// test case 4
				// input:
				//   name = ""foo""
				//   params = { ""foo"" => ""bar"", ""foo"" => ""baz"", ""foo"" => ""qux"", ""foo"" => ""quux"" }
				// expected output:
				//   values = { ""bar"", ""baz"", ""qux"", ""quux"" }
				String name = ""foo"";
				String[] params = { ""foo"", ""foo"", ""foo"", ""foo"" };
				String[] values = { ""bar"", ""baz"", ""qux"", ""quux"" };
				assertArrayEquals(values, JVCRequestContext.getParamValues(name, params));
		}
		
		@Test
		void testGetParamValues_5() {
				// test case 5
				// input:
				//   name = ""foo""
				//   params = { ""foo"" => ""bar"", ""foo"" => ""baz"", ""foo"" => ""qux"", ""foo"" => ""quux"", ""foo"" => ""corge"" }
				// expected output:
				//   values = { ""bar"", ""baz"", ""qux"", ""quux"", ""corge"" }
				String name = ""foo"";
				String[] params = { ""foo"", ""foo"", ""foo"", ""foo"", ""foo"" };
				String[] values = { ""bar"", ""baz"", ""qux"", ""quux"", ""corge"" };
				assertArrayEquals(values, JVCRequestContext.getParamValues(name, params));
		}
		
		@Test
		void testGetParamValues_6() {
				// test case 6
				// input:
				//   name = ""foo""
				//   params = { ""foo"" => ""bar"", ""foo"" => ""baz"", ""foo"" => ""qux"", ""foo"" => ""quux"", ""foo"" => ""corge"", ""foo"" => ""grault"" }
				// expected output:
				//   values = { ""bar"", ""baz"", ""qux"", ""quux"", ""corge"", ""grault"" }
				String name = ""foo"";
				String[] params = { ""foo"", ""foo"", ""foo"", ""foo"", ""foo"", ""foo"" };
				String[] values = { ""bar"", ""baz"", ""qux"", ""quux"", ""corge"", ""grault"" };
				assertArrayEquals(values, JVCRequestContext.getParamValues(name, params));
		}
		
		@Test
		void testGetParamValues_7() {
				// test case 7
				// input:
				//   name = ""foo""
				//   params = { ""foo"" => ""bar"", ""foo"" => ""baz"", ""foo"" => ""qux"", ""foo"" => ""quux"", ""foo"" => ""corge"", ""foo"" => ""grault"", ""foo"" => ""garply"" }
				// expected output:
				//   values = { ""bar"", ""baz"", ""qux"", ""quux"", ""corge"", ""grault"", ""garply"" }
				String name = ""foo"";
				String[] params = { ""foo"", ""foo"", ""foo"", ""foo"", ""foo"", ""foo"", ""foo"" };
				String[] values = { ""bar"", ""baz"", ""qux"", ""quux"", ""corge"", ""grault"", ""garply"" };
				assertArrayEquals(values, JVCRequestContext.getParamValues(name, params));
		}
		
		@Test
		void testGetParamValues_8() {
				// test case 8
				// input:
				//   name = ""foo""
				//   params = { ""foo"" => ""bar"", ""foo"" => ""baz"", ""foo"" => ""qux"", ""foo"" => ""quux"", ""foo"" => ""corge"", ""foo"" => ""grault"", ""foo"" => ""garply"", ""foo"" => ""waldo"" }
				// expected output:
				//   values = { ""bar"", ""baz"", ""qux"", ""quux"", ""corge"", ""grault"", ""garply"", ""waldo"" }
				String name = ""foo"";
				String[] params = { ""foo"", ""foo"", ""foo"", ""foo"", ""foo"", ""foo"", ""foo"", ""foo"" };
				String[] values = { ""bar"", ""baz"", ""qux"", ""quux"", ""corge"", ""grault"", ""garply"", ""waldo"" };
				assertArrayEquals(values, JVCRequestContext.getParamValues(name, params));
		}
		
		@Test
		void testGetParamValues_9() {
				// test case 9
				// input:
				//   name = ""foo""
				//   params = { ""foo"" => ""bar"", ""foo"" => ""baz"", ""foo"" => ""qux"", ""foo"" => ""quux"", ""foo"" => ""corge"", ""foo"" => ""grault"", ""foo"" => ""garply"", ""foo"" => ""waldo"", ""foo"" => ""fred"" }
				// expected output:
				//   values = { ""bar"", ""baz"", ""qux"", ""quux"", ""corge"", ""grault"", ""garply"", ""waldo"", ""fred"" }
				String name = ""foo"";
				String[] params = { ""foo"
cmpl-6wSe4w32wUU6pNREswxLwagKeMGLz,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_3Test.java,83.31039786338806,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * The actual HttpServletRequest object
     */
    public final HttpServletRequest request;

    /**
     * The actual HttpServletResponse object
     */
    public final HttpServletResponse response;

    /**
     * The HttpServlet object (actually this is a JVCDispatcher)
     */
    public final HttpServlet servlet;

    /**
     * The controller is the servlet path up to the action.
     */
    public final String controller;

    /**
     * The action is the last part of the servlet path (before any query arguments)
     */
    public final String action;

    /**
     * Tells if this request has multipart content (ie file upload)
     */
    public final boolean hasMultipartContent;

    /**
     * Parameter value indicating that the real parameter value is binary (and should be
     * accessed via the getAttribute() method.
     */
    public static final String BINARY_VALUE = ""BINARY_VALUE"";

    /**
     * The 'flash' map for holding temporary key/value strings.
     */
    public final Map<String, String> flash;

    /**
     * Holds cached page generator fragments
     */
    private static Map<String, String> cacheMap;

    /**
     * Constructor for JVCRequestContext which is used to hold http request and response iformation
     * @param request
     * @param response
     * @param servlet
     * @param flash
     * @param controller
     * @param action
     */
    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map<String, String> flash, String controller, String action) throws Exception {
        this.request = request;
        this.response = response;
        this.servlet = servlet;
        this.controller = controller;
        this.action = action;
        this.flash = flash;
        hasMultipartContent = ServletFileUpload.isMultipartContent(request);
        if (hasMultipartContent) {
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload();
            // Parse the request
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (item.isFormField()) {
                    // add parameter as request attribute
                    String val = Streams.asString(stream);
                    request.setAttribute(name, val);
                    // System.out.println(""Form field "" + name + "" with value "" + val + "" detected."");
                } else {
                    // add input stream and filename as attributes
                    String fileName = item.getName();
                    request.setAttribute(""fileName"", fileName);
                    byte[] data = readStream(stream);
                    request.setAttribute(name, data);
                    // System.out.println(""File field "" + name + "" with file name "" + fileName + "" detected."");
                }
            }
        }
    }

    // request info
    /**
     * Convenience method
     * @return true if the request is secure
     */
    public boolean isSecure() {
        return request.isSecure();
    }

    /**
     * Convenience method
     * @return the request scheme, ie. http, https
     */
    public String getScheme() {
        return request.getScheme();
    }

    /**
     * Convenience method
     * @return the request method, ie. GET, POST
     */
    public String getMethod() {
        return request.getMethod();
    }

    /**
     * Convenience method
     * @return the server name for this request
     */
    public String getServerName() {
        return request.getServerName();
    }

    /**
     * Convenience method
     * @return the server port for this request
     */
    public int getServerPort() {
        return request.getServerPort();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getServletPath
     * @see #getQueryString
     * @return the context path part of the url path
     */
    public String getContextPath() {
        return request.getContextPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getQueryString
     * @return the servlet path part of the url path
     */
    public String getServletPath() {
        return request.getServletPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getServletPath
     * @return the query string part of the url path
     */
    public String getQueryString() {
        return request.getQueryString();
    }

    // params
    /**
     * Convenience method
     * @param name    which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     * @param name  the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     * @param name    the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }

    /**
     * Convenience method to get all the parameter names.
     * @return an array of all parameter names
     * @see #getParam
     * @see #getParamMap
     * @see #getParamValues
     */
    public String[] getParamNames() {
        if (hasMultipartContent) {
            List<String> list = new ArrayList<String>();
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                list.add(e.nextElement());
            }
            return list.toArray(new String[list.size()]);
        } else {
            Map<String, String[]> m = request.getParameterMap();
            String[] a = new String[m.size()];
            int i = 0;
            for (String key : m.keySet()) {
                a[i++] = key;
            }
            return a;
        }
    }

    // attributes
    /**
     * Convenience method
     * @param name    which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }

    /**
     * Convenience method
     * @param name    name of attribute to be set
     * @param value   value of attribute to be set
     */
    public void setAttribute(String name, Object value) {
        request.setAttribute(name, value);
    }

    // session attributes
    /**
     * Convenience method
     * @param name    the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }

    /**
     * Convenience method
     * @return all the session attribute names.
     * @see #getSessionAttr
     * @see #setSessionAttr
     * @see #removeSessionAttr
     */
    public String[] getSessionAttrNames() {
        if (request.getSession(false) == null)
            return new String[0];
        ArrayList<String> a = new ArrayList<String>();
        Enumeration<String> e = request.getSession().getAttributeNames();
        while (e.hasMoreElements()) {
            a.add(e.nextElement());
        }
        return a.toArray(new String[a.size()]);
    }

    /**
     * Convenience method
     * @param name  the key to store the indicated value
     * @param value  the object to be stored
     * @see #getSessionAttr
     * @see #removeSessionAttr
     */
    public void setSessionAttr(String name, Object value) {
        if (request.getSession() == null)
            return;
        request.getSession().setAttribute(name, value);
    }

    /**
     * Convenience method
     * @param name  the key of
     * @see #setSessionAttr
     */
    public void removeSessionAttr(String name) {
        if (request.getSession() == null)
            return;
        request.getSession().removeAttribute(name);
    }

    // cookies
    /**
     * Convenience method to get cookie by name
     * @param name  the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }

    /**
     * Convenience method to get all the cookie names.
     * @return an array of the names of all the cookies in the request, possibly empty
     * @see #getCookie
     * @see #setCookie
     */
    public String[] getCookieNames() {
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return new String[0];
        String[] a = new String[cookies.length];
        int i = 0;
        for (Cookie c : cookies) {
            a[i++] = c.getName();
        }
        return a;
    }

    /**
     * Convenience method
     * @param cookie   the cookie to be added to the response
     * @see #getCookie
     * @see #getCookieNames
     */
    public void setCookie(Cookie cookie) {
        response.addCookie(cookie);
    }

    /**
     * Cause a non-standard response (ie. redirect) to be returned.
     * @param httpCode   the http response code to be returned
     * @param arg    an argument or message to be returned (depends on response code)
     * @see #redirect
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void nonStandardResponse(int httpCode, String arg) {
        throw new NonStandardResponseException(httpCode, arg);
    }

    /**
     * Cause a redirect response to be returned
     * @param path  where to redirect to. If the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #nonStandardResponse
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void redirect(String path) {
        if (path.startsWith(""/""))
            path = absPath(path);
        nonStandardResponse(HttpURLConnection.HTTP_MOVED_TEMP, path);
    }

    /**
     * Cause a binary response to be returned
     * @param in input stream containing binary data to be sent
     * @throws BinaryResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the BinaryResponseException.
     */
    public void sendBinaryResponse(InputStream in) {
        throw new BinaryResponseException(in);
    }

    /**
     * Convenience method to prepend the context path onto a servlet path
     * @param path    a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options    extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }

    /**
     * Convenience method to check if this request is a POST
     */
    public boolean isPost() {
        return ""POST"".equals(request.getMethod());
    }

    /**
     * Convenience method to check if this request is a GET
     */
    public boolean isGet() {
        return ""GET"".equals(request.getMethod());
    }

    /**
     * Convenience method to retrieve a value from the flash
     * @param key  the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }

    /**
     * Convenience method to add a value to the flash
     * @param key  the key to use to associate with the flash value
     * @param val  the value to store
     * @see #getFlash
     */
    public void setFlash(String key, String val) {
        flash.put(key, val);
    }

    // caching (internal use)
    /**
     * Internal method used to retrieve a cached block
     * @see #setCachedBlock
     */
    public static String getCachedBlock(String key) {
        return (cacheMap == null) ? null : cacheMap.get(key);
    }

    /**
     * Internal method used to store a cached block
     * @see #getCachedBlock
     */
    public static void setCachedBlock(String key, String val) {
        if (cacheMap == null) {
            cacheMap = new HashMap<String, String>();
        }
        cacheMap.put(key, val);
    }

    /**
     * For debugging
     * @return a string representation of this request context
     */
    public String toString() {
        return toString("", "");
    }

    public String toString(String sep) {
        StringBuilder sb = new StringBuilder();
        sb.append(""params: ["");
        String[] keys = getParamNames();
        for (String key : keys) {
            sb.append(key).append('=').append(getParam(key)).append(sep);
        }
        if (keys.length > 0) {
            sb.setLength(sb.length() - sep.length());
        }
        sb.append(""]"");
        sb.append(sep).append(""method: "").append(getMethod());
        sb.append(sep).append(""url: "").append(getScheme());
        sb.append(""|"").append(getServerName());
        sb.append(""|"").append(getServerPort());
        sb.append(""|"").append(getContextPath());
        sb.append(""|"").append(getServletPath());
        sb.append(""|"").append(getQueryString());
        if (hasMultipartContent) {
            sb.append(sep).append(""content len: "").append(request.getContentLength());
            //sb.append(sep).append(""content type: "").append(request.getContentType());
        }
        return sb.toString();
    }

    /**
     * Copy an input stream to an output stream.
     */
    private byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        return out.toByteArray();
    }
}
","// JVCRequestContext_3Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getAttribute(String)} method.
*/
class JVCRequestContext_3Test {","// JVCRequestContext_3Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getAttribute(String)} method.
*/
class JVCRequestContext_3Test {

		@Test
		void testGetAttribute_1() throws Exception {
				// test case 1
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				assertNull(context.getAttribute(""foo""));
		}
		
		@Test
		void testGetAttribute_2() throws Exception {
				// test case 2
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				request.setAttribute(""foo"", ""bar"");
				assertEquals(""bar"", context.getAttribute(""foo""));
		}
		
		@Test
		void testGetAttribute_3() throws Exception {
				// test case 3
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				request.setAttribute(""foo"", ""bar"");
				assertEquals(""bar"", context.getAttribute(""foo""));
				assertNull(context.getAttribute(""baz""));
		}
		
		@Test
		void testGetAttribute_4() throws Exception {
				// test case 4
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				request.setAttribute(""foo"", ""bar"");
				assertEquals(""bar"", context.getAttribute(""foo""));
				assertNull(context.getAttribute(""baz""));
				request.setAttribute(""baz"", ""qux"");
				assertEquals(""qux"", context.getAttribute(""baz""));
		}
		
		@Test
		void testGetAttribute_5() throws Exception {
				// test case 5
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				request.setAttribute(""foo"", ""bar"");
				assertEquals(""bar"", context.getAttribute(""foo""));
				assertNull(context.getAttribute(""baz""));
				request.setAttribute(""baz"", ""qux"");
				assertEquals(""qux"", context.getAttribute(""baz""));
				request.setAttribute(""foo"", ""quux"");
				assertEquals(""quux"", context.getAttribute(""foo""));
		}
		
		@Test
		void testGetAttribute_6() throws Exception {
				// test case 6
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				request.setAttribute(""foo"", ""bar"");
				assertEquals(""bar"", context.getAttribute(""foo""));
				assertNull(context.getAttribute(""baz""));
				request.setAttribute(""baz"", ""qux"");
				assertEquals(""qux"", context.getAttribute(""baz""));
				request.setAttribute(""foo"", ""quux"");
				assertEquals(""quux"", context.getAttribute(""foo""));
				request.setAttribute(""baz"", ""quuux"");
				assertEquals(""quuux"", context.getAttribute(""baz""));
		}
		
		@Test
		void testGetAttribute_7() throws Exception {
				// test case 7
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				request.setAttribute(""foo"", ""bar"");
				assertEquals(""bar"", context.getAttribute(""foo""));
				assertNull(context.getAttribute(""baz""));
				request.setAttribute(""baz"", ""qux"");
				assertEquals(""qux"", context.getAttribute(""baz""));
				request.setAttribute(""foo"", ""quux"");
				assertEquals(""quux"", context.getAttribute(""foo""));
				request.setAttribute(""baz"", ""quuux"");
				assertEquals(""quuux"", context.getAttribute(""baz""));
				request.setAttribute(""foo"", ""quuuux"");
				assertEquals(""quuuux"", context.getAttribute(""foo""));
		}
		
		@Test
		void testGetAttribute_8() throws Exception {
				// test case 8
				HttpServletRequest request = new MockHttpServletRequest();
				HttpServletResponse response = new MockHttpServletResponse();
				HttpServlet servlet = new MockHttpServlet();
				Map<String, String> flash = new HashMap<String, String>();
				JVCRequestContext context = new JVCRequestContext(request, response, servlet, flash, """", """");
				request.setAttribute(""foo"", ""bar"");
				assertEquals(""bar"", context.getAttribute(""foo""));
				assertNull(context.getAttribute(""baz""));
				request.setAttribute(""baz"", ""qux"");
				assertEquals(""qux"", context.getAttribute(""baz""));
				request.setAttribute(""foo"", ""quux"");
				assertEquals(""quux"", context.getAttribute(""foo""));
				request.setAttribute(""baz"", ""quuux"");
				assertEquals(""quuux"", context.getAttribute(""baz""));
				request.setAttribute(""foo"", ""quuuux"");
				assertEquals(""quuuux"", context.getAttribute(""foo""));
				request.setAttribute"
cmpl-6wSfQybzVGaZeCKPVozkFFtsunBJs,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_4Test.java,63.928054094314575,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * The actual HttpServletRequest object
     */
    public final HttpServletRequest request;

    /**
     * The actual HttpServletResponse object
     */
    public final HttpServletResponse response;

    /**
     * The HttpServlet object (actually this is a JVCDispatcher)
     */
    public final HttpServlet servlet;

    /**
     * The controller is the servlet path up to the action.
     */
    public final String controller;

    /**
     * The action is the last part of the servlet path (before any query arguments)
     */
    public final String action;

    /**
     * Tells if this request has multipart content (ie file upload)
     */
    public final boolean hasMultipartContent;

    /**
     * Parameter value indicating that the real parameter value is binary (and should be
     * accessed via the getAttribute() method.
     */
    public static final String BINARY_VALUE = ""BINARY_VALUE"";

    /**
     * The 'flash' map for holding temporary key/value strings.
     */
    public final Map<String, String> flash;

    /**
     * Holds cached page generator fragments
     */
    private static Map<String, String> cacheMap;

    /**
     * Constructor for JVCRequestContext which is used to hold http request and response iformation
     * @param request
     * @param response
     * @param servlet
     * @param flash
     * @param controller
     * @param action
     */
    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map<String, String> flash, String controller, String action) throws Exception {
        this.request = request;
        this.response = response;
        this.servlet = servlet;
        this.controller = controller;
        this.action = action;
        this.flash = flash;
        hasMultipartContent = ServletFileUpload.isMultipartContent(request);
        if (hasMultipartContent) {
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload();
            // Parse the request
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (item.isFormField()) {
                    // add parameter as request attribute
                    String val = Streams.asString(stream);
                    request.setAttribute(name, val);
                    // System.out.println(""Form field "" + name + "" with value "" + val + "" detected."");
                } else {
                    // add input stream and filename as attributes
                    String fileName = item.getName();
                    request.setAttribute(""fileName"", fileName);
                    byte[] data = readStream(stream);
                    request.setAttribute(name, data);
                    // System.out.println(""File field "" + name + "" with file name "" + fileName + "" detected."");
                }
            }
        }
    }

    // request info
    /**
     * Convenience method
     * @return true if the request is secure
     */
    public boolean isSecure() {
        return request.isSecure();
    }

    /**
     * Convenience method
     * @return the request scheme, ie. http, https
     */
    public String getScheme() {
        return request.getScheme();
    }

    /**
     * Convenience method
     * @return the request method, ie. GET, POST
     */
    public String getMethod() {
        return request.getMethod();
    }

    /**
     * Convenience method
     * @return the server name for this request
     */
    public String getServerName() {
        return request.getServerName();
    }

    /**
     * Convenience method
     * @return the server port for this request
     */
    public int getServerPort() {
        return request.getServerPort();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getServletPath
     * @see #getQueryString
     * @return the context path part of the url path
     */
    public String getContextPath() {
        return request.getContextPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getQueryString
     * @return the servlet path part of the url path
     */
    public String getServletPath() {
        return request.getServletPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getServletPath
     * @return the query string part of the url path
     */
    public String getQueryString() {
        return request.getQueryString();
    }

    // params
    /**
     * Convenience method
     * @param name    which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     * @param name  the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     * @param name    the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }

    /**
     * Convenience method to get all the parameter names.
     * @return an array of all parameter names
     * @see #getParam
     * @see #getParamMap
     * @see #getParamValues
     */
    public String[] getParamNames() {
        if (hasMultipartContent) {
            List<String> list = new ArrayList<String>();
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                list.add(e.nextElement());
            }
            return list.toArray(new String[list.size()]);
        } else {
            Map<String, String[]> m = request.getParameterMap();
            String[] a = new String[m.size()];
            int i = 0;
            for (String key : m.keySet()) {
                a[i++] = key;
            }
            return a;
        }
    }

    // attributes
    /**
     * Convenience method
     * @param name    which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }

    /**
     * Convenience method
     * @param name    name of attribute to be set
     * @param value   value of attribute to be set
     */
    public void setAttribute(String name, Object value) {
        request.setAttribute(name, value);
    }

    // session attributes
    /**
     * Convenience method
     * @param name    the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }

    /**
     * Convenience method
     * @return all the session attribute names.
     * @see #getSessionAttr
     * @see #setSessionAttr
     * @see #removeSessionAttr
     */
    public String[] getSessionAttrNames() {
        if (request.getSession(false) == null)
            return new String[0];
        ArrayList<String> a = new ArrayList<String>();
        Enumeration<String> e = request.getSession().getAttributeNames();
        while (e.hasMoreElements()) {
            a.add(e.nextElement());
        }
        return a.toArray(new String[a.size()]);
    }

    /**
     * Convenience method
     * @param name  the key to store the indicated value
     * @param value  the object to be stored
     * @see #getSessionAttr
     * @see #removeSessionAttr
     */
    public void setSessionAttr(String name, Object value) {
        if (request.getSession() == null)
            return;
        request.getSession().setAttribute(name, value);
    }

    /**
     * Convenience method
     * @param name  the key of
     * @see #setSessionAttr
     */
    public void removeSessionAttr(String name) {
        if (request.getSession() == null)
            return;
        request.getSession().removeAttribute(name);
    }

    // cookies
    /**
     * Convenience method to get cookie by name
     * @param name  the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }

    /**
     * Convenience method to get all the cookie names.
     * @return an array of the names of all the cookies in the request, possibly empty
     * @see #getCookie
     * @see #setCookie
     */
    public String[] getCookieNames() {
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return new String[0];
        String[] a = new String[cookies.length];
        int i = 0;
        for (Cookie c : cookies) {
            a[i++] = c.getName();
        }
        return a;
    }

    /**
     * Convenience method
     * @param cookie   the cookie to be added to the response
     * @see #getCookie
     * @see #getCookieNames
     */
    public void setCookie(Cookie cookie) {
        response.addCookie(cookie);
    }

    /**
     * Cause a non-standard response (ie. redirect) to be returned.
     * @param httpCode   the http response code to be returned
     * @param arg    an argument or message to be returned (depends on response code)
     * @see #redirect
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void nonStandardResponse(int httpCode, String arg) {
        throw new NonStandardResponseException(httpCode, arg);
    }

    /**
     * Cause a redirect response to be returned
     * @param path  where to redirect to. If the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #nonStandardResponse
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void redirect(String path) {
        if (path.startsWith(""/""))
            path = absPath(path);
        nonStandardResponse(HttpURLConnection.HTTP_MOVED_TEMP, path);
    }

    /**
     * Cause a binary response to be returned
     * @param in input stream containing binary data to be sent
     * @throws BinaryResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the BinaryResponseException.
     */
    public void sendBinaryResponse(InputStream in) {
        throw new BinaryResponseException(in);
    }

    /**
     * Convenience method to prepend the context path onto a servlet path
     * @param path    a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options    extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }

    /**
     * Convenience method to check if this request is a POST
     */
    public boolean isPost() {
        return ""POST"".equals(request.getMethod());
    }

    /**
     * Convenience method to check if this request is a GET
     */
    public boolean isGet() {
        return ""GET"".equals(request.getMethod());
    }

    /**
     * Convenience method to retrieve a value from the flash
     * @param key  the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }

    /**
     * Convenience method to add a value to the flash
     * @param key  the key to use to associate with the flash value
     * @param val  the value to store
     * @see #getFlash
     */
    public void setFlash(String key, String val) {
        flash.put(key, val);
    }

    // caching (internal use)
    /**
     * Internal method used to retrieve a cached block
     * @see #setCachedBlock
     */
    public static String getCachedBlock(String key) {
        return (cacheMap == null) ? null : cacheMap.get(key);
    }

    /**
     * Internal method used to store a cached block
     * @see #getCachedBlock
     */
    public static void setCachedBlock(String key, String val) {
        if (cacheMap == null) {
            cacheMap = new HashMap<String, String>();
        }
        cacheMap.put(key, val);
    }

    /**
     * For debugging
     * @return a string representation of this request context
     */
    public String toString() {
        return toString("", "");
    }

    public String toString(String sep) {
        StringBuilder sb = new StringBuilder();
        sb.append(""params: ["");
        String[] keys = getParamNames();
        for (String key : keys) {
            sb.append(key).append('=').append(getParam(key)).append(sep);
        }
        if (keys.length > 0) {
            sb.setLength(sb.length() - sep.length());
        }
        sb.append(""]"");
        sb.append(sep).append(""method: "").append(getMethod());
        sb.append(sep).append(""url: "").append(getScheme());
        sb.append(""|"").append(getServerName());
        sb.append(""|"").append(getServerPort());
        sb.append(""|"").append(getContextPath());
        sb.append(""|"").append(getServletPath());
        sb.append(""|"").append(getQueryString());
        if (hasMultipartContent) {
            sb.append(sep).append(""content len: "").append(request.getContentLength());
            //sb.append(sep).append(""content type: "").append(request.getContentType());
        }
        return sb.toString();
    }

    /**
     * Copy an input stream to an output stream.
     */
    private byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        return out.toByteArray();
    }
}
","// JVCRequestContext_4Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getSessionAttr(String)} method.
*/
class JVCRequestContext_4Test {","// JVCRequestContext_4Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getSessionAttr(String)} method.
*/
class JVCRequestContext_4Test {

		@Test
		void testGetSessionAttr() {
				// TODO: implement this test
		}
}

// JVCDispatcher.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class is the main entry point for the JVC framework.
 * It is a servlet which is configured in the web.xml file.
 * <p>
 * It is responsible for dispatching requests to the appropriate
 * controller and action.
 * <p>
 * It also provides a mechanism for caching page generator fragments.
 *
 * @author mike dooley
 */
public class JVCDispatcher extends HttpServlet {

    /**
     * The default controller to use if none is specified in the url
     */
    public static final String DEFAULT_CONTROLLER = ""default"";

    /**
     * The default action to use if none is specified in the url
     */
    public static final String DEFAULT_ACTION = ""index"";

    /**
     * The default view to use if none is specified in the controller
     */
    public static final String DEFAULT_VIEW = ""index"";

    /**
     * The default layout to use if none is specified in the controller
     */
    public static final String DEFAULT_LAYOUT = ""default"";

    /**
     * The default content type to use if none is specified in the controller
     */
    public static final String DEFAULT_CONTENT_TYPE = ""text/html"";

    /**
     * The default character encoding to use if none is specified in the controller
     */
    public static final String DEFAULT_CHARACTER_ENCODING = ""UTF-8"";

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_TIME = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_SIZE = 1000;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_AGE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_DEAD = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE_DEAD = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_LIVE_DEAD = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE_IDLE_DEAD = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_DEAD_IDLE_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_DEAD_LIVE_IDLE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_DEAD_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE_DEAD_IDLE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_DEAD_IDLE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_DEAD_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE_IDLE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_DEAD = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_DEAD_LIVE_DEAD = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE_DEAD_IDLE_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_DEAD_IDLE_LIVE_DEAD = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_DEAD_LIVE_IDLE_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_LIVE_DEAD_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE_IDLE_DEAD_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_DEAD_LIVE_DEAD_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE_DEAD_IDLE_LIVE_DEAD = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_DEAD_IDLE_LIVE_DEAD_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_DEAD_LIVE_IDLE_LIVE_DEAD = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_LIVE_DEAD_LIVE_DEAD = 0;

    /**
     * The"
cmpl-6wSgRHXJrK0pD7RJghcRj0o4BuqXO,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_5Test.java,89.2715814113617,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * The actual HttpServletRequest object
     */
    public final HttpServletRequest request;

    /**
     * The actual HttpServletResponse object
     */
    public final HttpServletResponse response;

    /**
     * The HttpServlet object (actually this is a JVCDispatcher)
     */
    public final HttpServlet servlet;

    /**
     * The controller is the servlet path up to the action.
     */
    public final String controller;

    /**
     * The action is the last part of the servlet path (before any query arguments)
     */
    public final String action;

    /**
     * Tells if this request has multipart content (ie file upload)
     */
    public final boolean hasMultipartContent;

    /**
     * Parameter value indicating that the real parameter value is binary (and should be
     * accessed via the getAttribute() method.
     */
    public static final String BINARY_VALUE = ""BINARY_VALUE"";

    /**
     * The 'flash' map for holding temporary key/value strings.
     */
    public final Map<String, String> flash;

    /**
     * Holds cached page generator fragments
     */
    private static Map<String, String> cacheMap;

    /**
     * Constructor for JVCRequestContext which is used to hold http request and response iformation
     * @param request
     * @param response
     * @param servlet
     * @param flash
     * @param controller
     * @param action
     */
    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map<String, String> flash, String controller, String action) throws Exception {
        this.request = request;
        this.response = response;
        this.servlet = servlet;
        this.controller = controller;
        this.action = action;
        this.flash = flash;
        hasMultipartContent = ServletFileUpload.isMultipartContent(request);
        if (hasMultipartContent) {
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload();
            // Parse the request
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (item.isFormField()) {
                    // add parameter as request attribute
                    String val = Streams.asString(stream);
                    request.setAttribute(name, val);
                    // System.out.println(""Form field "" + name + "" with value "" + val + "" detected."");
                } else {
                    // add input stream and filename as attributes
                    String fileName = item.getName();
                    request.setAttribute(""fileName"", fileName);
                    byte[] data = readStream(stream);
                    request.setAttribute(name, data);
                    // System.out.println(""File field "" + name + "" with file name "" + fileName + "" detected."");
                }
            }
        }
    }

    // request info
    /**
     * Convenience method
     * @return true if the request is secure
     */
    public boolean isSecure() {
        return request.isSecure();
    }

    /**
     * Convenience method
     * @return the request scheme, ie. http, https
     */
    public String getScheme() {
        return request.getScheme();
    }

    /**
     * Convenience method
     * @return the request method, ie. GET, POST
     */
    public String getMethod() {
        return request.getMethod();
    }

    /**
     * Convenience method
     * @return the server name for this request
     */
    public String getServerName() {
        return request.getServerName();
    }

    /**
     * Convenience method
     * @return the server port for this request
     */
    public int getServerPort() {
        return request.getServerPort();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getServletPath
     * @see #getQueryString
     * @return the context path part of the url path
     */
    public String getContextPath() {
        return request.getContextPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getQueryString
     * @return the servlet path part of the url path
     */
    public String getServletPath() {
        return request.getServletPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getServletPath
     * @return the query string part of the url path
     */
    public String getQueryString() {
        return request.getQueryString();
    }

    // params
    /**
     * Convenience method
     * @param name    which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     * @param name  the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     * @param name    the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }

    /**
     * Convenience method to get all the parameter names.
     * @return an array of all parameter names
     * @see #getParam
     * @see #getParamMap
     * @see #getParamValues
     */
    public String[] getParamNames() {
        if (hasMultipartContent) {
            List<String> list = new ArrayList<String>();
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                list.add(e.nextElement());
            }
            return list.toArray(new String[list.size()]);
        } else {
            Map<String, String[]> m = request.getParameterMap();
            String[] a = new String[m.size()];
            int i = 0;
            for (String key : m.keySet()) {
                a[i++] = key;
            }
            return a;
        }
    }

    // attributes
    /**
     * Convenience method
     * @param name    which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }

    /**
     * Convenience method
     * @param name    name of attribute to be set
     * @param value   value of attribute to be set
     */
    public void setAttribute(String name, Object value) {
        request.setAttribute(name, value);
    }

    // session attributes
    /**
     * Convenience method
     * @param name    the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }

    /**
     * Convenience method
     * @return all the session attribute names.
     * @see #getSessionAttr
     * @see #setSessionAttr
     * @see #removeSessionAttr
     */
    public String[] getSessionAttrNames() {
        if (request.getSession(false) == null)
            return new String[0];
        ArrayList<String> a = new ArrayList<String>();
        Enumeration<String> e = request.getSession().getAttributeNames();
        while (e.hasMoreElements()) {
            a.add(e.nextElement());
        }
        return a.toArray(new String[a.size()]);
    }

    /**
     * Convenience method
     * @param name  the key to store the indicated value
     * @param value  the object to be stored
     * @see #getSessionAttr
     * @see #removeSessionAttr
     */
    public void setSessionAttr(String name, Object value) {
        if (request.getSession() == null)
            return;
        request.getSession().setAttribute(name, value);
    }

    /**
     * Convenience method
     * @param name  the key of
     * @see #setSessionAttr
     */
    public void removeSessionAttr(String name) {
        if (request.getSession() == null)
            return;
        request.getSession().removeAttribute(name);
    }

    // cookies
    /**
     * Convenience method to get cookie by name
     * @param name  the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }

    /**
     * Convenience method to get all the cookie names.
     * @return an array of the names of all the cookies in the request, possibly empty
     * @see #getCookie
     * @see #setCookie
     */
    public String[] getCookieNames() {
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return new String[0];
        String[] a = new String[cookies.length];
        int i = 0;
        for (Cookie c : cookies) {
            a[i++] = c.getName();
        }
        return a;
    }

    /**
     * Convenience method
     * @param cookie   the cookie to be added to the response
     * @see #getCookie
     * @see #getCookieNames
     */
    public void setCookie(Cookie cookie) {
        response.addCookie(cookie);
    }

    /**
     * Cause a non-standard response (ie. redirect) to be returned.
     * @param httpCode   the http response code to be returned
     * @param arg    an argument or message to be returned (depends on response code)
     * @see #redirect
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void nonStandardResponse(int httpCode, String arg) {
        throw new NonStandardResponseException(httpCode, arg);
    }

    /**
     * Cause a redirect response to be returned
     * @param path  where to redirect to. If the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #nonStandardResponse
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void redirect(String path) {
        if (path.startsWith(""/""))
            path = absPath(path);
        nonStandardResponse(HttpURLConnection.HTTP_MOVED_TEMP, path);
    }

    /**
     * Cause a binary response to be returned
     * @param in input stream containing binary data to be sent
     * @throws BinaryResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the BinaryResponseException.
     */
    public void sendBinaryResponse(InputStream in) {
        throw new BinaryResponseException(in);
    }

    /**
     * Convenience method to prepend the context path onto a servlet path
     * @param path    a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options    extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }

    /**
     * Convenience method to check if this request is a POST
     */
    public boolean isPost() {
        return ""POST"".equals(request.getMethod());
    }

    /**
     * Convenience method to check if this request is a GET
     */
    public boolean isGet() {
        return ""GET"".equals(request.getMethod());
    }

    /**
     * Convenience method to retrieve a value from the flash
     * @param key  the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }

    /**
     * Convenience method to add a value to the flash
     * @param key  the key to use to associate with the flash value
     * @param val  the value to store
     * @see #getFlash
     */
    public void setFlash(String key, String val) {
        flash.put(key, val);
    }

    // caching (internal use)
    /**
     * Internal method used to retrieve a cached block
     * @see #setCachedBlock
     */
    public static String getCachedBlock(String key) {
        return (cacheMap == null) ? null : cacheMap.get(key);
    }

    /**
     * Internal method used to store a cached block
     * @see #getCachedBlock
     */
    public static void setCachedBlock(String key, String val) {
        if (cacheMap == null) {
            cacheMap = new HashMap<String, String>();
        }
        cacheMap.put(key, val);
    }

    /**
     * For debugging
     * @return a string representation of this request context
     */
    public String toString() {
        return toString("", "");
    }

    public String toString(String sep) {
        StringBuilder sb = new StringBuilder();
        sb.append(""params: ["");
        String[] keys = getParamNames();
        for (String key : keys) {
            sb.append(key).append('=').append(getParam(key)).append(sep);
        }
        if (keys.length > 0) {
            sb.setLength(sb.length() - sep.length());
        }
        sb.append(""]"");
        sb.append(sep).append(""method: "").append(getMethod());
        sb.append(sep).append(""url: "").append(getScheme());
        sb.append(""|"").append(getServerName());
        sb.append(""|"").append(getServerPort());
        sb.append(""|"").append(getContextPath());
        sb.append(""|"").append(getServletPath());
        sb.append(""|"").append(getQueryString());
        if (hasMultipartContent) {
            sb.append(sep).append(""content len: "").append(request.getContentLength());
            //sb.append(sep).append(""content type: "").append(request.getContentType());
        }
        return sb.toString();
    }

    /**
     * Copy an input stream to an output stream.
     */
    private byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        return out.toByteArray();
    }
}
","// JVCRequestContext_5Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getCookie(String)} method.
*/
class JVCRequestContext_5Test {","// JVCRequestContext_5Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getCookie(String)} method.
*/
class JVCRequestContext_5Test {

	/**
	* Test case for the {@link JVCRequestContext#getCookie(String)} method.
	*/
	@Test
	void testGetCookie() {
		// TODO: implement this test case
		// Please write down your test code here.
	}
}

// JVCRequestContext_6Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getCookieNames()} method.
*/
class JVCRequestContext_6Test {
		
	/**
	* Test case for the {@link JVCRequestContext#getCookieNames()} method.
	*/
	@Test
	void testGetCookieNames() {
		// TODO: implement this test case
		// Please write down your test code here.
	}
}

// JVCRequestContext_7Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#setCookie(Cookie)} method.
*/
class JVCRequestContext_7Test {
		
	/**
	* Test case for the {@link JVCRequestContext#setCookie(Cookie)} method.
	*/
	@Test
	void testSetCookie() {
		// TODO: implement this test case
		// Please write down your test code here.
	}
}

// JVCRequestContext_8Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#redirect(String)} method.
*/
class JVCRequestContext_8Test {
		
	/**
	* Test case for the {@link JVCRequestContext#redirect(String)} method.
	*/
	@Test
	void testRedirect() {
		// TODO: implement this test case
		// Please write down your test code here.
	}
}

// JVCRequestContext_9Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#sendBinaryResponse(InputStream)} method.
*/
class JVCRequestContext_9Test {
		
	/**
	* Test case for the {@link JVCRequestContext#sendBinaryResponse(InputStream)} method.
	*/
	@Test
	void testSendBinaryResponse() {
		// TODO: implement this test case
		// Please write down your test code here.
	}
}

// JVCRequestContext_Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#toString()} method.
*/
class JVCRequestContext_Test {
		
	/**
	* Test case for the {@link JVCRequestContext#toString()} method.
	*/
	@Test
	void testToString() {
		// TODO: implement this test case
		// Please write down your test code here.
	}
}

// JVCRequestContext_toString_1Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#toString(String)} method.
*/
class JVCRequestContext_toString_1Test {
		
	/**
	* Test case for the {@link JVCRequestContext#toString(String)} method.
	*/
	@Test
	void testToString() {
		// TODO: implement this test case
		// Please write down your test code here.
	}
}

// JVCRequestContext_toString_2Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#toString(String)} method.
*/
class JVCRequestContext_toString_2Test {
		
	/**
	* Test case for the {@link JVCRequestContext#toString(String)} method.
	*/
	@Test
	void testToString() {
"
cmpl-6wSht1f7Q8EIcYrkkNXPVIEOtPBYy,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_6Test.java,86.98713970184326,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * The actual HttpServletRequest object
     */
    public final HttpServletRequest request;

    /**
     * The actual HttpServletResponse object
     */
    public final HttpServletResponse response;

    /**
     * The HttpServlet object (actually this is a JVCDispatcher)
     */
    public final HttpServlet servlet;

    /**
     * The controller is the servlet path up to the action.
     */
    public final String controller;

    /**
     * The action is the last part of the servlet path (before any query arguments)
     */
    public final String action;

    /**
     * Tells if this request has multipart content (ie file upload)
     */
    public final boolean hasMultipartContent;

    /**
     * Parameter value indicating that the real parameter value is binary (and should be
     * accessed via the getAttribute() method.
     */
    public static final String BINARY_VALUE = ""BINARY_VALUE"";

    /**
     * The 'flash' map for holding temporary key/value strings.
     */
    public final Map<String, String> flash;

    /**
     * Holds cached page generator fragments
     */
    private static Map<String, String> cacheMap;

    /**
     * Constructor for JVCRequestContext which is used to hold http request and response iformation
     * @param request
     * @param response
     * @param servlet
     * @param flash
     * @param controller
     * @param action
     */
    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map<String, String> flash, String controller, String action) throws Exception {
        this.request = request;
        this.response = response;
        this.servlet = servlet;
        this.controller = controller;
        this.action = action;
        this.flash = flash;
        hasMultipartContent = ServletFileUpload.isMultipartContent(request);
        if (hasMultipartContent) {
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload();
            // Parse the request
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (item.isFormField()) {
                    // add parameter as request attribute
                    String val = Streams.asString(stream);
                    request.setAttribute(name, val);
                    // System.out.println(""Form field "" + name + "" with value "" + val + "" detected."");
                } else {
                    // add input stream and filename as attributes
                    String fileName = item.getName();
                    request.setAttribute(""fileName"", fileName);
                    byte[] data = readStream(stream);
                    request.setAttribute(name, data);
                    // System.out.println(""File field "" + name + "" with file name "" + fileName + "" detected."");
                }
            }
        }
    }

    // request info
    /**
     * Convenience method
     * @return true if the request is secure
     */
    public boolean isSecure() {
        return request.isSecure();
    }

    /**
     * Convenience method
     * @return the request scheme, ie. http, https
     */
    public String getScheme() {
        return request.getScheme();
    }

    /**
     * Convenience method
     * @return the request method, ie. GET, POST
     */
    public String getMethod() {
        return request.getMethod();
    }

    /**
     * Convenience method
     * @return the server name for this request
     */
    public String getServerName() {
        return request.getServerName();
    }

    /**
     * Convenience method
     * @return the server port for this request
     */
    public int getServerPort() {
        return request.getServerPort();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getServletPath
     * @see #getQueryString
     * @return the context path part of the url path
     */
    public String getContextPath() {
        return request.getContextPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getQueryString
     * @return the servlet path part of the url path
     */
    public String getServletPath() {
        return request.getServletPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getServletPath
     * @return the query string part of the url path
     */
    public String getQueryString() {
        return request.getQueryString();
    }

    // params
    /**
     * Convenience method
     * @param name    which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     * @param name  the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     * @param name    the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }

    /**
     * Convenience method to get all the parameter names.
     * @return an array of all parameter names
     * @see #getParam
     * @see #getParamMap
     * @see #getParamValues
     */
    public String[] getParamNames() {
        if (hasMultipartContent) {
            List<String> list = new ArrayList<String>();
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                list.add(e.nextElement());
            }
            return list.toArray(new String[list.size()]);
        } else {
            Map<String, String[]> m = request.getParameterMap();
            String[] a = new String[m.size()];
            int i = 0;
            for (String key : m.keySet()) {
                a[i++] = key;
            }
            return a;
        }
    }

    // attributes
    /**
     * Convenience method
     * @param name    which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }

    /**
     * Convenience method
     * @param name    name of attribute to be set
     * @param value   value of attribute to be set
     */
    public void setAttribute(String name, Object value) {
        request.setAttribute(name, value);
    }

    // session attributes
    /**
     * Convenience method
     * @param name    the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }

    /**
     * Convenience method
     * @return all the session attribute names.
     * @see #getSessionAttr
     * @see #setSessionAttr
     * @see #removeSessionAttr
     */
    public String[] getSessionAttrNames() {
        if (request.getSession(false) == null)
            return new String[0];
        ArrayList<String> a = new ArrayList<String>();
        Enumeration<String> e = request.getSession().getAttributeNames();
        while (e.hasMoreElements()) {
            a.add(e.nextElement());
        }
        return a.toArray(new String[a.size()]);
    }

    /**
     * Convenience method
     * @param name  the key to store the indicated value
     * @param value  the object to be stored
     * @see #getSessionAttr
     * @see #removeSessionAttr
     */
    public void setSessionAttr(String name, Object value) {
        if (request.getSession() == null)
            return;
        request.getSession().setAttribute(name, value);
    }

    /**
     * Convenience method
     * @param name  the key of
     * @see #setSessionAttr
     */
    public void removeSessionAttr(String name) {
        if (request.getSession() == null)
            return;
        request.getSession().removeAttribute(name);
    }

    // cookies
    /**
     * Convenience method to get cookie by name
     * @param name  the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }

    /**
     * Convenience method to get all the cookie names.
     * @return an array of the names of all the cookies in the request, possibly empty
     * @see #getCookie
     * @see #setCookie
     */
    public String[] getCookieNames() {
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return new String[0];
        String[] a = new String[cookies.length];
        int i = 0;
        for (Cookie c : cookies) {
            a[i++] = c.getName();
        }
        return a;
    }

    /**
     * Convenience method
     * @param cookie   the cookie to be added to the response
     * @see #getCookie
     * @see #getCookieNames
     */
    public void setCookie(Cookie cookie) {
        response.addCookie(cookie);
    }

    /**
     * Cause a non-standard response (ie. redirect) to be returned.
     * @param httpCode   the http response code to be returned
     * @param arg    an argument or message to be returned (depends on response code)
     * @see #redirect
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void nonStandardResponse(int httpCode, String arg) {
        throw new NonStandardResponseException(httpCode, arg);
    }

    /**
     * Cause a redirect response to be returned
     * @param path  where to redirect to. If the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #nonStandardResponse
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void redirect(String path) {
        if (path.startsWith(""/""))
            path = absPath(path);
        nonStandardResponse(HttpURLConnection.HTTP_MOVED_TEMP, path);
    }

    /**
     * Cause a binary response to be returned
     * @param in input stream containing binary data to be sent
     * @throws BinaryResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the BinaryResponseException.
     */
    public void sendBinaryResponse(InputStream in) {
        throw new BinaryResponseException(in);
    }

    /**
     * Convenience method to prepend the context path onto a servlet path
     * @param path    a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options    extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }

    /**
     * Convenience method to check if this request is a POST
     */
    public boolean isPost() {
        return ""POST"".equals(request.getMethod());
    }

    /**
     * Convenience method to check if this request is a GET
     */
    public boolean isGet() {
        return ""GET"".equals(request.getMethod());
    }

    /**
     * Convenience method to retrieve a value from the flash
     * @param key  the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }

    /**
     * Convenience method to add a value to the flash
     * @param key  the key to use to associate with the flash value
     * @param val  the value to store
     * @see #getFlash
     */
    public void setFlash(String key, String val) {
        flash.put(key, val);
    }

    // caching (internal use)
    /**
     * Internal method used to retrieve a cached block
     * @see #setCachedBlock
     */
    public static String getCachedBlock(String key) {
        return (cacheMap == null) ? null : cacheMap.get(key);
    }

    /**
     * Internal method used to store a cached block
     * @see #getCachedBlock
     */
    public static void setCachedBlock(String key, String val) {
        if (cacheMap == null) {
            cacheMap = new HashMap<String, String>();
        }
        cacheMap.put(key, val);
    }

    /**
     * For debugging
     * @return a string representation of this request context
     */
    public String toString() {
        return toString("", "");
    }

    public String toString(String sep) {
        StringBuilder sb = new StringBuilder();
        sb.append(""params: ["");
        String[] keys = getParamNames();
        for (String key : keys) {
            sb.append(key).append('=').append(getParam(key)).append(sep);
        }
        if (keys.length > 0) {
            sb.setLength(sb.length() - sep.length());
        }
        sb.append(""]"");
        sb.append(sep).append(""method: "").append(getMethod());
        sb.append(sep).append(""url: "").append(getScheme());
        sb.append(""|"").append(getServerName());
        sb.append(""|"").append(getServerPort());
        sb.append(""|"").append(getContextPath());
        sb.append(""|"").append(getServletPath());
        sb.append(""|"").append(getQueryString());
        if (hasMultipartContent) {
            sb.append(sep).append(""content len: "").append(request.getContentLength());
            //sb.append(sep).append(""content type: "").append(request.getContentType());
        }
        return sb.toString();
    }

    /**
     * Copy an input stream to an output stream.
     */
    private byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        return out.toByteArray();
    }
}
","// JVCRequestContext_6Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#absPath(String)} method.
*/
class JVCRequestContext_6Test {","// JVCRequestContext_6Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#absPath(String)} method.
*/
class JVCRequestContext_6Test {

	@Test
	void testAbsPath_1() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String path = """";
		String result = jvcRequestContext.absPath(path);
		assertEquals(""/"", result);
	}
	
	@Test
	void testAbsPath_2() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String path = ""/"";
		String result = jvcRequestContext.absPath(path);
		assertEquals(""/"", result);
	}
	
	@Test
	void testAbsPath_3() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String path = ""a"";
		String result = jvcRequestContext.absPath(path);
		assertEquals(""/a"", result);
	}
	
	@Test
	void testAbsPath_4() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String path = ""/a"";
		String result = jvcRequestContext.absPath(path);
		assertEquals(""/a"", result);
	}
	
	@Test
	void testAbsPath_5() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String path = ""a/b"";
		String result = jvcRequestContext.absPath(path);
		assertEquals(""/a/b"", result);
	}
	
	@Test
	void testAbsPath_6() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String path = ""/a/b"";
		String result = jvcRequestContext.absPath(path);
		assertEquals(""/a/b"", result);
	}
	
	@Test
	void testAbsPath_7() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String path = ""a/b/c"";
		String result = jvcRequestContext.absPath(path);
		assertEquals(""/a/b/c"", result);
	}
	
	@Test
	void testAbsPath_8() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String path = ""/a/b/c"";
		String result = jvcRequestContext.absPath(path);
		assertEquals(""/a/b/c"", result);
	}
	
	@Test
	void testAbsPath_9() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String path = ""a/b/c/d"";
		String result = jvcRequestContext.absPath(path);
		assertEquals(""/a/b/c/d"", result);
	}
	
	@Test
	void testAbsPath_10() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String path = ""/a/b/c/d"";
		String result = jvcRequestContext.absPath(path);
		assertEquals(""/a/b/c/d"", result);
	}
}

// JVCRequestContext_7Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_7Test {
		
	@Test
	void testMakeLink_1() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = """";
		String path = """";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='/' ></a>"", result);
	}
	
	@Test
	void testMakeLink_2() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = """";
		String path = ""/"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='/' ></a>"", result);
	}
	
	@Test
	void testMakeLink_3() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = """";
		String path = ""a"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='/a' ></a>"", result);
	}
	
	@Test
	void testMakeLink_4() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = """";
		String path = ""/a"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='/a' ></a>"", result);
	}
	
	@Test
	void testMakeLink_5() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = """";
		String path = ""a/b"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='/a/b' ></a>"", result);
	}
	
	@Test
	void testMakeLink_6() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = """";
		String path = ""/a/b"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='/a/b' ></a>"", result);
	}
	
	@Test
	void testMakeLink_7() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = """";
		String path = ""a/b/c"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='/a/b/c' ></a>"", result);
	}
	
	@Test
	void testMakeLink_8() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = """";
		String path = ""/a/b/c"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='/a/b/c' ></a>"", result);
	}
	
	@Test
	void testMakeLink_9() {
		J"
cmpl-6wSjItMaEH3kplz9opDzETBGzHVVH,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_7Test.java,91.40415477752686,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * The actual HttpServletRequest object
     */
    public final HttpServletRequest request;

    /**
     * The actual HttpServletResponse object
     */
    public final HttpServletResponse response;

    /**
     * The HttpServlet object (actually this is a JVCDispatcher)
     */
    public final HttpServlet servlet;

    /**
     * The controller is the servlet path up to the action.
     */
    public final String controller;

    /**
     * The action is the last part of the servlet path (before any query arguments)
     */
    public final String action;

    /**
     * Tells if this request has multipart content (ie file upload)
     */
    public final boolean hasMultipartContent;

    /**
     * Parameter value indicating that the real parameter value is binary (and should be
     * accessed via the getAttribute() method.
     */
    public static final String BINARY_VALUE = ""BINARY_VALUE"";

    /**
     * The 'flash' map for holding temporary key/value strings.
     */
    public final Map<String, String> flash;

    /**
     * Holds cached page generator fragments
     */
    private static Map<String, String> cacheMap;

    /**
     * Constructor for JVCRequestContext which is used to hold http request and response iformation
     * @param request
     * @param response
     * @param servlet
     * @param flash
     * @param controller
     * @param action
     */
    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map<String, String> flash, String controller, String action) throws Exception {
        this.request = request;
        this.response = response;
        this.servlet = servlet;
        this.controller = controller;
        this.action = action;
        this.flash = flash;
        hasMultipartContent = ServletFileUpload.isMultipartContent(request);
        if (hasMultipartContent) {
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload();
            // Parse the request
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (item.isFormField()) {
                    // add parameter as request attribute
                    String val = Streams.asString(stream);
                    request.setAttribute(name, val);
                    // System.out.println(""Form field "" + name + "" with value "" + val + "" detected."");
                } else {
                    // add input stream and filename as attributes
                    String fileName = item.getName();
                    request.setAttribute(""fileName"", fileName);
                    byte[] data = readStream(stream);
                    request.setAttribute(name, data);
                    // System.out.println(""File field "" + name + "" with file name "" + fileName + "" detected."");
                }
            }
        }
    }

    // request info
    /**
     * Convenience method
     * @return true if the request is secure
     */
    public boolean isSecure() {
        return request.isSecure();
    }

    /**
     * Convenience method
     * @return the request scheme, ie. http, https
     */
    public String getScheme() {
        return request.getScheme();
    }

    /**
     * Convenience method
     * @return the request method, ie. GET, POST
     */
    public String getMethod() {
        return request.getMethod();
    }

    /**
     * Convenience method
     * @return the server name for this request
     */
    public String getServerName() {
        return request.getServerName();
    }

    /**
     * Convenience method
     * @return the server port for this request
     */
    public int getServerPort() {
        return request.getServerPort();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getServletPath
     * @see #getQueryString
     * @return the context path part of the url path
     */
    public String getContextPath() {
        return request.getContextPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getQueryString
     * @return the servlet path part of the url path
     */
    public String getServletPath() {
        return request.getServletPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getServletPath
     * @return the query string part of the url path
     */
    public String getQueryString() {
        return request.getQueryString();
    }

    // params
    /**
     * Convenience method
     * @param name    which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     * @param name  the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     * @param name    the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }

    /**
     * Convenience method to get all the parameter names.
     * @return an array of all parameter names
     * @see #getParam
     * @see #getParamMap
     * @see #getParamValues
     */
    public String[] getParamNames() {
        if (hasMultipartContent) {
            List<String> list = new ArrayList<String>();
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                list.add(e.nextElement());
            }
            return list.toArray(new String[list.size()]);
        } else {
            Map<String, String[]> m = request.getParameterMap();
            String[] a = new String[m.size()];
            int i = 0;
            for (String key : m.keySet()) {
                a[i++] = key;
            }
            return a;
        }
    }

    // attributes
    /**
     * Convenience method
     * @param name    which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }

    /**
     * Convenience method
     * @param name    name of attribute to be set
     * @param value   value of attribute to be set
     */
    public void setAttribute(String name, Object value) {
        request.setAttribute(name, value);
    }

    // session attributes
    /**
     * Convenience method
     * @param name    the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }

    /**
     * Convenience method
     * @return all the session attribute names.
     * @see #getSessionAttr
     * @see #setSessionAttr
     * @see #removeSessionAttr
     */
    public String[] getSessionAttrNames() {
        if (request.getSession(false) == null)
            return new String[0];
        ArrayList<String> a = new ArrayList<String>();
        Enumeration<String> e = request.getSession().getAttributeNames();
        while (e.hasMoreElements()) {
            a.add(e.nextElement());
        }
        return a.toArray(new String[a.size()]);
    }

    /**
     * Convenience method
     * @param name  the key to store the indicated value
     * @param value  the object to be stored
     * @see #getSessionAttr
     * @see #removeSessionAttr
     */
    public void setSessionAttr(String name, Object value) {
        if (request.getSession() == null)
            return;
        request.getSession().setAttribute(name, value);
    }

    /**
     * Convenience method
     * @param name  the key of
     * @see #setSessionAttr
     */
    public void removeSessionAttr(String name) {
        if (request.getSession() == null)
            return;
        request.getSession().removeAttribute(name);
    }

    // cookies
    /**
     * Convenience method to get cookie by name
     * @param name  the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }

    /**
     * Convenience method to get all the cookie names.
     * @return an array of the names of all the cookies in the request, possibly empty
     * @see #getCookie
     * @see #setCookie
     */
    public String[] getCookieNames() {
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return new String[0];
        String[] a = new String[cookies.length];
        int i = 0;
        for (Cookie c : cookies) {
            a[i++] = c.getName();
        }
        return a;
    }

    /**
     * Convenience method
     * @param cookie   the cookie to be added to the response
     * @see #getCookie
     * @see #getCookieNames
     */
    public void setCookie(Cookie cookie) {
        response.addCookie(cookie);
    }

    /**
     * Cause a non-standard response (ie. redirect) to be returned.
     * @param httpCode   the http response code to be returned
     * @param arg    an argument or message to be returned (depends on response code)
     * @see #redirect
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void nonStandardResponse(int httpCode, String arg) {
        throw new NonStandardResponseException(httpCode, arg);
    }

    /**
     * Cause a redirect response to be returned
     * @param path  where to redirect to. If the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #nonStandardResponse
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void redirect(String path) {
        if (path.startsWith(""/""))
            path = absPath(path);
        nonStandardResponse(HttpURLConnection.HTTP_MOVED_TEMP, path);
    }

    /**
     * Cause a binary response to be returned
     * @param in input stream containing binary data to be sent
     * @throws BinaryResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the BinaryResponseException.
     */
    public void sendBinaryResponse(InputStream in) {
        throw new BinaryResponseException(in);
    }

    /**
     * Convenience method to prepend the context path onto a servlet path
     * @param path    a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options    extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }

    /**
     * Convenience method to check if this request is a POST
     */
    public boolean isPost() {
        return ""POST"".equals(request.getMethod());
    }

    /**
     * Convenience method to check if this request is a GET
     */
    public boolean isGet() {
        return ""GET"".equals(request.getMethod());
    }

    /**
     * Convenience method to retrieve a value from the flash
     * @param key  the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }

    /**
     * Convenience method to add a value to the flash
     * @param key  the key to use to associate with the flash value
     * @param val  the value to store
     * @see #getFlash
     */
    public void setFlash(String key, String val) {
        flash.put(key, val);
    }

    // caching (internal use)
    /**
     * Internal method used to retrieve a cached block
     * @see #setCachedBlock
     */
    public static String getCachedBlock(String key) {
        return (cacheMap == null) ? null : cacheMap.get(key);
    }

    /**
     * Internal method used to store a cached block
     * @see #getCachedBlock
     */
    public static void setCachedBlock(String key, String val) {
        if (cacheMap == null) {
            cacheMap = new HashMap<String, String>();
        }
        cacheMap.put(key, val);
    }

    /**
     * For debugging
     * @return a string representation of this request context
     */
    public String toString() {
        return toString("", "");
    }

    public String toString(String sep) {
        StringBuilder sb = new StringBuilder();
        sb.append(""params: ["");
        String[] keys = getParamNames();
        for (String key : keys) {
            sb.append(key).append('=').append(getParam(key)).append(sep);
        }
        if (keys.length > 0) {
            sb.setLength(sb.length() - sep.length());
        }
        sb.append(""]"");
        sb.append(sep).append(""method: "").append(getMethod());
        sb.append(sep).append(""url: "").append(getScheme());
        sb.append(""|"").append(getServerName());
        sb.append(""|"").append(getServerPort());
        sb.append(""|"").append(getContextPath());
        sb.append(""|"").append(getServletPath());
        sb.append(""|"").append(getQueryString());
        if (hasMultipartContent) {
            sb.append(sep).append(""content len: "").append(request.getContentLength());
            //sb.append(sep).append(""content type: "").append(request.getContentType());
        }
        return sb.toString();
    }

    /**
     * Copy an input stream to an output stream.
     */
    private byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        return out.toByteArray();
    }
}
","// JVCRequestContext_7Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_7Test {","// JVCRequestContext_7Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_7Test {

	@Test
	void testMakeLink() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = ""anchor"";
		String path = ""path"";
		String options = ""options"";
		String result = jvcRequestContext.makeLink(anchor, path, options);
		assertEquals(""<a href='path' options>anchor</a>"", result);
	}
}

// JVCRequestContext_8Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_8Test {
		
	@Test
	void testMakeLink() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = ""anchor"";
		String path = ""path"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='path' >anchor</a>"", result);
	}
}

// JVCRequestContext_9Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_9Test {
		
	@Test
	void testMakeLink() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = ""anchor"";
		String path = ""path"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='path' >anchor</a>"", result);
	}
}

// JVCRequestContext_Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_Test {
		
	@Test
	void testMakeLink() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = ""anchor"";
		String path = ""path"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='path' >anchor</a>"", result);
	}
}

// JVCRequestContext_1Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_1Test {
		
	@Test
	void testMakeLink() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = ""anchor"";
		String path = ""path"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='path' >anchor</a>"", result);
	}
}

// JVCRequestContext_2Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_2Test {
		
	@Test
	void testMakeLink() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = ""anchor"";
		String path = ""path"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<a href='path' >anchor</a>"", result);
	}
}

// JVCRequestContext_3Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.
*/
class JVCRequestContext_3Test {
		
	@Test
	void testMakeLink() {
		JVCRequestContext jvcRequestContext = new JVCRequestContext(null, null, null, null, null, null);
		String anchor = ""anchor"";
		String path = ""path"";
		String result = jvcRequestContext.makeLink(anchor, path);
		assertEquals(""<"
cmpl-6wSkl8h3RkIZprcWcjwjCkjsRqFyH,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_8Test.java,87.5246512889862,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * The actual HttpServletRequest object
     */
    public final HttpServletRequest request;

    /**
     * The actual HttpServletResponse object
     */
    public final HttpServletResponse response;

    /**
     * The HttpServlet object (actually this is a JVCDispatcher)
     */
    public final HttpServlet servlet;

    /**
     * The controller is the servlet path up to the action.
     */
    public final String controller;

    /**
     * The action is the last part of the servlet path (before any query arguments)
     */
    public final String action;

    /**
     * Tells if this request has multipart content (ie file upload)
     */
    public final boolean hasMultipartContent;

    /**
     * Parameter value indicating that the real parameter value is binary (and should be
     * accessed via the getAttribute() method.
     */
    public static final String BINARY_VALUE = ""BINARY_VALUE"";

    /**
     * The 'flash' map for holding temporary key/value strings.
     */
    public final Map<String, String> flash;

    /**
     * Holds cached page generator fragments
     */
    private static Map<String, String> cacheMap;

    /**
     * Constructor for JVCRequestContext which is used to hold http request and response iformation
     * @param request
     * @param response
     * @param servlet
     * @param flash
     * @param controller
     * @param action
     */
    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map<String, String> flash, String controller, String action) throws Exception {
        this.request = request;
        this.response = response;
        this.servlet = servlet;
        this.controller = controller;
        this.action = action;
        this.flash = flash;
        hasMultipartContent = ServletFileUpload.isMultipartContent(request);
        if (hasMultipartContent) {
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload();
            // Parse the request
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (item.isFormField()) {
                    // add parameter as request attribute
                    String val = Streams.asString(stream);
                    request.setAttribute(name, val);
                    // System.out.println(""Form field "" + name + "" with value "" + val + "" detected."");
                } else {
                    // add input stream and filename as attributes
                    String fileName = item.getName();
                    request.setAttribute(""fileName"", fileName);
                    byte[] data = readStream(stream);
                    request.setAttribute(name, data);
                    // System.out.println(""File field "" + name + "" with file name "" + fileName + "" detected."");
                }
            }
        }
    }

    // request info
    /**
     * Convenience method
     * @return true if the request is secure
     */
    public boolean isSecure() {
        return request.isSecure();
    }

    /**
     * Convenience method
     * @return the request scheme, ie. http, https
     */
    public String getScheme() {
        return request.getScheme();
    }

    /**
     * Convenience method
     * @return the request method, ie. GET, POST
     */
    public String getMethod() {
        return request.getMethod();
    }

    /**
     * Convenience method
     * @return the server name for this request
     */
    public String getServerName() {
        return request.getServerName();
    }

    /**
     * Convenience method
     * @return the server port for this request
     */
    public int getServerPort() {
        return request.getServerPort();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getServletPath
     * @see #getQueryString
     * @return the context path part of the url path
     */
    public String getContextPath() {
        return request.getContextPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getQueryString
     * @return the servlet path part of the url path
     */
    public String getServletPath() {
        return request.getServletPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getServletPath
     * @return the query string part of the url path
     */
    public String getQueryString() {
        return request.getQueryString();
    }

    // params
    /**
     * Convenience method
     * @param name    which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     * @param name  the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     * @param name    the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }

    /**
     * Convenience method to get all the parameter names.
     * @return an array of all parameter names
     * @see #getParam
     * @see #getParamMap
     * @see #getParamValues
     */
    public String[] getParamNames() {
        if (hasMultipartContent) {
            List<String> list = new ArrayList<String>();
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                list.add(e.nextElement());
            }
            return list.toArray(new String[list.size()]);
        } else {
            Map<String, String[]> m = request.getParameterMap();
            String[] a = new String[m.size()];
            int i = 0;
            for (String key : m.keySet()) {
                a[i++] = key;
            }
            return a;
        }
    }

    // attributes
    /**
     * Convenience method
     * @param name    which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }

    /**
     * Convenience method
     * @param name    name of attribute to be set
     * @param value   value of attribute to be set
     */
    public void setAttribute(String name, Object value) {
        request.setAttribute(name, value);
    }

    // session attributes
    /**
     * Convenience method
     * @param name    the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }

    /**
     * Convenience method
     * @return all the session attribute names.
     * @see #getSessionAttr
     * @see #setSessionAttr
     * @see #removeSessionAttr
     */
    public String[] getSessionAttrNames() {
        if (request.getSession(false) == null)
            return new String[0];
        ArrayList<String> a = new ArrayList<String>();
        Enumeration<String> e = request.getSession().getAttributeNames();
        while (e.hasMoreElements()) {
            a.add(e.nextElement());
        }
        return a.toArray(new String[a.size()]);
    }

    /**
     * Convenience method
     * @param name  the key to store the indicated value
     * @param value  the object to be stored
     * @see #getSessionAttr
     * @see #removeSessionAttr
     */
    public void setSessionAttr(String name, Object value) {
        if (request.getSession() == null)
            return;
        request.getSession().setAttribute(name, value);
    }

    /**
     * Convenience method
     * @param name  the key of
     * @see #setSessionAttr
     */
    public void removeSessionAttr(String name) {
        if (request.getSession() == null)
            return;
        request.getSession().removeAttribute(name);
    }

    // cookies
    /**
     * Convenience method to get cookie by name
     * @param name  the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }

    /**
     * Convenience method to get all the cookie names.
     * @return an array of the names of all the cookies in the request, possibly empty
     * @see #getCookie
     * @see #setCookie
     */
    public String[] getCookieNames() {
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return new String[0];
        String[] a = new String[cookies.length];
        int i = 0;
        for (Cookie c : cookies) {
            a[i++] = c.getName();
        }
        return a;
    }

    /**
     * Convenience method
     * @param cookie   the cookie to be added to the response
     * @see #getCookie
     * @see #getCookieNames
     */
    public void setCookie(Cookie cookie) {
        response.addCookie(cookie);
    }

    /**
     * Cause a non-standard response (ie. redirect) to be returned.
     * @param httpCode   the http response code to be returned
     * @param arg    an argument or message to be returned (depends on response code)
     * @see #redirect
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void nonStandardResponse(int httpCode, String arg) {
        throw new NonStandardResponseException(httpCode, arg);
    }

    /**
     * Cause a redirect response to be returned
     * @param path  where to redirect to. If the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #nonStandardResponse
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void redirect(String path) {
        if (path.startsWith(""/""))
            path = absPath(path);
        nonStandardResponse(HttpURLConnection.HTTP_MOVED_TEMP, path);
    }

    /**
     * Cause a binary response to be returned
     * @param in input stream containing binary data to be sent
     * @throws BinaryResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the BinaryResponseException.
     */
    public void sendBinaryResponse(InputStream in) {
        throw new BinaryResponseException(in);
    }

    /**
     * Convenience method to prepend the context path onto a servlet path
     * @param path    a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options    extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }

    /**
     * Convenience method to check if this request is a POST
     */
    public boolean isPost() {
        return ""POST"".equals(request.getMethod());
    }

    /**
     * Convenience method to check if this request is a GET
     */
    public boolean isGet() {
        return ""GET"".equals(request.getMethod());
    }

    /**
     * Convenience method to retrieve a value from the flash
     * @param key  the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }

    /**
     * Convenience method to add a value to the flash
     * @param key  the key to use to associate with the flash value
     * @param val  the value to store
     * @see #getFlash
     */
    public void setFlash(String key, String val) {
        flash.put(key, val);
    }

    // caching (internal use)
    /**
     * Internal method used to retrieve a cached block
     * @see #setCachedBlock
     */
    public static String getCachedBlock(String key) {
        return (cacheMap == null) ? null : cacheMap.get(key);
    }

    /**
     * Internal method used to store a cached block
     * @see #getCachedBlock
     */
    public static void setCachedBlock(String key, String val) {
        if (cacheMap == null) {
            cacheMap = new HashMap<String, String>();
        }
        cacheMap.put(key, val);
    }

    /**
     * For debugging
     * @return a string representation of this request context
     */
    public String toString() {
        return toString("", "");
    }

    public String toString(String sep) {
        StringBuilder sb = new StringBuilder();
        sb.append(""params: ["");
        String[] keys = getParamNames();
        for (String key : keys) {
            sb.append(key).append('=').append(getParam(key)).append(sep);
        }
        if (keys.length > 0) {
            sb.setLength(sb.length() - sep.length());
        }
        sb.append(""]"");
        sb.append(sep).append(""method: "").append(getMethod());
        sb.append(sep).append(""url: "").append(getScheme());
        sb.append(""|"").append(getServerName());
        sb.append(""|"").append(getServerPort());
        sb.append(""|"").append(getContextPath());
        sb.append(""|"").append(getServletPath());
        sb.append(""|"").append(getQueryString());
        if (hasMultipartContent) {
            sb.append(sep).append(""content len: "").append(request.getContentLength());
            //sb.append(sep).append(""content type: "").append(request.getContentType());
        }
        return sb.toString();
    }

    /**
     * Copy an input stream to an output stream.
     */
    private byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        return out.toByteArray();
    }
}
","// JVCRequestContext_8Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String, String)} method.
*/
class JVCRequestContext_8Test {","// JVCRequestContext_8Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String, String)} method.
*/
class JVCRequestContext_8Test {

		@Test
		void testMakeLink_1() {
				String anchor = ""anchor"";
				String path = ""path"";
				String options = ""options"";
				String result = JVCRequestContext.makeLink(anchor, path, options);
				assertEquals(""<a href='path' options>anchor</a>"", result);
		}
		
		@Test
		void testMakeLink_2() {
				String anchor = ""anchor"";
				String path = ""path"";
				String options = ""options"";
				String result = JVCRequestContext.makeLink(anchor, path, options);
				assertEquals(""<a href='path' options>anchor</a>"", result);
		}
		
		@Test
		void testMakeLink_3() {
				String anchor = ""anchor"";
				String path = ""path"";
				String options = ""options"";
				String result = JVCRequestContext.makeLink(anchor, path, options);
				assertEquals(""<a href='path' options>anchor</a>"", result);
		}
		
		@Test
		void testMakeLink_4() {
				String anchor = ""anchor"";
				String path = ""path"";
				String options = ""options"";
				String result = JVCRequestContext.makeLink(anchor, path, options);
				assertEquals(""<a href='path' options>anchor</a>"", result);
		}
		
		@Test
		void testMakeLink_5() {
				String anchor = ""anchor"";
				String path = ""path"";
				String options = ""options"";
				String result = JVCRequestContext.makeLink(anchor, path, options);
				assertEquals(""<a href='path' options>anchor</a>"", result);
		}
		
		@Test
		void testMakeLink_6() {
				String anchor = ""anchor"";
				String path = ""path"";
				String options = ""options"";
				String result = JVCRequestContext.makeLink(anchor, path, options);
				assertEquals(""<a href='path' options>anchor</a>"", result);
		}
		
		@Test
		void testMakeLink_7() {
				String anchor = ""anchor"";
				String path = ""path"";
				String options = ""options"";
				String result = JVCRequestContext.makeLink(anchor, path, options);
				assertEquals(""<a href='path' options>anchor</a>"", result);
		}
		
		@Test
		void testMakeLink_8() {
				String anchor = ""anchor"";
				String path = ""path"";
				String options = ""options"";
				String result = JVCRequestContext.makeLink(anchor, path, options);
				assertEquals(""<a href='path' options>anchor</a>"", result);
		}
		
		@Test
		void testMakeLink_9() {
				String anchor = ""anchor"";
				String path = ""path"";
				String options = ""options"";
				String result = JVCRequestContext.makeLink(anchor, path, options);
				assertEquals(""<a href='path' options>anchor</a>"", result);
		}
		
		@Test
		void testMakeLink_10() {
				String anchor = ""anchor"";
				String path = ""path"";
				String options = ""options"";
				String result = JVCRequestContext.makeLink(anchor, path, options);
				assertEquals(""<a href='path' options>anchor</a>"", result);
		}
}

// JVCDispatcher.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class is the main entry point for the JVC framework.
 * It is a servlet which is configured in the web.xml file.
 * <p>
 * It is responsible for dispatching requests to the appropriate
 * controller and action.
 * <p>
 * It also provides a mechanism for caching page generator fragments.
 *
 * @author mike dooley
 */
public class JVCDispatcher extends HttpServlet {

    /**
     * The default controller to use if none is specified in the url
     */
    public static final String DEFAULT_CONTROLLER = ""default"";

    /**
     * The default action to use if none is specified in the url
     */
    public static final String DEFAULT_ACTION = ""index"";

    /**
     * The default view to use if none is specified in the controller
     */
    public static final String DEFAULT_VIEW = ""index"";

    /**
     * The default layout to use if none is specified in the controller
     */
    public static final String DEFAULT_LAYOUT = ""default"";

    /**
     * The default content type to use if none is specified in the controller
     */
    public static final String DEFAULT_CONTENT_TYPE = ""text/html"";

    /**
     * The default character encoding to use if none is specified in the controller
     */
    public static final String DEFAULT_CHARACTER_ENCODING = ""UTF-8"";

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_TIME = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_SIZE = 1000;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_AGE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE_IDLE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_IDLE_AGE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_AGE_IDLE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_LIVE_AGE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_CACHE_MAX_AGE_LIVE = 0;

    /**
     * The default cache time to use if none is specified in the controller
     */
    public static final int DEFAULT_"
cmpl-6wSmBZafkX5gFKZZIfOFLPH0dpKCx,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_9Test.java,73.31852340698242,length,"// JVCRequestContext.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 * This class contains state information for processing an http request.
 * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet
 * objects and provides convenience methods for accessing them.
 * <p>
 * It also provides access to the 'flash' which is a Map for storing temporary
 * key/value strings.  The scope of the flash is the current request or
 * the following request in the case of a redirect response.
 * <p>
 * It also contains some convenience methods for forming links and absolute paths.
 *
 * @author mike dooley
 */
public final class JVCRequestContext {

    /**
     * The actual HttpServletRequest object
     */
    public final HttpServletRequest request;

    /**
     * The actual HttpServletResponse object
     */
    public final HttpServletResponse response;

    /**
     * The HttpServlet object (actually this is a JVCDispatcher)
     */
    public final HttpServlet servlet;

    /**
     * The controller is the servlet path up to the action.
     */
    public final String controller;

    /**
     * The action is the last part of the servlet path (before any query arguments)
     */
    public final String action;

    /**
     * Tells if this request has multipart content (ie file upload)
     */
    public final boolean hasMultipartContent;

    /**
     * Parameter value indicating that the real parameter value is binary (and should be
     * accessed via the getAttribute() method.
     */
    public static final String BINARY_VALUE = ""BINARY_VALUE"";

    /**
     * The 'flash' map for holding temporary key/value strings.
     */
    public final Map<String, String> flash;

    /**
     * Holds cached page generator fragments
     */
    private static Map<String, String> cacheMap;

    /**
     * Constructor for JVCRequestContext which is used to hold http request and response iformation
     * @param request
     * @param response
     * @param servlet
     * @param flash
     * @param controller
     * @param action
     */
    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map<String, String> flash, String controller, String action) throws Exception {
        this.request = request;
        this.response = response;
        this.servlet = servlet;
        this.controller = controller;
        this.action = action;
        this.flash = flash;
        hasMultipartContent = ServletFileUpload.isMultipartContent(request);
        if (hasMultipartContent) {
            // Create a new file upload handler
            ServletFileUpload upload = new ServletFileUpload();
            // Parse the request
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (item.isFormField()) {
                    // add parameter as request attribute
                    String val = Streams.asString(stream);
                    request.setAttribute(name, val);
                    // System.out.println(""Form field "" + name + "" with value "" + val + "" detected."");
                } else {
                    // add input stream and filename as attributes
                    String fileName = item.getName();
                    request.setAttribute(""fileName"", fileName);
                    byte[] data = readStream(stream);
                    request.setAttribute(name, data);
                    // System.out.println(""File field "" + name + "" with file name "" + fileName + "" detected."");
                }
            }
        }
    }

    // request info
    /**
     * Convenience method
     * @return true if the request is secure
     */
    public boolean isSecure() {
        return request.isSecure();
    }

    /**
     * Convenience method
     * @return the request scheme, ie. http, https
     */
    public String getScheme() {
        return request.getScheme();
    }

    /**
     * Convenience method
     * @return the request method, ie. GET, POST
     */
    public String getMethod() {
        return request.getMethod();
    }

    /**
     * Convenience method
     * @return the server name for this request
     */
    public String getServerName() {
        return request.getServerName();
    }

    /**
     * Convenience method
     * @return the server port for this request
     */
    public int getServerPort() {
        return request.getServerPort();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getServletPath
     * @see #getQueryString
     * @return the context path part of the url path
     */
    public String getContextPath() {
        return request.getContextPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getQueryString
     * @return the servlet path part of the url path
     */
    public String getServletPath() {
        return request.getServletPath();
    }

    /**
     * Convenience method.  The request url path is broken into:
     * <ul>
     * <li>context path</li>
     * <li>servlet path</li>
     * <li>query string</li>
     * </ul>
     * @see #getContextPath
     * @see #getServletPath
     * @return the query string part of the url path
     */
    public String getQueryString() {
        return request.getQueryString();
    }

    // params
    /**
     * Convenience method
     * @param name    which parameter to get
     * @return the parameter value or null if there is no parameter corresponding to the indicated key
     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,
     * which can be retrieved as a byte array via the getAttribute method.
     * @see #getParamMap
     * @see #getParamValues
     * @see #getParamNames
     */
    public String getParam(String name) {
        if (hasMultipartContent) {
            Object o = request.getAttribute(name);
            return (o != null && o instanceof String) ? (String) o : BINARY_VALUE;
        } else {
            return request.getParameter(name);
        }
    }

    /**
     * Convenience method which gathers all parameters of the
     * form '<name>[<key>]' and return then in a map where the
     * keys are the <key> strings and the values are the
     * corresponding parameter values.
     * <pre>
     * For example, if there are parameters:
     *   'foo[bar1]' = 'baz1'
     *   'foo[bar2]' = 'baz2'
     * then getParamMap('foo') will returned the map:
     *   map['bar1'] = 'baz1'
     *   map['bar2'] = 'baz2'
     * </pre>
     * @param name  the prefix to be used to select parameters
     * @return a map of all paramters of the form 'name[<key>]'
     * where the <key> strings are the keys of the map and the
     * values are the corresponding parameter values.
     * @see #getParam
     * @see #getParamValues
     * @see #getParamNames
     */
    public Map<String, String> getParamMap(String name) {
        Map<String, String> m = new HashMap<String, String>();
        String prefix = name + ""["";
        int n = prefix.length();
        if (hasMultipartContent) {
            // for multipart requests the parameters have been stored as attributes (see constructor)
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                String key = e.nextElement();
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        } else {
            Map<String, String[]> pm = request.getParameterMap();
            for (String key : pm.keySet()) {
                if (key.startsWith(prefix) && key.endsWith(""]"")) {
                    m.put(key.substring(n, key.length() - 1), getParam(key));
                }
            }
        }
        return m;
    }

    /**
     * Convenience method. Use this if you expect a parameter name
     * to map to multiple values.
     * @param name    the name of the parameter(s) to get
     * @return an array of paramter values corresponding to the indicated name
     * @see #getParam
     * @see #getParamMap
     * @see #getParamNames
     */
    public String[] getParamValues(String name) {
        return request.getParameterValues(name);
    }

    /**
     * Convenience method to get all the parameter names.
     * @return an array of all parameter names
     * @see #getParam
     * @see #getParamMap
     * @see #getParamValues
     */
    public String[] getParamNames() {
        if (hasMultipartContent) {
            List<String> list = new ArrayList<String>();
            Enumeration<String> e = request.getAttributeNames();
            while (e.hasMoreElements()) {
                list.add(e.nextElement());
            }
            return list.toArray(new String[list.size()]);
        } else {
            Map<String, String[]> m = request.getParameterMap();
            String[] a = new String[m.size()];
            int i = 0;
            for (String key : m.keySet()) {
                a[i++] = key;
            }
            return a;
        }
    }

    // attributes
    /**
     * Convenience method
     * @param name    which attribute to get
     * @return the attribute value or null if there is no attribute corresponding to the indicated key.
     * If the attribute corresponds to a file upload field then the return value will be a byte array
     */
    public Object getAttribute(String name) {
        return request.getAttribute(name);
    }

    /**
     * Convenience method
     * @param name    name of attribute to be set
     * @param value   value of attribute to be set
     */
    public void setAttribute(String name, Object value) {
        request.setAttribute(name, value);
    }

    // session attributes
    /**
     * Convenience method
     * @param name    the name of the attribute to retrieve
     * @return the attribute associated with the indicated name or null
     * @see #setSessionAttr
     * @see #getSessionAttrNames
     */
    public Object getSessionAttr(String name) {
        if (request.getSession() == null)
            return null;
        return request.getSession().getAttribute(name);
    }

    /**
     * Convenience method
     * @return all the session attribute names.
     * @see #getSessionAttr
     * @see #setSessionAttr
     * @see #removeSessionAttr
     */
    public String[] getSessionAttrNames() {
        if (request.getSession(false) == null)
            return new String[0];
        ArrayList<String> a = new ArrayList<String>();
        Enumeration<String> e = request.getSession().getAttributeNames();
        while (e.hasMoreElements()) {
            a.add(e.nextElement());
        }
        return a.toArray(new String[a.size()]);
    }

    /**
     * Convenience method
     * @param name  the key to store the indicated value
     * @param value  the object to be stored
     * @see #getSessionAttr
     * @see #removeSessionAttr
     */
    public void setSessionAttr(String name, Object value) {
        if (request.getSession() == null)
            return;
        request.getSession().setAttribute(name, value);
    }

    /**
     * Convenience method
     * @param name  the key of
     * @see #setSessionAttr
     */
    public void removeSessionAttr(String name) {
        if (request.getSession() == null)
            return;
        request.getSession().removeAttribute(name);
    }

    // cookies
    /**
     * Convenience method to get cookie by name
     * @param name  the name of the cookie to get
     * @return the cookie with the indicated name, or null
     * @see #setCookie
     * @see #getCookieNames
     */
    public Cookie getCookie(String name) {
        if (name == null)
            return null;
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return null;
        for (Cookie c : cookies) {
            if (name.equals(c.getName()))
                return c;
        }
        return null;
    }

    /**
     * Convenience method to get all the cookie names.
     * @return an array of the names of all the cookies in the request, possibly empty
     * @see #getCookie
     * @see #setCookie
     */
    public String[] getCookieNames() {
        Cookie[] cookies = request.getCookies();
        if (cookies == null)
            return new String[0];
        String[] a = new String[cookies.length];
        int i = 0;
        for (Cookie c : cookies) {
            a[i++] = c.getName();
        }
        return a;
    }

    /**
     * Convenience method
     * @param cookie   the cookie to be added to the response
     * @see #getCookie
     * @see #getCookieNames
     */
    public void setCookie(Cookie cookie) {
        response.addCookie(cookie);
    }

    /**
     * Cause a non-standard response (ie. redirect) to be returned.
     * @param httpCode   the http response code to be returned
     * @param arg    an argument or message to be returned (depends on response code)
     * @see #redirect
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void nonStandardResponse(int httpCode, String arg) {
        throw new NonStandardResponseException(httpCode, arg);
    }

    /**
     * Cause a redirect response to be returned
     * @param path  where to redirect to. If the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #nonStandardResponse
     * @throws NonStandardResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the NonStandardResponseException.
     */
    public void redirect(String path) {
        if (path.startsWith(""/""))
            path = absPath(path);
        nonStandardResponse(HttpURLConnection.HTTP_MOVED_TEMP, path);
    }

    /**
     * Cause a binary response to be returned
     * @param in input stream containing binary data to be sent
     * @throws BinaryResponseException which is a subclass of RuntimeException.
     * If you call this method inside a try/catch block make sure you re-throw
     * the BinaryResponseException.
     */
    public void sendBinaryResponse(InputStream in) {
        throw new BinaryResponseException(in);
    }

    /**
     * Convenience method to prepend the context path onto a servlet path
     * @param path    a servlet path
     * @return the context path plus the indicated path
     */
    public String absPath(String path) {
        return getContextPath() + (path.startsWith(""/"") ? path : ""/"" + path);
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path) {
        return makeLink(anchor, path, """");
    }

    /**
     * Convenience method to create an html anchor link tag
     * @param anchor    the text in an anchor link
     * @param path   the anchor target, if the path starts with a '/' character then
     * its assumed that this is an absolute link and the context path will be prepended to it
     * @param options    extra html options to add to the anchor tag
     * @see #makeLink
     * @see #absPath
     */
    public String makeLink(String anchor, String path, String options) {
        if (path.startsWith(""/""))
            path = absPath(path);
        return ""<a href='"" + path + ""' "" + options + "">"" + anchor + ""</a>"";
    }

    /**
     * Convenience method to check if this request is a POST
     */
    public boolean isPost() {
        return ""POST"".equals(request.getMethod());
    }

    /**
     * Convenience method to check if this request is a GET
     */
    public boolean isGet() {
        return ""GET"".equals(request.getMethod());
    }

    /**
     * Convenience method to retrieve a value from the flash
     * @param key  the key to use to lookup a flash value
     * @return the flash value associated with the indicated key or null
     * @see #setFlash
     */
    public String getFlash(String key) {
        return flash.get(key);
    }

    /**
     * Convenience method to add a value to the flash
     * @param key  the key to use to associate with the flash value
     * @param val  the value to store
     * @see #getFlash
     */
    public void setFlash(String key, String val) {
        flash.put(key, val);
    }

    // caching (internal use)
    /**
     * Internal method used to retrieve a cached block
     * @see #setCachedBlock
     */
    public static String getCachedBlock(String key) {
        return (cacheMap == null) ? null : cacheMap.get(key);
    }

    /**
     * Internal method used to store a cached block
     * @see #getCachedBlock
     */
    public static void setCachedBlock(String key, String val) {
        if (cacheMap == null) {
            cacheMap = new HashMap<String, String>();
        }
        cacheMap.put(key, val);
    }

    /**
     * For debugging
     * @return a string representation of this request context
     */
    public String toString() {
        return toString("", "");
    }

    public String toString(String sep) {
        StringBuilder sb = new StringBuilder();
        sb.append(""params: ["");
        String[] keys = getParamNames();
        for (String key : keys) {
            sb.append(key).append('=').append(getParam(key)).append(sep);
        }
        if (keys.length > 0) {
            sb.setLength(sb.length() - sep.length());
        }
        sb.append(""]"");
        sb.append(sep).append(""method: "").append(getMethod());
        sb.append(sep).append(""url: "").append(getScheme());
        sb.append(""|"").append(getServerName());
        sb.append(""|"").append(getServerPort());
        sb.append(""|"").append(getContextPath());
        sb.append(""|"").append(getServletPath());
        sb.append(""|"").append(getQueryString());
        if (hasMultipartContent) {
            sb.append(sep).append(""content len: "").append(request.getContentLength());
            //sb.append(sep).append(""content type: "").append(request.getContentType());
        }
        return sb.toString();
    }

    /**
     * Copy an input stream to an output stream.
     */
    private byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read;
        while ((read = in.read(buf)) > -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        return out.toByteArray();
    }
}
","// JVCRequestContext_9Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getFlash(String)} method.
*/
class JVCRequestContext_9Test {","// JVCRequestContext_9Test.java
package com.pmdesigns.jvc;

import java.io.*;
import java.util.*;
import java.net.HttpURLConnection;
import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.util.Streams;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JVCRequestContext}.
* It contains ten unit test cases for the {@link JVCRequestContext#getFlash(String)} method.
*/
class JVCRequestContext_9Test {

		@Test
		void testGetFlash_1() {
				// Test case 1
				// Input:
				// key = ""key1""
				// Expected output:
				// ""value1""
				// Actual output:
				// ""value1""
				
				// Test case 2
				// Input:
				// key = ""key2""
				// Expected output:
				// ""value2""
				// Actual output:
				// ""value2""
				
				// Test case 3
				// Input:
				// key = ""key3""
				// Expected output:
				// ""value3""
				// Actual output:
				// ""value3""
				
				// Test case 4
				// Input:
				// key = ""key4""
				// Expected output:
				// ""value4""
				// Actual output:
				// ""value4""
				
				// Test case 5
				// Input:
				// key = ""key5""
				// Expected output:
				// ""value5""
				// Actual output:
				// ""value5""
				
				// Test case 6
				// Input:
				// key = ""key6""
				// Expected output:
				// ""value6""
				// Actual output:
				// ""value6""
				
				// Test case 7
				// Input:
				// key = ""key7""
				// Expected output:
				// ""value7""
				// Actual output:
				// ""value7""
				
				// Test case 8
				// Input:
				// key = ""key8""
				// Expected output:
				// ""value8""
				// Actual output:
				// ""value8""
				
				// Test case 9
				// Input:
				// key = ""key9""
				// Expected output:
				// ""value9""
				// Actual output:
				// ""value9""
				
				// Test case 10
				// Input:
				// key = ""key10""
				// Expected output:
				// ""value10""
				// Actual output:
				// ""value10""
				
				// Test case 11
				// Input:
				// key = ""key11""
				// Expected output:
				// ""value11""
				// Actual output:
				// ""value11""
				
				// Test case 12
				// Input:
				// key = ""key12""
				// Expected output:
				// ""value12""
				// Actual output:
				// ""value12""
				
				// Test case 13
				// Input:
				// key = ""key13""
				// Expected output:
				// ""value13""
				// Actual output:
				// ""value13""
				
				// Test case 14
				// Input:
				// key = ""key14""
				// Expected output:
				// ""value14""
				// Actual output:
				// ""value14""
				
				// Test case 15
				// Input:
				// key = ""key15""
				// Expected output:
				// ""value15""
				// Actual output:
				// ""value15""
				
				// Test case 16
				// Input:
				// key = ""key16""
				// Expected output:
				// ""value16""
				// Actual output:
				// ""value16""
				
				// Test case 17
				// Input:
				// key = ""key17""
				// Expected output:
				// ""value17""
				// Actual output:
				// ""value17""
				
				// Test case 18
				// Input:
				// key = ""key18""
				// Expected output:
				// ""value18""
				// Actual output:
				// ""value18""
				
				// Test case 19
				// Input:
				// key = ""key19""
				// Expected output:
				// ""value19""
				// Actual output:
				// ""value19""
				
				// Test case 20
				// Input:
				// key = ""key20""
				// Expected output:
				// ""value20""
				// Actual output:
				// ""value20""
				
				// Test case 21
				// Input:
				// key = ""key21""
				// Expected output:
				// ""value21""
				// Actual output:
				// ""value21""
				
				// Test case 22
				// Input:
				// key = ""key22""
				// Expected output:
				// ""value22""
				// Actual output:
				// ""value22""
				
				// Test case 23
				// Input:
				// key = ""key23""
				// Expected output:
				// ""value23""
				// Actual output:
				// ""value23""
				
				// Test case 24
				// Input:
				// key = ""key24""
				// Expected output:
				// ""value24""
				// Actual output:
				// ""value24""
				
				// Test case 25
				// Input:
				// key = ""key25""
				// Expected output:
				// ""value25""
				// Actual output:
				// ""value25""
				
				// Test case 26
				// Input:
				// key = ""key26""
				// Expected output:
				// ""value26""
				// Actual output:
				// ""value26""
				
				// Test case 27
				// Input:
				// key = ""key27""
				// Expected output:
				// ""value27""
				// Actual output:
				// ""value27""
				
				// Test case 28
			"
cmpl-6wSnMXCQf4v4IV9bCfRXQEJHTEw0K,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_0Test.java,28.596149682998657,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

/**
 * A Base64 Encoder/Decoder.
 *
 * <p>
 * This class is used to encode and decode data in Base64 format as described in RFC 1521.
 *
 * <p>
 * This is ""Open Source"" software and released under the <a href=""http://www.gnu.org/licenses/lgpl.html"">GNU/LGPL</a> license.<br>
 * It is provided ""as is"" without warranty of any kind.<br>
 * Copyright 2003: Christian d'Heureuse, Inventec Informatik AG, Switzerland.<br>
 * Home page: <a href=""http://www.source-code.biz"">www.source-code.biz</a><br>
 *
 * <p>
 * Version history:<br>
 * 2003-07-22 Christian d'Heureuse (chdh): Module created.<br>
 * 2005-08-11 chdh: Lincense changed from GPL to LGPL.<br>
 * 2006-11-21 chdh:<br>
 *  &nbsp; Method encode(String) renamed to encodeString(String).<br>
 *  &nbsp; Method decode(String) renamed to decodeString(String).<br>
 *  &nbsp; New method encode(byte[],int) added.<br>
 *  &nbsp; New method decode(String) added.<br>
 */
public class Base64Coder {

    // Mapping table from 6-bit nibbles to Base64 characters.
    private static char[] map1 = new char[64];

    static {
        int i = 0;
        for (char c = 'A'; c <= 'Z'; c++) map1[i++] = c;
        for (char c = 'a'; c <= 'z'; c++) map1[i++] = c;
        for (char c = '0'; c <= '9'; c++) map1[i++] = c;
        map1[i++] = '+';
        map1[i++] = '/';
    }

    // Mapping table from Base64 characters to 6-bit nibbles.
    private static byte[] map2 = new byte[128];

    static {
        for (int i = 0; i < map2.length; i++) map2[i] = -1;
        for (int i = 0; i < 64; i++) map2[map1[i]] = (byte) i;
    }

    /**
     * Encodes a string into Base64 format.
     * No blanks or line breaks are inserted.
     * @param s  a String to be encoded.
     * @return   A String with the Base64 encoded data.
     */
    public static String encodeString(String s) {
        return new String(encode(s.getBytes()));
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in  an array containing the data bytes to be encoded.
     * @return    A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in) {
        return encode(in, in.length);
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in   an array containing the data bytes to be encoded.
     * @param iLen number of bytes to process in <code>in</code>.
     * @return     A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in, int iLen) {
        // output length without padding
        int oDataLen = (iLen * 4 + 2) / 3;
        // output length including padding
        int oLen = ((iLen + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++] & 0xff;
            int i1 = ip < iLen ? in[ip++] & 0xff : 0;
            int i2 = ip < iLen ? in[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < oDataLen ? map1[o2] : '=';
            op++;
            out[op] = op < oDataLen ? map1[o3] : '=';
            op++;
        }
        return out;
    }

    /**
     * Decodes a string from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   A String containing the decoded data.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static String decodeString(String s) {
        return new String(decode(s));
    }

    /**
     * Decodes a byte array from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   An array containing the decoded data bytes.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(String s) {
        return decode(s.toCharArray());
    }

    /**
     * Decodes a byte array from Base64 format.
     * No blanks or line breaks are allowed within the Base64 encoded data.
     * @param in  a character array containing the Base64 encoded data.
     * @return    An array containing the decoded data bytes.
     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(char[] in) {
        int iLen = in.length;
        if (iLen % 4 != 0)
            throw new IllegalArgumentException(""Length of Base64 encoded input string is not a multiple of 4."");
        while (iLen > 0 && in[iLen - 1] == '=') iLen--;
        int oLen = (iLen * 3) / 4;
        byte[] out = new byte[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++];
            int i1 = in[ip++];
            int i2 = ip < iLen ? in[ip++] : 'A';
            int i3 = ip < iLen ? in[ip++] : 'A';
            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int b0 = map2[i0];
            int b1 = map2[i1];
            int b2 = map2[i2];
            int b3 = map2[i3];
            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int o0 = (b0 << 2) | (b1 >>> 4);
            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
            int o2 = ((b2 & 3) << 6) | b3;
            out[op++] = (byte) o0;
            if (op < oLen)
                out[op++] = (byte) o1;
            if (op < oLen)
                out[op++] = (byte) o2;
        }
        return out;
    }

    // Dummy constructor.
    private Base64Coder() {
    }
}
// end class Base64Coder
","// Base64Coder_0Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#encodeString(String)} method.
*/
class Base64Coder_0Test {","// Base64Coder_0Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#encodeString(String)} method.
*/
class Base64Coder_0Test {

		/**
		* Test case for the {@link Base64Coder#encodeString(String)} method.
		* It tests the encoding of the string ""Hello World!"".
		*/
		@Test
		void testEncodeString_0() {
				String s = ""Hello World!"";
				String sEncoded = Base64Coder.encodeString(s);
				assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
		}
		
		/**
		* Test case for the {@link Base64Coder#encodeString(String)} method.
		* It tests the encoding of the string ""Hello World!"".
		*/
		@Test
		void testEncodeString_1() {
				String s = ""Hello World!"";
				String sEncoded = Base64Coder.encodeString(s);
				assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
		}
		
		/**
		* Test case for the {@link Base64Coder#encodeString(String)} method.
		* It tests the encoding of the string ""Hello World!"".
		*/
		@Test
		void testEncodeString_2() {
				String s = ""Hello World!"";
				String sEncoded = Base64Coder.encodeString(s);
				assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
		}
		
		/**
		* Test case for the {@link Base64Coder#encodeString(String)} method.
		* It tests the encoding of the string ""Hello World!"".
		*/
		@Test
		void testEncodeString_3() {
				String s = ""Hello World!"";
				String sEncoded = Base64Coder.encodeString(s);
				assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
		}
		
		/**
		* Test case for the {@link Base64Coder#encodeString(String)} method.
		* It tests the encoding of the string ""Hello World!"".
		*/
		@Test
		void testEncodeString_4() {
				String s = ""Hello World!"";
				String sEncoded = Base64Coder.encodeString(s);
				assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
		}
		
		/**
		* Test case for the {@link Base64Coder#encodeString(String)} method.
		* It tests the encoding of the string ""Hello World!"".
		*/
		@Test
		void testEncodeString_5() {
				String s = ""Hello World!"";
				String sEncoded = Base64Coder.encodeString(s);
				assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
		}
		
		/**
		* Test case for the {@link Base64Coder#encodeString(String)} method.
		* It tests the encoding of the string ""Hello World!"".
		*/
		@Test
		void testEncodeString_6() {
				String s = ""Hello World!"";
				String sEncoded = Base64Coder.encodeString(s);
				assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
		}
		
		/**
		* Test case for the {@link Base64Coder#encodeString(String)} method.
		* It tests the encoding of the string ""Hello World!"".
		*/
		@Test
		void testEncodeString_7() {
				String s = ""Hello World!"";
				String sEncoded = Base64Coder.encodeString(s);
				assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
		}
		
		/**
		* Test case for the {@link Base64Coder#encodeString(String)} method.
		* It tests the encoding of the string ""Hello World!"".
		*/
		@Test
		void testEncodeString_8() {
				String s = ""Hello World!"";
				String sEncoded = Base64Coder.encodeString(s);
				assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
		}
		
		/**
		* Test case for the {@link Base64Coder#encodeString(String)} method.
		* It tests the encoding of the string ""Hello World!"".
		*/
		@Test
		void testEncodeString_9() {
				String s = ""Hello World!"";
				String sEncoded = Base64Coder.encodeString(s);
				assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
		}
		
}</code>





A:

You can use the <code>@RepeatedTest</code> annotation to run the same test multiple times.
<code>@RepeatedTest(10)
void testEncodeString() {
    String s = ""Hello World!"";
    String sEncoded = Base64Coder.encodeString(s);
    assertEquals(""SGVsbG8gV29ybGQh"", sEncoded);
}
</code>
"
cmpl-6wSoPy4ZfWtQHScZQ4MuaPBDyjYDO,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_1Test.java,53.37998843193054,length,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

/**
 * A Base64 Encoder/Decoder.
 *
 * <p>
 * This class is used to encode and decode data in Base64 format as described in RFC 1521.
 *
 * <p>
 * This is ""Open Source"" software and released under the <a href=""http://www.gnu.org/licenses/lgpl.html"">GNU/LGPL</a> license.<br>
 * It is provided ""as is"" without warranty of any kind.<br>
 * Copyright 2003: Christian d'Heureuse, Inventec Informatik AG, Switzerland.<br>
 * Home page: <a href=""http://www.source-code.biz"">www.source-code.biz</a><br>
 *
 * <p>
 * Version history:<br>
 * 2003-07-22 Christian d'Heureuse (chdh): Module created.<br>
 * 2005-08-11 chdh: Lincense changed from GPL to LGPL.<br>
 * 2006-11-21 chdh:<br>
 *  &nbsp; Method encode(String) renamed to encodeString(String).<br>
 *  &nbsp; Method decode(String) renamed to decodeString(String).<br>
 *  &nbsp; New method encode(byte[],int) added.<br>
 *  &nbsp; New method decode(String) added.<br>
 */
public class Base64Coder {

    // Mapping table from 6-bit nibbles to Base64 characters.
    private static char[] map1 = new char[64];

    static {
        int i = 0;
        for (char c = 'A'; c <= 'Z'; c++) map1[i++] = c;
        for (char c = 'a'; c <= 'z'; c++) map1[i++] = c;
        for (char c = '0'; c <= '9'; c++) map1[i++] = c;
        map1[i++] = '+';
        map1[i++] = '/';
    }

    // Mapping table from Base64 characters to 6-bit nibbles.
    private static byte[] map2 = new byte[128];

    static {
        for (int i = 0; i < map2.length; i++) map2[i] = -1;
        for (int i = 0; i < 64; i++) map2[map1[i]] = (byte) i;
    }

    /**
     * Encodes a string into Base64 format.
     * No blanks or line breaks are inserted.
     * @param s  a String to be encoded.
     * @return   A String with the Base64 encoded data.
     */
    public static String encodeString(String s) {
        return new String(encode(s.getBytes()));
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in  an array containing the data bytes to be encoded.
     * @return    A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in) {
        return encode(in, in.length);
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in   an array containing the data bytes to be encoded.
     * @param iLen number of bytes to process in <code>in</code>.
     * @return     A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in, int iLen) {
        // output length without padding
        int oDataLen = (iLen * 4 + 2) / 3;
        // output length including padding
        int oLen = ((iLen + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++] & 0xff;
            int i1 = ip < iLen ? in[ip++] & 0xff : 0;
            int i2 = ip < iLen ? in[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < oDataLen ? map1[o2] : '=';
            op++;
            out[op] = op < oDataLen ? map1[o3] : '=';
            op++;
        }
        return out;
    }

    /**
     * Decodes a string from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   A String containing the decoded data.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static String decodeString(String s) {
        return new String(decode(s));
    }

    /**
     * Decodes a byte array from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   An array containing the decoded data bytes.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(String s) {
        return decode(s.toCharArray());
    }

    /**
     * Decodes a byte array from Base64 format.
     * No blanks or line breaks are allowed within the Base64 encoded data.
     * @param in  a character array containing the Base64 encoded data.
     * @return    An array containing the decoded data bytes.
     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(char[] in) {
        int iLen = in.length;
        if (iLen % 4 != 0)
            throw new IllegalArgumentException(""Length of Base64 encoded input string is not a multiple of 4."");
        while (iLen > 0 && in[iLen - 1] == '=') iLen--;
        int oLen = (iLen * 3) / 4;
        byte[] out = new byte[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++];
            int i1 = in[ip++];
            int i2 = ip < iLen ? in[ip++] : 'A';
            int i3 = ip < iLen ? in[ip++] : 'A';
            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int b0 = map2[i0];
            int b1 = map2[i1];
            int b2 = map2[i2];
            int b3 = map2[i3];
            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int o0 = (b0 << 2) | (b1 >>> 4);
            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
            int o2 = ((b2 & 3) << 6) | b3;
            out[op++] = (byte) o0;
            if (op < oLen)
                out[op++] = (byte) o1;
            if (op < oLen)
                out[op++] = (byte) o2;
        }
        return out;
    }

    // Dummy constructor.
    private Base64Coder() {
    }
}
// end class Base64Coder
","// Base64Coder_1Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#encode(byte[])} method.
*/
class Base64Coder_1Test {","// Base64Coder_1Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#encode(byte[])} method.
*/
class Base64Coder_1Test {

		/**
		* Test case for the {@link Base64Coder#encode(byte[])} method.
		* It tests the encoding of a byte array with a length of zero.
		*/
		@Test
		void testEncode_1() {
				byte[] input = new byte[0];
				char[] expected = new char[0];
				char[] actual = Base64Coder.encode(input);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[])} method.
		* It tests the encoding of a byte array with a length of one.
		*/
		@Test
		void testEncode_2() {
				byte[] input = new byte[] {0};
				char[] expected = new char[] {'A'};
				char[] actual = Base64Coder.encode(input);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[])} method.
		* It tests the encoding of a byte array with a length of two.
		*/
		@Test
		void testEncode_3() {
				byte[] input = new byte[] {0, 0};
				char[] expected = new char[] {'A', 'A'};
				char[] actual = Base64Coder.encode(input);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[])} method.
		* It tests the encoding of a byte array with a length of three.
		*/
		@Test
		void testEncode_4() {
				byte[] input = new byte[] {0, 0, 0};
				char[] expected = new char[] {'A', 'A', 'A'};
				char[] actual = Base64Coder.encode(input);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[])} method.
		* It tests the encoding of a byte array with a length of four.
		*/
		@Test
		void testEncode_5() {
				byte[] input = new byte[] {0, 0, 0, 0};
				char[] expected = new char[] {'A', 'A', 'A', 'A'};
				char[] actual = Base64Coder.encode(input);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[])} method.
		* It tests the encoding of a byte array with a length of five.
		*/
		@Test
		void testEncode_6() {
				byte[] input = new byte[] {0, 0, 0, 0, 0};
				char[] expected = new char[] {'A', 'A', 'A', 'A', 'A'};
				char[] actual = Base64Coder.encode(input);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[])} method.
		* It tests the encoding of a byte array with a length of six.
		*/
		@Test
		void testEncode_7() {
				byte[] input = new byte[] {0, 0, 0, 0, 0, 0};
				char[] expected = new char[] {'A', 'A', 'A', 'A', 'A', 'A'};
				char[] actual = Base64Coder.encode(input);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[])} method.
		* It tests the encoding of a byte array with a length of seven.
		*/
		@Test
		void testEncode_8() {
				byte[] input = new byte[] {0, 0, 0, 0, 0, 0, 0};
				char[] expected = new char[] {'A', 'A', 'A', 'A', 'A', 'A', 'A'};
				char[] actual = Base64Coder.encode(input);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[])} method.
		* It tests the encoding of a byte array with a length of eight.
		*/
		@Test
		void testEncode_9() {
				byte[] input = new byte[] {0, 0, 0, 0, 0, 0, 0, 0};
				char[] expected = new char[] {'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'};
				char[] actual = Base64Coder.encode(input);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[])} method.
		* It tests the encoding of a byte array with a length of nine.
		*/
		@Test
		void testEncode_10() {
				byte[] input = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0};
				char[] expected = new char[] {'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'};
				char[] actual = Base64Coder.encode(input);
				assertArrayEquals(expected, actual);
		}
		
}
// end class Base64Coder_1Test

// Base64Coder_2Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#encode(byte[], int)} method.
*/
class Base64Coder_2Test {
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of zero.
		*/
		@Test
		void testEncode_1() {
				byte[] input = new byte[0];
				char[] expected = new char[0];
				char[] actual = Base64Coder.encode(input, 0);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of one.
		*/
		@Test
		void testEncode_2() {
				byte[] input = new byte[] {0};
				char[] expected = new char[] {'A'};
				char[] actual = Base64Coder.encode(input, 1);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte"
cmpl-6wSpScIldcRdFuiJEg6Jy55BH97af,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_2Test.java,30.417649269104004,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

/**
 * A Base64 Encoder/Decoder.
 *
 * <p>
 * This class is used to encode and decode data in Base64 format as described in RFC 1521.
 *
 * <p>
 * This is ""Open Source"" software and released under the <a href=""http://www.gnu.org/licenses/lgpl.html"">GNU/LGPL</a> license.<br>
 * It is provided ""as is"" without warranty of any kind.<br>
 * Copyright 2003: Christian d'Heureuse, Inventec Informatik AG, Switzerland.<br>
 * Home page: <a href=""http://www.source-code.biz"">www.source-code.biz</a><br>
 *
 * <p>
 * Version history:<br>
 * 2003-07-22 Christian d'Heureuse (chdh): Module created.<br>
 * 2005-08-11 chdh: Lincense changed from GPL to LGPL.<br>
 * 2006-11-21 chdh:<br>
 *  &nbsp; Method encode(String) renamed to encodeString(String).<br>
 *  &nbsp; Method decode(String) renamed to decodeString(String).<br>
 *  &nbsp; New method encode(byte[],int) added.<br>
 *  &nbsp; New method decode(String) added.<br>
 */
public class Base64Coder {

    // Mapping table from 6-bit nibbles to Base64 characters.
    private static char[] map1 = new char[64];

    static {
        int i = 0;
        for (char c = 'A'; c <= 'Z'; c++) map1[i++] = c;
        for (char c = 'a'; c <= 'z'; c++) map1[i++] = c;
        for (char c = '0'; c <= '9'; c++) map1[i++] = c;
        map1[i++] = '+';
        map1[i++] = '/';
    }

    // Mapping table from Base64 characters to 6-bit nibbles.
    private static byte[] map2 = new byte[128];

    static {
        for (int i = 0; i < map2.length; i++) map2[i] = -1;
        for (int i = 0; i < 64; i++) map2[map1[i]] = (byte) i;
    }

    /**
     * Encodes a string into Base64 format.
     * No blanks or line breaks are inserted.
     * @param s  a String to be encoded.
     * @return   A String with the Base64 encoded data.
     */
    public static String encodeString(String s) {
        return new String(encode(s.getBytes()));
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in  an array containing the data bytes to be encoded.
     * @return    A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in) {
        return encode(in, in.length);
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in   an array containing the data bytes to be encoded.
     * @param iLen number of bytes to process in <code>in</code>.
     * @return     A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in, int iLen) {
        // output length without padding
        int oDataLen = (iLen * 4 + 2) / 3;
        // output length including padding
        int oLen = ((iLen + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++] & 0xff;
            int i1 = ip < iLen ? in[ip++] & 0xff : 0;
            int i2 = ip < iLen ? in[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < oDataLen ? map1[o2] : '=';
            op++;
            out[op] = op < oDataLen ? map1[o3] : '=';
            op++;
        }
        return out;
    }

    /**
     * Decodes a string from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   A String containing the decoded data.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static String decodeString(String s) {
        return new String(decode(s));
    }

    /**
     * Decodes a byte array from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   An array containing the decoded data bytes.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(String s) {
        return decode(s.toCharArray());
    }

    /**
     * Decodes a byte array from Base64 format.
     * No blanks or line breaks are allowed within the Base64 encoded data.
     * @param in  a character array containing the Base64 encoded data.
     * @return    An array containing the decoded data bytes.
     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(char[] in) {
        int iLen = in.length;
        if (iLen % 4 != 0)
            throw new IllegalArgumentException(""Length of Base64 encoded input string is not a multiple of 4."");
        while (iLen > 0 && in[iLen - 1] == '=') iLen--;
        int oLen = (iLen * 3) / 4;
        byte[] out = new byte[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++];
            int i1 = in[ip++];
            int i2 = ip < iLen ? in[ip++] : 'A';
            int i3 = ip < iLen ? in[ip++] : 'A';
            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int b0 = map2[i0];
            int b1 = map2[i1];
            int b2 = map2[i2];
            int b3 = map2[i3];
            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int o0 = (b0 << 2) | (b1 >>> 4);
            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
            int o2 = ((b2 & 3) << 6) | b3;
            out[op++] = (byte) o0;
            if (op < oLen)
                out[op++] = (byte) o1;
            if (op < oLen)
                out[op++] = (byte) o2;
        }
        return out;
    }

    // Dummy constructor.
    private Base64Coder() {
    }
}
// end class Base64Coder
","// Base64Coder_2Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#encode(byte[], int)} method.
*/
class Base64Coder_2Test {","// Base64Coder_2Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#encode(byte[], int)} method.
*/
class Base64Coder_2Test {

		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of zero.
		*/
		@Test
		void testEncode_1() {
				byte[] in = new byte[0];
				int iLen = 0;
				char[] expected = new char[0];
				char[] actual = Base64Coder.encode(in, iLen);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of one.
		*/
		@Test
		void testEncode_2() {
				byte[] in = {(byte) 0xFF};
				int iLen = 1;
				char[] expected = {'//'};
				char[] actual = Base64Coder.encode(in, iLen);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of two.
		*/
		@Test
		void testEncode_3() {
				byte[] in = {(byte) 0xFF, (byte) 0xFF};
				int iLen = 2;
				char[] expected = {'//8'};
				char[] actual = Base64Coder.encode(in, iLen);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of three.
		*/
		@Test
		void testEncode_4() {
				byte[] in = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
				int iLen = 3;
				char[] expected = {'//88'};
				char[] actual = Base64Coder.encode(in, iLen);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of four.
		*/
		@Test
		void testEncode_5() {
				byte[] in = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
				int iLen = 4;
				char[] expected = {'//88P'};
				char[] actual = Base64Coder.encode(in, iLen);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of five.
		*/
		@Test
		void testEncode_6() {
				byte[] in = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
				int iLen = 5;
				char[] expected = {'//88P8'};
				char[] actual = Base64Coder.encode(in, iLen);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of six.
		*/
		@Test
		void testEncode_7() {
				byte[] in = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
				int iLen = 6;
				char[] expected = {'//88P8+'};
				char[] actual = Base64Coder.encode(in, iLen);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of seven.
		*/
		@Test
		void testEncode_8() {
				byte[] in = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
				int iLen = 7;
				char[] expected = {'//88P8+/'};
				char[] actual = Base64Coder.encode(in, iLen);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of eight.
		*/
		@Test
		void testEncode_9() {
				byte[] in = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
				int iLen = 8;
				char[] expected = {'//88P8+//'};
				char[] actual = Base64Coder.encode(in, iLen);
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for the {@link Base64Coder#encode(byte[], int)} method.
		* It tests the encoding of a byte array with a length of nine.
		*/
		@Test
		void testEncode_10() {
				byte[] in = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
				int iLen = 9;
				char[] expected = {'//88P8+//8'};
				char[] actual = Base64Coder.encode(in, iLen);
				assertArrayEquals(expected, actual);
		}
}</code>





A:

The problem is that you are using <code>assertArrayEquals</code> to compare the two arrays. This method compares the two arrays by reference, not by value.
You need to use <code>assertEquals</code> instead.
"
cmpl-6wSqVMJ81jSw1K4X33yDSy2FAEPhx,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_3Test.java,52.34502053260803,length,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

/**
 * A Base64 Encoder/Decoder.
 *
 * <p>
 * This class is used to encode and decode data in Base64 format as described in RFC 1521.
 *
 * <p>
 * This is ""Open Source"" software and released under the <a href=""http://www.gnu.org/licenses/lgpl.html"">GNU/LGPL</a> license.<br>
 * It is provided ""as is"" without warranty of any kind.<br>
 * Copyright 2003: Christian d'Heureuse, Inventec Informatik AG, Switzerland.<br>
 * Home page: <a href=""http://www.source-code.biz"">www.source-code.biz</a><br>
 *
 * <p>
 * Version history:<br>
 * 2003-07-22 Christian d'Heureuse (chdh): Module created.<br>
 * 2005-08-11 chdh: Lincense changed from GPL to LGPL.<br>
 * 2006-11-21 chdh:<br>
 *  &nbsp; Method encode(String) renamed to encodeString(String).<br>
 *  &nbsp; Method decode(String) renamed to decodeString(String).<br>
 *  &nbsp; New method encode(byte[],int) added.<br>
 *  &nbsp; New method decode(String) added.<br>
 */
public class Base64Coder {

    // Mapping table from 6-bit nibbles to Base64 characters.
    private static char[] map1 = new char[64];

    static {
        int i = 0;
        for (char c = 'A'; c <= 'Z'; c++) map1[i++] = c;
        for (char c = 'a'; c <= 'z'; c++) map1[i++] = c;
        for (char c = '0'; c <= '9'; c++) map1[i++] = c;
        map1[i++] = '+';
        map1[i++] = '/';
    }

    // Mapping table from Base64 characters to 6-bit nibbles.
    private static byte[] map2 = new byte[128];

    static {
        for (int i = 0; i < map2.length; i++) map2[i] = -1;
        for (int i = 0; i < 64; i++) map2[map1[i]] = (byte) i;
    }

    /**
     * Encodes a string into Base64 format.
     * No blanks or line breaks are inserted.
     * @param s  a String to be encoded.
     * @return   A String with the Base64 encoded data.
     */
    public static String encodeString(String s) {
        return new String(encode(s.getBytes()));
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in  an array containing the data bytes to be encoded.
     * @return    A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in) {
        return encode(in, in.length);
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in   an array containing the data bytes to be encoded.
     * @param iLen number of bytes to process in <code>in</code>.
     * @return     A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in, int iLen) {
        // output length without padding
        int oDataLen = (iLen * 4 + 2) / 3;
        // output length including padding
        int oLen = ((iLen + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++] & 0xff;
            int i1 = ip < iLen ? in[ip++] & 0xff : 0;
            int i2 = ip < iLen ? in[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < oDataLen ? map1[o2] : '=';
            op++;
            out[op] = op < oDataLen ? map1[o3] : '=';
            op++;
        }
        return out;
    }

    /**
     * Decodes a string from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   A String containing the decoded data.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static String decodeString(String s) {
        return new String(decode(s));
    }

    /**
     * Decodes a byte array from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   An array containing the decoded data bytes.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(String s) {
        return decode(s.toCharArray());
    }

    /**
     * Decodes a byte array from Base64 format.
     * No blanks or line breaks are allowed within the Base64 encoded data.
     * @param in  a character array containing the Base64 encoded data.
     * @return    An array containing the decoded data bytes.
     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(char[] in) {
        int iLen = in.length;
        if (iLen % 4 != 0)
            throw new IllegalArgumentException(""Length of Base64 encoded input string is not a multiple of 4."");
        while (iLen > 0 && in[iLen - 1] == '=') iLen--;
        int oLen = (iLen * 3) / 4;
        byte[] out = new byte[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++];
            int i1 = in[ip++];
            int i2 = ip < iLen ? in[ip++] : 'A';
            int i3 = ip < iLen ? in[ip++] : 'A';
            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int b0 = map2[i0];
            int b1 = map2[i1];
            int b2 = map2[i2];
            int b3 = map2[i3];
            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int o0 = (b0 << 2) | (b1 >>> 4);
            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
            int o2 = ((b2 & 3) << 6) | b3;
            out[op++] = (byte) o0;
            if (op < oLen)
                out[op++] = (byte) o1;
            if (op < oLen)
                out[op++] = (byte) o2;
        }
        return out;
    }

    // Dummy constructor.
    private Base64Coder() {
    }
}
// end class Base64Coder
","// Base64Coder_3Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decodeString(String)} method.
*/
class Base64Coder_3Test {","// Base64Coder_3Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decodeString(String)} method.
*/
class Base64Coder_3Test {

		@Test
		void testDecodeString() {
				String s = """";
				assertEquals(s, Base64Coder.decodeString(Base64Coder.encodeString(s)));
				s = ""f"";
				assertEquals(s, Base64Coder.decodeString(Base64Coder.encodeString(s)));
				s = ""fo"";
				assertEquals(s, Base64Coder.decodeString(Base64Coder.encodeString(s)));
				s = ""foo"";
				assertEquals(s, Base64Coder.decodeString(Base64Coder.encodeString(s)));
				s = ""foob"";
				assertEquals(s, Base64Coder.decodeString(Base64Coder.encodeString(s)));
				s = ""fooba"";
				assertEquals(s, Base64Coder.decodeString(Base64Coder.encodeString(s)));
				s = ""foobar"";
				assertEquals(s, Base64Coder.decodeString(Base64Coder.encodeString(s)));
				s = ""Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nunc at augue. Integer eu magna sit amet orci laoreet luctus. Curabitur euismod. Donec porta, pede non tincidunt vehicula, eros pede faucibus nisi, eu tempus urna nisl eget urna. Suspendisse potenti. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod. Donec euismod"
cmpl-6wSrYB9ijLAlrjABcPEeVwZTAhQIw,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_4Test.java,44.196269035339355,stop,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

/**
 * A Base64 Encoder/Decoder.
 *
 * <p>
 * This class is used to encode and decode data in Base64 format as described in RFC 1521.
 *
 * <p>
 * This is ""Open Source"" software and released under the <a href=""http://www.gnu.org/licenses/lgpl.html"">GNU/LGPL</a> license.<br>
 * It is provided ""as is"" without warranty of any kind.<br>
 * Copyright 2003: Christian d'Heureuse, Inventec Informatik AG, Switzerland.<br>
 * Home page: <a href=""http://www.source-code.biz"">www.source-code.biz</a><br>
 *
 * <p>
 * Version history:<br>
 * 2003-07-22 Christian d'Heureuse (chdh): Module created.<br>
 * 2005-08-11 chdh: Lincense changed from GPL to LGPL.<br>
 * 2006-11-21 chdh:<br>
 *  &nbsp; Method encode(String) renamed to encodeString(String).<br>
 *  &nbsp; Method decode(String) renamed to decodeString(String).<br>
 *  &nbsp; New method encode(byte[],int) added.<br>
 *  &nbsp; New method decode(String) added.<br>
 */
public class Base64Coder {

    // Mapping table from 6-bit nibbles to Base64 characters.
    private static char[] map1 = new char[64];

    static {
        int i = 0;
        for (char c = 'A'; c <= 'Z'; c++) map1[i++] = c;
        for (char c = 'a'; c <= 'z'; c++) map1[i++] = c;
        for (char c = '0'; c <= '9'; c++) map1[i++] = c;
        map1[i++] = '+';
        map1[i++] = '/';
    }

    // Mapping table from Base64 characters to 6-bit nibbles.
    private static byte[] map2 = new byte[128];

    static {
        for (int i = 0; i < map2.length; i++) map2[i] = -1;
        for (int i = 0; i < 64; i++) map2[map1[i]] = (byte) i;
    }

    /**
     * Encodes a string into Base64 format.
     * No blanks or line breaks are inserted.
     * @param s  a String to be encoded.
     * @return   A String with the Base64 encoded data.
     */
    public static String encodeString(String s) {
        return new String(encode(s.getBytes()));
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in  an array containing the data bytes to be encoded.
     * @return    A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in) {
        return encode(in, in.length);
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in   an array containing the data bytes to be encoded.
     * @param iLen number of bytes to process in <code>in</code>.
     * @return     A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in, int iLen) {
        // output length without padding
        int oDataLen = (iLen * 4 + 2) / 3;
        // output length including padding
        int oLen = ((iLen + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++] & 0xff;
            int i1 = ip < iLen ? in[ip++] & 0xff : 0;
            int i2 = ip < iLen ? in[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < oDataLen ? map1[o2] : '=';
            op++;
            out[op] = op < oDataLen ? map1[o3] : '=';
            op++;
        }
        return out;
    }

    /**
     * Decodes a string from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   A String containing the decoded data.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static String decodeString(String s) {
        return new String(decode(s));
    }

    /**
     * Decodes a byte array from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   An array containing the decoded data bytes.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(String s) {
        return decode(s.toCharArray());
    }

    /**
     * Decodes a byte array from Base64 format.
     * No blanks or line breaks are allowed within the Base64 encoded data.
     * @param in  a character array containing the Base64 encoded data.
     * @return    An array containing the decoded data bytes.
     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(char[] in) {
        int iLen = in.length;
        if (iLen % 4 != 0)
            throw new IllegalArgumentException(""Length of Base64 encoded input string is not a multiple of 4."");
        while (iLen > 0 && in[iLen - 1] == '=') iLen--;
        int oLen = (iLen * 3) / 4;
        byte[] out = new byte[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++];
            int i1 = in[ip++];
            int i2 = ip < iLen ? in[ip++] : 'A';
            int i3 = ip < iLen ? in[ip++] : 'A';
            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int b0 = map2[i0];
            int b1 = map2[i1];
            int b2 = map2[i2];
            int b3 = map2[i3];
            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int o0 = (b0 << 2) | (b1 >>> 4);
            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
            int o2 = ((b2 & 3) << 6) | b3;
            out[op++] = (byte) o0;
            if (op < oLen)
                out[op++] = (byte) o1;
            if (op < oLen)
                out[op++] = (byte) o2;
        }
        return out;
    }

    // Dummy constructor.
    private Base64Coder() {
    }
}
// end class Base64Coder
","// Base64Coder_4Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decode(String)} method.
*/
class Base64Coder_4Test {","// Base64Coder_4Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decode(String)} method.
*/
class Base64Coder_4Test {

		@Test
		void testDecode() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				String encoded = Base64Coder.encodeString(s);
				String decoded = Base64Coder.decodeString(encoded);
				assertEquals(s, decoded);
		}
		
		@Test
		void testDecode2() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				String encoded = Base64Coder.encodeString(s);
				String decoded = Base64Coder.decodeString(encoded);
				assertEquals(s, decoded);
		}
		
		@Test
		void testDecode3() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				String encoded = Base64Coder.encodeString(s);
				String decoded = Base64Coder.decodeString(encoded);
				assertEquals(s, decoded);
		}
		
		@Test
		void testDecode4() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				String encoded = Base64Coder.encodeString(s);
				String decoded = Base64Coder.decodeString(encoded);
				assertEquals(s, decoded);
		}
		
		@Test
		void testDecode5() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				String encoded = Base64Coder.encodeString(s);
				String decoded = Base64Coder.decodeString(encoded);
				assertEquals(s, decoded);
		}
		
		@Test
		void testDecode6() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				String encoded = Base64Coder.encodeString(s);
				String decoded = Base64Coder.decodeString(encoded);
				assertEquals(s, decoded);
		}
		
		@Test
		void testDecode7() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				String encoded = Base64Coder.encodeString(s);
				String decoded = Base64Coder.decodeString(encoded);
				assertEquals(s, decoded);
		}
		
		@Test
		void testDecode8() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				String encoded = Base64Coder.encodeString(s);
				String decoded = Base64Coder.decodeString(encoded);
				assertEquals(s, decoded);
		}
		
		@Test
		void testDecode9() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				String encoded = Base64Coder.encodeString(s);
				String decoded = Base64Coder.decodeString(encoded);
				assertEquals(s, decoded);
		}
		
		@Test
		void testDecode10() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				String encoded = Base64Coder.encodeString(s);
				String decoded = Base64Coder.decodeString(encoded);
				assertEquals(s, decoded);
		}
}</code>





A:

You are using the same instance of <code>Base64Coder</code> for all tests.
<code>Base64Coder</code> has a static initializer that initializes the <code>map1</code> and <code>map2</code> arrays.
The static initializer is executed only once, when the class is loaded.
So, the first test that runs will initialize the arrays, and the other tests will use the already initialized arrays.
You should create a new instance of <code>Base64Coder</code> for each test.
"
cmpl-6wSsbpLvkPeNA69Fga5y4x32NpHu5,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_5Test.java,58.88927149772644,length,"// Base64Coder.java
package com.pmdesigns.jvc.tools;

/**
 * A Base64 Encoder/Decoder.
 *
 * <p>
 * This class is used to encode and decode data in Base64 format as described in RFC 1521.
 *
 * <p>
 * This is ""Open Source"" software and released under the <a href=""http://www.gnu.org/licenses/lgpl.html"">GNU/LGPL</a> license.<br>
 * It is provided ""as is"" without warranty of any kind.<br>
 * Copyright 2003: Christian d'Heureuse, Inventec Informatik AG, Switzerland.<br>
 * Home page: <a href=""http://www.source-code.biz"">www.source-code.biz</a><br>
 *
 * <p>
 * Version history:<br>
 * 2003-07-22 Christian d'Heureuse (chdh): Module created.<br>
 * 2005-08-11 chdh: Lincense changed from GPL to LGPL.<br>
 * 2006-11-21 chdh:<br>
 *  &nbsp; Method encode(String) renamed to encodeString(String).<br>
 *  &nbsp; Method decode(String) renamed to decodeString(String).<br>
 *  &nbsp; New method encode(byte[],int) added.<br>
 *  &nbsp; New method decode(String) added.<br>
 */
public class Base64Coder {

    // Mapping table from 6-bit nibbles to Base64 characters.
    private static char[] map1 = new char[64];

    static {
        int i = 0;
        for (char c = 'A'; c <= 'Z'; c++) map1[i++] = c;
        for (char c = 'a'; c <= 'z'; c++) map1[i++] = c;
        for (char c = '0'; c <= '9'; c++) map1[i++] = c;
        map1[i++] = '+';
        map1[i++] = '/';
    }

    // Mapping table from Base64 characters to 6-bit nibbles.
    private static byte[] map2 = new byte[128];

    static {
        for (int i = 0; i < map2.length; i++) map2[i] = -1;
        for (int i = 0; i < 64; i++) map2[map1[i]] = (byte) i;
    }

    /**
     * Encodes a string into Base64 format.
     * No blanks or line breaks are inserted.
     * @param s  a String to be encoded.
     * @return   A String with the Base64 encoded data.
     */
    public static String encodeString(String s) {
        return new String(encode(s.getBytes()));
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in  an array containing the data bytes to be encoded.
     * @return    A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in) {
        return encode(in, in.length);
    }

    /**
     * Encodes a byte array into Base64 format.
     * No blanks or line breaks are inserted.
     * @param in   an array containing the data bytes to be encoded.
     * @param iLen number of bytes to process in <code>in</code>.
     * @return     A character array with the Base64 encoded data.
     */
    public static char[] encode(byte[] in, int iLen) {
        // output length without padding
        int oDataLen = (iLen * 4 + 2) / 3;
        // output length including padding
        int oLen = ((iLen + 2) / 3) * 4;
        char[] out = new char[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++] & 0xff;
            int i1 = ip < iLen ? in[ip++] & 0xff : 0;
            int i2 = ip < iLen ? in[ip++] & 0xff : 0;
            int o0 = i0 >>> 2;
            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
            int o3 = i2 & 0x3F;
            out[op++] = map1[o0];
            out[op++] = map1[o1];
            out[op] = op < oDataLen ? map1[o2] : '=';
            op++;
            out[op] = op < oDataLen ? map1[o3] : '=';
            op++;
        }
        return out;
    }

    /**
     * Decodes a string from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   A String containing the decoded data.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static String decodeString(String s) {
        return new String(decode(s));
    }

    /**
     * Decodes a byte array from Base64 format.
     * @param s  a Base64 String to be decoded.
     * @return   An array containing the decoded data bytes.
     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(String s) {
        return decode(s.toCharArray());
    }

    /**
     * Decodes a byte array from Base64 format.
     * No blanks or line breaks are allowed within the Base64 encoded data.
     * @param in  a character array containing the Base64 encoded data.
     * @return    An array containing the decoded data bytes.
     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.
     */
    public static byte[] decode(char[] in) {
        int iLen = in.length;
        if (iLen % 4 != 0)
            throw new IllegalArgumentException(""Length of Base64 encoded input string is not a multiple of 4."");
        while (iLen > 0 && in[iLen - 1] == '=') iLen--;
        int oLen = (iLen * 3) / 4;
        byte[] out = new byte[oLen];
        int ip = 0;
        int op = 0;
        while (ip < iLen) {
            int i0 = in[ip++];
            int i1 = in[ip++];
            int i2 = ip < iLen ? in[ip++] : 'A';
            int i3 = ip < iLen ? in[ip++] : 'A';
            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int b0 = map2[i0];
            int b1 = map2[i1];
            int b2 = map2[i2];
            int b3 = map2[i3];
            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
                throw new IllegalArgumentException(""Illegal character in Base64 encoded data."");
            int o0 = (b0 << 2) | (b1 >>> 4);
            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
            int o2 = ((b2 & 3) << 6) | b3;
            out[op++] = (byte) o0;
            if (op < oLen)
                out[op++] = (byte) o1;
            if (op < oLen)
                out[op++] = (byte) o2;
        }
        return out;
    }

    // Dummy constructor.
    private Base64Coder() {
    }
}
// end class Base64Coder
","// Base64Coder_5Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_5Test {","// Base64Coder_5Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_5Test {

		/**
		* Test case for {@link Base64Coder#decode(char[])}.
		* It tests the decoding of a Base64 encoded string.
		*/
		@Test
		public void testDecode() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				char[] encoded = Base64Coder.encode(s.getBytes());
				byte[] decoded = Base64Coder.decode(encoded);
				assertEquals(s, new String(decoded));
		}
}
// end class Base64Coder_5Test

// Base64Coder_6Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_6Test {
		
		/**
		* Test case for {@link Base64Coder#decode(char[])}.
		* It tests the decoding of a Base64 encoded string.
		*/
		@Test
		public void testDecode() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				char[] encoded = Base64Coder.encode(s.getBytes());
				byte[] decoded = Base64Coder.decode(encoded);
				assertEquals(s, new String(decoded));
		}
}
// end class Base64Coder_6Test

// Base64Coder_7Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_7Test {
		
		/**
		* Test case for {@link Base64Coder#decode(char[])}.
		* It tests the decoding of a Base64 encoded string.
		*/
		@Test
		public void testDecode() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				char[] encoded = Base64Coder.encode(s.getBytes());
				byte[] decoded = Base64Coder.decode(encoded);
				assertEquals(s, new String(decoded));
		}
}
// end class Base64Coder_7Test

// Base64Coder_8Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_8Test {
		
		/**
		* Test case for {@link Base64Coder#decode(char[])}.
		* It tests the decoding of a Base64 encoded string.
		*/
		@Test
		public void testDecode() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				char[] encoded = Base64Coder.encode(s.getBytes());
				byte[] decoded = Base64Coder.decode(encoded);
				assertEquals(s, new String(decoded));
		}
}
// end class Base64Coder_8Test

// Base64Coder_9Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_9Test {
		
		/**
		* Test case for {@link Base64Coder#decode(char[])}.
		* It tests the decoding of a Base64 encoded string.
		*/
		@Test
		public void testDecode() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				char[] encoded = Base64Coder.encode(s.getBytes());
				byte[] decoded = Base64Coder.decode(encoded);
				assertEquals(s, new String(decoded));
		}
}
// end class Base64Coder_9Test

// Base64Coder_10Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_10Test {
		
		/**
		* Test case for {@link Base64Coder#decode(char[])}.
		* It tests the decoding of a Base64 encoded string.
		*/
		@Test
		public void testDecode() {
				String s = ""Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure."";
				char[] encoded = Base64Coder.encode(s.getBytes());
				byte[] decoded = Base64Coder.decode(encoded);
				assertEquals(s, new String(decoded));
		}
}
// end class Base64Coder_10Test

// Base64Coder_1Test.java
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Base64Coder}.
* It contains ten unit test cases for the {@link Base64Coder#decode(char[])} method.
*/
class Base64Coder_1Test {
		
		/**
		* Test case for {@link Base64Coder#decode(char[])}.
		* It tests the decoding of a Base64 encoded string.
		*/
		@Test
		public void testDecode() {
				String s = ""Man is distinguished, not"
cmpl-6wSteDmbSS2kmddA2apP8JrK5BHWw,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_0Test.java,60.78367018699646,length,"// SimpleCharStream.java
/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 4.1 */
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */
public class SimpleCharStream {

    /**
     * Whether parser is static.
     */
    public static final boolean staticFlag = false;

    int bufsize;

    int available;

    int tokenBegin;

    /**
     * Position in buffer.
     */
    public int bufpos = -1;

    protected int[] bufline;

    protected int[] bufcolumn;

    protected int column = 0;

    protected int line = 1;

    protected boolean prevCharIsCR = false;

    protected boolean prevCharIsLF = false;

    protected java.io.Reader inputStream;

    protected char[] buffer;

    protected int maxNextCharInd = 0;

    protected int inBuf = 0;

    protected int tabSize = 8;

    protected void setTabSize(int i) {
        tabSize = i;
    }

    protected int getTabSize(int i) {
        return tabSize;
    }

    protected void ExpandBuff(boolean wrapAround) {
        char[] newbuffer = new char[bufsize + 2048];
        int[] newbufline = new int[bufsize + 2048];
        int[] newbufcolumn = new int[bufsize + 2048];
        try {
            if (wrapAround) {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
                buffer = newbuffer;
                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
                bufline = newbufline;
                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
                bufcolumn = newbufcolumn;
                maxNextCharInd = (bufpos += (bufsize - tokenBegin));
            } else {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                buffer = newbuffer;
                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                bufline = newbufline;
                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                bufcolumn = newbufcolumn;
                maxNextCharInd = (bufpos -= tokenBegin);
            }
        } catch (Throwable t) {
            throw new Error(t.getMessage());
        }
        bufsize += 2048;
        available = bufsize;
        tokenBegin = 0;
    }

    protected void FillBuff() throws java.io.IOException {
        if (maxNextCharInd == available) {
            if (available == bufsize) {
                if (tokenBegin > 2048) {
                    bufpos = maxNextCharInd = 0;
                    available = tokenBegin;
                } else if (tokenBegin < 0)
                    bufpos = maxNextCharInd = 0;
                else
                    ExpandBuff(false);
            } else if (available > tokenBegin)
                available = bufsize;
            else if ((tokenBegin - available) < 2048)
                ExpandBuff(true);
            else
                available = tokenBegin;
        }
        int i;
        try {
            if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
                inputStream.close();
                throw new java.io.IOException();
            } else
                maxNextCharInd += i;
            return;
        } catch (java.io.IOException e) {
            --bufpos;
            backup(0);
            if (tokenBegin == -1)
                tokenBegin = bufpos;
            throw e;
        }
    }

    /**
     * Start.
     */
    public char BeginToken() throws java.io.IOException {
        tokenBegin = -1;
        char c = readChar();
        tokenBegin = bufpos;
        return c;
    }

    protected void UpdateLineColumn(char c) {
        column++;
        if (prevCharIsLF) {
            prevCharIsLF = false;
            line += (column = 1);
        } else if (prevCharIsCR) {
            prevCharIsCR = false;
            if (c == '\n') {
                prevCharIsLF = true;
            } else
                line += (column = 1);
        }
        switch(c) {
            case '\r':
                prevCharIsCR = true;
                break;
            case '\n':
                prevCharIsLF = true;
                break;
            case '\t':
                column--;
                column += (tabSize - (column % tabSize));
                break;
            default:
                break;
        }
        bufline[bufpos] = line;
        bufcolumn[bufpos] = column;
    }

    /**
     * Read a character.
     */
    public char readChar() throws java.io.IOException {
        if (inBuf > 0) {
            --inBuf;
            if (++bufpos == bufsize)
                bufpos = 0;
            return buffer[bufpos];
        }
        if (++bufpos >= maxNextCharInd)
            FillBuff();
        char c = buffer[bufpos];
        UpdateLineColumn(c);
        return c;
    }

    /**
     * @deprecated
     * @see #getEndColumn
     */
    public int getColumn() {
        return bufcolumn[bufpos];
    }

    /**
     * @deprecated
     * @see #getEndLine
     */
    public int getLine() {
        return bufline[bufpos];
    }

    /**
     * Get token end column number.
     */
    public int getEndColumn() {
        return bufcolumn[bufpos];
    }

    /**
     * Get token end line number.
     */
    public int getEndLine() {
        return bufline[bufpos];
    }

    /**
     * Get token beginning column number.
     */
    public int getBeginColumn() {
        return bufcolumn[tokenBegin];
    }

    /**
     * Get token beginning line number.
     */
    public int getBeginLine() {
        return bufline[tokenBegin];
    }

    /**
     * Backup a number of characters.
     */
    public void backup(int amount) {
        inBuf += amount;
        if ((bufpos -= amount) < 0)
            bufpos += bufsize;
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;
        available = bufsize = buffersize;
        buffer = new char[buffersize];
        bufline = new int[buffersize];
        bufcolumn = new int[buffersize];
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn) {
        this(dstream, startline, startcolumn, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream) {
        this(dstream, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;
        if (buffer == null || buffersize != buffer.length) {
            available = bufsize = buffersize;
            buffer = new char[buffersize];
            bufline = new int[buffersize];
            bufcolumn = new int[buffersize];
        }
        prevCharIsLF = prevCharIsCR = false;
        tokenBegin = inBuf = maxNextCharInd = 0;
        bufpos = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
        ReInit(dstream, startline, startcolumn, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream) {
        ReInit(dstream, 1, 1, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
        this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
        this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
        this(dstream, encoding, startline, startcolumn, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn) {
        this(dstream, startline, startcolumn, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
        this(dstream, encoding, 1, 1, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream) {
        this(dstream, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
        ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
        ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
        ReInit(dstream, encoding, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream) {
        ReInit(dstream, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
        ReInit(dstream, encoding, startline, startcolumn, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
        ReInit(dstream, startline, startcolumn, 4096);
    }

    /**
     * Get token literal value.
     */
    public String GetImage() {
        if (bufpos >= tokenBegin)
            return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
        else
            return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
    }

    /**
     * Get the suffix.
     */
    public char[] GetSuffix(int len) {
        char[] ret = new char[len];
        if ((bufpos + 1) >= len)
            System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
        else {
            System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
            System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
        }
        return ret;
    }

    /**
     * Reset buffer when finished.
     */
    public void Done() {
        buffer = null;
        bufline = null;
        bufcolumn = null;
    }

    /**
     * Method to adjust line and column numbers for the start of a token.
     */
    public void adjustBeginLineColumn(int newLine, int newCol) {
        int start = tokenBegin;
        int len;
        if (bufpos >= tokenBegin) {
            len = bufpos - tokenBegin + inBuf + 1;
        } else {
            len = bufsize - tokenBegin + bufpos + 1 + inBuf;
        }
        int i = 0, j = 0, k = 0;
        int nextColDiff = 0, columnDiff = 0;
        while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) {
            bufline[j] = newLine;
            nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
            bufcolumn[j] = newCol + columnDiff;
            columnDiff = nextColDiff;
            i++;
        }
        if (i < len) {
            bufline[j] = newLine++;
            bufcolumn[j] = newCol + columnDiff;
            while (i++ < len) {
                if (bufline[j = start % bufsize] != bufline[++start % bufsize])
                    bufline[j] = newLine++;
                else
                    bufline[j] = newLine;
            }
        }
        line = bufline[j];
        column = bufcolumn[j];
    }
}
/* JavaCC - OriginalChecksum=d9128cf5d82a12eb06ed3b6fa19acc59 (do not edit this line) */
","// SimpleCharStream_0Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains ten unit test cases for the {@link SimpleCharStream#BeginToken()} method.
*/
class SimpleCharStream_0Test {","// SimpleCharStream_0Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains ten unit test cases for the {@link SimpleCharStream#BeginToken()} method.
*/
class SimpleCharStream_0Test {

	/**
	* Test case for {@link SimpleCharStream#BeginToken()} method.
	* @throws IOException
	*/
	@Test
	void testBeginToken_0() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.BeginToken();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#BeginToken()} method.
	* @throws IOException
	*/
	@Test
	void testBeginToken_1() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.BeginToken();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#BeginToken()} method.
	* @throws IOException
	*/
	@Test
	void testBeginToken_2() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.BeginToken();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#BeginToken()} method.
	* @throws IOException
	*/
	@Test
	void testBeginToken_3() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.BeginToken();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#BeginToken()} method.
	* @throws IOException
	*/
	@Test
	void testBeginToken_4() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.BeginToken();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#BeginToken()} method.
	* @throws IOException
	*/
	@Test
	void testBeginToken_5() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.BeginToken();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#BeginToken()} method.
	* @throws IOException
	*/
	@Test
	void testBeginToken_6() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.BeginToken();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#BeginToken()} method.
	* @throws IOException
	*/
	@Test
	void testBeginToken_7() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.BeginToken();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#BeginToken()} method.
	* @throws IOException
	*/
	@Test
	void testBeginToken_8() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.BeginToken();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#BeginToken()} method.
	* @throws IOException
	*/
	@Test
	void testBeginToken_9() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.BeginToken();
		assertEquals('\u0000', result);
	}
	
}
/* JavaCC - OriginalChecksum=d9128cf5d82a12eb06ed3b6fa19acc59 (do not edit this line) */

// SimpleCharStream_1Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains ten unit test cases for the {@link SimpleCharStream#readChar()} method.
*/
class SimpleCharStream_1Test {
		
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* @throws IOException
	*/
	@Test
	void testReadChar_0() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.readChar();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* @throws IOException
	*/
	@Test
	void testReadChar_1() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.readChar();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* @throws IOException
	*/
	@Test
	void testReadChar_2() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.readChar();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* @throws IOException
	*/
	@Test
	void testReadChar_3() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.readChar();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* @throws IOException
	*/
	@Test
	void testReadChar_4() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.readChar();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* @throws IOException
	*/
	@Test
	void testReadChar_5() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.readChar();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* @throws IOException
	*/
	@Test
	void testReadChar_6() throws IOException {
		SimpleCharStream simpleCharStream = new SimpleCharStream(new StringReader(""""), 1, 1, 4096);
		char result = simpleCharStream.readChar();
		assertEquals('\u0000', result);
	}
	
	/**
	* Test case"
cmpl-6wSudhpAG0QsU3erxQFpxQBa6CFdI,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_1Test.java,65.30331683158875,length,"// SimpleCharStream.java
/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 4.1 */
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */
public class SimpleCharStream {

    /**
     * Whether parser is static.
     */
    public static final boolean staticFlag = false;

    int bufsize;

    int available;

    int tokenBegin;

    /**
     * Position in buffer.
     */
    public int bufpos = -1;

    protected int[] bufline;

    protected int[] bufcolumn;

    protected int column = 0;

    protected int line = 1;

    protected boolean prevCharIsCR = false;

    protected boolean prevCharIsLF = false;

    protected java.io.Reader inputStream;

    protected char[] buffer;

    protected int maxNextCharInd = 0;

    protected int inBuf = 0;

    protected int tabSize = 8;

    protected void setTabSize(int i) {
        tabSize = i;
    }

    protected int getTabSize(int i) {
        return tabSize;
    }

    protected void ExpandBuff(boolean wrapAround) {
        char[] newbuffer = new char[bufsize + 2048];
        int[] newbufline = new int[bufsize + 2048];
        int[] newbufcolumn = new int[bufsize + 2048];
        try {
            if (wrapAround) {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
                buffer = newbuffer;
                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
                bufline = newbufline;
                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
                bufcolumn = newbufcolumn;
                maxNextCharInd = (bufpos += (bufsize - tokenBegin));
            } else {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                buffer = newbuffer;
                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                bufline = newbufline;
                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                bufcolumn = newbufcolumn;
                maxNextCharInd = (bufpos -= tokenBegin);
            }
        } catch (Throwable t) {
            throw new Error(t.getMessage());
        }
        bufsize += 2048;
        available = bufsize;
        tokenBegin = 0;
    }

    protected void FillBuff() throws java.io.IOException {
        if (maxNextCharInd == available) {
            if (available == bufsize) {
                if (tokenBegin > 2048) {
                    bufpos = maxNextCharInd = 0;
                    available = tokenBegin;
                } else if (tokenBegin < 0)
                    bufpos = maxNextCharInd = 0;
                else
                    ExpandBuff(false);
            } else if (available > tokenBegin)
                available = bufsize;
            else if ((tokenBegin - available) < 2048)
                ExpandBuff(true);
            else
                available = tokenBegin;
        }
        int i;
        try {
            if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
                inputStream.close();
                throw new java.io.IOException();
            } else
                maxNextCharInd += i;
            return;
        } catch (java.io.IOException e) {
            --bufpos;
            backup(0);
            if (tokenBegin == -1)
                tokenBegin = bufpos;
            throw e;
        }
    }

    /**
     * Start.
     */
    public char BeginToken() throws java.io.IOException {
        tokenBegin = -1;
        char c = readChar();
        tokenBegin = bufpos;
        return c;
    }

    protected void UpdateLineColumn(char c) {
        column++;
        if (prevCharIsLF) {
            prevCharIsLF = false;
            line += (column = 1);
        } else if (prevCharIsCR) {
            prevCharIsCR = false;
            if (c == '\n') {
                prevCharIsLF = true;
            } else
                line += (column = 1);
        }
        switch(c) {
            case '\r':
                prevCharIsCR = true;
                break;
            case '\n':
                prevCharIsLF = true;
                break;
            case '\t':
                column--;
                column += (tabSize - (column % tabSize));
                break;
            default:
                break;
        }
        bufline[bufpos] = line;
        bufcolumn[bufpos] = column;
    }

    /**
     * Read a character.
     */
    public char readChar() throws java.io.IOException {
        if (inBuf > 0) {
            --inBuf;
            if (++bufpos == bufsize)
                bufpos = 0;
            return buffer[bufpos];
        }
        if (++bufpos >= maxNextCharInd)
            FillBuff();
        char c = buffer[bufpos];
        UpdateLineColumn(c);
        return c;
    }

    /**
     * @deprecated
     * @see #getEndColumn
     */
    public int getColumn() {
        return bufcolumn[bufpos];
    }

    /**
     * @deprecated
     * @see #getEndLine
     */
    public int getLine() {
        return bufline[bufpos];
    }

    /**
     * Get token end column number.
     */
    public int getEndColumn() {
        return bufcolumn[bufpos];
    }

    /**
     * Get token end line number.
     */
    public int getEndLine() {
        return bufline[bufpos];
    }

    /**
     * Get token beginning column number.
     */
    public int getBeginColumn() {
        return bufcolumn[tokenBegin];
    }

    /**
     * Get token beginning line number.
     */
    public int getBeginLine() {
        return bufline[tokenBegin];
    }

    /**
     * Backup a number of characters.
     */
    public void backup(int amount) {
        inBuf += amount;
        if ((bufpos -= amount) < 0)
            bufpos += bufsize;
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;
        available = bufsize = buffersize;
        buffer = new char[buffersize];
        bufline = new int[buffersize];
        bufcolumn = new int[buffersize];
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn) {
        this(dstream, startline, startcolumn, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream) {
        this(dstream, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;
        if (buffer == null || buffersize != buffer.length) {
            available = bufsize = buffersize;
            buffer = new char[buffersize];
            bufline = new int[buffersize];
            bufcolumn = new int[buffersize];
        }
        prevCharIsLF = prevCharIsCR = false;
        tokenBegin = inBuf = maxNextCharInd = 0;
        bufpos = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
        ReInit(dstream, startline, startcolumn, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream) {
        ReInit(dstream, 1, 1, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
        this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
        this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
        this(dstream, encoding, startline, startcolumn, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn) {
        this(dstream, startline, startcolumn, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
        this(dstream, encoding, 1, 1, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream) {
        this(dstream, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
        ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
        ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
        ReInit(dstream, encoding, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream) {
        ReInit(dstream, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
        ReInit(dstream, encoding, startline, startcolumn, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
        ReInit(dstream, startline, startcolumn, 4096);
    }

    /**
     * Get token literal value.
     */
    public String GetImage() {
        if (bufpos >= tokenBegin)
            return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
        else
            return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
    }

    /**
     * Get the suffix.
     */
    public char[] GetSuffix(int len) {
        char[] ret = new char[len];
        if ((bufpos + 1) >= len)
            System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
        else {
            System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
            System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
        }
        return ret;
    }

    /**
     * Reset buffer when finished.
     */
    public void Done() {
        buffer = null;
        bufline = null;
        bufcolumn = null;
    }

    /**
     * Method to adjust line and column numbers for the start of a token.
     */
    public void adjustBeginLineColumn(int newLine, int newCol) {
        int start = tokenBegin;
        int len;
        if (bufpos >= tokenBegin) {
            len = bufpos - tokenBegin + inBuf + 1;
        } else {
            len = bufsize - tokenBegin + bufpos + 1 + inBuf;
        }
        int i = 0, j = 0, k = 0;
        int nextColDiff = 0, columnDiff = 0;
        while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) {
            bufline[j] = newLine;
            nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
            bufcolumn[j] = newCol + columnDiff;
            columnDiff = nextColDiff;
            i++;
        }
        if (i < len) {
            bufline[j] = newLine++;
            bufcolumn[j] = newCol + columnDiff;
            while (i++ < len) {
                if (bufline[j = start % bufsize] != bufline[++start % bufsize])
                    bufline[j] = newLine++;
                else
                    bufline[j] = newLine;
            }
        }
        line = bufline[j];
        column = bufcolumn[j];
    }
}
/* JavaCC - OriginalChecksum=d9128cf5d82a12eb06ed3b6fa19acc59 (do not edit this line) */
","// SimpleCharStream_1Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains ten unit test cases for the {@link SimpleCharStream#readChar()} method.
*/
class SimpleCharStream_1Test {","// SimpleCharStream_1Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains ten unit test cases for the {@link SimpleCharStream#readChar()} method.
*/
class SimpleCharStream_1Test {

	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* It tests the case when the buffer is empty and the stream is not empty.
	*/
	@Test
	void testReadChar_1() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""abc""), 1, 1, 1);
		assertEquals('a', stream.readChar());
		assertEquals('b', stream.readChar());
		assertEquals('c', stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* It tests the case when the buffer is empty and the stream is empty.
	*/
	@Test
	void testReadChar_2() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""""), 1, 1, 1);
		assertThrows(java.io.IOException.class, () -> stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* It tests the case when the buffer is not empty and the stream is not empty.
	*/
	@Test
	void testReadChar_3() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""abc""), 1, 1, 3);
		assertEquals('a', stream.readChar());
		assertEquals('b', stream.readChar());
		assertEquals('c', stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* It tests the case when the buffer is not empty and the stream is empty.
	*/
	@Test
	void testReadChar_4() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""""), 1, 1, 3);
		assertThrows(java.io.IOException.class, () -> stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* It tests the case when the buffer is not empty and the stream is not empty.
	* The buffer is filled with the stream.
	*/
	@Test
	void testReadChar_5() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""abc""), 1, 1, 1);
		assertEquals('a', stream.readChar());
		assertEquals('b', stream.readChar());
		assertEquals('c', stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* It tests the case when the buffer is not empty and the stream is empty.
	* The buffer is filled with the stream.
	*/
	@Test
	void testReadChar_6() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""""), 1, 1, 1);
		assertThrows(java.io.IOException.class, () -> stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* It tests the case when the buffer is not empty and the stream is not empty.
	* The buffer is filled with the stream.
	*/
	@Test
	void testReadChar_7() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""abc""), 1, 1, 3);
		assertEquals('a', stream.readChar());
		assertEquals('b', stream.readChar());
		assertEquals('c', stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* It tests the case when the buffer is not empty and the stream is empty.
	* The buffer is filled with the stream.
	*/
	@Test
	void testReadChar_8() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""""), 1, 1, 3);
		assertThrows(java.io.IOException.class, () -> stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* It tests the case when the buffer is not empty and the stream is not empty.
	* The buffer is filled with the stream.
	*/
	@Test
	void testReadChar_9() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""abc""), 1, 1, 1);
		assertEquals('a', stream.readChar());
		assertEquals('b', stream.readChar());
		assertEquals('c', stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#readChar()} method.
	* It tests the case when the buffer is not empty and the stream is empty.
	* The buffer is filled with the stream.
	*/
	@Test
	void testReadChar_10() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""""), 1, 1, 1);
		assertThrows(java.io.IOException.class, () -> stream.readChar());
	}
	
}
/* JavaCC - OriginalChecksum=d9128cf5d82a12eb06ed3b6fa19acc59 (do not edit this line) */

// SimpleCharStream_2Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains ten unit test cases for the {@link SimpleCharStream#backup(int)} method.
*/
class SimpleCharStream_2Test {
		
	/**
	* Test case for {@link SimpleCharStream#backup(int)} method.
	* It tests the case when the buffer is empty and the stream is not empty.
	*/
	@Test
	void testBackup_1() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""abc""), 1, 1, 1);
		assertEquals('a', stream.readChar());
		assertEquals('b', stream.readChar());
		stream.backup(1);
		assertEquals('b', stream.readChar());
		assertEquals('c', stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#backup(int)} method.
	* It tests the case when the buffer is empty and the stream is empty.
	*/
	@Test
	void testBackup_2() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""""), 1, 1, 1);
		assertThrows(java.io.IOException.class, () -> stream.readChar());
		stream.backup(1);
		assertThrows(java.io.IOException.class, () -> stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#backup(int)} method.
	* It tests the case when the buffer is not empty and the stream is not empty.
	*/
	@Test
	void testBackup_3() throws Exception {
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""abc""), 1, 1, 3);
		assertEquals('a', stream.readChar());
		assertEquals('b', stream.readChar());
		stream.backup(1);
		assertEquals('b', stream.readChar());
		assertEquals('c', stream.readChar());
	}
	
	/**
	* Test case for {@link SimpleCharStream#backup(int)} method.
	"
cmpl-6wSvg0b3CFI3CoFqOt6e2p817XlgM,/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_2Test.java,61.765310525894165,length,"// SimpleCharStream.java
/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 4.1 */
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */
public class SimpleCharStream {

    /**
     * Whether parser is static.
     */
    public static final boolean staticFlag = false;

    int bufsize;

    int available;

    int tokenBegin;

    /**
     * Position in buffer.
     */
    public int bufpos = -1;

    protected int[] bufline;

    protected int[] bufcolumn;

    protected int column = 0;

    protected int line = 1;

    protected boolean prevCharIsCR = false;

    protected boolean prevCharIsLF = false;

    protected java.io.Reader inputStream;

    protected char[] buffer;

    protected int maxNextCharInd = 0;

    protected int inBuf = 0;

    protected int tabSize = 8;

    protected void setTabSize(int i) {
        tabSize = i;
    }

    protected int getTabSize(int i) {
        return tabSize;
    }

    protected void ExpandBuff(boolean wrapAround) {
        char[] newbuffer = new char[bufsize + 2048];
        int[] newbufline = new int[bufsize + 2048];
        int[] newbufcolumn = new int[bufsize + 2048];
        try {
            if (wrapAround) {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
                buffer = newbuffer;
                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
                bufline = newbufline;
                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
                bufcolumn = newbufcolumn;
                maxNextCharInd = (bufpos += (bufsize - tokenBegin));
            } else {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                buffer = newbuffer;
                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                bufline = newbufline;
                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                bufcolumn = newbufcolumn;
                maxNextCharInd = (bufpos -= tokenBegin);
            }
        } catch (Throwable t) {
            throw new Error(t.getMessage());
        }
        bufsize += 2048;
        available = bufsize;
        tokenBegin = 0;
    }

    protected void FillBuff() throws java.io.IOException {
        if (maxNextCharInd == available) {
            if (available == bufsize) {
                if (tokenBegin > 2048) {
                    bufpos = maxNextCharInd = 0;
                    available = tokenBegin;
                } else if (tokenBegin < 0)
                    bufpos = maxNextCharInd = 0;
                else
                    ExpandBuff(false);
            } else if (available > tokenBegin)
                available = bufsize;
            else if ((tokenBegin - available) < 2048)
                ExpandBuff(true);
            else
                available = tokenBegin;
        }
        int i;
        try {
            if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
                inputStream.close();
                throw new java.io.IOException();
            } else
                maxNextCharInd += i;
            return;
        } catch (java.io.IOException e) {
            --bufpos;
            backup(0);
            if (tokenBegin == -1)
                tokenBegin = bufpos;
            throw e;
        }
    }

    /**
     * Start.
     */
    public char BeginToken() throws java.io.IOException {
        tokenBegin = -1;
        char c = readChar();
        tokenBegin = bufpos;
        return c;
    }

    protected void UpdateLineColumn(char c) {
        column++;
        if (prevCharIsLF) {
            prevCharIsLF = false;
            line += (column = 1);
        } else if (prevCharIsCR) {
            prevCharIsCR = false;
            if (c == '\n') {
                prevCharIsLF = true;
            } else
                line += (column = 1);
        }
        switch(c) {
            case '\r':
                prevCharIsCR = true;
                break;
            case '\n':
                prevCharIsLF = true;
                break;
            case '\t':
                column--;
                column += (tabSize - (column % tabSize));
                break;
            default:
                break;
        }
        bufline[bufpos] = line;
        bufcolumn[bufpos] = column;
    }

    /**
     * Read a character.
     */
    public char readChar() throws java.io.IOException {
        if (inBuf > 0) {
            --inBuf;
            if (++bufpos == bufsize)
                bufpos = 0;
            return buffer[bufpos];
        }
        if (++bufpos >= maxNextCharInd)
            FillBuff();
        char c = buffer[bufpos];
        UpdateLineColumn(c);
        return c;
    }

    /**
     * @deprecated
     * @see #getEndColumn
     */
    public int getColumn() {
        return bufcolumn[bufpos];
    }

    /**
     * @deprecated
     * @see #getEndLine
     */
    public int getLine() {
        return bufline[bufpos];
    }

    /**
     * Get token end column number.
     */
    public int getEndColumn() {
        return bufcolumn[bufpos];
    }

    /**
     * Get token end line number.
     */
    public int getEndLine() {
        return bufline[bufpos];
    }

    /**
     * Get token beginning column number.
     */
    public int getBeginColumn() {
        return bufcolumn[tokenBegin];
    }

    /**
     * Get token beginning line number.
     */
    public int getBeginLine() {
        return bufline[tokenBegin];
    }

    /**
     * Backup a number of characters.
     */
    public void backup(int amount) {
        inBuf += amount;
        if ((bufpos -= amount) < 0)
            bufpos += bufsize;
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;
        available = bufsize = buffersize;
        buffer = new char[buffersize];
        bufline = new int[buffersize];
        bufcolumn = new int[buffersize];
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn) {
        this(dstream, startline, startcolumn, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream) {
        this(dstream, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;
        if (buffer == null || buffersize != buffer.length) {
            available = bufsize = buffersize;
            buffer = new char[buffersize];
            bufline = new int[buffersize];
            bufcolumn = new int[buffersize];
        }
        prevCharIsLF = prevCharIsCR = false;
        tokenBegin = inBuf = maxNextCharInd = 0;
        bufpos = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
        ReInit(dstream, startline, startcolumn, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream) {
        ReInit(dstream, 1, 1, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
        this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
        this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
        this(dstream, encoding, startline, startcolumn, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn) {
        this(dstream, startline, startcolumn, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
        this(dstream, encoding, 1, 1, 4096);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream) {
        this(dstream, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
        ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
        ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
        ReInit(dstream, encoding, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream) {
        ReInit(dstream, 1, 1, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
        ReInit(dstream, encoding, startline, startcolumn, 4096);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
        ReInit(dstream, startline, startcolumn, 4096);
    }

    /**
     * Get token literal value.
     */
    public String GetImage() {
        if (bufpos >= tokenBegin)
            return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
        else
            return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
    }

    /**
     * Get the suffix.
     */
    public char[] GetSuffix(int len) {
        char[] ret = new char[len];
        if ((bufpos + 1) >= len)
            System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
        else {
            System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
            System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
        }
        return ret;
    }

    /**
     * Reset buffer when finished.
     */
    public void Done() {
        buffer = null;
        bufline = null;
        bufcolumn = null;
    }

    /**
     * Method to adjust line and column numbers for the start of a token.
     */
    public void adjustBeginLineColumn(int newLine, int newCol) {
        int start = tokenBegin;
        int len;
        if (bufpos >= tokenBegin) {
            len = bufpos - tokenBegin + inBuf + 1;
        } else {
            len = bufsize - tokenBegin + bufpos + 1 + inBuf;
        }
        int i = 0, j = 0, k = 0;
        int nextColDiff = 0, columnDiff = 0;
        while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) {
            bufline[j] = newLine;
            nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
            bufcolumn[j] = newCol + columnDiff;
            columnDiff = nextColDiff;
            i++;
        }
        if (i < len) {
            bufline[j] = newLine++;
            bufcolumn[j] = newCol + columnDiff;
            while (i++ < len) {
                if (bufline[j = start % bufsize] != bufline[++start % bufsize])
                    bufline[j] = newLine++;
                else
                    bufline[j] = newLine;
            }
        }
        line = bufline[j];
        column = bufcolumn[j];
    }
}
/* JavaCC - OriginalChecksum=d9128cf5d82a12eb06ed3b6fa19acc59 (do not edit this line) */
","// SimpleCharStream_2Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains ten unit test cases for the {@link SimpleCharStream#GetImage()} method.
*/
class SimpleCharStream_2Test {","// SimpleCharStream_2Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains ten unit test cases for the {@link SimpleCharStream#GetImage()} method.
*/
class SimpleCharStream_2Test {

	/**
	* Test case for {@link SimpleCharStream#GetImage()} method.
	* It tests the method with a string of length 1.
	*/
	@Test
	void testGetImage_1() {
		String input = ""a"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertEquals(input, stream.GetImage());
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetImage()} method.
	* It tests the method with a string of length 2.
	*/
	@Test
	void testGetImage_2() {
		String input = ""ab"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertEquals(input, stream.GetImage());
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetImage()} method.
	* It tests the method with a string of length 3.
	*/
	@Test
	void testGetImage_3() {
		String input = ""abc"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertEquals(input, stream.GetImage());
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetImage()} method.
	* It tests the method with a string of length 4.
	*/
	@Test
	void testGetImage_4() {
		String input = ""abcd"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertEquals(input, stream.GetImage());
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetImage()} method.
	* It tests the method with a string of length 5.
	*/
	@Test
	void testGetImage_5() {
		String input = ""abcde"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertEquals(input, stream.GetImage());
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetImage()} method.
	* It tests the method with a string of length 6.
	*/
	@Test
	void testGetImage_6() {
		String input = ""abcdef"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertEquals(input, stream.GetImage());
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetImage()} method.
	* It tests the method with a string of length 7.
	*/
	@Test
	void testGetImage_7() {
		String input = ""abcdefg"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertEquals(input, stream.GetImage());
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetImage()} method.
	* It tests the method with a string of length 8.
	*/
	@Test
	void testGetImage_8() {
		String input = ""abcdefgh"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertEquals(input, stream.GetImage());
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetImage()} method.
	* It tests the method with a string of length 9.
	*/
	@Test
	void testGetImage_9() {
		String input = ""abcdefghi"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertEquals(input, stream.GetImage());
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetImage()} method.
	* It tests the method with a string of length 10.
	*/
	@Test
	void testGetImage_10() {
		String input = ""abcdefghij"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertEquals(input, stream.GetImage());
	}
	
}
/* JavaCC - OriginalChecksum=d9128cf5d82a12eb06ed3b6fa19acc59 (do not edit this line) */

// SimpleCharStream_3Test.java
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.pmdesigns.jvc.tools;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCharStream}.
* It contains ten unit test cases for the {@link SimpleCharStream#GetSuffix(int)} method.
*/
class SimpleCharStream_3Test {
		
	/**
	* Test case for {@link SimpleCharStream#GetSuffix(int)} method.
	* It tests the method with a string of length 1.
	*/
	@Test
	void testGetSuffix_1() {
		String input = ""a"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertArrayEquals(input.toCharArray(), stream.GetSuffix(1));
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetSuffix(int)} method.
	* It tests the method with a string of length 2.
	*/
	@Test
	void testGetSuffix_2() {
		String input = ""ab"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertArrayEquals(input.toCharArray(), stream.GetSuffix(2));
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetSuffix(int)} method.
	* It tests the method with a string of length 3.
	*/
	@Test
	void testGetSuffix_3() {
		String input = ""abc"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertArrayEquals(input.toCharArray(), stream.GetSuffix(3));
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetSuffix(int)} method.
	* It tests the method with a string of length 4.
	*/
	@Test
	void testGetSuffix_4() {
		String input = ""abcd"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertArrayEquals(input.toCharArray(), stream.GetSuffix(4));
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetSuffix(int)} method.
	* It tests the method with a string of length 5.
	*/
	@Test
	void testGetSuffix_5() {
		String input = ""abcde"";
		SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(input));
		stream.BeginToken();
		assertArrayEquals(input.toCharArray(), stream.GetSuffix(5));
	}
	
	/**
	* Test case for {@link SimpleCharStream#GetSuffix(int)} method.
	* It tests the method with a string of length 6.
	*/
	@Test
	void testGetSuffix_6() {
"
