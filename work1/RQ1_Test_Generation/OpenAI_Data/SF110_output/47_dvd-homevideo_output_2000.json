[
{
    "id": "cmpl-6wSwg2N9iwfgJaKdXMQ62jIjsNNMI",
    "object": "text_completion",
    "created": 1679392310,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.\n\t* It tests the case where the dvdauthor command is not found.\n\t*/\n\t@Test\n\tvoid testCreateDVDFileStructure_dvdauthor_not_found() {\n\t\tAuthor author = new Author();\n\t\tGUI DVD_GUI = new GUI();\n\t\tDVD_GUI.strOutputDir = \"test_output\";\n\t\tFile dir = new File(DVD_GUI.strOutputDir);\n\t\tdir.mkdir();\n\t\tFile log = new File(DVD_GUI.strOutputDir + \"/log\");\n\t\tlog.mkdir();\n\t\tFile err = new File(DVD_GUI.strOutputDir + \"/log/dvdauthor.err\");\n\t\ttry {\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(err));\n\t\t\tout.write(\"/bin/sh: dvdauthor: command not found\");\n\t\t\tout.close();\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\tassertTrue(author.CreateDVDFileStructure(DVD_GUI));\n\t\tdir.delete();\n\t}\n\t\n\t/**\n\t* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.\n\t* It tests the case where the dvdauthor command is found.\n\t*/\n\t@Test\n\tvoid testCreateDVDFileStructure_dvdauthor_found() {\n\t\tAuthor author = new Author();\n\t\tGUI DVD_GUI = new GUI();\n\t\tDVD_GUI.strOutputDir = \"test_output\";\n\t\tFile dir = new File(DVD_GUI.strOutputDir);\n\t\tdir.mkdir();\n\t\tFile log = new File(DVD_GUI.strOutputDir + \"/log\");\n\t\tlog.mkdir();\n\t\tFile err = new File(DVD_GUI.strOutputDir + \"/log/dvdauthor.err\");\n\t\ttry {\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(err));\n\t\t\tout.write(\"dvdauthor found\");\n\t\t\tout.close();\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\tassertFalse(author.CreateDVDFileStructure(DVD_GUI));\n\t\tdir.delete();\n\t}\n\t\n\t/**\n\t* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.\n\t* It tests the case where the dvdauthor command is found and there is an error.\n\t*/\n\t@Test\n\tvoid testCreateDVDFileStructure_dvdauthor_found_error() {\n\t\tAuthor author = new Author();\n\t\tGUI DVD_GUI = new GUI();\n\t\tDVD_GUI.strOutputDir = \"test_output\";\n\t\tFile dir = new File(DVD_GUI.strOutputDir);\n\t\tdir.mkdir();\n\t\tFile log = new File(DVD_GUI.strOutputDir + \"/log\");\n\t\tlog.mkdir();\n\t\tFile err = new File(DVD_GUI.strOutputDir + \"/log/dvdauthor.err\");\n\t\ttry {\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(err));\n\t\t\tout.write(\"dvdauthor found\");\n\t\t\tout.newLine();\n\t\t\tout.write(\"ERROR: dvdauthor found\");\n\t\t\tout.close();\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\tassertTrue(author.CreateDVDFileStructure(DVD_GUI));\n\t\tdir.delete();\n\t}\n\t\n\t/**\n\t* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.\n\t* It tests the case where the dvdauthor command is found and there is a warning.\n\t*/\n\t@Test\n\tvoid testCreateDVDFileStructure_dvdauthor_found_warning() {\n\t\tAuthor author = new Author();\n\t\tGUI DVD_GUI = new GUI();\n\t\tDVD_GUI.strOutputDir = \"test_output\";\n\t\tFile dir = new File(DVD_GUI.strOutputDir);\n\t\tdir.mkdir();\n\t\tFile log = new File(DVD_GUI.strOutputDir + \"/log\");\n\t\tlog.mkdir();\n\t\tFile err = new File(DVD_GUI.strOutputDir + \"/log/dvdauthor.err\");\n\t\ttry {\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(err));\n\t\t\tout.write(\"dvdauthor found\");\n\t\t\tout.newLine();\n\t\t\tout.write(\"WARN: dvdauthor found\");\n\t\t\tout.close();\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\tassertFalse(author.CreateDVDFileStructure(DVD_GUI));\n\t\tdir.delete();\n\t}\n\t\n\t/**\n\t* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.\n\t* It tests the case where the dvdauthor command is found and there is an IOException.\n\t*/\n\t@Test\n\tvoid testCreateDVDFileStructure_dvdauthor_found_IOException() {\n\t\tAuthor author = new Author();\n\t\tGUI DVD_GUI = new GUI();\n\t\tDVD_GUI.strOutputDir = \"test_output\";\n\t\tFile dir = new File(DVD_GUI.strOutputDir);\n\t\tdir.mkdir();\n\t\tFile log = new File(DVD_GUI.strOutputDir + \"/log\");\n\t\tlog.mkdir();\n\t\tFile err = new File(DVD_GUI.strOutputDir + \"/log/dvdauthor.err\");\n\t\ttry {\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(err));\n\t\t\tout.write(\"dvdauthor found\");\n\t\t\tout.newLine();\n\t\t\tout.write(\"IOException\");\n\t\t\tout.close();\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\tassertTrue(author.CreateDVDFileStructure(DVD_GUI));\n\t\tdir.delete();\n\t}\n\t\n\t/**\n\t* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.\n\t* It tests the case where the dvdauthor command is found and there is a NoSuchElementException.\n\t*/\n\t@Test\n\tvoid testCreateDVDFileStructure_dvdauthor_found_NoSuchElementException() {\n\t\tAuthor author = new Author();\n\t\tGUI DVD_GUI = new GUI();\n\t\tDVD_GUI.strOutputDir = \"test_output\";\n\t\tFile dir = new File(DVD_GUI.strOutputDir);\n\t\tdir.mkdir();\n\t\tFile log = new File(DVD_GUI.strOutputDir + \"/log\");\n\t\tlog.mkdir();\n\t\tFile err = new File(DVD_GUI.strOutputDir + \"/log/dvdauthor.err\");\n\t\ttry {\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(err));\n\t\t\tout.write(\"dvdauthor found\");\n\t\t\tout.newLine();\n\t\t\tout.write(\"NoSuchElementException\");\n\t\t\tout.close();\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\tassertTrue(author.CreateDVDFileStructure(DVD_GUI));\n\t\tdir.delete();\n\t}\n\t\n\t/**\n\t* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.\n\t* It tests the case where the dvdauthor command is found and there is an InterruptedException.\n\t*/\n\t@Test\n\tvoid testCreateDVDFileStructure_dvdauthor_found_InterruptedException() {\n\t\tAuthor author = new Author();\n\t\tGUI DVD_GUI = new GUI();\n\t\tDVD_GUI.strOutputDir = \"test_",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 2073,
        "completion_tokens": 2000,
        "total_tokens": 4073
    },
    "time_taken": 59.15275835990906,
    "prompt_id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Author.java",
    "original_code": "// Author.java\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.NoSuchElementException;\nimport java.util.StringTokenizer;\nimport java.lang.NullPointerException;\nimport java.lang.IllegalArgumentException;\n\n/**\n * @author Shane Santner\n * This class create the DVD filesystem that will be burned\n * to disc.\n *\n * TODO - Need to handle input, output and error streams\n *        more appropriatly.\n */\npublic class Author {\n\n    /**\n     * Creates a new instance of Author\n     */\n    public Author() {\n    }\n\n    /* Author Member Variables */\n    private String m_dvdauthor = \"dvdauthor -x vmgm.xml\";\n\n    private String m_BaseErr = \"Authoring Error - \";\n\n    /**\n     * Create a DVD filestructure necessary to play in dvd player using dvdauthor\n     * @param   DVD_GUI This is the GUI object used to control the form\n     * @return  A boolean to determine if an error occurred in the function\n     */\n    public boolean CreateDVDFileStructure(GUI DVD_GUI) {\n        try {\n            /* \n             * Set progress bar to 50% since we have completed dvd-menu.\n             * In the future would like a better way to track progress, this\n             * is not very precise.\n             */\n            DVD_GUI.prgAuthor.setValue(50);\n            DVD_GUI.lblAuthorProg.setText(\"50%\");\n            /* Build up the dvdauthor_cmd string and execute dvd-author */\n            String[] dvdauthor_cmd = { \"/bin/sh\", \"-c\", m_dvdauthor };\n            /*\n             * exec(...) throws IOException, NullPointerException and\n             *                  IllegalArgumentException.\n             */\n            Process p = Runtime.getRuntime().exec(dvdauthor_cmd, null, new File(DVD_GUI.strOutputDir));\n            try {\n                /* Instantiate input and output readers for dvd-author streams */\n                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n                BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n                BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + \"/log/dvdauthor.log\"));\n                BufferedWriter err_out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + \"/log/dvdauthor.err\"));\n                String line;\n                /* \n                 * Check for the case where the necessary dependencies are not\n                 * installed, but the user tries to run dvd-homevideo anyway\n                 */\n                if (err_in.ready()) {\n                    line = err_in.readLine();\n                    if (line.equals(\"/bin/sh: dvdauthor: command not found\")) {\n                        DVD_GUI.MessageBox(\"Could not locate dvdauthor in your path.\" + \"\\nPlease install all necessary dependencies\" + \"\\nand rerun dvd-homevideo.\", 0);\n                        /* Close all open streams */\n                        in.close();\n                        out.close();\n                        err_in.close();\n                        err_out.close();\n                        /* Indicate that there was an error */\n                        return true;\n                    }\n                }\n                /*\n                 * Lets look for indications of problems and display these to the user\n                 * through the txtAreaOutput interface.\n                 */\n                StringTokenizer st;\n                /*\n                 * err_in.readLine() throws an IOException\n                 */\n                while ((line = err_in.readLine()) != null) {\n                    st = new StringTokenizer(line, \":\");\n                    if (st.hasMoreTokens()) {\n                        /*\n                         * st.nextToken() throws NoSuchElementException\n                         */\n                        if (!st.nextToken().equals(\"WARN\")) {\n                            DVD_GUI.txtAreaOutput.append(line + \"\\n\");\n                            DVD_GUI.txtAreaOutput.setCaretPosition(DVD_GUI.txtAreaOutput.getDocument().getLength());\n                            out.write(line);\n                            out.newLine();\n                        }\n                    }\n                }\n                /*\n                 * close() throws an IOException\n                 */\n                in.close();\n                out.close();\n                err_in.close();\n                err_out.close();\n                /*\n                 * p.waitFor() throws an InterruptedException\n                 */\n                p.waitFor();\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (NoSuchElementException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"Looked for a token that didn't exist\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (InterruptedException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"dvd-homevideo thread was interrupted\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            }\n            /* Set progress bar to 100% and disable it */\n            DVD_GUI.prgAuthor.setIndeterminate(false);\n            DVD_GUI.prgAuthor.setValue(100);\n            DVD_GUI.lblAuthorProg.setText(\"100%\");\n            DVD_GUI.lblAuthor.setEnabled(false);\n            DVD_GUI.lblAuthorProg.setEnabled(false);\n            DVD_GUI.prgAuthor.setEnabled(false);\n            /* Put in a slight delay to ensure author.log closes */\n            Thread.sleep(2000);\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n            DVD_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        } catch (NullPointerException ex) {\n            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n            DVD_GUI.MessageBox(m_BaseErr + \"Error executing Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        } catch (IllegalArgumentException ex) {\n            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n            DVD_GUI.MessageBox(m_BaseErr + \"Illegal argument sent to Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        } catch (Exception ex) {\n            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n            DVD_GUI.MessageBox(m_BaseErr + \"Unknown Error occurred\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        }\n        /* Look for any indication of an error in the author log file */\n        return DVD_GUI.ErrorCheck(DVD_GUI.strOutputDir + \"/log/dvdauthor.log\");\n    }\n}\n",
    "test_prompt": "// AuthorTest.java\n\n\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.NoSuchElementException;\nimport java.util.StringTokenizer;\nimport java.lang.NullPointerException;\nimport java.lang.IllegalArgumentException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Author}.\n* It contains ten unit test cases for the {@link Author#CreateDVDFileStructure(GUI)} method.\n*/\nclass AuthorTest {"
},
{
    "id": "cmpl-6wSxjW8OuAACFzgigJAeDhuxwHsQ2",
    "object": "text_completion",
    "created": 1679392375,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t* Test case for {@link Burn#BurnToDVD(GUI)} method.\n\t\t* This test case checks if the method returns true when the growisofs command is not found.\n\t\t*/\n\t\t@Test\n\t\tvoid testBurnToDVD_1() {\n\t\t\t\tBurn burn = new Burn();\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tDVD_GUI.strOutputDir = \"temp\";\n\t\t\t\tboolean result = burn.BurnToDVD(DVD_GUI);\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Burn#BurnToDVD(GUI)} method.\n\t\t* This test case checks if the method returns true when the growisofs command is not found.\n\t\t*/\n\t\t@Test\n\t\tvoid testBurnToDVD_2() {\n\t\t\t\tBurn burn = new Burn();\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tDVD_GUI.strOutputDir = \"temp\";\n\t\t\t\tboolean result = burn.BurnToDVD(DVD_GUI);\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Burn#BurnToDVD(GUI)} method.\n\t\t* This test case checks if the method returns true when the growisofs command is not found.\n\t\t*/\n\t\t@Test\n\t\tvoid testBurnToDVD_3() {\n\t\t\t\tBurn burn = new Burn();\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tDVD_GUI.strOutputDir = \"temp\";\n\t\t\t\tboolean result = burn.BurnToDVD(DVD_GUI);\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Burn#BurnToDVD(GUI)} method.\n\t\t* This test case checks if the method returns true when the growisofs command is not found.\n\t\t*/\n\t\t@Test\n\t\tvoid testBurnToDVD_4() {\n\t\t\t\tBurn burn = new Burn();\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tDVD_GUI.strOutputDir = \"temp\";\n\t\t\t\tboolean result = burn.BurnToDVD(DVD_GUI);\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Burn#BurnToDVD(GUI)} method.\n\t\t* This test case checks if the method returns true when the growisofs command is not found.\n\t\t*/\n\t\t@Test\n\t\tvoid testBurnToDVD_5() {\n\t\t\t\tBurn burn = new Burn();\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tDVD_GUI.strOutputDir = \"temp\";\n\t\t\t\tboolean result = burn.BurnToDVD(DVD_GUI);\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Burn#BurnToDVD(GUI)} method.\n\t\t* This test case checks if the method returns true when the growisofs command is not found.\n\t\t*/\n\t\t@Test\n\t\tvoid testBurnToDVD_6() {\n\t\t\t\tBurn burn = new Burn();\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tDVD_GUI.strOutputDir = \"temp\";\n\t\t\t\tboolean result = burn.BurnToDVD(DVD_GUI);\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Burn#BurnToDVD(GUI)} method.\n\t\t* This test case checks if the method returns true when the growisofs command is not found.\n\t\t*/\n\t\t@Test\n\t\tvoid testBurnToDVD_7() {\n\t\t\t\tBurn burn = new Burn();\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tDVD_GUI.strOutputDir = \"temp\";\n\t\t\t\tboolean result = burn.BurnToDVD(DVD_GUI);\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Burn#BurnToDVD(GUI)} method.\n\t\t* This test case checks if the method returns true when the growisofs command is not found.\n\t\t*/\n\t\t@Test\n\t\tvoid testBurnToDVD_8() {\n\t\t\t\tBurn burn = new Burn();\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tDVD_GUI.strOutputDir = \"temp\";\n\t\t\t\tboolean result = burn.BurnToDVD(DVD_GUI);\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Burn#BurnToDVD(GUI)} method.\n\t\t* This test case checks if the method returns true when the growisofs command is not found.\n\t\t*/\n\t\t@Test\n\t\tvoid testBurnToDVD_9() {\n\t\t\t\tBurn burn = new Burn();\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tDVD_GUI.strOutputDir = \"temp\";\n\t\t\t\tboolean result = burn.BurnToDVD(DVD_GUI);\n\t\t\t\tassertTrue(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Burn#BurnToDVD(GUI)} method.\n\t\t* This test case checks if the method returns true when the growisofs command is not found.\n\t\t*/\n\t\t@Test\n\t\tvoid testBurnToDVD_10() {\n\t\t\t\tBurn burn = new Burn();\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tDVD_GUI.strOutputDir = \"temp\";\n\t\t\t\tboolean result = burn.BurnToDVD(DVD_GUI);\n\t\t\t\tassertTrue(result);\n\t\t}\n}\n\n// DVD_Author.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\n/**\n * @author Shane Santner\n * This class creates the DVD file structure using dvd-author\n */\npublic class DVD_Author {\n\n    /**\n     * Creates a new instance of DVD_Author\n     */\n    public DVD_Author() {\n    }\n\n    /**\n     * DVD_Author Member Variables\n     */\n    private String m_dvdauthor = \"dvdauthor -o temp/DVD -t -v -c temp/DVD/dvd.xml\";\n\n    private String m_BaseErr = \"DVD_Author Error - \";\n\n    /**\n     * Create the DVD file structure using dvd-author\n     * @param   DVD_GUI    This is the GUI object used to control the form\n     * return   A boolean to determine if an error occurred in the function\n     */\n    public boolean CreateDVD(GUI DVD_GUI) {\n        /* Update dvd-author command with the correct paths */\n        m_dvdauthor = m_dvdauthor.replaceAll(\"temp\", DVD_GUI.strOutputDir);\n        try {\n            /* Create the dvd-author process */\n            Process p = Runtime.getRuntime().exec(m_dvdauthor);\n            /* Instantiate input and output readers for dvd-author streams */\n            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n            BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n            BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + \"/log/dvd-author.log\"));\n            BufferedWriter err_out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + \"/log/dvd-author.err\"));\n            String line;\n            /* We will miss the error without this delay */\n            Thread.sleep(50);\n            /* \n             * Check for the case where the necessary dependencies are not\n             * installed, but the user tries to run dvd-homevideo anyway\n             */\n            if (err_in.ready()) {\n                line = err_in.",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1586,
        "completion_tokens": 2000,
        "total_tokens": 3586
    },
    "time_taken": 56.79457879066467,
    "prompt_id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Burn.java",
    "original_code": "// Burn.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\n/**\n * @author Shane Santner\n * This class burns the DVD file structure previously created by\n * dvd-author to a DVD disc.\n */\npublic class Burn {\n\n    /**\n     * Creates a new instance of Burn\n     */\n    public Burn() {\n    }\n\n    /**\n     * Creates a new instance of Burn\n     * @param   burnToDVD   boolean value used to determine whether or not to burn to a DVD\n     *                      when dvd-homevideo completes\n     */\n    public Burn(boolean burnToDVD) {\n        m_Burn = burnToDVD;\n    }\n\n    /**\n     * Burn Member Variables\n     */\n    private boolean m_Burn;\n\n    private String m_growisofs = \"growisofs -speed=4 -Z /dev/dvd -dvd-video temp/DVD/\";\n\n    private String m_BaseErr = \"Burn Error - \";\n\n    /**\n     * Optionally burn to DVD when complete and no errors, uses growisofs\n     * @param   DVD_GUI    This is the GUI object used to control the form\n     * return   A boolean to determine if an error occurred in the function\n     */\n    public boolean BurnToDVD(GUI DVD_GUI) {\n        /* Update growisofs command with the correct paths */\n        m_growisofs = m_growisofs.replaceAll(\"temp\", DVD_GUI.strOutputDir);\n        /* \n         * Burn object always gets created, so m_Burn will not always be true,\n         * must be checked. \n         */\n        if (m_Burn == true) {\n            try {\n                /* Create the growisofs process which actually burns the DVD */\n                Process p = Runtime.getRuntime().exec(m_growisofs);\n                /* Instantiate input and output readers for dvd-author streams */\n                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n                BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n                BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + \"/log/burn.log\"));\n                BufferedWriter err_out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + \"/log/burn.err\"));\n                String line;\n                /* We will miss the error without this delay */\n                Thread.sleep(50);\n                /* \n                 * Check for the case where the necessary dependencies are not\n                 * installed, but the user tries to run dvd-homevideo anyway\n                 */\n                if (err_in.ready()) {\n                    line = err_in.readLine();\n                    if (line.equals(\"/bin/sh: growisofs: command not found\")) {\n                        DVD_GUI.MessageBox(\"Could not locate growisofs in your path.\" + \"\\nPlease install all necessary dependencies\" + \"\\nand rerun dvd-homevideo.\", 0);\n                        /* Close all open streams */\n                        in.close();\n                        out.close();\n                        err_in.close();\n                        err_out.close();\n                        /* Indicate that there was an error */\n                        return true;\n                    } else {\n                        DVD_GUI.txtAreaOutput.append(line + \"\\n\");\n                        out.write(line);\n                        out.newLine();\n                    }\n                }\n                out.write(\"burn.log--->dvd-homevideo\");\n                out.newLine();\n                /* Write the output to the txtAreaOutput user display */\n                while ((line = in.readLine()) != null) {\n                    DVD_GUI.txtAreaOutput.append(line + \"\\n\");\n                    out.write(line);\n                    out.newLine();\n                }\n                /*\n                 * close() throws an IOException\n                 */\n                in.close();\n                out.close();\n                err_in.close();\n                err_out.close();\n                /*\n                 * p.waitFor() throws an InterruptedException\n                 */\n                p.waitFor();\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (InterruptedException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"dvd-homevideo thread was interrupted\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (NullPointerException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"Error executing Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (IllegalArgumentException ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"Illegal argument sent to Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            } catch (Exception ex) {\n                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);\n                DVD_GUI.MessageBox(m_BaseErr + \"Unknown Error occurred\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                return true;\n            }\n        }\n        if (m_Burn)\n            return DVD_GUI.ErrorCheck(DVD_GUI.strOutputDir + \"/log/burn.log\");\n        return false;\n    }\n}\n",
    "test_prompt": "// BurnTest.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Burn}.\n* It contains ten unit test cases for the {@link Burn#BurnToDVD(GUI)} method.\n*/\nclass BurnTest {"
},
{
    "id": "cmpl-6wSymHUc2Ujc9uHMgvfc7SvJrmBYo",
    "object": "text_completion",
    "created": 1679392440,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t* Test case for {@link Capture#init()} method.\n\t\t* This test case checks if the {@link Capture#init()} method returns true when the {@link GUI#menuChkThread} is selected.\n\t\t*/\n\t\t@Test\n\t\tvoid testInit_1() {\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tCapture capture = new Capture(0, 0, DVD_GUI);\n\t\t\t\tDVD_GUI.menuChkThread.setSelected(true);\n\t\t\t\tassertTrue(capture.init());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Capture#init()} method.\n\t\t* This test case checks if the {@link Capture#init()} method returns false when the {@link GUI#menuChkThread} is not selected.\n\t\t*/\n\t\t@Test\n\t\tvoid testInit_2() {\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tCapture capture = new Capture(0, 0, DVD_GUI);\n\t\t\t\tDVD_GUI.menuChkThread.setSelected(false);\n\t\t\t\tassertFalse(capture.init());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Capture#init()} method.\n\t\t* This test case checks if the {@link Capture#init()} method returns true when the {@link GUI#menuChkThread} is selected and the {@link GUI#ErrorCheck(String)} method returns true.\n\t\t*/\n\t\t@Test\n\t\tvoid testInit_3() {\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tCapture capture = new Capture(0, 0, DVD_GUI);\n\t\t\t\tDVD_GUI.menuChkThread.setSelected(true);\n\t\t\t\tassertTrue(capture.init());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Capture#init()} method.\n\t\t* This test case checks if the {@link Capture#init()} method returns false when the {@link GUI#menuChkThread} is not selected and the {@link GUI#ErrorCheck(String)} method returns true.\n\t\t*/\n\t\t@Test\n\t\tvoid testInit_4() {\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tCapture capture = new Capture(0, 0, DVD_GUI);\n\t\t\t\tDVD_GUI.menuChkThread.setSelected(false);\n\t\t\t\tassertFalse(capture.init());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Capture#init()} method.\n\t\t* This test case checks if the {@link Capture#init()} method returns true when the {@link GUI#menuChkThread} is selected and the {@link GUI#ErrorCheck(String)} method returns false.\n\t\t*/\n\t\t@Test\n\t\tvoid testInit_5() {\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tCapture capture = new Capture(0, 0, DVD_GUI);\n\t\t\t\tDVD_GUI.menuChkThread.setSelected(true);\n\t\t\t\tassertTrue(capture.init());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Capture#init()} method.\n\t\t* This test case checks if the {@link Capture#init()} method returns false when the {@link GUI#menuChkThread} is not selected and the {@link GUI#ErrorCheck(String)} method returns false.\n\t\t*/\n\t\t@Test\n\t\tvoid testInit_6() {\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tCapture capture = new Capture(0, 0, DVD_GUI);\n\t\t\t\tDVD_GUI.menuChkThread.setSelected(false);\n\t\t\t\tassertFalse(capture.init());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Capture#init()} method.\n\t\t* This test case checks if the {@link Capture#init()} method returns true when the {@link GUI#menuChkThread} is selected and the {@link GUI#ErrorCheck(String)} method returns true and the {@link Capture#m_Error} is true.\n\t\t*/\n\t\t@Test\n\t\tvoid testInit_7() {\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tCapture capture = new Capture(0, 0, DVD_GUI);\n\t\t\t\tDVD_GUI.menuChkThread.setSelected(true);\n\t\t\t\tcapture.m_Error = true;\n\t\t\t\tassertTrue(capture.init());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Capture#init()} method.\n\t\t* This test case checks if the {@link Capture#init()} method returns false when the {@link GUI#menuChkThread} is not selected and the {@link GUI#ErrorCheck(String)} method returns true and the {@link Capture#m_Error} is true.\n\t\t*/\n\t\t@Test\n\t\tvoid testInit_8() {\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tCapture capture = new Capture(0, 0, DVD_GUI);\n\t\t\t\tDVD_GUI.menuChkThread.setSelected(false);\n\t\t\t\tcapture.m_Error = true;\n\t\t\t\tassertFalse(capture.init());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Capture#init()} method.\n\t\t* This test case checks if the {@link Capture#init()} method returns true when the {@link GUI#menuChkThread} is selected and the {@link GUI#ErrorCheck(String)} method returns false and the {@link Capture#m_Error} is true.\n\t\t*/\n\t\t@Test\n\t\tvoid testInit_9() {\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tCapture capture = new Capture(0, 0, DVD_GUI);\n\t\t\t\tDVD_GUI.menuChkThread.setSelected(true);\n\t\t\t\tcapture.m_Error = true;\n\t\t\t\tassertTrue(capture.init());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link Capture#init()} method.\n\t\t* This test case checks if the {@link Capture#init()} method returns false when the {@link GUI#menuChkThread} is not selected and the {@link GUI#ErrorCheck(String)} method returns false and the {@link Capture#m_Error} is true.\n\t\t*/\n\t\t@Test\n\t\tvoid testInit_10() {\n\t\t\t\tGUI DVD_GUI = new GUI();\n\t\t\t\tCapture capture = new Capture(0, 0, DVD_GUI);\n\t\t\t\tDVD_GUI.menuChkThread.setSelected(false);\n\t\t\t\tcapture.m_Error = true;\n\t\t\t\tassertFalse(capture.init());\n\t\t}\n}\n\n// DVD_HomeVideo.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.StringTokenizer;\nimport javax.swing.JOptionPane;\n\n/**\n * @author Shane Santner\n * The DVD_HomeVideo class is the main class of the program.  It\n * instantiates the GUI and handles the user input.\n */\npublic class DVD_HomeVideo {\n\n    /**\n     * Creates a default instance of DVD_HomeVideo\n     */\n    public DVD_HomeVideo() {\n    }\n\n    /**\n     * Creates a new instance of DVD_HomeVideo\n     * @param   args    The command line arguments\n     */\n    public DVD_HomeVideo(String[] args) {\n        m_Args = args;\n    }\n\n    /**\n     * DVD_HomeVideo Member Variables\n     */\n    private String[] m_Args;\n\n    private GUI m_GUI;\n\n    private Capture m_Capture;\n\n    private boolean m_Error;\n\n    private String",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 3664,
        "completion_tokens": 2000,
        "total_tokens": 5664
    },
    "time_taken": 62.138328552246094,
    "prompt_id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Capture.java",
    "original_code": "// Capture.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.StringTokenizer;\nimport javax.swing.JOptionPane;\n\n/**\n * @author Shane Santner\n * The Capture class utilizes dvgrab to capture audio and video\n * data from a dv camcorder.  It captures for the amount of time\n * specified by the user.\n *\n * TODO - Is there a way to get the camcorder time from dvgrab?\n *        This would be a more accurate way of determining when\n *        to stop the camcorder.  Also need to handle input, output\n *        and error streams more appropriatly.\n */\npublic class Capture implements Runnable {\n\n    /**\n     * Creates a default instance of Capture\n     */\n    public Capture() {\n    }\n\n    /**\n     * Creates a new instance of Capture\n     * @param   min         The amount of time in minutes to capture audio/video\n     * @param   sec         The amount of time in seconds to capture audio/video\n     * @param   DVD_GUI     This is the GUI object used to control the form\n     */\n    public Capture(int min, int sec, GUI DVD_GUI) {\n        m_Minutes = min;\n        m_Seconds = sec;\n        m_GUI = DVD_GUI;\n    }\n\n    /**\n     * Capture Member Variables\n     */\n    private int m_Minutes;\n\n    private int m_Seconds;\n\n    private GUI m_GUI;\n\n    private Thread m_Thread;\n\n    private boolean m_Error;\n\n    private String m_BaseErr = \"Capture Error - \";\n\n    private String m_dvgrab = \"dvgrab --autosplit --size 0 --format raw --opendml\" + \" --buffers 200 dv/dv_file-\";\n\n    /**\n     * Used to instantiate a new thread and to perform error checking.\n     * @return  A boolean to determine if an error occurred in the function\n     */\n    public boolean init() {\n        if (m_GUI.menuChkThread.isSelected()) {\n            /* Create and start the new thread */\n            m_Thread = new Thread(this);\n            /* Increase priority so we don't drop frames */\n            m_Thread.setPriority(10);\n            m_Thread.start();\n            /* Need to fix this */\n            return false;\n        } else {\n            DV_Capture();\n            return (m_Error | m_GUI.ErrorCheck(m_GUI.strOutputDir + \"/log/dvgrab.log\"));\n        }\n        /* \n         * If an error occurred while executing DV_Capture then m_Error will be set\n         * to true.  Also check the log file for any evidence of an error.\n         */\n    }\n\n    /**\n     * Implements the run() method of the Runnable interface.  Makes multi-threading\n     * possible.\n     */\n    public void run() {\n        DV_Capture();\n    }\n\n    /**\n     * Captures audio and video from a dv camcorder by calling dvgrab\n     */\n    public void DV_Capture() {\n        /* local variables */\n        long start, current, end;\n        int diff, total;\n        /* Create output directory */\n        File CreateOutDir = new File(m_GUI.strOutputDir);\n        /* \n         * Check and see if the directory already exists.\n         * Give the user an option to delete the directory\n         * and procede.\n         */\n        if (CreateOutDir.exists() && CreateOutDir.isDirectory()) {\n            int response = m_GUI.MessageBox(\"The Output Directory \" + m_GUI.strOutputDir + \" already exists!\" + \"\\nWould you like to delete it?\");\n            if (response == JOptionPane.YES_OPTION) {\n                try {\n                    /* Put all of the necessary parameters into a String array */\n                    String rm = \"rm -fr \" + m_GUI.strOutputDir;\n                    String[] rm_cmd = { \"/bin/sh\", \"-c\", rm };\n                    /* Execute the rm utility to recursively delete the directory */\n                    Process remove_dir = Runtime.getRuntime().exec(rm_cmd, null);\n                    remove_dir.waitFor();\n                } catch (IOException ex) {\n                    SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                    m_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n                    ex.printStackTrace();\n                } catch (InterruptedException ex) {\n                    SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                    m_GUI.MessageBox(m_BaseErr + \"dvd-homevideo thread was interrupted\\n\" + ex.toString(), 0);\n                    ex.printStackTrace();\n                }\n            } else {\n                m_GUI.MessageBox(\"Please choose a different name for your\" + \"\\ntitle or move the directory to another location.\", JOptionPane.WARNING_MESSAGE);\n                m_GUI.blnBegin = false;\n                m_Error = true;\n            }\n        } else /* \n         * Check and see if a file with that name already exists.\n         * Give the user an option to delete the directory\n         * and procede.\n         */\n        if (CreateOutDir.exists() && !CreateOutDir.isDirectory()) {\n            int response = m_GUI.MessageBox(\"There exists a file with the Output directory name\" + \"\\nat this location!  Would you like to delete it?\");\n            if (response == JOptionPane.YES_OPTION) {\n                try {\n                    /* Put all of the necessary parameters into a String array */\n                    String rm = \"rm -fr \" + m_GUI.strOutputDir;\n                    String[] rm_cmd = { \"/bin/sh\", \"-c\", rm };\n                    /* Execute the rm utility to recursively delete the directory */\n                    Process remove_dir = Runtime.getRuntime().exec(rm_cmd, null);\n                    remove_dir.waitFor();\n                } catch (IOException ex) {\n                    SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                    m_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n                    ex.printStackTrace();\n                } catch (InterruptedException ex) {\n                    SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                    m_GUI.MessageBox(m_BaseErr + \"dvd-homevideo thread was interrupted\\n\" + ex.toString(), 0);\n                    ex.printStackTrace();\n                }\n            } else {\n                m_GUI.MessageBox(\"Please choose a different name for your\" + \"\\ntitle or move the file to another location.\", JOptionPane.WARNING_MESSAGE);\n                m_GUI.blnBegin = false;\n            }\n        }\n        /* If blnBegin is still true, then continue */\n        if (m_GUI.blnBegin == true) {\n            CreateOutDir.mkdir();\n            CreateOutDir = new File(m_GUI.strOutputDir + \"/DVD\");\n            CreateOutDir.mkdir();\n            CreateOutDir = new File(m_GUI.strOutputDir + \"/log\");\n            CreateOutDir.mkdir();\n            CreateOutDir = new File(m_GUI.strOutputDir + \"/dv\");\n            CreateOutDir.mkdir();\n            try {\n                /* Put all of the necessary parameters into a String array */\n                String[] dvgrab_cmd = { \"/bin/sh\", \"-c\", m_dvgrab };\n                /* Execute the dvgrab program to capture video from the camcorder */\n                Process p = Runtime.getRuntime().exec(dvgrab_cmd, null, new File(m_GUI.strOutputDir));\n                /* Create an input reader, an error reader and an output writer */\n                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n                BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n                BufferedWriter out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + \"/log/dvgrab.log\"));\n                BufferedWriter err_out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + \"/log/dvgrab.err\"));\n                String line;\n                /* \n                 * Check for the case where the necessary dependencies are not\n                 * installed, but the user tries to run dvd-homevideo anyway\n                 */\n                if (err_in.ready()) {\n                    line = err_in.readLine();\n                    if (line.equals(\"/bin/sh: dvgrab: command not found\")) {\n                        m_GUI.MessageBox(\"Could not locate dvgrab in your path.\" + \"\\nPlease install all necessary dependencies\" + \"\\nand rerun dvd-homevideo.\", 0);\n                        /* Close all open streams */\n                        in.close();\n                        out.close();\n                        err_in.close();\n                        err_out.close();\n                        /* Indicate that there was an error */\n                        m_Error = true;\n                    } else {\n                        m_GUI.txtAreaOutput.append(line + \"\\n\");\n                        out.write(line);\n                        out.newLine();\n                    }\n                }\n                /* Set the GUI feedback widgets to enabled */\n                m_GUI.lblCapture.setEnabled(true);\n                m_GUI.prgCapture.setEnabled(true);\n                m_GUI.lblCaptureProg.setEnabled(true);\n                /* Do some time calculations - this will be used for the progress bar*/\n                start = System.currentTimeMillis();\n                total = m_Minutes * 60 * 1000 + m_Seconds * 1000 + 5000;\n                end = start + total;\n                current = System.currentTimeMillis();\n                diff = (int) (current - start);\n                int track = 0;\n                //String line;\n                /* Stay in the while loop until we have reached the user specified amount of time */\n                while ((diff / total) < 1) {\n                    /* Do some GUI stuff */\n                    m_GUI.prgCapture.setValue((int) (((double) (diff) / total) * 100));\n                    m_GUI.lblCaptureProg.setText(Integer.toString(((int) (((double) (diff) / total) * 100))) + \"%\");\n                    current = System.currentTimeMillis();\n                    diff = (int) (current - start);\n                    line = in.readLine();\n                    /* I don't know why but this is critical!!!!! */\n                    /* Check for anything written to the error stream */\n                    if (err_in.ready()) {\n                        line = err_in.readLine();\n                        /* Look for this specific error code - indicates that the cable is not connected/loose */\n                        if (line.equals(\"Error: no camera exists\")) {\n                            /* Give feedback to the user */\n                            m_GUI.MessageBox(\"It appears that your camcorder is not \" + \"connected to your computer!\", 0);\n                            /* Put all of the necessary parameters into a String array */\n                            String rm = \"rm -fr \" + m_GUI.strOutputDir;\n                            String[] rm_cmd = { \"/bin/sh\", \"-c\", rm };\n                            /* Execute the rm utility to recursively delete the directory */\n                            Process remove_dir = Runtime.getRuntime().exec(rm_cmd, null);\n                            remove_dir.waitFor();\n                            /* Close all open streams */\n                            in.close();\n                            out.close();\n                            err_in.close();\n                            err_out.close();\n                            /* Indicate that there was an error */\n                            m_Error = true;\n                        }\n                        /* Output information to the GUI text box */\n                        m_GUI.txtAreaOutput.append(line + \"\\n\");\n                        m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());\n                        out.write(line);\n                        out.newLine();\n                    }\n                }\n                /* \n                 * close() throws an IOException\n                 */\n                in.close();\n                out.close();\n                err_in.close();\n                err_out.close();\n                /* kill dvgrab process */\n                /* Since this now runs as a thread do I need to modify this? */\n                p.destroy();\n                /* Final GUI stuff */\n                m_GUI.prgCapture.setValue(100);\n                m_GUI.prgCapture.setValue(100);\n                m_GUI.lblCaptureProg.setText(\"100%\");\n                m_GUI.prgCapture.setEnabled(false);\n                m_GUI.lblCapture.setEnabled(false);\n                m_GUI.lblCaptureProg.setEnabled(false);\n                /* Put in a slight delay to ensure dvgrab.log closes */\n                Thread.sleep(2000);\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            } catch (NullPointerException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"Error executing Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            } catch (IllegalArgumentException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"Illegal argument sent to Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            } catch (Exception ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"Unknown Error occurred\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            }\n        }\n    }\n}\n",
    "test_prompt": "// CaptureTest.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.StringTokenizer;\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Capture}.\n* It contains ten unit test cases for the {@link Capture#init()} method.\n*/\nclass CaptureTest {"
},
{
    "choices": [
        {
            "finish_reason": "ERROR - This model's maximum context length is 8001 tokens, however you requested 8237 tokens (6237 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.",
            "text": ""
        }
    ],
    "id": "c3ffadd9-0d13-4f6c-81a6-6dfd4ff3a2e0",
    "prompt_id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Convert.java",
    "original_code": "// Convert.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.StringIndexOutOfBoundsException;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class is used to transcode the video captured\n * from the digital camcorder into mpeg4, the DVD compatible\n * format.  It explicitly calls the transcode command\n * after meticulously preparing the options that can be passed\n * to transcode.\n *\n * TODO - Break mplex out into its own class.\n *        Figure out how to calculate remaining time even if\n *        video was not captured from the camcorder during the\n *        current session.\n *        Need to handle input, output and error streams\n *        more appropriatly.\n */\npublic class Convert implements Runnable {\n\n    /**\n     * Creates a new instance of Convert based on the video\n     * format and aspect ratio specified.\n     * @param   format      This specifies either PAL or NTSC\n     * @param   aspectRatio This can be either 4:3 or 16:9\n     * @param   DVD_GUI     This is the GUI object used to control the form\n     */\n    public Convert(String format, String aspectRatio, GUI DVD_GUI) {\n        if (format.equals(\"dvd-ntsc\"))\n            m_fps = 29.97;\n        else\n            m_fps = 25;\n        m_GUI = DVD_GUI;\n        m_Format = format;\n        m_AspectRatio = aspectRatio;\n        thread_track = 0;\n    }\n\n    /**\n     * Overloaded Constructor - accounts for quality being selected\n     * @param   quality     The quality of the video compression\n     * @param   format      This specifies either PAL or NTSC\n     * @param   aspectRatio This can be either 4:3 or 16:9\n     * @param   DVD_GUI     This is the GUI object used to control the form\n     */\n    public Convert(int quality, String format, String aspectRatio, GUI DVD_GUI) {\n        if (format.equals(\"dvd-ntsc\"))\n            m_fps = 29.97;\n        else\n            m_fps = 25;\n        m_GUI = DVD_GUI;\n        m_Quality = quality;\n        m_Format = format;\n        m_AspectRatio = aspectRatio;\n        thread_track = 0;\n    }\n\n    /**\n     * Convert Member Variables\n     */\n    private int m_Quality;\n\n    private double m_fps;\n\n    private String m_Format;\n\n    private String m_AspectRatio;\n\n    private String m_flags;\n\n    private String m_bitrate = \"8500\";\n\n    protected String[] video_files;\n\n    private GUI m_GUI;\n\n    private Thread m_Thread;\n\n    private boolean m_Error;\n\n    private int thread_track;\n\n    private String m_BaseErr = \"Transcoding Error - \";\n\n    private String m_transcode = \"transcode -i dv/inp -m test1.ac3 -o test1 -w bitr -x dv,dv\" + \" -F flags -y mpeg2enc,raw -N 0x2000 -b 256 --encode_fields b\" + \" -E 48000,16,2 -J resample\" + \" --export_prof format --export_fps frames/s --export_asr aspectRatio\" + \" -j 0,8,0,8 --print_status 30\";\n\n    /* -i                 input video/audio files from the camcorder\n       -m                 output .ac3 audio file\n       -o                 output .m2v (mpeg2) video file\n       -b                 audio bit rate - 256 should be sufficient\n       -w                 maximum bit rate (audio + video) ~8500 kbps\n       -x                 import module [video,audio]\n       -F                 parameters passed to mpeg2enc\n       -E                 audio output samplerate [Hz], bits per sample and channels\n       -y                 export module [video,audio] - mpeg2enc and ffmpeg are similar in quality,\n                                could use either\n       --export_prof      either dvd_ntsc or dvd_pal\n       --encode_fields    'b' means to encode bottom up - used for interlacing which is critical when\n                                watching the video on television\n       --export_asr       '2' gives an aspect ratio of 4:3 and '3' would give an aspect ratio of 16:9\n       --export_fps       either 29.97 for NTSC or 25 for PAL\n       --print_status     print the status of transcode every 30 frames ~1s for NTSC\n       -j 0,8,0,8         clip off 8 pixels from the left and right sides of the screen to fit\n                                the television screen correctly */\n    private String mplex = \"mplex -f 8 -V -o inp.vob inp.m2v inp.ac3\";\n\n    /* -f                 format - '8' equates to DVD\n       -V                 needed to multiplex variable bit-rate video streams correctly\n       -o                 output file created from the merged .m2v and .ac3 files */\n    /**\n     * Used to instantiate a new thread and to perform error checking.\n     * @return  A boolean to determine if an error occurred in the function\n     */\n    public boolean init() {\n        if (m_GUI.menuChkThread.isSelected()) {\n            m_Thread = new Thread(this);\n            m_Thread.start();\n            try {\n                m_Thread.join();\n            } catch (InterruptedException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"Could not join Convert.java thread\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            }\n        } else\n            Transcode();\n        /* \n         * Check transcode.log and mplex.log for any sign of an error.\n         * If either file contains an error then return an error.  Also\n         * check m_Error to see if it was set while executing the \n         * Transcode method.\n         */\n        return (m_Error || m_GUI.ErrorCheck(m_GUI.strOutputDir + \"/log/transcode.log\") || m_GUI.ErrorCheck(m_GUI.strOutputDir + \"/log/mplex.log\"));\n    }\n\n    /**\n     * Implements the run() method of the Runnable interface.  Makes multi-threading\n     * possible.\n     */\n    public void run() {\n        Transcode();\n    }\n\n    /**\n     * Encodes dv files to mpeg using transcode, then uses mplex to combine\n     * the .ac3 audio and .m2v video files into a DVD compatible .vob file\n     */\n    public void Transcode() {\n        /* \n         * Get a list of all of the .dv files captured from the camcorder \n         * and stored in the dv directory\n         */\n        File ListDir = new File(m_GUI.strOutputDir + \"/dv/\");\n        /* High quality, 80 min /DVD - slower encoding, classic MPEG2 */\n        if (m_Quality == 0)\n            m_flags = \"'8, -c -q 2 -4 1 -2 1 -H -K file=matrix.txt -R 2'\";\n        else /* High quality, 80 min DVD */\n        if (m_Quality == 1)\n            m_flags = \"'8, -c -q 4 -4 2 -2 2 -K file=matrix.txt -R 1'\";\n        else\n            /* OK quality, 120 min DVD -  slower encoding, classic MPEG2 */\n            m_flags = \"'8, -c -q 6 -4 3 -2 3 -N 0.5 -E -10 -K tmpgenc -R 0'\";\n        /* Perform some String manipulation */\n        m_transcode = m_transcode.replaceAll(\"flags\", m_flags);\n        m_transcode = m_transcode.replaceAll(\"bitr\", m_bitrate);\n        m_transcode = m_transcode.replaceAll(\"format\", m_Format);\n        m_transcode = m_transcode.replaceAll(\"aspectRatio\", m_AspectRatio);\n        m_transcode = m_transcode.replaceAll(\"frames/s\", String.valueOf(m_fps));\n        /* \n         * Write out matrix.txt which is a quantization table passed to \n         * mpeg2enc from transcode\n         */\n        matrix();\n        /* Enable the GUI widgets for the conversion */\n        m_GUI.lblConvert.setEnabled(true);\n        m_GUI.prgConvert.setEnabled(true);\n        m_GUI.lblConvertProg.setEnabled(true);\n        /* \n         * Need to create doubles and ints to track the progess\n         * of transcode.  The idea is that if we know the total\n         * amount of capture time, and we also know the number of \n         * frames processed by transcode, then we can display a \n         * relatively accurate estimate of the amount of time left\n         * to transcode.  Since this is the most time consuming part\n         * of dvd-homevideo, I thought it was important.\n         */\n        double cummulative_time = 0;\n        double current_time = 0;\n        double[] average_fps = new double[5];\n        average_fps[4] = -1;\n        int hour, min, sec;\n        int total_time = (((Integer) m_GUI.spnMinutes.getValue()).intValue() * 60) + ((Integer) m_GUI.spnSeconds.getValue()).intValue();\n        StringTokenizer st, time;\n        while (thread_track < ListDir.list().length) {\n            video_files = ListDir.list();\n            try {\n                /* Insert the appropriate parameters into transcode */\n                if (thread_track == 0) {\n                    m_transcode = m_transcode.replaceAll(\"inp\", video_files[thread_track]);\n                    m_transcode = m_transcode.replaceAll(\"test1\", video_files[thread_track].substring(0, 11));\n                    mplex = mplex.replaceAll(\"inp\", video_files[thread_track].substring(0, 11));\n                } else {\n                    m_transcode = m_transcode.replaceAll(video_files[thread_track - 1], video_files[thread_track]);\n                    m_transcode = m_transcode.replaceAll(video_files[thread_track - 1].substring(0, 11), video_files[thread_track].substring(0, 11));\n                    mplex = mplex.replaceAll(video_files[thread_track - 1].substring(0, 11), video_files[thread_track].substring(0, 11));\n                }\n            } catch (StringIndexOutOfBoundsException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"Are there non-standard (not .dv)\" + \"\\nfiles in the dv directory?\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            }\n            try {\n                /* \n                 * transcode the .avi files from the camcorder into two separate \n                 * streams, one for audio and the other for video\n                 */\n                String[] transcode_cmd = { \"/bin/sh\", \"-c\", m_transcode };\n                Process p = Runtime.getRuntime().exec(transcode_cmd, null, new File(m_GUI.strOutputDir));\n                /* Create an input reader, an error reader and an output writer */\n                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n                BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n                BufferedWriter out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + \"/log/transcode.log\"));\n                BufferedWriter err_out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + \"/log/transcode.err\"));\n                /* Write out the actual transcode command to the log file */\n                out.write(m_transcode);\n                out.newLine();\n                String line;\n                /* \n                 * Check for the case where the necessary dependencies are not\n                 * installed, but the user tries to run dvd-homevideo anyway\n                 */\n                if (err_in.ready()) {\n                    line = err_in.readLine();\n                    if (line.equals(\"/bin/sh: transcode: command not found\")) {\n                        m_GUI.MessageBox(\"Could not locate transcode in your path.\" + \"\\nPlease install all necessary dependencies\" + \"\\nand rerun dvd-homevideo.\", 0);\n                        /* Close all open streams */\n                        in.close();\n                        out.close();\n                        err_in.close();\n                        err_out.close();\n                        /* Indicate that there was an error */\n                        m_Error = true;\n                    } else {\n                        m_GUI.txtAreaOutput.append(line + \"\\n\");\n                        out.write(line);\n                        out.newLine();\n                    }\n                }\n                int k = 0;\n                while ((line = in.readLine()) != null) {\n                    st = new StringTokenizer(line);\n                    if (st.hasMoreTokens()) {\n                        if (st.nextToken().equals(\"encoding\")) {\n                            st.nextToken();\n                            st.nextToken();\n                            average_fps[k % 5] = Double.valueOf(st.nextToken()).doubleValue();\n                            st.nextToken();\n                            st.nextToken();\n                            time = new StringTokenizer(st.nextToken(), \":,\");\n                            if (time.hasMoreTokens()) {\n                                /* Calculate the estimated time left for transcode */\n                                hour = Integer.valueOf(time.nextToken()).intValue();\n                                min = Integer.valueOf(time.nextToken()).intValue();\n                                sec = Integer.valueOf(time.nextToken()).intValue();\n                                current_time = (hour * 3600) + (min * 60) + sec + cummulative_time;\n                                m_GUI.prgConvert.setValue((int) ((current_time / total_time) * 100));\n                                m_GUI.lblConvertProg.setText(String.valueOf((int) ((current_time / total_time) * 100)) + \"%\");\n                                /*\n                                 * Display to the user an approximation of the conversion time\n                                 * left on the prgConvert progress bar using the tool tip (on mouse hover)\n                                 */\n                                double fps_sum = 0;\n                                int time_remaining;\n                                /* If the array has been filled... */\n                                if (average_fps[4] != -1) {\n                                    for (int j = 0; j < 5; j++) {\n                                        fps_sum += average_fps[j];\n                                    }\n                                    /* Average the fps readings from transcode */\n                                    fps_sum /= 5;\n                                    /* Added (int)m_fps to account for PAL (25 fps) and NTSC (29.97 fps) */\n                                    time_remaining = (int) (((total_time - current_time) * (int) m_fps) / fps_sum);\n                                    int captureTipHour = (time_remaining / 3600);\n                                    int captureTipMinute = (time_remaining - 3600 * captureTipHour) / 60;\n                                    if ((captureTipHour == 0) && (captureTipMinute < 5))\n                                        m_GUI.prgConvert.setToolTipText(\"Less than 5 minutes remaining\");\n                                    else if (captureTipMinute < 10)\n                                        m_GUI.prgConvert.setToolTipText(captureTipHour + \":0\" + captureTipMinute + \" Remaining\");\n                                    else\n                                        m_GUI.prgConvert.setToolTipText(captureTipHour + \":\" + captureTipMinute + \" Remaining\");\n                                }\n                                m_GUI.txtAreaOutput.append(line + \"\\n\");\n                                m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());\n                                out.write(line);\n                                out.newLine();\n                            } else {\n                                m_GUI.txtAreaOutput.append(line + \"\\n\");\n                                m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());\n                                out.write(line);\n                                out.newLine();\n                            }\n                            k++;\n                        }\n                    }\n                }\n                while ((line = err_in.readLine()) != null) {\n                    m_GUI.txtAreaOutput.append(line + \"\\n\");\n                    m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());\n                    out.write(line);\n                    out.newLine();\n                }\n                /* Close all open streams */\n                in.close();\n                out.close();\n                err_in.close();\n                err_out.close();\n                /*\n                 * p.waitFor() throws an InterruptedException\n                 */\n                /* This now runs as a thread...need to fix this */\n                //p.waitFor();\n                /* Timekeeping */\n                cummulative_time = current_time;\n                /**\n                 * ****************************************************\n                 *  This is the separation between transcode and mplex. *\n                 *  Need to break this out into a separate class.       *\n                 * *****************************************************\n                 */\n                /* \n                 * Combine the separate streams together into a .vob (DVD) file \n                 */\n                String[] mplex_cmd = { \"/bin/sh\", \"-c\", mplex };\n                p = Runtime.getRuntime().exec(mplex_cmd, null, new File(m_GUI.strOutputDir));\n                /* Create an input reader, an error reader and an output writer */\n                in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n                err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n                out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + \"/log/mplex.log\"));\n                err_out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + \"/log/mplex.err\"));\n                /* \n                 * Check for the case where the necessary dependencies are not\n                 * installed, but the user tries to run dvd-homevideo anyway\n                 */\n                if (err_in.ready()) {\n                    line = err_in.readLine();\n                    if (line.equals(\"/bin/sh: mplex: command not found\")) {\n                        m_GUI.MessageBox(\"Could not locate mplex in your path.\" + \"\\nPlease install all necessary dependencies\" + \"\\nand rerun dvd-homevideo.\", 0);\n                        /* Close all open streams */\n                        in.close();\n                        out.close();\n                        err_in.close();\n                        err_out.close();\n                        /* Indicate that there was an error */\n                        m_Error = true;\n                    } else {\n                        m_GUI.txtAreaOutput.append(line + \"\\n\");\n                        out.write(line);\n                        out.newLine();\n                    }\n                }\n                while ((line = err_in.readLine()) != null) {\n                    m_GUI.txtAreaOutput.append(line + \"\\n\");\n                    m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());\n                    out.write(line);\n                    out.newLine();\n                }\n                /* Close all open streams */\n                in.close();\n                out.close();\n                err_in.close();\n                err_out.close();\n                /*\n                 * p.waitFor() throws an InterruptedException\n                 */\n                /* This now runs as a thread...need to fix this */\n                //p.waitFor();\n                /* Put in a slight delay to ensure transcode.log and mplex.log closes */\n                Thread.sleep(2000);\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            }//            catch(InterruptedException ex)\n            //            {\n            //                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n            //                m_GUI.MessageBox(m_BaseErr + \"dvd-homevideo thread was interrupted\\n\" + ex.toString(), 0);\n            //                ex.printStackTrace();\n            //                m_Error = true;\n            //            }\n             catch (NullPointerException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"Error executing Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            } catch (IllegalArgumentException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"Illegal argument sent to Runtime.getRuntime().exec()\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            } catch (Exception ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(m_BaseErr + \"Unknown Error occurred\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            }\n            thread_track++;\n        }\n        /* Disable GUI widgets for the conversion */\n        m_GUI.prgConvert.setValue(100);\n        m_GUI.lblConvertProg.setText(\"100%\");\n        m_GUI.prgConvert.setEnabled(false);\n        m_GUI.lblConvert.setEnabled(false);\n        m_GUI.lblConvertProg.setEnabled(false);\n    }\n\n    /**\n     * Outputs a text file to be used by mpeg2enc for encoding\n     * @param   m_GUI This is the GUI object used to control the form\n     */\n    public void matrix() {\n        try {\n            FileWriter fw = new FileWriter(m_GUI.strOutputDir + \"/\" + \"matrix.txt\");\n            BufferedWriter wr = new BufferedWriter(fw);\n            wr.write(\"# High resolution INTRA table\\n\");\n            wr.write(\"8,16,18,20,24,25,26,30\\n\");\n            wr.write(\"16,16,20,23,25,26,30,30\\n\");\n            wr.write(\"18,20,22,24,26,28,29,31\\n\");\n            wr.write(\"20,21,23,24,26,28,31,31\\n\");\n            wr.write(\"21,23,24,25,28,30,30,33\\n\");\n            wr.write(\"23,24,25,28,30,30,33,36\\n\");\n            wr.write(\"24,25,26,29,29,31,34,38\\n\");\n            wr.write(\"25,26,28,29,31,34,38,42\\n\");\n            wr.write(\"# TMPEGEnc NON-INTRA table\\n\");\n            wr.write(\"16,17,18,19,20,21,22,23\\n\");\n            wr.write(\"17,18,19,20,21,22,23,24\\n\");\n            wr.write(\"18,19,20,21,22,23,24,25\\n\");\n            wr.write(\"19,20,21,22,23,24,26,27\\n\");\n            wr.write(\"20,21,22,23,25,26,27,28\\n\");\n            wr.write(\"21,22,23,24,26,27,28,30\\n\");\n            wr.write(\"22,23,24,26,27,28,30,31\\n\");\n            wr.write(\"23,24,25,27,28,30,31,33\\n\");\n            wr.close();\n            fw.close();\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n            m_GUI.MessageBox(m_BaseErr + \"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            System.exit(1);\n        }\n    }\n}\n",
    "test_prompt": "// ConvertTest.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.StringIndexOutOfBoundsException;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Convert}.\n* It contains ten unit test cases for the {@link Convert#init()} method.\n*/\nclass ConvertTest {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - This model's maximum context length is 8001 tokens, however you requested 29977 tokens (27977 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.",
            "text": ""
        }
    ],
    "id": "1f8d5b37-c346-4caa-bdb5-4585859e3f18",
    "prompt_id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_0Test.java",
    "original_code": "// GUI.java\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\n\n/**\n * @author  Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /* \n     * Creates a new form, probably the most compilcated - or\n     * messiest constructor I have ever developed.\n     */\n    public GUI() {\n        /*\n         * initComponents is a netbeans generated method that does\n         * all of the GUI stuff for dvd-homevideo.\n         */\n        initComponents();\n        /* \n         * Sets the maximum allowable values for the minutes\n         * and seconds Spinners.\n         */\n        spnSeconds.setModel(spnSecondsSize);\n        spnMinutes.setModel(spnMinutesSize);\n        /* First do a check for the required programs */\n        if (!checkForProg(DependentPrograms))\n            MessageBox(\"You do not appear to have the necessary\\n\" + \"programs installed for dvd-homevideo to operate\\n\" + \"correctly.  Please check the README file for the\\n\" + \"list of dependencies.  dvd-homevideo will not\\n\" + \"function correctly until all dependencies are installed!\", 1);\n        /* Now check for the required ieee1394 module */\n        if (!checkForModules())\n            MessageBox(\"You do not have the correct modules loaded\\n\" + \"for dvd-homevideo to function properly.  Please\\n\" + \"check the README file for further instructions!\", 1);\n        if (getJMenuBar() != null)\n            (this.getJMenuBar()).setOpaque(false);\n        /* \n         * Create Project directory.  This is where (~/.dvd-homevideo) the \n         * .xml files for each session get stored as well as user preferences.\n         */\n        File ProjectDir = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo\");\n        if (!ProjectDir.exists()) {\n            MessageBox(\"All projects will be automatically saved to: \" + System.getProperty(\"user.home\") + \"/.dvd-homevideo/\", 1);\n            ProjectDir.mkdir();\n        }\n        File ProjProperties = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo/properties\");\n        if (!ProjProperties.exists()) {\n            try {\n                BufferedWriter projProp = new BufferedWriter(new FileWriter(ProjProperties));\n                projProp.close();\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(strOutputDir, ex);\n                MessageBox(\"IO Error writing to properties file...in GUI.java\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n            }\n        }\n        /* If the user has specified individual customization, then read it */\n        ReadProjProperties();\n    }\n\n    /* End of constructor */\n    javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(\"/logo_32x32.png\"));\n\n    protected String strOutputDir;\n\n    protected boolean blnBegin;\n\n    /* My list of dependent programs for dvd-homevideo */\n    protected String[] DependentPrograms = { \"dvgrab\", \"transcode\", \"mplex\", \"dvd-menu\", \"dvdauthor\", \"growisofs\", \"ffmpeg\", \"lame\", \"sox\" };\n\n    /**\n     * This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\n    private void initComponents() {\n        grpQuality = new javax.swing.ButtonGroup();\n        fcOpen = new javax.swing.JFileChooser();\n        grpFormat = new javax.swing.ButtonGroup();\n        grpAspectRatio = new javax.swing.ButtonGroup();\n        fcMenuOpen = new javax.swing.JFileChooser();\n        grpMenuFormat = new javax.swing.ButtonGroup();\n        grpMenuAspectRatio = new javax.swing.ButtonGroup();\n        grpMenuMode = new javax.swing.ButtonGroup();\n        grpMenuIgnore = new javax.swing.ButtonGroup();\n        pnlGUI = new javax.swing.JPanel();\n        lblMinutes = new javax.swing.JLabel();\n        spnMinutes = new javax.swing.JSpinner();\n        lblSeconds = new javax.swing.JLabel();\n        spnSeconds = new javax.swing.JSpinner();\n        chkQuality = new javax.swing.JCheckBox();\n        rdSuper = new javax.swing.JRadioButton();\n        rdGood = new javax.swing.JRadioButton();\n        rdAverage = new javax.swing.JRadioButton();\n        btnStart = new javax.swing.JButton();\n        btnExit = new javax.swing.JButton();\n        chkMenu = new javax.swing.JCheckBox();\n        lblPicture = new javax.swing.JLabel();\n        txtPicture = new javax.swing.JTextField();\n        lblAudio = new javax.swing.JLabel();\n        txtAudio = new javax.swing.JTextField();\n        btnOpen_Picture = new javax.swing.JButton();\n        prgCapture = new javax.swing.JProgressBar();\n        prgConvert = new javax.swing.JProgressBar();\n        prgAuthor = new javax.swing.JProgressBar();\n        btnOpen_Audio = new javax.swing.JButton();\n        lblTextFile = new javax.swing.JLabel();\n        txtTextFile = new javax.swing.JTextField();\n        btnOpen_TextFile = new javax.swing.JButton();\n        txtOutputDir = new javax.swing.JTextField();\n        lblOutputDir = new javax.swing.JLabel();\n        txtTitle = new javax.swing.JTextField();\n        lblTitle = new javax.swing.JLabel();\n        btnOpen_OutputDir = new javax.swing.JButton();\n        chkBurn = new javax.swing.JCheckBox();\n        lblCaptureProg = new javax.swing.JLabel();\n        lblConvertProg = new javax.swing.JLabel();\n        lblAuthorProg = new javax.swing.JLabel();\n        lblCapture = new javax.swing.JLabel();\n        lblConvert = new javax.swing.JLabel();\n        lblAuthor = new javax.swing.JLabel();\n        sprCapConvert = new javax.swing.JSeparator();\n        sprMenuAuthor = new javax.swing.JSeparator();\n        spTextArea = new javax.swing.JScrollPane();\n        txtAreaOutput = new javax.swing.JTextArea();\n        rdNTSC = new javax.swing.JRadioButton();\n        rdPAL = new javax.swing.JRadioButton();\n        rd4_3 = new javax.swing.JRadioButton();\n        rd16_9 = new javax.swing.JRadioButton();\n        lblFormat = new javax.swing.JLabel();\n        lblAspectRatio = new javax.swing.JLabel();\n        sprAspectRatio = new javax.swing.JSeparator();\n        btnPlay = new javax.swing.JButton();\n        txtStatus = new javax.swing.JTextField();\n        menuBarMain = new javax.swing.JMenuBar();\n        menuFile = new javax.swing.JMenu();\n        menuOpen = new javax.swing.JMenuItem();\n        sprOpen = new javax.swing.JSeparator();\n        menuSave = new javax.swing.JMenuItem();\n        sprSave = new javax.swing.JSeparator();\n        menuExit = new javax.swing.JMenuItem();\n        menuTools = new javax.swing.JMenu();\n        menuRd_IgnoreNone = new javax.swing.JRadioButtonMenuItem();\n        menuRd_IgnoreCap = new javax.swing.JRadioButtonMenuItem();\n        menuRd_IgnoreCapConv = new javax.swing.JRadioButtonMenuItem();\n        menuRd_IgnoreCapConvMenu = new javax.swing.JRadioButtonMenuItem();\n        sprIgnore = new javax.swing.JSeparator();\n        menuProjProp = new javax.swing.JMenu();\n        menuRdNTSC = new javax.swing.JRadioButtonMenuItem();\n        menuRdPAL = new javax.swing.JRadioButtonMenuItem();\n        sprMenuFormatAspect = new javax.swing.JSeparator();\n        menuRd_4_3 = new javax.swing.JRadioButtonMenuItem();\n        menuRd_16_9 = new javax.swing.JRadioButtonMenuItem();\n        sprMenuThread = new javax.swing.JSeparator();\n        menuChkThread = new javax.swing.JCheckBoxMenuItem();\n        menuHelp = new javax.swing.JMenu();\n        menuInternet = new javax.swing.JMenuItem();\n        menuREADME = new javax.swing.JMenuItem();\n        menuBug = new javax.swing.JMenuItem();\n        menuAbout = new javax.swing.JMenuItem();\n        fcOpen.setName(\"fcOpen\");\n        getContentPane().setLayout(new java.awt.GridBagLayout());\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"dvd-homevideo\");\n        setIconImage(image.getImage());\n        setName(\"dvd-homevideo\");\n        setResizable(false);\n        pnlGUI.setLayout(null);\n        pnlGUI.setToolTipText(\"dvd-homevideo\");\n        pnlGUI.setMaximumSize(new java.awt.Dimension(510, 620));\n        pnlGUI.setMinimumSize(new java.awt.Dimension(510, 620));\n        pnlGUI.setName(\"pnlGUI\");\n        pnlGUI.setOpaque(false);\n        pnlGUI.setPreferredSize(new java.awt.Dimension(510, 620));\n        lblMinutes.setText(\"Capture Time in Minutes\");\n        lblMinutes.setName(\"lblMinutes\");\n        pnlGUI.add(lblMinutes);\n        lblMinutes.setBounds(20, 10, 154, 15);\n        spnMinutes.setToolTipText(\"Minutes Portion of the Capture Time\");\n        spnMinutes.setMinimumSize(new java.awt.Dimension(35, 20));\n        spnMinutes.setName(\"spnMinutes\");\n        spnMinutes.setNextFocusableComponent(spnSeconds);\n        spnMinutes.setPreferredSize(new java.awt.Dimension(35, 20));\n        spnMinutes.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                spnMinutesStateChanged(evt);\n            }\n        });\n        pnlGUI.add(spnMinutes);\n        spnMinutes.setBounds(140, 30, 35, 20);\n        lblSeconds.setText(\"Capture Time in Seconds\");\n        lblSeconds.setName(\"lblSeconds\");\n        pnlGUI.add(lblSeconds);\n        lblSeconds.setBounds(20, 50, 155, 15);\n        spnSeconds.setToolTipText(\"Seconds Portion of the Capture Time\");\n        spnSeconds.setName(\"spnSeconds\");\n        spnSeconds.setNextFocusableComponent(chkQuality);\n        spnSeconds.setPreferredSize(new java.awt.Dimension(35, 20));\n        spnSeconds.setRequestFocusEnabled(false);\n        spnSeconds.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                spnSecondsStateChanged(evt);\n            }\n        });\n        pnlGUI.add(spnSeconds);\n        spnSeconds.setBounds(140, 70, 35, 20);\n        chkQuality.setText(\"Quality for DVD compression\");\n        chkQuality.setToolTipText(\"Check this box to enable quality control\");\n        chkQuality.setName(\"chkQuality\");\n        chkQuality.setNextFocusableComponent(rdSuper);\n        chkQuality.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                chkQualityKeyTyped(evt);\n            }\n        });\n        chkQuality.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                chkQualityMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(chkQuality);\n        chkQuality.setBounds(260, 10, 208, 23);\n        grpQuality.add(rdSuper);\n        rdSuper.setSelected(true);\n        rdSuper.setText(\"Super\");\n        rdSuper.setToolTipText(\"Best Quality...recommended\");\n        rdSuper.setEnabled(false);\n        rdSuper.setName(\"rdSuper\");\n        rdSuper.setNextFocusableComponent(rdGood);\n        pnlGUI.add(rdSuper);\n        rdSuper.setBounds(280, 30, 60, 23);\n        grpQuality.add(rdGood);\n        rdGood.setText(\"Good\");\n        rdGood.setToolTipText(\"Good Quality...a little faster\");\n        rdGood.setEnabled(false);\n        rdGood.setName(\"rdGood\");\n        rdGood.setNextFocusableComponent(rdAverage);\n        pnlGUI.add(rdGood);\n        rdGood.setBounds(280, 50, 58, 23);\n        grpQuality.add(rdAverage);\n        rdAverage.setText(\"Average\");\n        rdAverage.setToolTipText(\"Nothing special...but fast\");\n        rdAverage.setEnabled(false);\n        rdAverage.setName(\"rdAverage\");\n        rdAverage.setNextFocusableComponent(rdNTSC);\n        pnlGUI.add(rdAverage);\n        rdAverage.setBounds(280, 70, 75, 23);\n        btnStart.setText(\"Start\");\n        btnStart.setToolTipText(\"Start Capturing Video from your Digital Camcorder\");\n        btnStart.setEnabled(false);\n        btnStart.setName(\"btnStart\");\n        btnStart.setNextFocusableComponent(btnExit);\n        btnStart.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnStartKeyTyped(evt);\n            }\n        });\n        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnStartMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnStart);\n        btnStart.setBounds(250, 400, 70, 25);\n        btnExit.setText(\"Exit\");\n        btnExit.setToolTipText(\"Exit dvd-homevideo\");\n        btnExit.setName(\"btnExit\");\n        btnExit.setNextFocusableComponent(btnPlay);\n        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnExitKeyTyped(evt);\n            }\n        });\n        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnExitMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnExit);\n        btnExit.setBounds(330, 400, 70, 25);\n        chkMenu.setText(\"Custom DVD Menu\");\n        chkMenu.setToolTipText(\"Enables Custom Picture and Audio for DVD Background\");\n        chkMenu.setName(\"chkMenu\");\n        chkMenu.setNextFocusableComponent(txtPicture);\n        chkMenu.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                chkMenuKeyTyped(evt);\n            }\n        });\n        chkMenu.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                chkMenuMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(chkMenu);\n        chkMenu.setBounds(10, 170, 144, 23);\n        lblPicture.setText(\"Path to DVD Menu Picture\");\n        lblPicture.setEnabled(false);\n        lblPicture.setName(\"lblPicture\");\n        pnlGUI.add(lblPicture);\n        lblPicture.setBounds(10, 200, 160, 15);\n        txtPicture.setEnabled(false);\n        txtPicture.setName(\"txtPicture\");\n        txtPicture.setNextFocusableComponent(btnOpen_Picture);\n        pnlGUI.add(txtPicture);\n        txtPicture.setBounds(10, 220, 170, 19);\n        lblAudio.setText(\"Path to DVD Menu Audio\");\n        lblAudio.setEnabled(false);\n        lblAudio.setName(\"lblAudio\");\n        pnlGUI.add(lblAudio);\n        lblAudio.setBounds(10, 250, 155, 15);\n        txtAudio.setEnabled(false);\n        txtAudio.setName(\"txtAudio\");\n        txtAudio.setNextFocusableComponent(btnOpen_Audio);\n        pnlGUI.add(txtAudio);\n        txtAudio.setBounds(10, 270, 170, 19);\n        btnOpen_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_Picture.setEnabled(false);\n        btnOpen_Picture.setName(\"btnOpen_Picture\");\n        btnOpen_Picture.setNextFocusableComponent(txtAudio);\n        btnOpen_Picture.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_PictureKeyTyped(evt);\n            }\n        });\n        btnOpen_Picture.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_PictureMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_Picture);\n        btnOpen_Picture.setBounds(190, 220, 30, 25);\n        prgCapture.setEnabled(false);\n        prgCapture.setName(\"prgCapture\");\n        pnlGUI.add(prgCapture);\n        prgCapture.setBounds(10, 360, 148, 14);\n        prgConvert.setEnabled(false);\n        prgConvert.setName(\"prgConvert\");\n        pnlGUI.add(prgConvert);\n        prgConvert.setBounds(180, 360, 148, 14);\n        prgAuthor.setEnabled(false);\n        prgAuthor.setName(\"prgAuthor\");\n        pnlGUI.add(prgAuthor);\n        prgAuthor.setBounds(350, 360, 148, 14);\n        btnOpen_Audio.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_Audio.setEnabled(false);\n        btnOpen_Audio.setName(\"btnOpen_Audio\");\n        btnOpen_Audio.setNextFocusableComponent(txtOutputDir);\n        btnOpen_Audio.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_AudioKeyTyped(evt);\n            }\n        });\n        btnOpen_Audio.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_AudioMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_Audio);\n        btnOpen_Audio.setBounds(190, 270, 30, 25);\n        lblTextFile.setText(\"Path to Text File (optional)\");\n        lblTextFile.setToolTipText(\"This text file specifies the chapter titles for the DVD\");\n        lblTextFile.setName(\"lblTextFile\");\n        pnlGUI.add(lblTextFile);\n        lblTextFile.setBounds(260, 270, 165, 15);\n        txtTextFile.setName(\"txtTextFile\");\n        txtTextFile.setNextFocusableComponent(btnOpen_TextFile);\n        pnlGUI.add(txtTextFile);\n        txtTextFile.setBounds(260, 290, 200, 19);\n        btnOpen_TextFile.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_TextFile.setName(\"btnOpen_TextFile\");\n        btnOpen_TextFile.setNextFocusableComponent(btnStart);\n        btnOpen_TextFile.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_TextFileKeyTyped(evt);\n            }\n        });\n        btnOpen_TextFile.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_TextFileMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_TextFile);\n        btnOpen_TextFile.setBounds(470, 290, 30, 25);\n        txtOutputDir.setName(\"txtOutputDir\");\n        txtOutputDir.setNextFocusableComponent(btnOpen_OutputDir);\n        txtOutputDir.addFocusListener(new java.awt.event.FocusAdapter() {\n\n            public void focusLost(java.awt.event.FocusEvent evt) {\n                txtOutputDirFocusLost(evt);\n            }\n        });\n        pnlGUI.add(txtOutputDir);\n        txtOutputDir.setBounds(260, 190, 200, 19);\n        lblOutputDir.setText(\"Path to the Output Directory\");\n        lblOutputDir.setName(\"lblOutputDir\");\n        pnlGUI.add(lblOutputDir);\n        lblOutputDir.setBounds(260, 170, 177, 15);\n        txtTitle.setName(\"txtTitle\");\n        txtTitle.setNextFocusableComponent(txtTextFile);\n        txtTitle.addFocusListener(new java.awt.event.FocusAdapter() {\n\n            public void focusLost(java.awt.event.FocusEvent evt) {\n                txtTitleFocusLost(evt);\n            }\n        });\n        pnlGUI.add(txtTitle);\n        txtTitle.setBounds(260, 240, 200, 19);\n        lblTitle.setText(\"Enter a Title for the DVD\");\n        lblTitle.setName(\"lblTitle\");\n        pnlGUI.add(lblTitle);\n        lblTitle.setBounds(260, 220, 153, 15);\n        btnOpen_OutputDir.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_OutputDir.setName(\"btnOpen_OutputDir\");\n        btnOpen_OutputDir.setNextFocusableComponent(txtTitle);\n        btnOpen_OutputDir.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_OutputDirKeyTyped(evt);\n            }\n        });\n        btnOpen_OutputDir.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_OutputDirMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_OutputDir);\n        btnOpen_OutputDir.setBounds(470, 190, 30, 25);\n        chkBurn.setText(\"Burn to DVD\");\n        chkBurn.setName(\"chkBurn\");\n        chkBurn.setNextFocusableComponent(chkMenu);\n        pnlGUI.add(chkBurn);\n        chkBurn.setBounds(340, 120, 103, 23);\n        lblCaptureProg.setText(\"0%\");\n        lblCaptureProg.setEnabled(false);\n        lblCaptureProg.setName(\"lblCaptureProg\");\n        pnlGUI.add(lblCaptureProg);\n        lblCaptureProg.setBounds(20, 380, 40, 15);\n        lblConvertProg.setText(\"0%\");\n        lblConvertProg.setEnabled(false);\n        lblConvertProg.setName(\"lblConvertProg\");\n        pnlGUI.add(lblConvertProg);\n        lblConvertProg.setBounds(190, 380, 40, 15);\n        lblAuthorProg.setText(\"0%\");\n        lblAuthorProg.setEnabled(false);\n        lblAuthorProg.setName(\"lblAuthorProg\");\n        pnlGUI.add(lblAuthorProg);\n        lblAuthorProg.setBounds(360, 380, 40, 15);\n        lblCapture.setText(\"Capture Progress\");\n        lblCapture.setEnabled(false);\n        lblCapture.setName(\"lblCapture\");\n        pnlGUI.add(lblCapture);\n        lblCapture.setBounds(10, 340, 107, 15);\n        lblConvert.setText(\"Conversion Progress\");\n        lblConvert.setEnabled(false);\n        lblConvert.setName(\"lblConvert\");\n        pnlGUI.add(lblConvert);\n        lblConvert.setBounds(180, 340, 129, 15);\n        lblAuthor.setText(\"Authoring DVD\");\n        lblAuthor.setEnabled(false);\n        lblAuthor.setName(\"lblAuthor\");\n        pnlGUI.add(lblAuthor);\n        lblAuthor.setBounds(350, 340, 95, 15);\n        sprCapConvert.setMinimumSize(new java.awt.Dimension(50, 10));\n        sprCapConvert.setName(\"sprCapConvert\");\n        sprCapConvert.setPreferredSize(new java.awt.Dimension(50, 5));\n        pnlGUI.add(sprCapConvert);\n        sprCapConvert.setBounds(10, 160, 490, 5);\n        sprMenuAuthor.setMinimumSize(new java.awt.Dimension(50, 10));\n        sprMenuAuthor.setName(\"sprMenuAuthor\");\n        sprMenuAuthor.setPreferredSize(new java.awt.Dimension(50, 5));\n        pnlGUI.add(sprMenuAuthor);\n        sprMenuAuthor.setBounds(10, 330, 490, 5);\n        spTextArea.setAutoscrolls(true);\n        spTextArea.setName(\"spTextArea\");\n        txtAreaOutput.setEditable(false);\n        txtAreaOutput.setLineWrap(true);\n        txtAreaOutput.setToolTipText(\"Output during program execution\");\n        txtAreaOutput.setWrapStyleWord(true);\n        txtAreaOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n        txtAreaOutput.setName(\"txtAreaOutput\");\n        spTextArea.setViewportView(txtAreaOutput);\n        pnlGUI.add(spTextArea);\n        spTextArea.setBounds(20, 470, 470, 140);\n        grpFormat.add(rdNTSC);\n        rdNTSC.setSelected(true);\n        rdNTSC.setText(\"NTSC\");\n        rdNTSC.setName(\"rdNTSC\");\n        rdNTSC.setNextFocusableComponent(rdPAL);\n        pnlGUI.add(rdNTSC);\n        rdNTSC.setBounds(20, 130, 58, 23);\n        grpFormat.add(rdPAL);\n        rdPAL.setText(\"PAL\");\n        rdPAL.setName(\"rdPAL\");\n        rdPAL.setNextFocusableComponent(rd4_3);\n        pnlGUI.add(rdPAL);\n        rdPAL.setBounds(90, 130, 60, 23);\n        grpAspectRatio.add(rd4_3);\n        rd4_3.setSelected(true);\n        rd4_3.setText(\"4:3\");\n        rd4_3.setName(\"rd4_3\");\n        rd4_3.setNextFocusableComponent(rd16_9);\n        pnlGUI.add(rd4_3);\n        rd4_3.setBounds(190, 130, 50, 23);\n        grpAspectRatio.add(rd16_9);\n        rd16_9.setText(\"16:9\");\n        rd16_9.setName(\"rd16_9\");\n        rd16_9.setNextFocusableComponent(chkBurn);\n        pnlGUI.add(rd16_9);\n        rd16_9.setBounds(240, 130, 60, 23);\n        lblFormat.setText(\"Video Format\");\n        lblFormat.setName(\"lblFormat\");\n        pnlGUI.add(lblFormat);\n        lblFormat.setBounds(20, 110, 110, 15);\n        lblAspectRatio.setText(\"Aspect Ratio\");\n        lblAspectRatio.setName(\"lblAspectRatio\");\n        pnlGUI.add(lblAspectRatio);\n        lblAspectRatio.setBounds(190, 110, 100, 15);\n        sprAspectRatio.setMinimumSize(new java.awt.Dimension(50, 10));\n        sprAspectRatio.setName(\"sprAspectRatio\");\n        sprAspectRatio.setPreferredSize(new java.awt.Dimension(50, 5));\n        pnlGUI.add(sprAspectRatio);\n        sprAspectRatio.setBounds(10, 100, 490, 5);\n        btnPlay.setText(\"Play\");\n        btnPlay.setEnabled(false);\n        btnPlay.setNextFocusableComponent(spnMinutes);\n        btnPlay.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnPlayMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnPlay);\n        btnPlay.setBounds(410, 400, 70, 25);\n        txtStatus.setBackground(new java.awt.Color(153, 153, 153));\n        txtStatus.setEditable(false);\n        txtStatus.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n        txtStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);\n        txtStatus.setText(\"Status\");\n        txtStatus.setMaximumSize(new java.awt.Dimension(59, 25));\n        txtStatus.setMinimumSize(new java.awt.Dimension(59, 25));\n        pnlGUI.add(txtStatus);\n        txtStatus.setBounds(410, 430, 70, 30);\n        getContentPane().add(pnlGUI, new java.awt.GridBagConstraints());\n        menuBarMain.setName(\"menuBarMain\");\n        menuFile.setMnemonic('f');\n        menuFile.setText(\"File\");\n        menuFile.setName(\"menuFile\");\n        menuOpen.setMnemonic('o');\n        menuOpen.setText(\"Open\");\n        menuOpen.setName(\"menuOpen\");\n        menuOpen.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuOpenMousePressed(evt);\n            }\n        });\n        menuFile.add(menuOpen);\n        sprOpen.setName(\"sprOpen\");\n        menuFile.add(sprOpen);\n        menuSave.setMnemonic('s');\n        menuSave.setText(\"Save\");\n        menuSave.setName(\"menuSave\");\n        menuSave.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuSaveMousePressed(evt);\n            }\n        });\n        menuFile.add(menuSave);\n        sprSave.setName(\"sprSave\");\n        menuFile.add(sprSave);\n        menuExit.setMnemonic('x');\n        menuExit.setText(\"Exit\");\n        menuExit.setBorderPainted(false);\n        menuExit.setFocusable(true);\n        menuExit.setName(\"menuExit\");\n        menuExit.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuExitMousePressed(evt);\n            }\n        });\n        menuFile.add(menuExit);\n        menuBarMain.add(menuFile);\n        menuTools.setMnemonic('t');\n        menuTools.setText(\"Tools\");\n        menuTools.setName(\"menuTools\");\n        grpMenuIgnore.add(menuRd_IgnoreNone);\n        menuRd_IgnoreNone.setText(\"Reset\");\n        menuRd_IgnoreNone.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreNoneStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreNone);\n        grpMenuIgnore.add(menuRd_IgnoreCap);\n        menuRd_IgnoreCap.setText(\"Skip Capture\");\n        menuRd_IgnoreCap.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreCapStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreCap);\n        grpMenuIgnore.add(menuRd_IgnoreCapConv);\n        menuRd_IgnoreCapConv.setText(\"Skip Capture/Transcode\");\n        menuRd_IgnoreCapConv.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreCapConvStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreCapConv);\n        grpMenuIgnore.add(menuRd_IgnoreCapConvMenu);\n        menuRd_IgnoreCapConvMenu.setText(\"Skip Capture/Transcode/Menu\");\n        menuRd_IgnoreCapConvMenu.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreCapConvMenuStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreCapConvMenu);\n        menuTools.add(sprIgnore);\n        menuProjProp.setText(\"Project Properties (Default)\");\n        grpMenuFormat.add(menuRdNTSC);\n        menuRdNTSC.setSelected(true);\n        menuRdNTSC.setText(\"NTSC\");\n        menuRdNTSC.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRdNTSCItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRdNTSC);\n        grpMenuFormat.add(menuRdPAL);\n        menuRdPAL.setText(\"PAL\");\n        menuRdPAL.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRdPALItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRdPAL);\n        menuProjProp.add(sprMenuFormatAspect);\n        grpMenuAspectRatio.add(menuRd_4_3);\n        menuRd_4_3.setSelected(true);\n        menuRd_4_3.setText(\"4:3\");\n        menuRd_4_3.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRd_4_3ItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRd_4_3);\n        grpMenuAspectRatio.add(menuRd_16_9);\n        menuRd_16_9.setText(\"16:9\");\n        menuRd_16_9.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRd_16_9ItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRd_16_9);\n        menuProjProp.add(sprMenuThread);\n        menuChkThread.setText(\"Enable Multi-Threading\");\n        menuChkThread.setToolTipText(\"EXPERIMENTAL!!! Very unstable!!!  This allows dvgrab and transcode to run at the same time...speeding up the process by as much as 10%\");\n        menuChkThread.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuChkThreadItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuChkThread);\n        menuTools.add(menuProjProp);\n        menuBarMain.add(menuTools);\n        menuHelp.setMnemonic('h');\n        menuHelp.setText(\"Help\");\n        menuHelp.setName(\"menuHelp\");\n        menuInternet.setText(\"dvd-homevideo website\");\n        menuInternet.setName(\"menuInternet\");\n        menuInternet.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuInternetMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuInternet);\n        menuREADME.setText(\"README File\");\n        menuREADME.setName(\"menuREADME\");\n        menuREADME.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuREADMEMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuREADME);\n        menuBug.setText(\"Submit Bug\");\n        menuBug.setName(\"menuBug\");\n        menuBug.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuBugMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuBug);\n        menuAbout.setText(\"About dvd-homevideo\");\n        menuAbout.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuAboutMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuAbout);\n        menuBarMain.add(menuHelp);\n        setJMenuBar(menuBarMain);\n        pack();\n    }\n\n    // </editor-fold>//GEN-END:initComponents\n    private //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged\n    menuRd_IgnoreNoneStateChanged(//GEN-FIRST:event_menuRd_IgnoreNoneStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreNoneStateChanged\n        if (menuRd_IgnoreNone.isSelected()) {\n            lblMinutes.setEnabled(true);\n            spnMinutes.setEnabled(true);\n            lblSeconds.setEnabled(true);\n            spnSeconds.setEnabled(true);\n            chkQuality.setEnabled(true);\n            lblFormat.setEnabled(true);\n            rdNTSC.setEnabled(true);\n            rdPAL.setEnabled(true);\n            lblAspectRatio.setEnabled(true);\n            rd4_3.setEnabled(true);\n            rd16_9.setEnabled(true);\n            chkMenu.setEnabled(true);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreNoneStateChanged\n    private //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged\n    menuRd_IgnoreCapConvMenuStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreCapConvMenuStateChanged\n        if (menuRd_IgnoreCapConv.isSelected()) {\n            lblMinutes.setEnabled(false);\n            spnMinutes.setEnabled(false);\n            lblSeconds.setEnabled(false);\n            spnSeconds.setEnabled(false);\n            chkQuality.setEnabled(false);\n            lblFormat.setEnabled(false);\n            rdNTSC.setEnabled(false);\n            rdPAL.setEnabled(false);\n            lblAspectRatio.setEnabled(false);\n            rd4_3.setEnabled(false);\n            rd16_9.setEnabled(false);\n            chkMenu.setEnabled(false);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreCapConvMenuStateChanged\n    private //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged\n    menuRd_IgnoreCapConvStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreCapConvStateChanged\n        if (menuRd_IgnoreCapConv.isSelected()) {\n            lblMinutes.setEnabled(false);\n            spnMinutes.setEnabled(false);\n            lblSeconds.setEnabled(false);\n            spnSeconds.setEnabled(false);\n            chkQuality.setEnabled(false);\n            lblFormat.setEnabled(false);\n            rdNTSC.setEnabled(false);\n            rdPAL.setEnabled(false);\n            lblAspectRatio.setEnabled(false);\n            rd4_3.setEnabled(false);\n            rd16_9.setEnabled(false);\n            chkMenu.setEnabled(true);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreCapConvStateChanged\n    private //GEN-FIRST:event_menuRd_IgnoreCapStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreCapStateChanged\n    menuRd_IgnoreCapStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreCapStateChanged\n        if (menuRd_IgnoreCap.isSelected()) {\n            lblMinutes.setEnabled(false);\n            spnMinutes.setEnabled(false);\n            lblSeconds.setEnabled(false);\n            spnSeconds.setEnabled(false);\n            chkQuality.setEnabled(true);\n            lblFormat.setEnabled(true);\n            rdNTSC.setEnabled(true);\n            rdPAL.setEnabled(true);\n            lblAspectRatio.setEnabled(true);\n            rd4_3.setEnabled(true);\n            rd16_9.setEnabled(true);\n            chkMenu.setEnabled(true);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreCapStateChanged\n    private //GEN-FIRST:event_txtOutputDirFocusLost\n    void //GEN-FIRST:event_txtOutputDirFocusLost\n    txtOutputDirFocusLost(//GEN-FIRST:event_txtOutputDirFocusLost\n    java.awt.event.FocusEvent evt) {\n        //GEN-HEADEREND:event_txtOutputDirFocusLost\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_txtOutputDirFocusLost\n    private //GEN-FIRST:event_txtTitleFocusLost\n    void //GEN-FIRST:event_txtTitleFocusLost\n    txtTitleFocusLost(//GEN-FIRST:event_txtTitleFocusLost\n    java.awt.event.FocusEvent evt) {\n        //GEN-HEADEREND:event_txtTitleFocusLost\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_txtTitleFocusLost\n    private //GEN-FIRST:event_btnOpen_OutputDirKeyTyped\n    void //GEN-FIRST:event_btnOpen_OutputDirKeyTyped\n    btnOpen_OutputDirKeyTyped(//GEN-FIRST:event_btnOpen_OutputDirKeyTyped\n    java.awt.event.KeyEvent evt) {\n        //GEN-HEADEREND:event_btnOpen_OutputDirKeyTyped\n        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_OutputDirKeyTyped\n    private //GEN-FIRST:event_btnOpen_OutputDirMouseClicked\n    void //GEN-FIRST:event_btnOpen_OutputDirMouseClicked\n    btnOpen_OutputDirMouseClicked(//GEN-FIRST:event_btnOpen_OutputDirMouseClicked\n    java.awt.event.MouseEvent evt) {\n        //GEN-HEADEREND:event_btnOpen_OutputDirMouseClicked\n        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_OutputDirMouseClicked\n    private //GEN-FIRST:event_spnSecondsStateChanged\n    void //GEN-FIRST:event_spnSecondsStateChanged\n    spnSecondsStateChanged(//GEN-FIRST:event_spnSecondsStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_spnSecondsStateChanged\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_spnSecondsStateChanged\n    private //GEN-FIRST:event_spnMinutesStateChanged\n    void //GEN-FIRST:event_spnMinutesStateChanged\n    spnMinutesStateChanged(//GEN-FIRST:event_spnMinutesStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_spnMinutesStateChanged\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_spnMinutesStateChanged\n    private void btnStartKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnStartKeyTyped\n        if (evt.getKeyChar() == evt.VK_ENTER) {\n            try {\n                /* \n                 * Automatically save the configuration in the users ~/.dvd-homevideo\n                 * directory.  This way if they forget to click on the Save button in\n                 * the File menu, it will still be saved once they start capturing \n                 * from their camcorder. \n                 */\n                WriteSession();\n            } catch (IOException e) {\n            }\n            blnBegin = true;\n            btnPlay.setEnabled(false);\n        }\n    }\n\n    //GEN-LAST:event_btnStartKeyTyped\n    private void btnExitKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnExitKeyTyped\n        if (evt.getKeyChar() == evt.VK_ENTER)\n            ExitDVDHomevideo();\n    }\n\n    //GEN-LAST:event_btnExitKeyTyped\n    private void menuChkThreadItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuChkThreadItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuChkThreadItemStateChanged\n    private void menuAboutMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuAboutMousePressed\n        MessageBox(\"dvd-homevideo, version 0.4\\n\" + \"Created by: Shane Santner\", 1);\n    }\n\n    //GEN-LAST:event_menuAboutMousePressed\n    /**\n     * This is the code that handles the user clicking the Exit button.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnExitMouseClicked\n        ExitDVDHomevideo();\n    }\n\n    //GEN-LAST:event_btnExitMouseClicked\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRd_16_9ItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRd_16_9ItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRd_16_9ItemStateChanged\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRd_4_3ItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRd_4_3ItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRd_4_3ItemStateChanged\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRdPALItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRdPALItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRdPALItemStateChanged\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRdNTSCItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRdNTSCItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRdNTSCItemStateChanged\n    /**\n     * This is the code that handles the user clicking the Play button.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void btnPlayMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnPlayMouseClicked\n        /*\n         * Try to play the DVD in kaffeine first, if that fails then\n         * try xine next.  TODO Need to also add code for mplayer as well.\n         */\n        try {\n            String[] cmd = { \"kaffeine\", \"dvd:\" + strOutputDir + \"/DVD/\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"xine\", \"dvd:\" + strOutputDir + \"/DVD/\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have xine or kaffeine installed.\\n\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_btnPlayMouseClicked\n    /**\n     * This is the code that handles the user clicking on the SubmitBug button\n     * in the Help menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuBugMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuBugMousePressed\n        /* Open a web browser pointing to the hard coded link */\n        try {\n            String[] cmd = { \"firefox\", \"http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"konqueror\", \"http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have firefox or konqueror installed.\\n\" + \"Open up your favorite web browser and paste:\\n\" + \"http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\\n\" + \"in the address bar to submit a bug for dvd-homevideo.\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_menuBugMousePressed\n    /**\n     * If you don't need to recapture video from the camcorder because of\n     * an error later in the program, then you can check this box in the Tools\n     * menu and this will allow you to not have to recapture.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    /**\n     * If you don't need to recapture video or retranscode the video to DVD format\n     * because of an error later in the program, then you can check this box in\n     * the Tools menu and this will allow you to not have to recapture or retranscode.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    /**\n     * If you only need to rerun dvd-author then you can check this box in\n     * the Tools menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    /**\n     * This is the code that handles the user clicking the Open button\n     * from the File menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuOpenMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuOpenMousePressed\n        File home = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo\");\n        fcMenuOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        fcMenuOpen.addChoosableFileFilter(new CustomFileFilter(\".xml\"));\n        fcMenuOpen.setCurrentDirectory(home);\n        int returnVal = fcMenuOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            ReadSession(fcMenuOpen.getSelectedFile().getPath());\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuOpenMousePressed\n    /**\n     * This is the code that handles the user clicking the Save button\n     * from the File menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuSaveMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuSaveMousePressed\n        /* \n         * The default action is to call WriteSession to store all of the \n         * GUI widget information for later retrieval.\n         */\n        try {\n            WriteSession();\n        } catch (IOException e) {\n        }\n    }\n\n    //GEN-LAST:event_menuSaveMousePressed\n    /**\n     * This is the code that handles the user clicking the dvd-homevideo website\n     * button from the Help menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuInternetMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuInternetMousePressed\n        /* Open a web browser pointing to the hard coded link */\n        try {\n            String[] cmd = { \"firefox\", \"http://dvd-homevideo.sourceforge.net/\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"konqueror\", \"http://dvd-homevideo.sourceforge.net/\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have firefox or konqueror installed.\\n\" + \"Open up your favorite web browser and paste:\\n\" + \"http://dvd-homevideo.sourceforge.net/\\n\" + \"in the address bar for help with running dvd-homevideo.\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_menuInternetMousePressed\n    /**\n     * This is the code that handles the user clicking the README file\n     * button from the Help menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuREADMEMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuREADMEMousePressed\n        /* Open a web browser pointing to the hard coded link */\n        try {\n            String[] cmd = { \"firefox\", \"http://dvd-homevideo.sourceforge.net/README.html\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"konqueror\", \"http://dvd-homevideo.sourceforge.net/README.html\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have firefox or konqueror installed.\\n\" + \"Open up your favorite web browser and paste:\\n\" + \"http://dvd-homevideo.sourceforge.net/README.html\\n\" + \"in the address bar for help with running dvd-homevideo.\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_menuREADMEMousePressed\n    /**\n     * This is the code that handles the user clicking the Exit button\n     * from the File menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuExitMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuExitMousePressed\n        /* TODO Write properties of PAL/NTSC and 4:3/16:9 to properties file */\n        ExitDVDHomevideo();\n    }\n\n    //GEN-LAST:event_menuExitMousePressed\n    /**\n     * This is the code that handles the user clicking the Start button.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnStartMouseClicked\n        try {\n            /* \n             * Automatically save the configuration in the users ~/.dvd-homevideo\n             * directory.  This way if they forget to click on the Save button in\n             * the File menu, it will still be saved once they start capturing \n             * from their camcorder. \n             */\n            WriteSession();\n        } catch (IOException e) {\n        }\n        blnBegin = true;\n        btnPlay.setEnabled(false);\n    }\n\n    //GEN-LAST:event_btnStartMouseClicked\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for a title file to use for dvd-menu.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_TextFileKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnOpen_TextFileKeyTyped\n        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtTextFile.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_TextFileKeyTyped\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for an output directory to store\n     * everything in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for an output directory to locate an\n     * audio file.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_AudioKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnOpen_AudioKeyTyped\n        if (chkMenu.isSelected()) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtAudio.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_AudioKeyTyped\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for an output directory to locate a\n     * picture in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_PictureKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnOpen_PictureKeyTyped\n        if (chkMenu.isSelected() == true) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtPicture.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_PictureKeyTyped\n    /**\n     * This is the code that handles the user typing the Space bar\n     * on the check box for the menu\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkMenuKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_chkMenuKeyTyped\n        if (chkMenu.isSelected()) {\n            lblPicture.setEnabled(false);\n            txtPicture.setEnabled(false);\n            btnOpen_Picture.setEnabled(false);\n            lblAudio.setEnabled(false);\n            txtAudio.setEnabled(false);\n            btnOpen_Audio.setEnabled(false);\n        } else {\n            lblPicture.setEnabled(true);\n            txtPicture.setEnabled(true);\n            btnOpen_Picture.setEnabled(true);\n            lblAudio.setEnabled(true);\n            txtAudio.setEnabled(true);\n            btnOpen_Audio.setEnabled(true);\n        }\n    }\n\n    //GEN-LAST:event_chkMenuKeyTyped\n    /**\n     * This is the code that handles the user typing the Space bar\n     * on the check box for the quality group of radio buttons\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkQualityKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_chkQualityKeyTyped\n        if (chkQuality.isSelected()) {\n            rdSuper.setEnabled(false);\n            rdGood.setEnabled(false);\n            rdAverage.setEnabled(false);\n        } else {\n            rdSuper.setEnabled(true);\n            rdGood.setEnabled(true);\n            rdAverage.setEnabled(true);\n        }\n    }\n\n    //GEN-LAST:event_chkQualityKeyTyped\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for an output directory to locate a\n     * picture in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_PictureMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnOpen_PictureMouseClicked\n        if (chkMenu.isSelected() == true) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtPicture.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_PictureMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for an output directory to locate an\n     * audio file in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_AudioMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnOpen_AudioMouseClicked\n        if (chkMenu.isSelected()) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtAudio.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_AudioMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for an output directory to store\n     * all of their files in\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for a title file to be used for\n     * the background menu of the DVD\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_TextFileMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnOpen_TextFileMouseClicked\n        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtTextFile.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_TextFileMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * check box to select the quality of video conversion for\n     * their DVD\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkQualityMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_chkQualityMouseClicked\n        if (chkQuality.isSelected()) {\n            rdSuper.setEnabled(true);\n            rdGood.setEnabled(true);\n            rdAverage.setEnabled(true);\n        } else {\n            rdSuper.setEnabled(false);\n            rdGood.setEnabled(false);\n            rdAverage.setEnabled(false);\n        }\n    }\n\n    //GEN-LAST:event_chkQualityMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * check box to specify details for the DVD menu\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkMenuMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_chkMenuMouseClicked\n        if (chkMenu.isSelected()) {\n            lblPicture.setEnabled(true);\n            txtPicture.setEnabled(true);\n            btnOpen_Picture.setEnabled(true);\n            lblAudio.setEnabled(true);\n            txtAudio.setEnabled(true);\n            btnOpen_Audio.setEnabled(true);\n        } else {\n            lblPicture.setEnabled(false);\n            txtPicture.setEnabled(false);\n            btnOpen_Picture.setEnabled(false);\n            lblAudio.setEnabled(false);\n            txtAudio.setEnabled(false);\n            btnOpen_Audio.setEnabled(false);\n        }\n    }\n\n    //GEN-LAST:event_chkMenuMouseClicked\n    public void enableStartButton() {\n        int tempMinutes, tempSeconds, tempTotal;\n        String tempStrTitle, tempStrOutputDir;\n        /* First, load the values from the form into local variables */\n        tempMinutes = ((Integer) spnMinutes.getValue()).intValue();\n        tempSeconds = ((Integer) spnSeconds.getValue()).intValue();\n        tempTotal = tempSeconds + tempMinutes;\n        tempStrTitle = txtTitle.getText();\n        tempStrOutputDir = txtOutputDir.getText();\n        /*\n         * Now do the error checking.  Here we look for a capture time\n         * that is greater than zero and less than 65 minutes \n         */\n        if (tempTotal >= 1 && !tempStrOutputDir.equals(\"\") && !tempStrTitle.equals(\"\")) {\n            strOutputDir = txtOutputDir.getText() + \"/\" + txtTitle.getText();\n            btnStart.setEnabled(true);\n        } else if (!tempStrOutputDir.equals(\"\") && !tempStrTitle.equals(\"\") && (menuRd_IgnoreCap.isSelected() || menuRd_IgnoreCapConv.isSelected() || menuRd_IgnoreCapConvMenu.isSelected())) {\n            strOutputDir = txtOutputDir.getText() + \"/\" + txtTitle.getText();\n            btnStart.setEnabled(true);\n        } else\n            btnStart.setEnabled(false);\n    }\n\n    /**\n     * On startup, checks to ensure that the raw1394 module is loaded.\n     * This module is only needed to capture audio and video from the\n     * dv camcorder.\n     * return   A boolean indicating if the module is present\n     */\n    public boolean checkForModules() {\n        try {\n            String line;\n            String modules = \"cat /proc/modules | grep raw1394\";\n            String[] module_cmd = { \"/bin/sh\", \"-c\", modules };\n            Process p = Runtime.getRuntime().exec(module_cmd);\n            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n            line = in.readLine();\n            p.waitFor();\n            if (line == null)\n                return false;\n            else\n                return true;\n        } catch (Exception ioe) {\n            /* If we have made it here then the module is not loaded */\n            return false;\n        }\n    }\n\n    /**\n     * On startup, checks to ensure that all dependent programs are installed\n     * @param   Prog[]  List of dependent programs needed for dvd-homevideo\n     * @return  A boolean to determine if an error occurred in the function\n     */\n    public boolean checkForProg(String[] Prog) {\n        /* Declare local variables */\n        int i = 0;\n        int j = 0;\n        String build_list = \"\";\n        String[] uninstalled = new String[Prog.length];\n        while (true) {\n            try {\n                /* \n                 * Walk through the list of programs needed for dvd-homevideo\n                 * to operate correctly.\n                 */\n                while (i < Prog.length) {\n                    /* \n                     * This is how I test for a program.  I simple try to \n                     * execute the application, if it fails then the software\n                     * jumps to the catch block and I know that the program\n                     * is either not installed or not in the users path.\n                     */\n                    Process p = Runtime.getRuntime().exec(Prog[i]);\n                    /* \n                     * If I make it here then the program exists and I need to\n                     * kill it.\n                     */\n                    p.destroy();\n                    i++;\n                }\n                /* Check for any uninstalled programs */\n                for (i = 0; i < uninstalled.length; i++) {\n                    /* If not null then add to the list */\n                    if (uninstalled[i] != null)\n                        build_list += uninstalled[i] + \"\\n\";\n                }\n                /* \n                 * If the first element is null, then all programs are \n                 * installed correctly.\n                 */\n                if (uninstalled[0] == null)\n                    return true;\n                else\n                    /* Otherwise tell the user what they are missing */\n                    MessageBox(\"The following programs are not installed or not in \" + \"your path!\\n\" + build_list, 0);\n                return false;\n            } catch (IOException ioe) {\n                /* Add the missing program to the uninstalled array */\n                uninstalled[j] = Prog[i];\n                i++;\n                j++;\n            }\n        }\n    }\n\n    /**\n     * Displays a message box with the supplied text and yes/no options\n     * @param   message    The message to display in the box\n     */\n    public int MessageBox(String message) {\n        return JOptionPane.showConfirmDialog(null, message, \"dvd-homevideo\", JOptionPane.YES_NO_OPTION);\n    }\n\n    /**\n     * Displays a message box with the supplied text and type\n     * @param   message    The message to display in the box\n     * @param   type       The type of message (Info, Warning or Error)\n     */\n    public void MessageBox(String message, int type) {\n        JOptionPane.showMessageDialog(null, message, \"dvd-homevideo\", type);\n    }\n\n    /**\n     * Displays a message box with the supplied text and type\n     * @param   message    The message to display in the box\n     * @param   type       The type of message (Info, Warning or Error)\n     * @param   picture    Picture to display in the MessageBox\n     */\n    public void MessageBox(String message, int type, String picture) {\n        JOptionPane.showMessageDialog(null, message, \"dvd-homevideo\", type, new javax.swing.ImageIcon(getClass().getResource(picture)));\n    }\n\n    /**\n     * Check dvd-homevideo for runtime errors\n     * @param   fileName    This is a log file to parse through, looking for\n     *                      the keyword \"Error\"\n     * @return   A boolean indicating if an error was found\n     */\n    public boolean ErrorCheck(String fileName) {\n        String line;\n        StringTokenizer st;\n        String testToken;\n        boolean error = false;\n        /*\n         * Need to parse through the supplies file and look for any\n         * instances of the words 'error' or 'broken'.  If found, this\n         * is treated as a run-time error of one of the dependent programs\n         * that dvd-homevideo relies on.\n         */\n        try {\n            BufferedReader in = new BufferedReader(new FileReader(fileName));\n            while ((line = in.readLine()) != null) {\n                /* Check for a specific burn error */\n                if (line.equals(\":-( /dev/dvd: media is not recognized as recordable DVD: 9\")) {\n                    MessageBox(\"Non-recoverable error occurred.\" + \"\\nClass Name: \" + new Exception().getStackTrace()[1].getClassName() + \"\\nMethod Name: \" + new Exception().getStackTrace()[1].getMethodName() + \"\\nError was: \" + line, 0);\n                    return true;\n                }\n                /*\n                 * Need to catch all instances of 'error' or 'broken'.  This\n                 * includes cases such as:\n                 * **Error:\n                 * error~\n                 * Broken pipe\n                 * etc, etc, etc.  We need to catch ALL instances.\n                 */\n                st = new StringTokenizer(line, \"*,;:'-~\\t \");\n                while (st.hasMoreTokens()) {\n                    testToken = st.nextToken();\n                    if (// ||\n                    testToken.equalsIgnoreCase(\"Error\")) //testToken.equalsIgnoreCase(\"Broken\"))\n                    {\n                        MessageBox(\"Non-recoverable error occurred.\" + \"\\nClass Name: \" + new Exception().getStackTrace()[1].getClassName() + \"\\nMethod Name: \" + new Exception().getStackTrace()[1].getMethodName() + \"\\nError was: \" + line, 0);\n                        error = true;\n                    }\n                }\n            }\n        } catch (FileNotFoundException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"Can not find \" + fileName + \"\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        }\n        return error;\n    }\n\n    /**\n     * Update the Status textbox\n     * @param   typeColor   red, green, or grey\n     * @param   typeUpdate  Values should be PASS, FAIL, Status\n     */\n    public void UpdateStatus(Color typeColor, String typeUpdate) {\n        /* \n         * Set the background and text to let the user know that\n         * dvd-homevideo failed\n         */\n        txtStatus.setBackground(typeColor);\n        txtStatus.setText(typeUpdate);\n        if (typeUpdate.equals(\"FAIL\"))\n            txtStatus.setToolTipText(\"Look at dvd-homevideo.err and files\" + \" in the log directory for possible\" + \" reasons why dvd-homevideo failed.\");\n        /* \n         * If we need to wait for user input because dvd-homevideo\n         * has completed...either because of passing or failing then\n         * set blnBegin to false.\n         */\n        if (!typeUpdate.equals(\"Status\"))\n            blnBegin = false;\n    }\n\n    /**\n     * This method should be called every time the application exits normally.  This allows the\n     * current session to be saved before quiting dvd-homevideo.\n     */\n    public void ExitDVDHomevideo() {\n        try {\n            /* \n             * Automatically save the configuration in the users ~/.dvd-homevideo\n             * directory.  This should be the only place in the project where System.exit(0) is called. \n             */\n            WriteSession();\n            WriteProjProperties();\n            System.exit(0);\n        } catch (IOException e) {\n        }\n    }\n\n    /**\n     * This method retrieves user specific information from the\n     * properties xml file in the users ~/.dvd-homevideo directory\n     */\n    public void ReadProjProperties() {\n        File home = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo/properties\");\n        String line, token;\n        StringTokenizer st;\n        try {\n            /* \n             * Read the xml properties file and set widgets on the \n             * form accordingly\n             */\n            BufferedReader reader = new BufferedReader(new FileReader(home));\n            while ((line = reader.readLine()) != null) {\n                st = new StringTokenizer(line, \"<>\");\n                while (st.hasMoreTokens()) {\n                    token = st.nextToken();\n                    if (token.equals(\"menuRdNTSC\")) {\n                        line = reader.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        menuRdNTSC.setSelected(Boolean.parseBoolean(token));\n                        menuRdPAL.setSelected(!Boolean.parseBoolean(token));\n                        rdNTSC.setSelected(menuRdNTSC.isSelected());\n                        rdPAL.setSelected(menuRdPAL.isSelected());\n                    } else if (token.equals(\"menuRd_4_3\")) {\n                        line = reader.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        menuRd_4_3.setSelected(Boolean.parseBoolean(token));\n                        menuRd_16_9.setSelected(!Boolean.parseBoolean(token));\n                        rd4_3.setSelected(menuRd_4_3.isSelected());\n                        rd16_9.setSelected(menuRd_16_9.isSelected());\n                    } else if (token.equals(\"menuChkThread\")) {\n                        line = reader.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        menuChkThread.setSelected(Boolean.parseBoolean(token));\n                    }\n                }\n            }\n            reader.close();\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error in ReadProjectProperties in GUI.java\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * This method stores user specific information in a properties xml file\n     * in the users ~/.dvd-homevideo directory\n     */\n    public void WriteProjProperties() {\n        File home = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo/properties\");\n        try {\n            /* Write/rewrite the xml properties file */\n            BufferedWriter writer = new BufferedWriter(new FileWriter(home));\n            writer.write(\"<dvd-homevideo properties>\");\n            writer.newLine();\n            writer.write(\"\\t<JRadioButtonMenuItem>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menuRdNTSC>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<selected>\" + menuRdNTSC.isSelected() + \"</selected>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menuRdNTSC>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menuRd_4_3>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<selected>\" + menuRd_4_3.isSelected() + \"</selected>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menuRd_4_3>\");\n            writer.newLine();\n            writer.write(\"\\t</JRadioButonMenuItem>\");\n            writer.newLine();\n            writer.write(\"\\t<JCheckBoxMenuItem>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menuChkThread>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<selected>\" + menuChkThread.isSelected() + \"</selected>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menuChkThread>\");\n            writer.newLine();\n            writer.write(\"\\t</JCheckBoxMenuItem>\");\n            writer.newLine();\n            writer.close();\n            /* Update the states on the form */\n            rdNTSC.setSelected(menuRdNTSC.isSelected());\n            rdPAL.setSelected(menuRdPAL.isSelected());\n            rd4_3.setSelected(menuRd_4_3.isSelected());\n            rd16_9.setSelected(menuRd_16_9.isSelected());\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error in WriteProjectProperties in GUI.java\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * Opens a previous dvd-homevideo session by reading an xml file\n     * @param   xmlPath    Path to the xml file\n     */\n    public void ReadSession(String xmlPath) {\n        String line, token;\n        StringTokenizer st;\n        boolean done = false;\n        int i;\n        /* \n         * Define an exhaustive list of the widgets that we need to track\n         * on the form.\n         */\n        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };\n        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };\n        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };\n        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };\n        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };\n        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };\n        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };\n        try {\n            BufferedReader in = new BufferedReader(new FileReader(xmlPath));\n            line = in.readLine();\n            st = new StringTokenizer(line, \"<>\");\n            token = st.nextToken();\n            /* \n             * If the first line does not contain dvd-homevideo then\n             * we have a bad xml file.\n             */\n            if (!token.equals(\"dvd-homevideo\")) {\n                MessageBox(\"Invalid File Format!\", 1);\n                done = true;\n            }\n            while (((line = in.readLine()) != null) && !done) {\n                st = new StringTokenizer(line, \"<>\");\n                if (!st.nextToken().equals(\"/dvd-homevideo\"))\n                    token = st.nextToken();\n                /* Read in the variables and set them on the form */\n                if (token.equals(\"JLabel\")) {\n                    for (i = 0; i < lbl_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        lbl_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JSpinner\")) {\n                    for (i = 0; i < spn_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        spn_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        // SDK 1.4 didn't like this\n                        spn_widgets[i].setValue(Integer.parseInt(token));\n                        //spn_widgets[i].getModel().setValue((Object)token);\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JCheckBox\")) {\n                    for (i = 0; i < chk_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chk_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chk_widgets[i].setSelected(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JRadioButton\")) {\n                    for (i = 0; i < rd_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        rd_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        rd_widgets[i].setSelected(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JTextField\")) {\n                    for (i = 0; i < txt_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        txt_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        if (!token.substring(1, 4).equals(\"tex\"))\n                            txt_widgets[i].setText(token);\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JButton\")) {\n                    for (i = 0; i < btn_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        btn_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JRadioButtonMenuItem\")) {\n                    for (i = 0; i < chkMenu_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chkMenu_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chkMenu_widgets[i].setSelected(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else {\n                    lblCapture.setEnabled(false);\n                    lblConvert.setEnabled(false);\n                    lblAuthor.setEnabled(false);\n                    lblCaptureProg.setEnabled(false);\n                    lblConvertProg.setEnabled(false);\n                    lblAuthorProg.setEnabled(false);\n                    prgCapture.setEnabled(false);\n                    prgConvert.setEnabled(false);\n                    prgAuthor.setEnabled(false);\n                    lblCaptureProg.setText(\"0%\");\n                    lblConvertProg.setText(\"0%\");\n                    lblAuthorProg.setText(\"0%\");\n                }\n            }\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error while reading the xml file\" + \"\\nfor the requested dvd-homevideo session.\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * Saves the state of all widgets on the GUI form in an xml file\n     * in the users ~/.dvd-homevideo directory\n     */\n    public void WriteSession() throws IOException {\n        int i;\n        /* Again, we must have this exhaustive list of widgets to parse through */\n        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };\n        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };\n        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };\n        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };\n        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };\n        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };\n        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };\n        try {\n            /* Write the file to the users ~/.dvd-homevideo directory */\n            String home = System.getProperty(\"user.home\");\n            File msgboxSave = new File(home + \"/.dvd-homevideo/properties\");\n            BufferedWriter msgboxSaveWriter = new BufferedWriter(new FileWriter(home + \"/.dvd-homevideo/properties\"));\n            msgboxSaveWriter.close();\n            /* Now write the xml file to the users home/dvd-homevideo directory */\n            BufferedWriter writer = new BufferedWriter(new FileWriter(home + \"/.dvd-homevideo/\" + txtTitle.getText() + \".xml\"));\n            writer.write(\"<dvd-homevideo>\");\n            writer.newLine();\n            writer.write(\"\\t<JLabel>\");\n            writer.newLine();\n            for (i = 0; i < lbl_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + lbl_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + lbl_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + lbl_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JLabel>\");\n            writer.newLine();\n            writer.write(\"\\t<JSpinner>\");\n            writer.newLine();\n            for (i = 0; i < spn_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + spn_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + spn_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<value>\" + spn_widgets[i].getValue() + \"</value>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + spn_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JSpinner>\");\n            writer.newLine();\n            writer.write(\"\\t<JCheckBox>\");\n            writer.newLine();\n            for (i = 0; i < chk_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + chk_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + chk_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<selected>\" + chk_widgets[i].isSelected() + \"</selected>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + chk_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JCheckBox>\");\n            writer.newLine();\n            writer.write(\"\\t<JRadioButton>\");\n            writer.newLine();\n            for (i = 0; i < rd_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + rd_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + rd_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<selected>\" + rd_widgets[i].isSelected() + \"</selected>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + rd_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JRadioButton>\");\n            writer.newLine();\n            writer.write(\"\\t<JTextField>\");\n            writer.newLine();\n            for (i = 0; i < txt_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + txt_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + txt_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<text>\" + txt_widgets[i].getText() + \"</text>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + txt_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JTextField>\");\n            writer.newLine();\n            writer.write(\"\\t<JButton>\");\n            writer.newLine();\n            for (i = 0; i < btn_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + btn_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + btn_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + btn_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JButton>\");\n            writer.newLine();\n            writer.write(\"\\t<JRadioButtonMenuItem>\");\n            writer.newLine();\n            for (i = 0; i < chkMenu_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + chkMenu_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + chkMenu_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<selected>\" + chkMenu_widgets[i].isSelected() + \"</selected>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + chkMenu_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JRadioButtonMenuItem>\");\n            writer.newLine();\n            writer.write(\"</dvd-homevideo>\");\n            writer.newLine();\n            writer.close();\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error while writing the xml file\" + \"\\nfor this dvd-homevideo session.\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /*\n    public void setIcon()\n    {\n        javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(\"/logo_32x32.png\"));\n        setIconImage(new javax.swing.ImageIcon(image.getImage()));\n    }\n    */\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    private javax.swing.JButton btnExit;\n\n    private javax.swing.JButton btnOpen_Audio;\n\n    private javax.swing.JButton btnOpen_OutputDir;\n\n    private javax.swing.JButton btnOpen_Picture;\n\n    private javax.swing.JButton btnOpen_TextFile;\n\n    protected javax.swing.JButton btnPlay;\n\n    private javax.swing.JButton btnStart;\n\n    protected javax.swing.JCheckBox chkBurn;\n\n    protected javax.swing.JCheckBox chkMenu;\n\n    protected javax.swing.JCheckBox chkQuality;\n\n    private javax.swing.JFileChooser fcMenuOpen;\n\n    private javax.swing.JFileChooser fcOpen;\n\n    private javax.swing.ButtonGroup grpAspectRatio;\n\n    private javax.swing.ButtonGroup grpFormat;\n\n    private javax.swing.ButtonGroup grpMenuAspectRatio;\n\n    private javax.swing.ButtonGroup grpMenuFormat;\n\n    private javax.swing.ButtonGroup grpMenuIgnore;\n\n    private javax.swing.ButtonGroup grpMenuMode;\n\n    private javax.swing.ButtonGroup grpQuality;\n\n    private javax.swing.JLabel lblAspectRatio;\n\n    private javax.swing.JLabel lblAudio;\n\n    protected javax.swing.JLabel lblAuthor;\n\n    protected javax.swing.JLabel lblAuthorProg;\n\n    protected javax.swing.JLabel lblCapture;\n\n    protected javax.swing.JLabel lblCaptureProg;\n\n    protected javax.swing.JLabel lblConvert;\n\n    protected javax.swing.JLabel lblConvertProg;\n\n    private javax.swing.JLabel lblFormat;\n\n    private javax.swing.JLabel lblMinutes;\n\n    private javax.swing.JLabel lblOutputDir;\n\n    private javax.swing.JLabel lblPicture;\n\n    private javax.swing.JLabel lblSeconds;\n\n    private javax.swing.JLabel lblTextFile;\n\n    private javax.swing.JLabel lblTitle;\n\n    private javax.swing.JMenuItem menuAbout;\n\n    protected javax.swing.JMenuBar menuBarMain;\n\n    private javax.swing.JMenuItem menuBug;\n\n    protected javax.swing.JCheckBoxMenuItem menuChkThread;\n\n    protected javax.swing.JMenuItem menuExit;\n\n    protected javax.swing.JMenu menuFile;\n\n    protected javax.swing.JMenu menuHelp;\n\n    protected javax.swing.JMenuItem menuInternet;\n\n    protected javax.swing.JMenuItem menuOpen;\n\n    private javax.swing.JMenu menuProjProp;\n\n    protected javax.swing.JMenuItem menuREADME;\n\n    private javax.swing.JRadioButtonMenuItem menuRdNTSC;\n\n    private javax.swing.JRadioButtonMenuItem menuRdPAL;\n\n    private javax.swing.JRadioButtonMenuItem menuRd_16_9;\n\n    private javax.swing.JRadioButtonMenuItem menuRd_4_3;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCap;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConv;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConvMenu;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreNone;\n\n    protected javax.swing.JMenuItem menuSave;\n\n    protected javax.swing.JMenu menuTools;\n\n    private javax.swing.JPanel pnlGUI;\n\n    protected javax.swing.JProgressBar prgAuthor;\n\n    protected javax.swing.JProgressBar prgCapture;\n\n    protected javax.swing.JProgressBar prgConvert;\n\n    protected javax.swing.JRadioButton rd16_9;\n\n    protected javax.swing.JRadioButton rd4_3;\n\n    protected javax.swing.JRadioButton rdAverage;\n\n    protected javax.swing.JRadioButton rdGood;\n\n    protected javax.swing.JRadioButton rdNTSC;\n\n    protected javax.swing.JRadioButton rdPAL;\n\n    protected javax.swing.JRadioButton rdSuper;\n\n    private javax.swing.JScrollPane spTextArea;\n\n    protected javax.swing.JSpinner spnMinutes;\n\n    protected javax.swing.JSpinner spnSeconds;\n\n    private javax.swing.JSeparator sprAspectRatio;\n\n    private javax.swing.JSeparator sprCapConvert;\n\n    private javax.swing.JSeparator sprIgnore;\n\n    private javax.swing.JSeparator sprMenuAuthor;\n\n    private javax.swing.JSeparator sprMenuFormatAspect;\n\n    private javax.swing.JSeparator sprMenuThread;\n\n    protected javax.swing.JSeparator sprOpen;\n\n    protected javax.swing.JSeparator sprSave;\n\n    protected javax.swing.JTextArea txtAreaOutput;\n\n    protected javax.swing.JTextField txtAudio;\n\n    protected javax.swing.JTextField txtOutputDir;\n\n    protected javax.swing.JTextField txtPicture;\n\n    protected javax.swing.JTextField txtStatus;\n\n    protected javax.swing.JTextField txtTextFile;\n\n    protected javax.swing.JTextField txtTitle;\n\n    // End of variables declaration//GEN-END:variables\n    /* My GUI variable declarations */\n    protected javax.swing.SpinnerNumberModel spnSecondsSize = new javax.swing.SpinnerNumberModel(0, 0, 59, 1);\n\n    protected javax.swing.SpinnerNumberModel spnMinutesSize = new javax.swing.SpinnerNumberModel(0, 0, 64, 1);\n}\n",
    "test_prompt": "// GUI_0Test.java\n\n\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GUI}.\n* It contains ten unit test cases for the {@link GUI#checkForModules()} method.\n*/\nclass GUI_0Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - This model's maximum context length is 8001 tokens, however you requested 29976 tokens (27976 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.",
            "text": ""
        }
    ],
    "id": "c7fe51eb-b781-41a4-8605-ec55f80c3a5b",
    "prompt_id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_2Test.java",
    "original_code": "// GUI.java\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\n\n/**\n * @author  Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /* \n     * Creates a new form, probably the most compilcated - or\n     * messiest constructor I have ever developed.\n     */\n    public GUI() {\n        /*\n         * initComponents is a netbeans generated method that does\n         * all of the GUI stuff for dvd-homevideo.\n         */\n        initComponents();\n        /* \n         * Sets the maximum allowable values for the minutes\n         * and seconds Spinners.\n         */\n        spnSeconds.setModel(spnSecondsSize);\n        spnMinutes.setModel(spnMinutesSize);\n        /* First do a check for the required programs */\n        if (!checkForProg(DependentPrograms))\n            MessageBox(\"You do not appear to have the necessary\\n\" + \"programs installed for dvd-homevideo to operate\\n\" + \"correctly.  Please check the README file for the\\n\" + \"list of dependencies.  dvd-homevideo will not\\n\" + \"function correctly until all dependencies are installed!\", 1);\n        /* Now check for the required ieee1394 module */\n        if (!checkForModules())\n            MessageBox(\"You do not have the correct modules loaded\\n\" + \"for dvd-homevideo to function properly.  Please\\n\" + \"check the README file for further instructions!\", 1);\n        if (getJMenuBar() != null)\n            (this.getJMenuBar()).setOpaque(false);\n        /* \n         * Create Project directory.  This is where (~/.dvd-homevideo) the \n         * .xml files for each session get stored as well as user preferences.\n         */\n        File ProjectDir = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo\");\n        if (!ProjectDir.exists()) {\n            MessageBox(\"All projects will be automatically saved to: \" + System.getProperty(\"user.home\") + \"/.dvd-homevideo/\", 1);\n            ProjectDir.mkdir();\n        }\n        File ProjProperties = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo/properties\");\n        if (!ProjProperties.exists()) {\n            try {\n                BufferedWriter projProp = new BufferedWriter(new FileWriter(ProjProperties));\n                projProp.close();\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(strOutputDir, ex);\n                MessageBox(\"IO Error writing to properties file...in GUI.java\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n            }\n        }\n        /* If the user has specified individual customization, then read it */\n        ReadProjProperties();\n    }\n\n    /* End of constructor */\n    javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(\"/logo_32x32.png\"));\n\n    protected String strOutputDir;\n\n    protected boolean blnBegin;\n\n    /* My list of dependent programs for dvd-homevideo */\n    protected String[] DependentPrograms = { \"dvgrab\", \"transcode\", \"mplex\", \"dvd-menu\", \"dvdauthor\", \"growisofs\", \"ffmpeg\", \"lame\", \"sox\" };\n\n    /**\n     * This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\n    private void initComponents() {\n        grpQuality = new javax.swing.ButtonGroup();\n        fcOpen = new javax.swing.JFileChooser();\n        grpFormat = new javax.swing.ButtonGroup();\n        grpAspectRatio = new javax.swing.ButtonGroup();\n        fcMenuOpen = new javax.swing.JFileChooser();\n        grpMenuFormat = new javax.swing.ButtonGroup();\n        grpMenuAspectRatio = new javax.swing.ButtonGroup();\n        grpMenuMode = new javax.swing.ButtonGroup();\n        grpMenuIgnore = new javax.swing.ButtonGroup();\n        pnlGUI = new javax.swing.JPanel();\n        lblMinutes = new javax.swing.JLabel();\n        spnMinutes = new javax.swing.JSpinner();\n        lblSeconds = new javax.swing.JLabel();\n        spnSeconds = new javax.swing.JSpinner();\n        chkQuality = new javax.swing.JCheckBox();\n        rdSuper = new javax.swing.JRadioButton();\n        rdGood = new javax.swing.JRadioButton();\n        rdAverage = new javax.swing.JRadioButton();\n        btnStart = new javax.swing.JButton();\n        btnExit = new javax.swing.JButton();\n        chkMenu = new javax.swing.JCheckBox();\n        lblPicture = new javax.swing.JLabel();\n        txtPicture = new javax.swing.JTextField();\n        lblAudio = new javax.swing.JLabel();\n        txtAudio = new javax.swing.JTextField();\n        btnOpen_Picture = new javax.swing.JButton();\n        prgCapture = new javax.swing.JProgressBar();\n        prgConvert = new javax.swing.JProgressBar();\n        prgAuthor = new javax.swing.JProgressBar();\n        btnOpen_Audio = new javax.swing.JButton();\n        lblTextFile = new javax.swing.JLabel();\n        txtTextFile = new javax.swing.JTextField();\n        btnOpen_TextFile = new javax.swing.JButton();\n        txtOutputDir = new javax.swing.JTextField();\n        lblOutputDir = new javax.swing.JLabel();\n        txtTitle = new javax.swing.JTextField();\n        lblTitle = new javax.swing.JLabel();\n        btnOpen_OutputDir = new javax.swing.JButton();\n        chkBurn = new javax.swing.JCheckBox();\n        lblCaptureProg = new javax.swing.JLabel();\n        lblConvertProg = new javax.swing.JLabel();\n        lblAuthorProg = new javax.swing.JLabel();\n        lblCapture = new javax.swing.JLabel();\n        lblConvert = new javax.swing.JLabel();\n        lblAuthor = new javax.swing.JLabel();\n        sprCapConvert = new javax.swing.JSeparator();\n        sprMenuAuthor = new javax.swing.JSeparator();\n        spTextArea = new javax.swing.JScrollPane();\n        txtAreaOutput = new javax.swing.JTextArea();\n        rdNTSC = new javax.swing.JRadioButton();\n        rdPAL = new javax.swing.JRadioButton();\n        rd4_3 = new javax.swing.JRadioButton();\n        rd16_9 = new javax.swing.JRadioButton();\n        lblFormat = new javax.swing.JLabel();\n        lblAspectRatio = new javax.swing.JLabel();\n        sprAspectRatio = new javax.swing.JSeparator();\n        btnPlay = new javax.swing.JButton();\n        txtStatus = new javax.swing.JTextField();\n        menuBarMain = new javax.swing.JMenuBar();\n        menuFile = new javax.swing.JMenu();\n        menuOpen = new javax.swing.JMenuItem();\n        sprOpen = new javax.swing.JSeparator();\n        menuSave = new javax.swing.JMenuItem();\n        sprSave = new javax.swing.JSeparator();\n        menuExit = new javax.swing.JMenuItem();\n        menuTools = new javax.swing.JMenu();\n        menuRd_IgnoreNone = new javax.swing.JRadioButtonMenuItem();\n        menuRd_IgnoreCap = new javax.swing.JRadioButtonMenuItem();\n        menuRd_IgnoreCapConv = new javax.swing.JRadioButtonMenuItem();\n        menuRd_IgnoreCapConvMenu = new javax.swing.JRadioButtonMenuItem();\n        sprIgnore = new javax.swing.JSeparator();\n        menuProjProp = new javax.swing.JMenu();\n        menuRdNTSC = new javax.swing.JRadioButtonMenuItem();\n        menuRdPAL = new javax.swing.JRadioButtonMenuItem();\n        sprMenuFormatAspect = new javax.swing.JSeparator();\n        menuRd_4_3 = new javax.swing.JRadioButtonMenuItem();\n        menuRd_16_9 = new javax.swing.JRadioButtonMenuItem();\n        sprMenuThread = new javax.swing.JSeparator();\n        menuChkThread = new javax.swing.JCheckBoxMenuItem();\n        menuHelp = new javax.swing.JMenu();\n        menuInternet = new javax.swing.JMenuItem();\n        menuREADME = new javax.swing.JMenuItem();\n        menuBug = new javax.swing.JMenuItem();\n        menuAbout = new javax.swing.JMenuItem();\n        fcOpen.setName(\"fcOpen\");\n        getContentPane().setLayout(new java.awt.GridBagLayout());\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"dvd-homevideo\");\n        setIconImage(image.getImage());\n        setName(\"dvd-homevideo\");\n        setResizable(false);\n        pnlGUI.setLayout(null);\n        pnlGUI.setToolTipText(\"dvd-homevideo\");\n        pnlGUI.setMaximumSize(new java.awt.Dimension(510, 620));\n        pnlGUI.setMinimumSize(new java.awt.Dimension(510, 620));\n        pnlGUI.setName(\"pnlGUI\");\n        pnlGUI.setOpaque(false);\n        pnlGUI.setPreferredSize(new java.awt.Dimension(510, 620));\n        lblMinutes.setText(\"Capture Time in Minutes\");\n        lblMinutes.setName(\"lblMinutes\");\n        pnlGUI.add(lblMinutes);\n        lblMinutes.setBounds(20, 10, 154, 15);\n        spnMinutes.setToolTipText(\"Minutes Portion of the Capture Time\");\n        spnMinutes.setMinimumSize(new java.awt.Dimension(35, 20));\n        spnMinutes.setName(\"spnMinutes\");\n        spnMinutes.setNextFocusableComponent(spnSeconds);\n        spnMinutes.setPreferredSize(new java.awt.Dimension(35, 20));\n        spnMinutes.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                spnMinutesStateChanged(evt);\n            }\n        });\n        pnlGUI.add(spnMinutes);\n        spnMinutes.setBounds(140, 30, 35, 20);\n        lblSeconds.setText(\"Capture Time in Seconds\");\n        lblSeconds.setName(\"lblSeconds\");\n        pnlGUI.add(lblSeconds);\n        lblSeconds.setBounds(20, 50, 155, 15);\n        spnSeconds.setToolTipText(\"Seconds Portion of the Capture Time\");\n        spnSeconds.setName(\"spnSeconds\");\n        spnSeconds.setNextFocusableComponent(chkQuality);\n        spnSeconds.setPreferredSize(new java.awt.Dimension(35, 20));\n        spnSeconds.setRequestFocusEnabled(false);\n        spnSeconds.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                spnSecondsStateChanged(evt);\n            }\n        });\n        pnlGUI.add(spnSeconds);\n        spnSeconds.setBounds(140, 70, 35, 20);\n        chkQuality.setText(\"Quality for DVD compression\");\n        chkQuality.setToolTipText(\"Check this box to enable quality control\");\n        chkQuality.setName(\"chkQuality\");\n        chkQuality.setNextFocusableComponent(rdSuper);\n        chkQuality.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                chkQualityKeyTyped(evt);\n            }\n        });\n        chkQuality.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                chkQualityMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(chkQuality);\n        chkQuality.setBounds(260, 10, 208, 23);\n        grpQuality.add(rdSuper);\n        rdSuper.setSelected(true);\n        rdSuper.setText(\"Super\");\n        rdSuper.setToolTipText(\"Best Quality...recommended\");\n        rdSuper.setEnabled(false);\n        rdSuper.setName(\"rdSuper\");\n        rdSuper.setNextFocusableComponent(rdGood);\n        pnlGUI.add(rdSuper);\n        rdSuper.setBounds(280, 30, 60, 23);\n        grpQuality.add(rdGood);\n        rdGood.setText(\"Good\");\n        rdGood.setToolTipText(\"Good Quality...a little faster\");\n        rdGood.setEnabled(false);\n        rdGood.setName(\"rdGood\");\n        rdGood.setNextFocusableComponent(rdAverage);\n        pnlGUI.add(rdGood);\n        rdGood.setBounds(280, 50, 58, 23);\n        grpQuality.add(rdAverage);\n        rdAverage.setText(\"Average\");\n        rdAverage.setToolTipText(\"Nothing special...but fast\");\n        rdAverage.setEnabled(false);\n        rdAverage.setName(\"rdAverage\");\n        rdAverage.setNextFocusableComponent(rdNTSC);\n        pnlGUI.add(rdAverage);\n        rdAverage.setBounds(280, 70, 75, 23);\n        btnStart.setText(\"Start\");\n        btnStart.setToolTipText(\"Start Capturing Video from your Digital Camcorder\");\n        btnStart.setEnabled(false);\n        btnStart.setName(\"btnStart\");\n        btnStart.setNextFocusableComponent(btnExit);\n        btnStart.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnStartKeyTyped(evt);\n            }\n        });\n        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnStartMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnStart);\n        btnStart.setBounds(250, 400, 70, 25);\n        btnExit.setText(\"Exit\");\n        btnExit.setToolTipText(\"Exit dvd-homevideo\");\n        btnExit.setName(\"btnExit\");\n        btnExit.setNextFocusableComponent(btnPlay);\n        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnExitKeyTyped(evt);\n            }\n        });\n        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnExitMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnExit);\n        btnExit.setBounds(330, 400, 70, 25);\n        chkMenu.setText(\"Custom DVD Menu\");\n        chkMenu.setToolTipText(\"Enables Custom Picture and Audio for DVD Background\");\n        chkMenu.setName(\"chkMenu\");\n        chkMenu.setNextFocusableComponent(txtPicture);\n        chkMenu.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                chkMenuKeyTyped(evt);\n            }\n        });\n        chkMenu.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                chkMenuMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(chkMenu);\n        chkMenu.setBounds(10, 170, 144, 23);\n        lblPicture.setText(\"Path to DVD Menu Picture\");\n        lblPicture.setEnabled(false);\n        lblPicture.setName(\"lblPicture\");\n        pnlGUI.add(lblPicture);\n        lblPicture.setBounds(10, 200, 160, 15);\n        txtPicture.setEnabled(false);\n        txtPicture.setName(\"txtPicture\");\n        txtPicture.setNextFocusableComponent(btnOpen_Picture);\n        pnlGUI.add(txtPicture);\n        txtPicture.setBounds(10, 220, 170, 19);\n        lblAudio.setText(\"Path to DVD Menu Audio\");\n        lblAudio.setEnabled(false);\n        lblAudio.setName(\"lblAudio\");\n        pnlGUI.add(lblAudio);\n        lblAudio.setBounds(10, 250, 155, 15);\n        txtAudio.setEnabled(false);\n        txtAudio.setName(\"txtAudio\");\n        txtAudio.setNextFocusableComponent(btnOpen_Audio);\n        pnlGUI.add(txtAudio);\n        txtAudio.setBounds(10, 270, 170, 19);\n        btnOpen_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_Picture.setEnabled(false);\n        btnOpen_Picture.setName(\"btnOpen_Picture\");\n        btnOpen_Picture.setNextFocusableComponent(txtAudio);\n        btnOpen_Picture.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_PictureKeyTyped(evt);\n            }\n        });\n        btnOpen_Picture.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_PictureMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_Picture);\n        btnOpen_Picture.setBounds(190, 220, 30, 25);\n        prgCapture.setEnabled(false);\n        prgCapture.setName(\"prgCapture\");\n        pnlGUI.add(prgCapture);\n        prgCapture.setBounds(10, 360, 148, 14);\n        prgConvert.setEnabled(false);\n        prgConvert.setName(\"prgConvert\");\n        pnlGUI.add(prgConvert);\n        prgConvert.setBounds(180, 360, 148, 14);\n        prgAuthor.setEnabled(false);\n        prgAuthor.setName(\"prgAuthor\");\n        pnlGUI.add(prgAuthor);\n        prgAuthor.setBounds(350, 360, 148, 14);\n        btnOpen_Audio.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_Audio.setEnabled(false);\n        btnOpen_Audio.setName(\"btnOpen_Audio\");\n        btnOpen_Audio.setNextFocusableComponent(txtOutputDir);\n        btnOpen_Audio.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_AudioKeyTyped(evt);\n            }\n        });\n        btnOpen_Audio.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_AudioMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_Audio);\n        btnOpen_Audio.setBounds(190, 270, 30, 25);\n        lblTextFile.setText(\"Path to Text File (optional)\");\n        lblTextFile.setToolTipText(\"This text file specifies the chapter titles for the DVD\");\n        lblTextFile.setName(\"lblTextFile\");\n        pnlGUI.add(lblTextFile);\n        lblTextFile.setBounds(260, 270, 165, 15);\n        txtTextFile.setName(\"txtTextFile\");\n        txtTextFile.setNextFocusableComponent(btnOpen_TextFile);\n        pnlGUI.add(txtTextFile);\n        txtTextFile.setBounds(260, 290, 200, 19);\n        btnOpen_TextFile.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_TextFile.setName(\"btnOpen_TextFile\");\n        btnOpen_TextFile.setNextFocusableComponent(btnStart);\n        btnOpen_TextFile.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_TextFileKeyTyped(evt);\n            }\n        });\n        btnOpen_TextFile.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_TextFileMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_TextFile);\n        btnOpen_TextFile.setBounds(470, 290, 30, 25);\n        txtOutputDir.setName(\"txtOutputDir\");\n        txtOutputDir.setNextFocusableComponent(btnOpen_OutputDir);\n        txtOutputDir.addFocusListener(new java.awt.event.FocusAdapter() {\n\n            public void focusLost(java.awt.event.FocusEvent evt) {\n                txtOutputDirFocusLost(evt);\n            }\n        });\n        pnlGUI.add(txtOutputDir);\n        txtOutputDir.setBounds(260, 190, 200, 19);\n        lblOutputDir.setText(\"Path to the Output Directory\");\n        lblOutputDir.setName(\"lblOutputDir\");\n        pnlGUI.add(lblOutputDir);\n        lblOutputDir.setBounds(260, 170, 177, 15);\n        txtTitle.setName(\"txtTitle\");\n        txtTitle.setNextFocusableComponent(txtTextFile);\n        txtTitle.addFocusListener(new java.awt.event.FocusAdapter() {\n\n            public void focusLost(java.awt.event.FocusEvent evt) {\n                txtTitleFocusLost(evt);\n            }\n        });\n        pnlGUI.add(txtTitle);\n        txtTitle.setBounds(260, 240, 200, 19);\n        lblTitle.setText(\"Enter a Title for the DVD\");\n        lblTitle.setName(\"lblTitle\");\n        pnlGUI.add(lblTitle);\n        lblTitle.setBounds(260, 220, 153, 15);\n        btnOpen_OutputDir.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_OutputDir.setName(\"btnOpen_OutputDir\");\n        btnOpen_OutputDir.setNextFocusableComponent(txtTitle);\n        btnOpen_OutputDir.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_OutputDirKeyTyped(evt);\n            }\n        });\n        btnOpen_OutputDir.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_OutputDirMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_OutputDir);\n        btnOpen_OutputDir.setBounds(470, 190, 30, 25);\n        chkBurn.setText(\"Burn to DVD\");\n        chkBurn.setName(\"chkBurn\");\n        chkBurn.setNextFocusableComponent(chkMenu);\n        pnlGUI.add(chkBurn);\n        chkBurn.setBounds(340, 120, 103, 23);\n        lblCaptureProg.setText(\"0%\");\n        lblCaptureProg.setEnabled(false);\n        lblCaptureProg.setName(\"lblCaptureProg\");\n        pnlGUI.add(lblCaptureProg);\n        lblCaptureProg.setBounds(20, 380, 40, 15);\n        lblConvertProg.setText(\"0%\");\n        lblConvertProg.setEnabled(false);\n        lblConvertProg.setName(\"lblConvertProg\");\n        pnlGUI.add(lblConvertProg);\n        lblConvertProg.setBounds(190, 380, 40, 15);\n        lblAuthorProg.setText(\"0%\");\n        lblAuthorProg.setEnabled(false);\n        lblAuthorProg.setName(\"lblAuthorProg\");\n        pnlGUI.add(lblAuthorProg);\n        lblAuthorProg.setBounds(360, 380, 40, 15);\n        lblCapture.setText(\"Capture Progress\");\n        lblCapture.setEnabled(false);\n        lblCapture.setName(\"lblCapture\");\n        pnlGUI.add(lblCapture);\n        lblCapture.setBounds(10, 340, 107, 15);\n        lblConvert.setText(\"Conversion Progress\");\n        lblConvert.setEnabled(false);\n        lblConvert.setName(\"lblConvert\");\n        pnlGUI.add(lblConvert);\n        lblConvert.setBounds(180, 340, 129, 15);\n        lblAuthor.setText(\"Authoring DVD\");\n        lblAuthor.setEnabled(false);\n        lblAuthor.setName(\"lblAuthor\");\n        pnlGUI.add(lblAuthor);\n        lblAuthor.setBounds(350, 340, 95, 15);\n        sprCapConvert.setMinimumSize(new java.awt.Dimension(50, 10));\n        sprCapConvert.setName(\"sprCapConvert\");\n        sprCapConvert.setPreferredSize(new java.awt.Dimension(50, 5));\n        pnlGUI.add(sprCapConvert);\n        sprCapConvert.setBounds(10, 160, 490, 5);\n        sprMenuAuthor.setMinimumSize(new java.awt.Dimension(50, 10));\n        sprMenuAuthor.setName(\"sprMenuAuthor\");\n        sprMenuAuthor.setPreferredSize(new java.awt.Dimension(50, 5));\n        pnlGUI.add(sprMenuAuthor);\n        sprMenuAuthor.setBounds(10, 330, 490, 5);\n        spTextArea.setAutoscrolls(true);\n        spTextArea.setName(\"spTextArea\");\n        txtAreaOutput.setEditable(false);\n        txtAreaOutput.setLineWrap(true);\n        txtAreaOutput.setToolTipText(\"Output during program execution\");\n        txtAreaOutput.setWrapStyleWord(true);\n        txtAreaOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n        txtAreaOutput.setName(\"txtAreaOutput\");\n        spTextArea.setViewportView(txtAreaOutput);\n        pnlGUI.add(spTextArea);\n        spTextArea.setBounds(20, 470, 470, 140);\n        grpFormat.add(rdNTSC);\n        rdNTSC.setSelected(true);\n        rdNTSC.setText(\"NTSC\");\n        rdNTSC.setName(\"rdNTSC\");\n        rdNTSC.setNextFocusableComponent(rdPAL);\n        pnlGUI.add(rdNTSC);\n        rdNTSC.setBounds(20, 130, 58, 23);\n        grpFormat.add(rdPAL);\n        rdPAL.setText(\"PAL\");\n        rdPAL.setName(\"rdPAL\");\n        rdPAL.setNextFocusableComponent(rd4_3);\n        pnlGUI.add(rdPAL);\n        rdPAL.setBounds(90, 130, 60, 23);\n        grpAspectRatio.add(rd4_3);\n        rd4_3.setSelected(true);\n        rd4_3.setText(\"4:3\");\n        rd4_3.setName(\"rd4_3\");\n        rd4_3.setNextFocusableComponent(rd16_9);\n        pnlGUI.add(rd4_3);\n        rd4_3.setBounds(190, 130, 50, 23);\n        grpAspectRatio.add(rd16_9);\n        rd16_9.setText(\"16:9\");\n        rd16_9.setName(\"rd16_9\");\n        rd16_9.setNextFocusableComponent(chkBurn);\n        pnlGUI.add(rd16_9);\n        rd16_9.setBounds(240, 130, 60, 23);\n        lblFormat.setText(\"Video Format\");\n        lblFormat.setName(\"lblFormat\");\n        pnlGUI.add(lblFormat);\n        lblFormat.setBounds(20, 110, 110, 15);\n        lblAspectRatio.setText(\"Aspect Ratio\");\n        lblAspectRatio.setName(\"lblAspectRatio\");\n        pnlGUI.add(lblAspectRatio);\n        lblAspectRatio.setBounds(190, 110, 100, 15);\n        sprAspectRatio.setMinimumSize(new java.awt.Dimension(50, 10));\n        sprAspectRatio.setName(\"sprAspectRatio\");\n        sprAspectRatio.setPreferredSize(new java.awt.Dimension(50, 5));\n        pnlGUI.add(sprAspectRatio);\n        sprAspectRatio.setBounds(10, 100, 490, 5);\n        btnPlay.setText(\"Play\");\n        btnPlay.setEnabled(false);\n        btnPlay.setNextFocusableComponent(spnMinutes);\n        btnPlay.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnPlayMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnPlay);\n        btnPlay.setBounds(410, 400, 70, 25);\n        txtStatus.setBackground(new java.awt.Color(153, 153, 153));\n        txtStatus.setEditable(false);\n        txtStatus.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n        txtStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);\n        txtStatus.setText(\"Status\");\n        txtStatus.setMaximumSize(new java.awt.Dimension(59, 25));\n        txtStatus.setMinimumSize(new java.awt.Dimension(59, 25));\n        pnlGUI.add(txtStatus);\n        txtStatus.setBounds(410, 430, 70, 30);\n        getContentPane().add(pnlGUI, new java.awt.GridBagConstraints());\n        menuBarMain.setName(\"menuBarMain\");\n        menuFile.setMnemonic('f');\n        menuFile.setText(\"File\");\n        menuFile.setName(\"menuFile\");\n        menuOpen.setMnemonic('o');\n        menuOpen.setText(\"Open\");\n        menuOpen.setName(\"menuOpen\");\n        menuOpen.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuOpenMousePressed(evt);\n            }\n        });\n        menuFile.add(menuOpen);\n        sprOpen.setName(\"sprOpen\");\n        menuFile.add(sprOpen);\n        menuSave.setMnemonic('s');\n        menuSave.setText(\"Save\");\n        menuSave.setName(\"menuSave\");\n        menuSave.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuSaveMousePressed(evt);\n            }\n        });\n        menuFile.add(menuSave);\n        sprSave.setName(\"sprSave\");\n        menuFile.add(sprSave);\n        menuExit.setMnemonic('x');\n        menuExit.setText(\"Exit\");\n        menuExit.setBorderPainted(false);\n        menuExit.setFocusable(true);\n        menuExit.setName(\"menuExit\");\n        menuExit.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuExitMousePressed(evt);\n            }\n        });\n        menuFile.add(menuExit);\n        menuBarMain.add(menuFile);\n        menuTools.setMnemonic('t');\n        menuTools.setText(\"Tools\");\n        menuTools.setName(\"menuTools\");\n        grpMenuIgnore.add(menuRd_IgnoreNone);\n        menuRd_IgnoreNone.setText(\"Reset\");\n        menuRd_IgnoreNone.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreNoneStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreNone);\n        grpMenuIgnore.add(menuRd_IgnoreCap);\n        menuRd_IgnoreCap.setText(\"Skip Capture\");\n        menuRd_IgnoreCap.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreCapStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreCap);\n        grpMenuIgnore.add(menuRd_IgnoreCapConv);\n        menuRd_IgnoreCapConv.setText(\"Skip Capture/Transcode\");\n        menuRd_IgnoreCapConv.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreCapConvStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreCapConv);\n        grpMenuIgnore.add(menuRd_IgnoreCapConvMenu);\n        menuRd_IgnoreCapConvMenu.setText(\"Skip Capture/Transcode/Menu\");\n        menuRd_IgnoreCapConvMenu.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreCapConvMenuStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreCapConvMenu);\n        menuTools.add(sprIgnore);\n        menuProjProp.setText(\"Project Properties (Default)\");\n        grpMenuFormat.add(menuRdNTSC);\n        menuRdNTSC.setSelected(true);\n        menuRdNTSC.setText(\"NTSC\");\n        menuRdNTSC.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRdNTSCItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRdNTSC);\n        grpMenuFormat.add(menuRdPAL);\n        menuRdPAL.setText(\"PAL\");\n        menuRdPAL.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRdPALItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRdPAL);\n        menuProjProp.add(sprMenuFormatAspect);\n        grpMenuAspectRatio.add(menuRd_4_3);\n        menuRd_4_3.setSelected(true);\n        menuRd_4_3.setText(\"4:3\");\n        menuRd_4_3.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRd_4_3ItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRd_4_3);\n        grpMenuAspectRatio.add(menuRd_16_9);\n        menuRd_16_9.setText(\"16:9\");\n        menuRd_16_9.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRd_16_9ItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRd_16_9);\n        menuProjProp.add(sprMenuThread);\n        menuChkThread.setText(\"Enable Multi-Threading\");\n        menuChkThread.setToolTipText(\"EXPERIMENTAL!!! Very unstable!!!  This allows dvgrab and transcode to run at the same time...speeding up the process by as much as 10%\");\n        menuChkThread.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuChkThreadItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuChkThread);\n        menuTools.add(menuProjProp);\n        menuBarMain.add(menuTools);\n        menuHelp.setMnemonic('h');\n        menuHelp.setText(\"Help\");\n        menuHelp.setName(\"menuHelp\");\n        menuInternet.setText(\"dvd-homevideo website\");\n        menuInternet.setName(\"menuInternet\");\n        menuInternet.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuInternetMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuInternet);\n        menuREADME.setText(\"README File\");\n        menuREADME.setName(\"menuREADME\");\n        menuREADME.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuREADMEMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuREADME);\n        menuBug.setText(\"Submit Bug\");\n        menuBug.setName(\"menuBug\");\n        menuBug.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuBugMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuBug);\n        menuAbout.setText(\"About dvd-homevideo\");\n        menuAbout.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuAboutMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuAbout);\n        menuBarMain.add(menuHelp);\n        setJMenuBar(menuBarMain);\n        pack();\n    }\n\n    // </editor-fold>//GEN-END:initComponents\n    private //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged\n    menuRd_IgnoreNoneStateChanged(//GEN-FIRST:event_menuRd_IgnoreNoneStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreNoneStateChanged\n        if (menuRd_IgnoreNone.isSelected()) {\n            lblMinutes.setEnabled(true);\n            spnMinutes.setEnabled(true);\n            lblSeconds.setEnabled(true);\n            spnSeconds.setEnabled(true);\n            chkQuality.setEnabled(true);\n            lblFormat.setEnabled(true);\n            rdNTSC.setEnabled(true);\n            rdPAL.setEnabled(true);\n            lblAspectRatio.setEnabled(true);\n            rd4_3.setEnabled(true);\n            rd16_9.setEnabled(true);\n            chkMenu.setEnabled(true);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreNoneStateChanged\n    private //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged\n    menuRd_IgnoreCapConvMenuStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreCapConvMenuStateChanged\n        if (menuRd_IgnoreCapConv.isSelected()) {\n            lblMinutes.setEnabled(false);\n            spnMinutes.setEnabled(false);\n            lblSeconds.setEnabled(false);\n            spnSeconds.setEnabled(false);\n            chkQuality.setEnabled(false);\n            lblFormat.setEnabled(false);\n            rdNTSC.setEnabled(false);\n            rdPAL.setEnabled(false);\n            lblAspectRatio.setEnabled(false);\n            rd4_3.setEnabled(false);\n            rd16_9.setEnabled(false);\n            chkMenu.setEnabled(false);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreCapConvMenuStateChanged\n    private //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged\n    menuRd_IgnoreCapConvStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreCapConvStateChanged\n        if (menuRd_IgnoreCapConv.isSelected()) {\n            lblMinutes.setEnabled(false);\n            spnMinutes.setEnabled(false);\n            lblSeconds.setEnabled(false);\n            spnSeconds.setEnabled(false);\n            chkQuality.setEnabled(false);\n            lblFormat.setEnabled(false);\n            rdNTSC.setEnabled(false);\n            rdPAL.setEnabled(false);\n            lblAspectRatio.setEnabled(false);\n            rd4_3.setEnabled(false);\n            rd16_9.setEnabled(false);\n            chkMenu.setEnabled(true);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreCapConvStateChanged\n    private //GEN-FIRST:event_menuRd_IgnoreCapStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreCapStateChanged\n    menuRd_IgnoreCapStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreCapStateChanged\n        if (menuRd_IgnoreCap.isSelected()) {\n            lblMinutes.setEnabled(false);\n            spnMinutes.setEnabled(false);\n            lblSeconds.setEnabled(false);\n            spnSeconds.setEnabled(false);\n            chkQuality.setEnabled(true);\n            lblFormat.setEnabled(true);\n            rdNTSC.setEnabled(true);\n            rdPAL.setEnabled(true);\n            lblAspectRatio.setEnabled(true);\n            rd4_3.setEnabled(true);\n            rd16_9.setEnabled(true);\n            chkMenu.setEnabled(true);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreCapStateChanged\n    private //GEN-FIRST:event_txtOutputDirFocusLost\n    void //GEN-FIRST:event_txtOutputDirFocusLost\n    txtOutputDirFocusLost(//GEN-FIRST:event_txtOutputDirFocusLost\n    java.awt.event.FocusEvent evt) {\n        //GEN-HEADEREND:event_txtOutputDirFocusLost\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_txtOutputDirFocusLost\n    private //GEN-FIRST:event_txtTitleFocusLost\n    void //GEN-FIRST:event_txtTitleFocusLost\n    txtTitleFocusLost(//GEN-FIRST:event_txtTitleFocusLost\n    java.awt.event.FocusEvent evt) {\n        //GEN-HEADEREND:event_txtTitleFocusLost\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_txtTitleFocusLost\n    private //GEN-FIRST:event_btnOpen_OutputDirKeyTyped\n    void //GEN-FIRST:event_btnOpen_OutputDirKeyTyped\n    btnOpen_OutputDirKeyTyped(//GEN-FIRST:event_btnOpen_OutputDirKeyTyped\n    java.awt.event.KeyEvent evt) {\n        //GEN-HEADEREND:event_btnOpen_OutputDirKeyTyped\n        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_OutputDirKeyTyped\n    private //GEN-FIRST:event_btnOpen_OutputDirMouseClicked\n    void //GEN-FIRST:event_btnOpen_OutputDirMouseClicked\n    btnOpen_OutputDirMouseClicked(//GEN-FIRST:event_btnOpen_OutputDirMouseClicked\n    java.awt.event.MouseEvent evt) {\n        //GEN-HEADEREND:event_btnOpen_OutputDirMouseClicked\n        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_OutputDirMouseClicked\n    private //GEN-FIRST:event_spnSecondsStateChanged\n    void //GEN-FIRST:event_spnSecondsStateChanged\n    spnSecondsStateChanged(//GEN-FIRST:event_spnSecondsStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_spnSecondsStateChanged\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_spnSecondsStateChanged\n    private //GEN-FIRST:event_spnMinutesStateChanged\n    void //GEN-FIRST:event_spnMinutesStateChanged\n    spnMinutesStateChanged(//GEN-FIRST:event_spnMinutesStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_spnMinutesStateChanged\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_spnMinutesStateChanged\n    private void btnStartKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnStartKeyTyped\n        if (evt.getKeyChar() == evt.VK_ENTER) {\n            try {\n                /* \n                 * Automatically save the configuration in the users ~/.dvd-homevideo\n                 * directory.  This way if they forget to click on the Save button in\n                 * the File menu, it will still be saved once they start capturing \n                 * from their camcorder. \n                 */\n                WriteSession();\n            } catch (IOException e) {\n            }\n            blnBegin = true;\n            btnPlay.setEnabled(false);\n        }\n    }\n\n    //GEN-LAST:event_btnStartKeyTyped\n    private void btnExitKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnExitKeyTyped\n        if (evt.getKeyChar() == evt.VK_ENTER)\n            ExitDVDHomevideo();\n    }\n\n    //GEN-LAST:event_btnExitKeyTyped\n    private void menuChkThreadItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuChkThreadItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuChkThreadItemStateChanged\n    private void menuAboutMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuAboutMousePressed\n        MessageBox(\"dvd-homevideo, version 0.4\\n\" + \"Created by: Shane Santner\", 1);\n    }\n\n    //GEN-LAST:event_menuAboutMousePressed\n    /**\n     * This is the code that handles the user clicking the Exit button.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnExitMouseClicked\n        ExitDVDHomevideo();\n    }\n\n    //GEN-LAST:event_btnExitMouseClicked\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRd_16_9ItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRd_16_9ItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRd_16_9ItemStateChanged\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRd_4_3ItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRd_4_3ItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRd_4_3ItemStateChanged\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRdPALItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRdPALItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRdPALItemStateChanged\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRdNTSCItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRdNTSCItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRdNTSCItemStateChanged\n    /**\n     * This is the code that handles the user clicking the Play button.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void btnPlayMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnPlayMouseClicked\n        /*\n         * Try to play the DVD in kaffeine first, if that fails then\n         * try xine next.  TODO Need to also add code for mplayer as well.\n         */\n        try {\n            String[] cmd = { \"kaffeine\", \"dvd:\" + strOutputDir + \"/DVD/\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"xine\", \"dvd:\" + strOutputDir + \"/DVD/\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have xine or kaffeine installed.\\n\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_btnPlayMouseClicked\n    /**\n     * This is the code that handles the user clicking on the SubmitBug button\n     * in the Help menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuBugMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuBugMousePressed\n        /* Open a web browser pointing to the hard coded link */\n        try {\n            String[] cmd = { \"firefox\", \"http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"konqueror\", \"http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have firefox or konqueror installed.\\n\" + \"Open up your favorite web browser and paste:\\n\" + \"http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\\n\" + \"in the address bar to submit a bug for dvd-homevideo.\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_menuBugMousePressed\n    /**\n     * If you don't need to recapture video from the camcorder because of\n     * an error later in the program, then you can check this box in the Tools\n     * menu and this will allow you to not have to recapture.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    /**\n     * If you don't need to recapture video or retranscode the video to DVD format\n     * because of an error later in the program, then you can check this box in\n     * the Tools menu and this will allow you to not have to recapture or retranscode.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    /**\n     * If you only need to rerun dvd-author then you can check this box in\n     * the Tools menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    /**\n     * This is the code that handles the user clicking the Open button\n     * from the File menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuOpenMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuOpenMousePressed\n        File home = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo\");\n        fcMenuOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        fcMenuOpen.addChoosableFileFilter(new CustomFileFilter(\".xml\"));\n        fcMenuOpen.setCurrentDirectory(home);\n        int returnVal = fcMenuOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            ReadSession(fcMenuOpen.getSelectedFile().getPath());\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuOpenMousePressed\n    /**\n     * This is the code that handles the user clicking the Save button\n     * from the File menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuSaveMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuSaveMousePressed\n        /* \n         * The default action is to call WriteSession to store all of the \n         * GUI widget information for later retrieval.\n         */\n        try {\n            WriteSession();\n        } catch (IOException e) {\n        }\n    }\n\n    //GEN-LAST:event_menuSaveMousePressed\n    /**\n     * This is the code that handles the user clicking the dvd-homevideo website\n     * button from the Help menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuInternetMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuInternetMousePressed\n        /* Open a web browser pointing to the hard coded link */\n        try {\n            String[] cmd = { \"firefox\", \"http://dvd-homevideo.sourceforge.net/\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"konqueror\", \"http://dvd-homevideo.sourceforge.net/\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have firefox or konqueror installed.\\n\" + \"Open up your favorite web browser and paste:\\n\" + \"http://dvd-homevideo.sourceforge.net/\\n\" + \"in the address bar for help with running dvd-homevideo.\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_menuInternetMousePressed\n    /**\n     * This is the code that handles the user clicking the README file\n     * button from the Help menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuREADMEMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuREADMEMousePressed\n        /* Open a web browser pointing to the hard coded link */\n        try {\n            String[] cmd = { \"firefox\", \"http://dvd-homevideo.sourceforge.net/README.html\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"konqueror\", \"http://dvd-homevideo.sourceforge.net/README.html\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have firefox or konqueror installed.\\n\" + \"Open up your favorite web browser and paste:\\n\" + \"http://dvd-homevideo.sourceforge.net/README.html\\n\" + \"in the address bar for help with running dvd-homevideo.\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_menuREADMEMousePressed\n    /**\n     * This is the code that handles the user clicking the Exit button\n     * from the File menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuExitMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuExitMousePressed\n        /* TODO Write properties of PAL/NTSC and 4:3/16:9 to properties file */\n        ExitDVDHomevideo();\n    }\n\n    //GEN-LAST:event_menuExitMousePressed\n    /**\n     * This is the code that handles the user clicking the Start button.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnStartMouseClicked\n        try {\n            /* \n             * Automatically save the configuration in the users ~/.dvd-homevideo\n             * directory.  This way if they forget to click on the Save button in\n             * the File menu, it will still be saved once they start capturing \n             * from their camcorder. \n             */\n            WriteSession();\n        } catch (IOException e) {\n        }\n        blnBegin = true;\n        btnPlay.setEnabled(false);\n    }\n\n    //GEN-LAST:event_btnStartMouseClicked\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for a title file to use for dvd-menu.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_TextFileKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnOpen_TextFileKeyTyped\n        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtTextFile.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_TextFileKeyTyped\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for an output directory to store\n     * everything in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for an output directory to locate an\n     * audio file.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_AudioKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnOpen_AudioKeyTyped\n        if (chkMenu.isSelected()) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtAudio.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_AudioKeyTyped\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for an output directory to locate a\n     * picture in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_PictureKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnOpen_PictureKeyTyped\n        if (chkMenu.isSelected() == true) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtPicture.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_PictureKeyTyped\n    /**\n     * This is the code that handles the user typing the Space bar\n     * on the check box for the menu\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkMenuKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_chkMenuKeyTyped\n        if (chkMenu.isSelected()) {\n            lblPicture.setEnabled(false);\n            txtPicture.setEnabled(false);\n            btnOpen_Picture.setEnabled(false);\n            lblAudio.setEnabled(false);\n            txtAudio.setEnabled(false);\n            btnOpen_Audio.setEnabled(false);\n        } else {\n            lblPicture.setEnabled(true);\n            txtPicture.setEnabled(true);\n            btnOpen_Picture.setEnabled(true);\n            lblAudio.setEnabled(true);\n            txtAudio.setEnabled(true);\n            btnOpen_Audio.setEnabled(true);\n        }\n    }\n\n    //GEN-LAST:event_chkMenuKeyTyped\n    /**\n     * This is the code that handles the user typing the Space bar\n     * on the check box for the quality group of radio buttons\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkQualityKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_chkQualityKeyTyped\n        if (chkQuality.isSelected()) {\n            rdSuper.setEnabled(false);\n            rdGood.setEnabled(false);\n            rdAverage.setEnabled(false);\n        } else {\n            rdSuper.setEnabled(true);\n            rdGood.setEnabled(true);\n            rdAverage.setEnabled(true);\n        }\n    }\n\n    //GEN-LAST:event_chkQualityKeyTyped\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for an output directory to locate a\n     * picture in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_PictureMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnOpen_PictureMouseClicked\n        if (chkMenu.isSelected() == true) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtPicture.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_PictureMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for an output directory to locate an\n     * audio file in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_AudioMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnOpen_AudioMouseClicked\n        if (chkMenu.isSelected()) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtAudio.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_AudioMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for an output directory to store\n     * all of their files in\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for a title file to be used for\n     * the background menu of the DVD\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_TextFileMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnOpen_TextFileMouseClicked\n        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtTextFile.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_TextFileMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * check box to select the quality of video conversion for\n     * their DVD\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkQualityMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_chkQualityMouseClicked\n        if (chkQuality.isSelected()) {\n            rdSuper.setEnabled(true);\n            rdGood.setEnabled(true);\n            rdAverage.setEnabled(true);\n        } else {\n            rdSuper.setEnabled(false);\n            rdGood.setEnabled(false);\n            rdAverage.setEnabled(false);\n        }\n    }\n\n    //GEN-LAST:event_chkQualityMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * check box to specify details for the DVD menu\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkMenuMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_chkMenuMouseClicked\n        if (chkMenu.isSelected()) {\n            lblPicture.setEnabled(true);\n            txtPicture.setEnabled(true);\n            btnOpen_Picture.setEnabled(true);\n            lblAudio.setEnabled(true);\n            txtAudio.setEnabled(true);\n            btnOpen_Audio.setEnabled(true);\n        } else {\n            lblPicture.setEnabled(false);\n            txtPicture.setEnabled(false);\n            btnOpen_Picture.setEnabled(false);\n            lblAudio.setEnabled(false);\n            txtAudio.setEnabled(false);\n            btnOpen_Audio.setEnabled(false);\n        }\n    }\n\n    //GEN-LAST:event_chkMenuMouseClicked\n    public void enableStartButton() {\n        int tempMinutes, tempSeconds, tempTotal;\n        String tempStrTitle, tempStrOutputDir;\n        /* First, load the values from the form into local variables */\n        tempMinutes = ((Integer) spnMinutes.getValue()).intValue();\n        tempSeconds = ((Integer) spnSeconds.getValue()).intValue();\n        tempTotal = tempSeconds + tempMinutes;\n        tempStrTitle = txtTitle.getText();\n        tempStrOutputDir = txtOutputDir.getText();\n        /*\n         * Now do the error checking.  Here we look for a capture time\n         * that is greater than zero and less than 65 minutes \n         */\n        if (tempTotal >= 1 && !tempStrOutputDir.equals(\"\") && !tempStrTitle.equals(\"\")) {\n            strOutputDir = txtOutputDir.getText() + \"/\" + txtTitle.getText();\n            btnStart.setEnabled(true);\n        } else if (!tempStrOutputDir.equals(\"\") && !tempStrTitle.equals(\"\") && (menuRd_IgnoreCap.isSelected() || menuRd_IgnoreCapConv.isSelected() || menuRd_IgnoreCapConvMenu.isSelected())) {\n            strOutputDir = txtOutputDir.getText() + \"/\" + txtTitle.getText();\n            btnStart.setEnabled(true);\n        } else\n            btnStart.setEnabled(false);\n    }\n\n    /**\n     * On startup, checks to ensure that the raw1394 module is loaded.\n     * This module is only needed to capture audio and video from the\n     * dv camcorder.\n     * return   A boolean indicating if the module is present\n     */\n    public boolean checkForModules() {\n        try {\n            String line;\n            String modules = \"cat /proc/modules | grep raw1394\";\n            String[] module_cmd = { \"/bin/sh\", \"-c\", modules };\n            Process p = Runtime.getRuntime().exec(module_cmd);\n            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n            line = in.readLine();\n            p.waitFor();\n            if (line == null)\n                return false;\n            else\n                return true;\n        } catch (Exception ioe) {\n            /* If we have made it here then the module is not loaded */\n            return false;\n        }\n    }\n\n    /**\n     * On startup, checks to ensure that all dependent programs are installed\n     * @param   Prog[]  List of dependent programs needed for dvd-homevideo\n     * @return  A boolean to determine if an error occurred in the function\n     */\n    public boolean checkForProg(String[] Prog) {\n        /* Declare local variables */\n        int i = 0;\n        int j = 0;\n        String build_list = \"\";\n        String[] uninstalled = new String[Prog.length];\n        while (true) {\n            try {\n                /* \n                 * Walk through the list of programs needed for dvd-homevideo\n                 * to operate correctly.\n                 */\n                while (i < Prog.length) {\n                    /* \n                     * This is how I test for a program.  I simple try to \n                     * execute the application, if it fails then the software\n                     * jumps to the catch block and I know that the program\n                     * is either not installed or not in the users path.\n                     */\n                    Process p = Runtime.getRuntime().exec(Prog[i]);\n                    /* \n                     * If I make it here then the program exists and I need to\n                     * kill it.\n                     */\n                    p.destroy();\n                    i++;\n                }\n                /* Check for any uninstalled programs */\n                for (i = 0; i < uninstalled.length; i++) {\n                    /* If not null then add to the list */\n                    if (uninstalled[i] != null)\n                        build_list += uninstalled[i] + \"\\n\";\n                }\n                /* \n                 * If the first element is null, then all programs are \n                 * installed correctly.\n                 */\n                if (uninstalled[0] == null)\n                    return true;\n                else\n                    /* Otherwise tell the user what they are missing */\n                    MessageBox(\"The following programs are not installed or not in \" + \"your path!\\n\" + build_list, 0);\n                return false;\n            } catch (IOException ioe) {\n                /* Add the missing program to the uninstalled array */\n                uninstalled[j] = Prog[i];\n                i++;\n                j++;\n            }\n        }\n    }\n\n    /**\n     * Displays a message box with the supplied text and yes/no options\n     * @param   message    The message to display in the box\n     */\n    public int MessageBox(String message) {\n        return JOptionPane.showConfirmDialog(null, message, \"dvd-homevideo\", JOptionPane.YES_NO_OPTION);\n    }\n\n    /**\n     * Displays a message box with the supplied text and type\n     * @param   message    The message to display in the box\n     * @param   type       The type of message (Info, Warning or Error)\n     */\n    public void MessageBox(String message, int type) {\n        JOptionPane.showMessageDialog(null, message, \"dvd-homevideo\", type);\n    }\n\n    /**\n     * Displays a message box with the supplied text and type\n     * @param   message    The message to display in the box\n     * @param   type       The type of message (Info, Warning or Error)\n     * @param   picture    Picture to display in the MessageBox\n     */\n    public void MessageBox(String message, int type, String picture) {\n        JOptionPane.showMessageDialog(null, message, \"dvd-homevideo\", type, new javax.swing.ImageIcon(getClass().getResource(picture)));\n    }\n\n    /**\n     * Check dvd-homevideo for runtime errors\n     * @param   fileName    This is a log file to parse through, looking for\n     *                      the keyword \"Error\"\n     * @return   A boolean indicating if an error was found\n     */\n    public boolean ErrorCheck(String fileName) {\n        String line;\n        StringTokenizer st;\n        String testToken;\n        boolean error = false;\n        /*\n         * Need to parse through the supplies file and look for any\n         * instances of the words 'error' or 'broken'.  If found, this\n         * is treated as a run-time error of one of the dependent programs\n         * that dvd-homevideo relies on.\n         */\n        try {\n            BufferedReader in = new BufferedReader(new FileReader(fileName));\n            while ((line = in.readLine()) != null) {\n                /* Check for a specific burn error */\n                if (line.equals(\":-( /dev/dvd: media is not recognized as recordable DVD: 9\")) {\n                    MessageBox(\"Non-recoverable error occurred.\" + \"\\nClass Name: \" + new Exception().getStackTrace()[1].getClassName() + \"\\nMethod Name: \" + new Exception().getStackTrace()[1].getMethodName() + \"\\nError was: \" + line, 0);\n                    return true;\n                }\n                /*\n                 * Need to catch all instances of 'error' or 'broken'.  This\n                 * includes cases such as:\n                 * **Error:\n                 * error~\n                 * Broken pipe\n                 * etc, etc, etc.  We need to catch ALL instances.\n                 */\n                st = new StringTokenizer(line, \"*,;:'-~\\t \");\n                while (st.hasMoreTokens()) {\n                    testToken = st.nextToken();\n                    if (// ||\n                    testToken.equalsIgnoreCase(\"Error\")) //testToken.equalsIgnoreCase(\"Broken\"))\n                    {\n                        MessageBox(\"Non-recoverable error occurred.\" + \"\\nClass Name: \" + new Exception().getStackTrace()[1].getClassName() + \"\\nMethod Name: \" + new Exception().getStackTrace()[1].getMethodName() + \"\\nError was: \" + line, 0);\n                        error = true;\n                    }\n                }\n            }\n        } catch (FileNotFoundException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"Can not find \" + fileName + \"\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        }\n        return error;\n    }\n\n    /**\n     * Update the Status textbox\n     * @param   typeColor   red, green, or grey\n     * @param   typeUpdate  Values should be PASS, FAIL, Status\n     */\n    public void UpdateStatus(Color typeColor, String typeUpdate) {\n        /* \n         * Set the background and text to let the user know that\n         * dvd-homevideo failed\n         */\n        txtStatus.setBackground(typeColor);\n        txtStatus.setText(typeUpdate);\n        if (typeUpdate.equals(\"FAIL\"))\n            txtStatus.setToolTipText(\"Look at dvd-homevideo.err and files\" + \" in the log directory for possible\" + \" reasons why dvd-homevideo failed.\");\n        /* \n         * If we need to wait for user input because dvd-homevideo\n         * has completed...either because of passing or failing then\n         * set blnBegin to false.\n         */\n        if (!typeUpdate.equals(\"Status\"))\n            blnBegin = false;\n    }\n\n    /**\n     * This method should be called every time the application exits normally.  This allows the\n     * current session to be saved before quiting dvd-homevideo.\n     */\n    public void ExitDVDHomevideo() {\n        try {\n            /* \n             * Automatically save the configuration in the users ~/.dvd-homevideo\n             * directory.  This should be the only place in the project where System.exit(0) is called. \n             */\n            WriteSession();\n            WriteProjProperties();\n            System.exit(0);\n        } catch (IOException e) {\n        }\n    }\n\n    /**\n     * This method retrieves user specific information from the\n     * properties xml file in the users ~/.dvd-homevideo directory\n     */\n    public void ReadProjProperties() {\n        File home = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo/properties\");\n        String line, token;\n        StringTokenizer st;\n        try {\n            /* \n             * Read the xml properties file and set widgets on the \n             * form accordingly\n             */\n            BufferedReader reader = new BufferedReader(new FileReader(home));\n            while ((line = reader.readLine()) != null) {\n                st = new StringTokenizer(line, \"<>\");\n                while (st.hasMoreTokens()) {\n                    token = st.nextToken();\n                    if (token.equals(\"menuRdNTSC\")) {\n                        line = reader.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        menuRdNTSC.setSelected(Boolean.parseBoolean(token));\n                        menuRdPAL.setSelected(!Boolean.parseBoolean(token));\n                        rdNTSC.setSelected(menuRdNTSC.isSelected());\n                        rdPAL.setSelected(menuRdPAL.isSelected());\n                    } else if (token.equals(\"menuRd_4_3\")) {\n                        line = reader.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        menuRd_4_3.setSelected(Boolean.parseBoolean(token));\n                        menuRd_16_9.setSelected(!Boolean.parseBoolean(token));\n                        rd4_3.setSelected(menuRd_4_3.isSelected());\n                        rd16_9.setSelected(menuRd_16_9.isSelected());\n                    } else if (token.equals(\"menuChkThread\")) {\n                        line = reader.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        menuChkThread.setSelected(Boolean.parseBoolean(token));\n                    }\n                }\n            }\n            reader.close();\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error in ReadProjectProperties in GUI.java\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * This method stores user specific information in a properties xml file\n     * in the users ~/.dvd-homevideo directory\n     */\n    public void WriteProjProperties() {\n        File home = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo/properties\");\n        try {\n            /* Write/rewrite the xml properties file */\n            BufferedWriter writer = new BufferedWriter(new FileWriter(home));\n            writer.write(\"<dvd-homevideo properties>\");\n            writer.newLine();\n            writer.write(\"\\t<JRadioButtonMenuItem>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menuRdNTSC>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<selected>\" + menuRdNTSC.isSelected() + \"</selected>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menuRdNTSC>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menuRd_4_3>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<selected>\" + menuRd_4_3.isSelected() + \"</selected>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menuRd_4_3>\");\n            writer.newLine();\n            writer.write(\"\\t</JRadioButonMenuItem>\");\n            writer.newLine();\n            writer.write(\"\\t<JCheckBoxMenuItem>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menuChkThread>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<selected>\" + menuChkThread.isSelected() + \"</selected>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menuChkThread>\");\n            writer.newLine();\n            writer.write(\"\\t</JCheckBoxMenuItem>\");\n            writer.newLine();\n            writer.close();\n            /* Update the states on the form */\n            rdNTSC.setSelected(menuRdNTSC.isSelected());\n            rdPAL.setSelected(menuRdPAL.isSelected());\n            rd4_3.setSelected(menuRd_4_3.isSelected());\n            rd16_9.setSelected(menuRd_16_9.isSelected());\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error in WriteProjectProperties in GUI.java\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * Opens a previous dvd-homevideo session by reading an xml file\n     * @param   xmlPath    Path to the xml file\n     */\n    public void ReadSession(String xmlPath) {\n        String line, token;\n        StringTokenizer st;\n        boolean done = false;\n        int i;\n        /* \n         * Define an exhaustive list of the widgets that we need to track\n         * on the form.\n         */\n        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };\n        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };\n        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };\n        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };\n        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };\n        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };\n        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };\n        try {\n            BufferedReader in = new BufferedReader(new FileReader(xmlPath));\n            line = in.readLine();\n            st = new StringTokenizer(line, \"<>\");\n            token = st.nextToken();\n            /* \n             * If the first line does not contain dvd-homevideo then\n             * we have a bad xml file.\n             */\n            if (!token.equals(\"dvd-homevideo\")) {\n                MessageBox(\"Invalid File Format!\", 1);\n                done = true;\n            }\n            while (((line = in.readLine()) != null) && !done) {\n                st = new StringTokenizer(line, \"<>\");\n                if (!st.nextToken().equals(\"/dvd-homevideo\"))\n                    token = st.nextToken();\n                /* Read in the variables and set them on the form */\n                if (token.equals(\"JLabel\")) {\n                    for (i = 0; i < lbl_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        lbl_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JSpinner\")) {\n                    for (i = 0; i < spn_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        spn_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        // SDK 1.4 didn't like this\n                        spn_widgets[i].setValue(Integer.parseInt(token));\n                        //spn_widgets[i].getModel().setValue((Object)token);\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JCheckBox\")) {\n                    for (i = 0; i < chk_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chk_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chk_widgets[i].setSelected(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JRadioButton\")) {\n                    for (i = 0; i < rd_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        rd_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        rd_widgets[i].setSelected(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JTextField\")) {\n                    for (i = 0; i < txt_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        txt_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        if (!token.substring(1, 4).equals(\"tex\"))\n                            txt_widgets[i].setText(token);\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JButton\")) {\n                    for (i = 0; i < btn_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        btn_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JRadioButtonMenuItem\")) {\n                    for (i = 0; i < chkMenu_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chkMenu_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chkMenu_widgets[i].setSelected(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else {\n                    lblCapture.setEnabled(false);\n                    lblConvert.setEnabled(false);\n                    lblAuthor.setEnabled(false);\n                    lblCaptureProg.setEnabled(false);\n                    lblConvertProg.setEnabled(false);\n                    lblAuthorProg.setEnabled(false);\n                    prgCapture.setEnabled(false);\n                    prgConvert.setEnabled(false);\n                    prgAuthor.setEnabled(false);\n                    lblCaptureProg.setText(\"0%\");\n                    lblConvertProg.setText(\"0%\");\n                    lblAuthorProg.setText(\"0%\");\n                }\n            }\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error while reading the xml file\" + \"\\nfor the requested dvd-homevideo session.\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * Saves the state of all widgets on the GUI form in an xml file\n     * in the users ~/.dvd-homevideo directory\n     */\n    public void WriteSession() throws IOException {\n        int i;\n        /* Again, we must have this exhaustive list of widgets to parse through */\n        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };\n        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };\n        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };\n        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };\n        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };\n        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };\n        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };\n        try {\n            /* Write the file to the users ~/.dvd-homevideo directory */\n            String home = System.getProperty(\"user.home\");\n            File msgboxSave = new File(home + \"/.dvd-homevideo/properties\");\n            BufferedWriter msgboxSaveWriter = new BufferedWriter(new FileWriter(home + \"/.dvd-homevideo/properties\"));\n            msgboxSaveWriter.close();\n            /* Now write the xml file to the users home/dvd-homevideo directory */\n            BufferedWriter writer = new BufferedWriter(new FileWriter(home + \"/.dvd-homevideo/\" + txtTitle.getText() + \".xml\"));\n            writer.write(\"<dvd-homevideo>\");\n            writer.newLine();\n            writer.write(\"\\t<JLabel>\");\n            writer.newLine();\n            for (i = 0; i < lbl_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + lbl_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + lbl_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + lbl_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JLabel>\");\n            writer.newLine();\n            writer.write(\"\\t<JSpinner>\");\n            writer.newLine();\n            for (i = 0; i < spn_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + spn_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + spn_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<value>\" + spn_widgets[i].getValue() + \"</value>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + spn_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JSpinner>\");\n            writer.newLine();\n            writer.write(\"\\t<JCheckBox>\");\n            writer.newLine();\n            for (i = 0; i < chk_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + chk_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + chk_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<selected>\" + chk_widgets[i].isSelected() + \"</selected>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + chk_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JCheckBox>\");\n            writer.newLine();\n            writer.write(\"\\t<JRadioButton>\");\n            writer.newLine();\n            for (i = 0; i < rd_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + rd_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + rd_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<selected>\" + rd_widgets[i].isSelected() + \"</selected>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + rd_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JRadioButton>\");\n            writer.newLine();\n            writer.write(\"\\t<JTextField>\");\n            writer.newLine();\n            for (i = 0; i < txt_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + txt_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + txt_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<text>\" + txt_widgets[i].getText() + \"</text>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + txt_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JTextField>\");\n            writer.newLine();\n            writer.write(\"\\t<JButton>\");\n            writer.newLine();\n            for (i = 0; i < btn_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + btn_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + btn_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + btn_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JButton>\");\n            writer.newLine();\n            writer.write(\"\\t<JRadioButtonMenuItem>\");\n            writer.newLine();\n            for (i = 0; i < chkMenu_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + chkMenu_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + chkMenu_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<selected>\" + chkMenu_widgets[i].isSelected() + \"</selected>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + chkMenu_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JRadioButtonMenuItem>\");\n            writer.newLine();\n            writer.write(\"</dvd-homevideo>\");\n            writer.newLine();\n            writer.close();\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error while writing the xml file\" + \"\\nfor this dvd-homevideo session.\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /*\n    public void setIcon()\n    {\n        javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(\"/logo_32x32.png\"));\n        setIconImage(new javax.swing.ImageIcon(image.getImage()));\n    }\n    */\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    private javax.swing.JButton btnExit;\n\n    private javax.swing.JButton btnOpen_Audio;\n\n    private javax.swing.JButton btnOpen_OutputDir;\n\n    private javax.swing.JButton btnOpen_Picture;\n\n    private javax.swing.JButton btnOpen_TextFile;\n\n    protected javax.swing.JButton btnPlay;\n\n    private javax.swing.JButton btnStart;\n\n    protected javax.swing.JCheckBox chkBurn;\n\n    protected javax.swing.JCheckBox chkMenu;\n\n    protected javax.swing.JCheckBox chkQuality;\n\n    private javax.swing.JFileChooser fcMenuOpen;\n\n    private javax.swing.JFileChooser fcOpen;\n\n    private javax.swing.ButtonGroup grpAspectRatio;\n\n    private javax.swing.ButtonGroup grpFormat;\n\n    private javax.swing.ButtonGroup grpMenuAspectRatio;\n\n    private javax.swing.ButtonGroup grpMenuFormat;\n\n    private javax.swing.ButtonGroup grpMenuIgnore;\n\n    private javax.swing.ButtonGroup grpMenuMode;\n\n    private javax.swing.ButtonGroup grpQuality;\n\n    private javax.swing.JLabel lblAspectRatio;\n\n    private javax.swing.JLabel lblAudio;\n\n    protected javax.swing.JLabel lblAuthor;\n\n    protected javax.swing.JLabel lblAuthorProg;\n\n    protected javax.swing.JLabel lblCapture;\n\n    protected javax.swing.JLabel lblCaptureProg;\n\n    protected javax.swing.JLabel lblConvert;\n\n    protected javax.swing.JLabel lblConvertProg;\n\n    private javax.swing.JLabel lblFormat;\n\n    private javax.swing.JLabel lblMinutes;\n\n    private javax.swing.JLabel lblOutputDir;\n\n    private javax.swing.JLabel lblPicture;\n\n    private javax.swing.JLabel lblSeconds;\n\n    private javax.swing.JLabel lblTextFile;\n\n    private javax.swing.JLabel lblTitle;\n\n    private javax.swing.JMenuItem menuAbout;\n\n    protected javax.swing.JMenuBar menuBarMain;\n\n    private javax.swing.JMenuItem menuBug;\n\n    protected javax.swing.JCheckBoxMenuItem menuChkThread;\n\n    protected javax.swing.JMenuItem menuExit;\n\n    protected javax.swing.JMenu menuFile;\n\n    protected javax.swing.JMenu menuHelp;\n\n    protected javax.swing.JMenuItem menuInternet;\n\n    protected javax.swing.JMenuItem menuOpen;\n\n    private javax.swing.JMenu menuProjProp;\n\n    protected javax.swing.JMenuItem menuREADME;\n\n    private javax.swing.JRadioButtonMenuItem menuRdNTSC;\n\n    private javax.swing.JRadioButtonMenuItem menuRdPAL;\n\n    private javax.swing.JRadioButtonMenuItem menuRd_16_9;\n\n    private javax.swing.JRadioButtonMenuItem menuRd_4_3;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCap;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConv;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConvMenu;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreNone;\n\n    protected javax.swing.JMenuItem menuSave;\n\n    protected javax.swing.JMenu menuTools;\n\n    private javax.swing.JPanel pnlGUI;\n\n    protected javax.swing.JProgressBar prgAuthor;\n\n    protected javax.swing.JProgressBar prgCapture;\n\n    protected javax.swing.JProgressBar prgConvert;\n\n    protected javax.swing.JRadioButton rd16_9;\n\n    protected javax.swing.JRadioButton rd4_3;\n\n    protected javax.swing.JRadioButton rdAverage;\n\n    protected javax.swing.JRadioButton rdGood;\n\n    protected javax.swing.JRadioButton rdNTSC;\n\n    protected javax.swing.JRadioButton rdPAL;\n\n    protected javax.swing.JRadioButton rdSuper;\n\n    private javax.swing.JScrollPane spTextArea;\n\n    protected javax.swing.JSpinner spnMinutes;\n\n    protected javax.swing.JSpinner spnSeconds;\n\n    private javax.swing.JSeparator sprAspectRatio;\n\n    private javax.swing.JSeparator sprCapConvert;\n\n    private javax.swing.JSeparator sprIgnore;\n\n    private javax.swing.JSeparator sprMenuAuthor;\n\n    private javax.swing.JSeparator sprMenuFormatAspect;\n\n    private javax.swing.JSeparator sprMenuThread;\n\n    protected javax.swing.JSeparator sprOpen;\n\n    protected javax.swing.JSeparator sprSave;\n\n    protected javax.swing.JTextArea txtAreaOutput;\n\n    protected javax.swing.JTextField txtAudio;\n\n    protected javax.swing.JTextField txtOutputDir;\n\n    protected javax.swing.JTextField txtPicture;\n\n    protected javax.swing.JTextField txtStatus;\n\n    protected javax.swing.JTextField txtTextFile;\n\n    protected javax.swing.JTextField txtTitle;\n\n    // End of variables declaration//GEN-END:variables\n    /* My GUI variable declarations */\n    protected javax.swing.SpinnerNumberModel spnSecondsSize = new javax.swing.SpinnerNumberModel(0, 0, 59, 1);\n\n    protected javax.swing.SpinnerNumberModel spnMinutesSize = new javax.swing.SpinnerNumberModel(0, 0, 64, 1);\n}\n",
    "test_prompt": "// GUI_2Test.java\n\n\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GUI}.\n* It contains ten unit test cases for the {@link GUI#MessageBox(String)} method.\n*/\nclass GUI_2Test {",
    "time_taken": -1
},
{
    "choices": [
        {
            "finish_reason": "ERROR - This model's maximum context length is 8001 tokens, however you requested 29976 tokens (27976 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.",
            "text": ""
        }
    ],
    "id": "94e95c88-6db1-4919-8a26-8d939acb9f51",
    "prompt_id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_3Test.java",
    "original_code": "// GUI.java\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\n\n/**\n * @author  Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /* \n     * Creates a new form, probably the most compilcated - or\n     * messiest constructor I have ever developed.\n     */\n    public GUI() {\n        /*\n         * initComponents is a netbeans generated method that does\n         * all of the GUI stuff for dvd-homevideo.\n         */\n        initComponents();\n        /* \n         * Sets the maximum allowable values for the minutes\n         * and seconds Spinners.\n         */\n        spnSeconds.setModel(spnSecondsSize);\n        spnMinutes.setModel(spnMinutesSize);\n        /* First do a check for the required programs */\n        if (!checkForProg(DependentPrograms))\n            MessageBox(\"You do not appear to have the necessary\\n\" + \"programs installed for dvd-homevideo to operate\\n\" + \"correctly.  Please check the README file for the\\n\" + \"list of dependencies.  dvd-homevideo will not\\n\" + \"function correctly until all dependencies are installed!\", 1);\n        /* Now check for the required ieee1394 module */\n        if (!checkForModules())\n            MessageBox(\"You do not have the correct modules loaded\\n\" + \"for dvd-homevideo to function properly.  Please\\n\" + \"check the README file for further instructions!\", 1);\n        if (getJMenuBar() != null)\n            (this.getJMenuBar()).setOpaque(false);\n        /* \n         * Create Project directory.  This is where (~/.dvd-homevideo) the \n         * .xml files for each session get stored as well as user preferences.\n         */\n        File ProjectDir = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo\");\n        if (!ProjectDir.exists()) {\n            MessageBox(\"All projects will be automatically saved to: \" + System.getProperty(\"user.home\") + \"/.dvd-homevideo/\", 1);\n            ProjectDir.mkdir();\n        }\n        File ProjProperties = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo/properties\");\n        if (!ProjProperties.exists()) {\n            try {\n                BufferedWriter projProp = new BufferedWriter(new FileWriter(ProjProperties));\n                projProp.close();\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(strOutputDir, ex);\n                MessageBox(\"IO Error writing to properties file...in GUI.java\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n            }\n        }\n        /* If the user has specified individual customization, then read it */\n        ReadProjProperties();\n    }\n\n    /* End of constructor */\n    javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(\"/logo_32x32.png\"));\n\n    protected String strOutputDir;\n\n    protected boolean blnBegin;\n\n    /* My list of dependent programs for dvd-homevideo */\n    protected String[] DependentPrograms = { \"dvgrab\", \"transcode\", \"mplex\", \"dvd-menu\", \"dvdauthor\", \"growisofs\", \"ffmpeg\", \"lame\", \"sox\" };\n\n    /**\n     * This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\n    private void initComponents() {\n        grpQuality = new javax.swing.ButtonGroup();\n        fcOpen = new javax.swing.JFileChooser();\n        grpFormat = new javax.swing.ButtonGroup();\n        grpAspectRatio = new javax.swing.ButtonGroup();\n        fcMenuOpen = new javax.swing.JFileChooser();\n        grpMenuFormat = new javax.swing.ButtonGroup();\n        grpMenuAspectRatio = new javax.swing.ButtonGroup();\n        grpMenuMode = new javax.swing.ButtonGroup();\n        grpMenuIgnore = new javax.swing.ButtonGroup();\n        pnlGUI = new javax.swing.JPanel();\n        lblMinutes = new javax.swing.JLabel();\n        spnMinutes = new javax.swing.JSpinner();\n        lblSeconds = new javax.swing.JLabel();\n        spnSeconds = new javax.swing.JSpinner();\n        chkQuality = new javax.swing.JCheckBox();\n        rdSuper = new javax.swing.JRadioButton();\n        rdGood = new javax.swing.JRadioButton();\n        rdAverage = new javax.swing.JRadioButton();\n        btnStart = new javax.swing.JButton();\n        btnExit = new javax.swing.JButton();\n        chkMenu = new javax.swing.JCheckBox();\n        lblPicture = new javax.swing.JLabel();\n        txtPicture = new javax.swing.JTextField();\n        lblAudio = new javax.swing.JLabel();\n        txtAudio = new javax.swing.JTextField();\n        btnOpen_Picture = new javax.swing.JButton();\n        prgCapture = new javax.swing.JProgressBar();\n        prgConvert = new javax.swing.JProgressBar();\n        prgAuthor = new javax.swing.JProgressBar();\n        btnOpen_Audio = new javax.swing.JButton();\n        lblTextFile = new javax.swing.JLabel();\n        txtTextFile = new javax.swing.JTextField();\n        btnOpen_TextFile = new javax.swing.JButton();\n        txtOutputDir = new javax.swing.JTextField();\n        lblOutputDir = new javax.swing.JLabel();\n        txtTitle = new javax.swing.JTextField();\n        lblTitle = new javax.swing.JLabel();\n        btnOpen_OutputDir = new javax.swing.JButton();\n        chkBurn = new javax.swing.JCheckBox();\n        lblCaptureProg = new javax.swing.JLabel();\n        lblConvertProg = new javax.swing.JLabel();\n        lblAuthorProg = new javax.swing.JLabel();\n        lblCapture = new javax.swing.JLabel();\n        lblConvert = new javax.swing.JLabel();\n        lblAuthor = new javax.swing.JLabel();\n        sprCapConvert = new javax.swing.JSeparator();\n        sprMenuAuthor = new javax.swing.JSeparator();\n        spTextArea = new javax.swing.JScrollPane();\n        txtAreaOutput = new javax.swing.JTextArea();\n        rdNTSC = new javax.swing.JRadioButton();\n        rdPAL = new javax.swing.JRadioButton();\n        rd4_3 = new javax.swing.JRadioButton();\n        rd16_9 = new javax.swing.JRadioButton();\n        lblFormat = new javax.swing.JLabel();\n        lblAspectRatio = new javax.swing.JLabel();\n        sprAspectRatio = new javax.swing.JSeparator();\n        btnPlay = new javax.swing.JButton();\n        txtStatus = new javax.swing.JTextField();\n        menuBarMain = new javax.swing.JMenuBar();\n        menuFile = new javax.swing.JMenu();\n        menuOpen = new javax.swing.JMenuItem();\n        sprOpen = new javax.swing.JSeparator();\n        menuSave = new javax.swing.JMenuItem();\n        sprSave = new javax.swing.JSeparator();\n        menuExit = new javax.swing.JMenuItem();\n        menuTools = new javax.swing.JMenu();\n        menuRd_IgnoreNone = new javax.swing.JRadioButtonMenuItem();\n        menuRd_IgnoreCap = new javax.swing.JRadioButtonMenuItem();\n        menuRd_IgnoreCapConv = new javax.swing.JRadioButtonMenuItem();\n        menuRd_IgnoreCapConvMenu = new javax.swing.JRadioButtonMenuItem();\n        sprIgnore = new javax.swing.JSeparator();\n        menuProjProp = new javax.swing.JMenu();\n        menuRdNTSC = new javax.swing.JRadioButtonMenuItem();\n        menuRdPAL = new javax.swing.JRadioButtonMenuItem();\n        sprMenuFormatAspect = new javax.swing.JSeparator();\n        menuRd_4_3 = new javax.swing.JRadioButtonMenuItem();\n        menuRd_16_9 = new javax.swing.JRadioButtonMenuItem();\n        sprMenuThread = new javax.swing.JSeparator();\n        menuChkThread = new javax.swing.JCheckBoxMenuItem();\n        menuHelp = new javax.swing.JMenu();\n        menuInternet = new javax.swing.JMenuItem();\n        menuREADME = new javax.swing.JMenuItem();\n        menuBug = new javax.swing.JMenuItem();\n        menuAbout = new javax.swing.JMenuItem();\n        fcOpen.setName(\"fcOpen\");\n        getContentPane().setLayout(new java.awt.GridBagLayout());\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"dvd-homevideo\");\n        setIconImage(image.getImage());\n        setName(\"dvd-homevideo\");\n        setResizable(false);\n        pnlGUI.setLayout(null);\n        pnlGUI.setToolTipText(\"dvd-homevideo\");\n        pnlGUI.setMaximumSize(new java.awt.Dimension(510, 620));\n        pnlGUI.setMinimumSize(new java.awt.Dimension(510, 620));\n        pnlGUI.setName(\"pnlGUI\");\n        pnlGUI.setOpaque(false);\n        pnlGUI.setPreferredSize(new java.awt.Dimension(510, 620));\n        lblMinutes.setText(\"Capture Time in Minutes\");\n        lblMinutes.setName(\"lblMinutes\");\n        pnlGUI.add(lblMinutes);\n        lblMinutes.setBounds(20, 10, 154, 15);\n        spnMinutes.setToolTipText(\"Minutes Portion of the Capture Time\");\n        spnMinutes.setMinimumSize(new java.awt.Dimension(35, 20));\n        spnMinutes.setName(\"spnMinutes\");\n        spnMinutes.setNextFocusableComponent(spnSeconds);\n        spnMinutes.setPreferredSize(new java.awt.Dimension(35, 20));\n        spnMinutes.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                spnMinutesStateChanged(evt);\n            }\n        });\n        pnlGUI.add(spnMinutes);\n        spnMinutes.setBounds(140, 30, 35, 20);\n        lblSeconds.setText(\"Capture Time in Seconds\");\n        lblSeconds.setName(\"lblSeconds\");\n        pnlGUI.add(lblSeconds);\n        lblSeconds.setBounds(20, 50, 155, 15);\n        spnSeconds.setToolTipText(\"Seconds Portion of the Capture Time\");\n        spnSeconds.setName(\"spnSeconds\");\n        spnSeconds.setNextFocusableComponent(chkQuality);\n        spnSeconds.setPreferredSize(new java.awt.Dimension(35, 20));\n        spnSeconds.setRequestFocusEnabled(false);\n        spnSeconds.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                spnSecondsStateChanged(evt);\n            }\n        });\n        pnlGUI.add(spnSeconds);\n        spnSeconds.setBounds(140, 70, 35, 20);\n        chkQuality.setText(\"Quality for DVD compression\");\n        chkQuality.setToolTipText(\"Check this box to enable quality control\");\n        chkQuality.setName(\"chkQuality\");\n        chkQuality.setNextFocusableComponent(rdSuper);\n        chkQuality.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                chkQualityKeyTyped(evt);\n            }\n        });\n        chkQuality.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                chkQualityMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(chkQuality);\n        chkQuality.setBounds(260, 10, 208, 23);\n        grpQuality.add(rdSuper);\n        rdSuper.setSelected(true);\n        rdSuper.setText(\"Super\");\n        rdSuper.setToolTipText(\"Best Quality...recommended\");\n        rdSuper.setEnabled(false);\n        rdSuper.setName(\"rdSuper\");\n        rdSuper.setNextFocusableComponent(rdGood);\n        pnlGUI.add(rdSuper);\n        rdSuper.setBounds(280, 30, 60, 23);\n        grpQuality.add(rdGood);\n        rdGood.setText(\"Good\");\n        rdGood.setToolTipText(\"Good Quality...a little faster\");\n        rdGood.setEnabled(false);\n        rdGood.setName(\"rdGood\");\n        rdGood.setNextFocusableComponent(rdAverage);\n        pnlGUI.add(rdGood);\n        rdGood.setBounds(280, 50, 58, 23);\n        grpQuality.add(rdAverage);\n        rdAverage.setText(\"Average\");\n        rdAverage.setToolTipText(\"Nothing special...but fast\");\n        rdAverage.setEnabled(false);\n        rdAverage.setName(\"rdAverage\");\n        rdAverage.setNextFocusableComponent(rdNTSC);\n        pnlGUI.add(rdAverage);\n        rdAverage.setBounds(280, 70, 75, 23);\n        btnStart.setText(\"Start\");\n        btnStart.setToolTipText(\"Start Capturing Video from your Digital Camcorder\");\n        btnStart.setEnabled(false);\n        btnStart.setName(\"btnStart\");\n        btnStart.setNextFocusableComponent(btnExit);\n        btnStart.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnStartKeyTyped(evt);\n            }\n        });\n        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnStartMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnStart);\n        btnStart.setBounds(250, 400, 70, 25);\n        btnExit.setText(\"Exit\");\n        btnExit.setToolTipText(\"Exit dvd-homevideo\");\n        btnExit.setName(\"btnExit\");\n        btnExit.setNextFocusableComponent(btnPlay);\n        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnExitKeyTyped(evt);\n            }\n        });\n        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnExitMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnExit);\n        btnExit.setBounds(330, 400, 70, 25);\n        chkMenu.setText(\"Custom DVD Menu\");\n        chkMenu.setToolTipText(\"Enables Custom Picture and Audio for DVD Background\");\n        chkMenu.setName(\"chkMenu\");\n        chkMenu.setNextFocusableComponent(txtPicture);\n        chkMenu.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                chkMenuKeyTyped(evt);\n            }\n        });\n        chkMenu.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                chkMenuMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(chkMenu);\n        chkMenu.setBounds(10, 170, 144, 23);\n        lblPicture.setText(\"Path to DVD Menu Picture\");\n        lblPicture.setEnabled(false);\n        lblPicture.setName(\"lblPicture\");\n        pnlGUI.add(lblPicture);\n        lblPicture.setBounds(10, 200, 160, 15);\n        txtPicture.setEnabled(false);\n        txtPicture.setName(\"txtPicture\");\n        txtPicture.setNextFocusableComponent(btnOpen_Picture);\n        pnlGUI.add(txtPicture);\n        txtPicture.setBounds(10, 220, 170, 19);\n        lblAudio.setText(\"Path to DVD Menu Audio\");\n        lblAudio.setEnabled(false);\n        lblAudio.setName(\"lblAudio\");\n        pnlGUI.add(lblAudio);\n        lblAudio.setBounds(10, 250, 155, 15);\n        txtAudio.setEnabled(false);\n        txtAudio.setName(\"txtAudio\");\n        txtAudio.setNextFocusableComponent(btnOpen_Audio);\n        pnlGUI.add(txtAudio);\n        txtAudio.setBounds(10, 270, 170, 19);\n        btnOpen_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_Picture.setEnabled(false);\n        btnOpen_Picture.setName(\"btnOpen_Picture\");\n        btnOpen_Picture.setNextFocusableComponent(txtAudio);\n        btnOpen_Picture.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_PictureKeyTyped(evt);\n            }\n        });\n        btnOpen_Picture.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_PictureMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_Picture);\n        btnOpen_Picture.setBounds(190, 220, 30, 25);\n        prgCapture.setEnabled(false);\n        prgCapture.setName(\"prgCapture\");\n        pnlGUI.add(prgCapture);\n        prgCapture.setBounds(10, 360, 148, 14);\n        prgConvert.setEnabled(false);\n        prgConvert.setName(\"prgConvert\");\n        pnlGUI.add(prgConvert);\n        prgConvert.setBounds(180, 360, 148, 14);\n        prgAuthor.setEnabled(false);\n        prgAuthor.setName(\"prgAuthor\");\n        pnlGUI.add(prgAuthor);\n        prgAuthor.setBounds(350, 360, 148, 14);\n        btnOpen_Audio.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_Audio.setEnabled(false);\n        btnOpen_Audio.setName(\"btnOpen_Audio\");\n        btnOpen_Audio.setNextFocusableComponent(txtOutputDir);\n        btnOpen_Audio.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_AudioKeyTyped(evt);\n            }\n        });\n        btnOpen_Audio.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_AudioMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_Audio);\n        btnOpen_Audio.setBounds(190, 270, 30, 25);\n        lblTextFile.setText(\"Path to Text File (optional)\");\n        lblTextFile.setToolTipText(\"This text file specifies the chapter titles for the DVD\");\n        lblTextFile.setName(\"lblTextFile\");\n        pnlGUI.add(lblTextFile);\n        lblTextFile.setBounds(260, 270, 165, 15);\n        txtTextFile.setName(\"txtTextFile\");\n        txtTextFile.setNextFocusableComponent(btnOpen_TextFile);\n        pnlGUI.add(txtTextFile);\n        txtTextFile.setBounds(260, 290, 200, 19);\n        btnOpen_TextFile.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_TextFile.setName(\"btnOpen_TextFile\");\n        btnOpen_TextFile.setNextFocusableComponent(btnStart);\n        btnOpen_TextFile.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_TextFileKeyTyped(evt);\n            }\n        });\n        btnOpen_TextFile.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_TextFileMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_TextFile);\n        btnOpen_TextFile.setBounds(470, 290, 30, 25);\n        txtOutputDir.setName(\"txtOutputDir\");\n        txtOutputDir.setNextFocusableComponent(btnOpen_OutputDir);\n        txtOutputDir.addFocusListener(new java.awt.event.FocusAdapter() {\n\n            public void focusLost(java.awt.event.FocusEvent evt) {\n                txtOutputDirFocusLost(evt);\n            }\n        });\n        pnlGUI.add(txtOutputDir);\n        txtOutputDir.setBounds(260, 190, 200, 19);\n        lblOutputDir.setText(\"Path to the Output Directory\");\n        lblOutputDir.setName(\"lblOutputDir\");\n        pnlGUI.add(lblOutputDir);\n        lblOutputDir.setBounds(260, 170, 177, 15);\n        txtTitle.setName(\"txtTitle\");\n        txtTitle.setNextFocusableComponent(txtTextFile);\n        txtTitle.addFocusListener(new java.awt.event.FocusAdapter() {\n\n            public void focusLost(java.awt.event.FocusEvent evt) {\n                txtTitleFocusLost(evt);\n            }\n        });\n        pnlGUI.add(txtTitle);\n        txtTitle.setBounds(260, 240, 200, 19);\n        lblTitle.setText(\"Enter a Title for the DVD\");\n        lblTitle.setName(\"lblTitle\");\n        pnlGUI.add(lblTitle);\n        lblTitle.setBounds(260, 220, 153, 15);\n        btnOpen_OutputDir.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/open.gif\")));\n        btnOpen_OutputDir.setName(\"btnOpen_OutputDir\");\n        btnOpen_OutputDir.setNextFocusableComponent(txtTitle);\n        btnOpen_OutputDir.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                btnOpen_OutputDirKeyTyped(evt);\n            }\n        });\n        btnOpen_OutputDir.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnOpen_OutputDirMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnOpen_OutputDir);\n        btnOpen_OutputDir.setBounds(470, 190, 30, 25);\n        chkBurn.setText(\"Burn to DVD\");\n        chkBurn.setName(\"chkBurn\");\n        chkBurn.setNextFocusableComponent(chkMenu);\n        pnlGUI.add(chkBurn);\n        chkBurn.setBounds(340, 120, 103, 23);\n        lblCaptureProg.setText(\"0%\");\n        lblCaptureProg.setEnabled(false);\n        lblCaptureProg.setName(\"lblCaptureProg\");\n        pnlGUI.add(lblCaptureProg);\n        lblCaptureProg.setBounds(20, 380, 40, 15);\n        lblConvertProg.setText(\"0%\");\n        lblConvertProg.setEnabled(false);\n        lblConvertProg.setName(\"lblConvertProg\");\n        pnlGUI.add(lblConvertProg);\n        lblConvertProg.setBounds(190, 380, 40, 15);\n        lblAuthorProg.setText(\"0%\");\n        lblAuthorProg.setEnabled(false);\n        lblAuthorProg.setName(\"lblAuthorProg\");\n        pnlGUI.add(lblAuthorProg);\n        lblAuthorProg.setBounds(360, 380, 40, 15);\n        lblCapture.setText(\"Capture Progress\");\n        lblCapture.setEnabled(false);\n        lblCapture.setName(\"lblCapture\");\n        pnlGUI.add(lblCapture);\n        lblCapture.setBounds(10, 340, 107, 15);\n        lblConvert.setText(\"Conversion Progress\");\n        lblConvert.setEnabled(false);\n        lblConvert.setName(\"lblConvert\");\n        pnlGUI.add(lblConvert);\n        lblConvert.setBounds(180, 340, 129, 15);\n        lblAuthor.setText(\"Authoring DVD\");\n        lblAuthor.setEnabled(false);\n        lblAuthor.setName(\"lblAuthor\");\n        pnlGUI.add(lblAuthor);\n        lblAuthor.setBounds(350, 340, 95, 15);\n        sprCapConvert.setMinimumSize(new java.awt.Dimension(50, 10));\n        sprCapConvert.setName(\"sprCapConvert\");\n        sprCapConvert.setPreferredSize(new java.awt.Dimension(50, 5));\n        pnlGUI.add(sprCapConvert);\n        sprCapConvert.setBounds(10, 160, 490, 5);\n        sprMenuAuthor.setMinimumSize(new java.awt.Dimension(50, 10));\n        sprMenuAuthor.setName(\"sprMenuAuthor\");\n        sprMenuAuthor.setPreferredSize(new java.awt.Dimension(50, 5));\n        pnlGUI.add(sprMenuAuthor);\n        sprMenuAuthor.setBounds(10, 330, 490, 5);\n        spTextArea.setAutoscrolls(true);\n        spTextArea.setName(\"spTextArea\");\n        txtAreaOutput.setEditable(false);\n        txtAreaOutput.setLineWrap(true);\n        txtAreaOutput.setToolTipText(\"Output during program execution\");\n        txtAreaOutput.setWrapStyleWord(true);\n        txtAreaOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n        txtAreaOutput.setName(\"txtAreaOutput\");\n        spTextArea.setViewportView(txtAreaOutput);\n        pnlGUI.add(spTextArea);\n        spTextArea.setBounds(20, 470, 470, 140);\n        grpFormat.add(rdNTSC);\n        rdNTSC.setSelected(true);\n        rdNTSC.setText(\"NTSC\");\n        rdNTSC.setName(\"rdNTSC\");\n        rdNTSC.setNextFocusableComponent(rdPAL);\n        pnlGUI.add(rdNTSC);\n        rdNTSC.setBounds(20, 130, 58, 23);\n        grpFormat.add(rdPAL);\n        rdPAL.setText(\"PAL\");\n        rdPAL.setName(\"rdPAL\");\n        rdPAL.setNextFocusableComponent(rd4_3);\n        pnlGUI.add(rdPAL);\n        rdPAL.setBounds(90, 130, 60, 23);\n        grpAspectRatio.add(rd4_3);\n        rd4_3.setSelected(true);\n        rd4_3.setText(\"4:3\");\n        rd4_3.setName(\"rd4_3\");\n        rd4_3.setNextFocusableComponent(rd16_9);\n        pnlGUI.add(rd4_3);\n        rd4_3.setBounds(190, 130, 50, 23);\n        grpAspectRatio.add(rd16_9);\n        rd16_9.setText(\"16:9\");\n        rd16_9.setName(\"rd16_9\");\n        rd16_9.setNextFocusableComponent(chkBurn);\n        pnlGUI.add(rd16_9);\n        rd16_9.setBounds(240, 130, 60, 23);\n        lblFormat.setText(\"Video Format\");\n        lblFormat.setName(\"lblFormat\");\n        pnlGUI.add(lblFormat);\n        lblFormat.setBounds(20, 110, 110, 15);\n        lblAspectRatio.setText(\"Aspect Ratio\");\n        lblAspectRatio.setName(\"lblAspectRatio\");\n        pnlGUI.add(lblAspectRatio);\n        lblAspectRatio.setBounds(190, 110, 100, 15);\n        sprAspectRatio.setMinimumSize(new java.awt.Dimension(50, 10));\n        sprAspectRatio.setName(\"sprAspectRatio\");\n        sprAspectRatio.setPreferredSize(new java.awt.Dimension(50, 5));\n        pnlGUI.add(sprAspectRatio);\n        sprAspectRatio.setBounds(10, 100, 490, 5);\n        btnPlay.setText(\"Play\");\n        btnPlay.setEnabled(false);\n        btnPlay.setNextFocusableComponent(spnMinutes);\n        btnPlay.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                btnPlayMouseClicked(evt);\n            }\n        });\n        pnlGUI.add(btnPlay);\n        btnPlay.setBounds(410, 400, 70, 25);\n        txtStatus.setBackground(new java.awt.Color(153, 153, 153));\n        txtStatus.setEditable(false);\n        txtStatus.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n        txtStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);\n        txtStatus.setText(\"Status\");\n        txtStatus.setMaximumSize(new java.awt.Dimension(59, 25));\n        txtStatus.setMinimumSize(new java.awt.Dimension(59, 25));\n        pnlGUI.add(txtStatus);\n        txtStatus.setBounds(410, 430, 70, 30);\n        getContentPane().add(pnlGUI, new java.awt.GridBagConstraints());\n        menuBarMain.setName(\"menuBarMain\");\n        menuFile.setMnemonic('f');\n        menuFile.setText(\"File\");\n        menuFile.setName(\"menuFile\");\n        menuOpen.setMnemonic('o');\n        menuOpen.setText(\"Open\");\n        menuOpen.setName(\"menuOpen\");\n        menuOpen.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuOpenMousePressed(evt);\n            }\n        });\n        menuFile.add(menuOpen);\n        sprOpen.setName(\"sprOpen\");\n        menuFile.add(sprOpen);\n        menuSave.setMnemonic('s');\n        menuSave.setText(\"Save\");\n        menuSave.setName(\"menuSave\");\n        menuSave.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuSaveMousePressed(evt);\n            }\n        });\n        menuFile.add(menuSave);\n        sprSave.setName(\"sprSave\");\n        menuFile.add(sprSave);\n        menuExit.setMnemonic('x');\n        menuExit.setText(\"Exit\");\n        menuExit.setBorderPainted(false);\n        menuExit.setFocusable(true);\n        menuExit.setName(\"menuExit\");\n        menuExit.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuExitMousePressed(evt);\n            }\n        });\n        menuFile.add(menuExit);\n        menuBarMain.add(menuFile);\n        menuTools.setMnemonic('t');\n        menuTools.setText(\"Tools\");\n        menuTools.setName(\"menuTools\");\n        grpMenuIgnore.add(menuRd_IgnoreNone);\n        menuRd_IgnoreNone.setText(\"Reset\");\n        menuRd_IgnoreNone.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreNoneStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreNone);\n        grpMenuIgnore.add(menuRd_IgnoreCap);\n        menuRd_IgnoreCap.setText(\"Skip Capture\");\n        menuRd_IgnoreCap.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreCapStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreCap);\n        grpMenuIgnore.add(menuRd_IgnoreCapConv);\n        menuRd_IgnoreCapConv.setText(\"Skip Capture/Transcode\");\n        menuRd_IgnoreCapConv.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreCapConvStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreCapConv);\n        grpMenuIgnore.add(menuRd_IgnoreCapConvMenu);\n        menuRd_IgnoreCapConvMenu.setText(\"Skip Capture/Transcode/Menu\");\n        menuRd_IgnoreCapConvMenu.addChangeListener(new javax.swing.event.ChangeListener() {\n\n            public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                menuRd_IgnoreCapConvMenuStateChanged(evt);\n            }\n        });\n        menuTools.add(menuRd_IgnoreCapConvMenu);\n        menuTools.add(sprIgnore);\n        menuProjProp.setText(\"Project Properties (Default)\");\n        grpMenuFormat.add(menuRdNTSC);\n        menuRdNTSC.setSelected(true);\n        menuRdNTSC.setText(\"NTSC\");\n        menuRdNTSC.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRdNTSCItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRdNTSC);\n        grpMenuFormat.add(menuRdPAL);\n        menuRdPAL.setText(\"PAL\");\n        menuRdPAL.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRdPALItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRdPAL);\n        menuProjProp.add(sprMenuFormatAspect);\n        grpMenuAspectRatio.add(menuRd_4_3);\n        menuRd_4_3.setSelected(true);\n        menuRd_4_3.setText(\"4:3\");\n        menuRd_4_3.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRd_4_3ItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRd_4_3);\n        grpMenuAspectRatio.add(menuRd_16_9);\n        menuRd_16_9.setText(\"16:9\");\n        menuRd_16_9.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuRd_16_9ItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuRd_16_9);\n        menuProjProp.add(sprMenuThread);\n        menuChkThread.setText(\"Enable Multi-Threading\");\n        menuChkThread.setToolTipText(\"EXPERIMENTAL!!! Very unstable!!!  This allows dvgrab and transcode to run at the same time...speeding up the process by as much as 10%\");\n        menuChkThread.addItemListener(new java.awt.event.ItemListener() {\n\n            public void itemStateChanged(java.awt.event.ItemEvent evt) {\n                menuChkThreadItemStateChanged(evt);\n            }\n        });\n        menuProjProp.add(menuChkThread);\n        menuTools.add(menuProjProp);\n        menuBarMain.add(menuTools);\n        menuHelp.setMnemonic('h');\n        menuHelp.setText(\"Help\");\n        menuHelp.setName(\"menuHelp\");\n        menuInternet.setText(\"dvd-homevideo website\");\n        menuInternet.setName(\"menuInternet\");\n        menuInternet.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuInternetMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuInternet);\n        menuREADME.setText(\"README File\");\n        menuREADME.setName(\"menuREADME\");\n        menuREADME.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuREADMEMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuREADME);\n        menuBug.setText(\"Submit Bug\");\n        menuBug.setName(\"menuBug\");\n        menuBug.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuBugMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuBug);\n        menuAbout.setText(\"About dvd-homevideo\");\n        menuAbout.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                menuAboutMousePressed(evt);\n            }\n        });\n        menuHelp.add(menuAbout);\n        menuBarMain.add(menuHelp);\n        setJMenuBar(menuBarMain);\n        pack();\n    }\n\n    // </editor-fold>//GEN-END:initComponents\n    private //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged\n    menuRd_IgnoreNoneStateChanged(//GEN-FIRST:event_menuRd_IgnoreNoneStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreNoneStateChanged\n        if (menuRd_IgnoreNone.isSelected()) {\n            lblMinutes.setEnabled(true);\n            spnMinutes.setEnabled(true);\n            lblSeconds.setEnabled(true);\n            spnSeconds.setEnabled(true);\n            chkQuality.setEnabled(true);\n            lblFormat.setEnabled(true);\n            rdNTSC.setEnabled(true);\n            rdPAL.setEnabled(true);\n            lblAspectRatio.setEnabled(true);\n            rd4_3.setEnabled(true);\n            rd16_9.setEnabled(true);\n            chkMenu.setEnabled(true);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreNoneStateChanged\n    private //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged\n    menuRd_IgnoreCapConvMenuStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreCapConvMenuStateChanged\n        if (menuRd_IgnoreCapConv.isSelected()) {\n            lblMinutes.setEnabled(false);\n            spnMinutes.setEnabled(false);\n            lblSeconds.setEnabled(false);\n            spnSeconds.setEnabled(false);\n            chkQuality.setEnabled(false);\n            lblFormat.setEnabled(false);\n            rdNTSC.setEnabled(false);\n            rdPAL.setEnabled(false);\n            lblAspectRatio.setEnabled(false);\n            rd4_3.setEnabled(false);\n            rd16_9.setEnabled(false);\n            chkMenu.setEnabled(false);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreCapConvMenuStateChanged\n    private //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged\n    menuRd_IgnoreCapConvStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreCapConvStateChanged\n        if (menuRd_IgnoreCapConv.isSelected()) {\n            lblMinutes.setEnabled(false);\n            spnMinutes.setEnabled(false);\n            lblSeconds.setEnabled(false);\n            spnSeconds.setEnabled(false);\n            chkQuality.setEnabled(false);\n            lblFormat.setEnabled(false);\n            rdNTSC.setEnabled(false);\n            rdPAL.setEnabled(false);\n            lblAspectRatio.setEnabled(false);\n            rd4_3.setEnabled(false);\n            rd16_9.setEnabled(false);\n            chkMenu.setEnabled(true);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreCapConvStateChanged\n    private //GEN-FIRST:event_menuRd_IgnoreCapStateChanged\n    void //GEN-FIRST:event_menuRd_IgnoreCapStateChanged\n    menuRd_IgnoreCapStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_menuRd_IgnoreCapStateChanged\n        if (menuRd_IgnoreCap.isSelected()) {\n            lblMinutes.setEnabled(false);\n            spnMinutes.setEnabled(false);\n            lblSeconds.setEnabled(false);\n            spnSeconds.setEnabled(false);\n            chkQuality.setEnabled(true);\n            lblFormat.setEnabled(true);\n            rdNTSC.setEnabled(true);\n            rdPAL.setEnabled(true);\n            lblAspectRatio.setEnabled(true);\n            rd4_3.setEnabled(true);\n            rd16_9.setEnabled(true);\n            chkMenu.setEnabled(true);\n        }\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuRd_IgnoreCapStateChanged\n    private //GEN-FIRST:event_txtOutputDirFocusLost\n    void //GEN-FIRST:event_txtOutputDirFocusLost\n    txtOutputDirFocusLost(//GEN-FIRST:event_txtOutputDirFocusLost\n    java.awt.event.FocusEvent evt) {\n        //GEN-HEADEREND:event_txtOutputDirFocusLost\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_txtOutputDirFocusLost\n    private //GEN-FIRST:event_txtTitleFocusLost\n    void //GEN-FIRST:event_txtTitleFocusLost\n    txtTitleFocusLost(//GEN-FIRST:event_txtTitleFocusLost\n    java.awt.event.FocusEvent evt) {\n        //GEN-HEADEREND:event_txtTitleFocusLost\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_txtTitleFocusLost\n    private //GEN-FIRST:event_btnOpen_OutputDirKeyTyped\n    void //GEN-FIRST:event_btnOpen_OutputDirKeyTyped\n    btnOpen_OutputDirKeyTyped(//GEN-FIRST:event_btnOpen_OutputDirKeyTyped\n    java.awt.event.KeyEvent evt) {\n        //GEN-HEADEREND:event_btnOpen_OutputDirKeyTyped\n        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_OutputDirKeyTyped\n    private //GEN-FIRST:event_btnOpen_OutputDirMouseClicked\n    void //GEN-FIRST:event_btnOpen_OutputDirMouseClicked\n    btnOpen_OutputDirMouseClicked(//GEN-FIRST:event_btnOpen_OutputDirMouseClicked\n    java.awt.event.MouseEvent evt) {\n        //GEN-HEADEREND:event_btnOpen_OutputDirMouseClicked\n        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_OutputDirMouseClicked\n    private //GEN-FIRST:event_spnSecondsStateChanged\n    void //GEN-FIRST:event_spnSecondsStateChanged\n    spnSecondsStateChanged(//GEN-FIRST:event_spnSecondsStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_spnSecondsStateChanged\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_spnSecondsStateChanged\n    private //GEN-FIRST:event_spnMinutesStateChanged\n    void //GEN-FIRST:event_spnMinutesStateChanged\n    spnMinutesStateChanged(//GEN-FIRST:event_spnMinutesStateChanged\n    javax.swing.event.ChangeEvent evt) {\n        //GEN-HEADEREND:event_spnMinutesStateChanged\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_spnMinutesStateChanged\n    private void btnStartKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnStartKeyTyped\n        if (evt.getKeyChar() == evt.VK_ENTER) {\n            try {\n                /* \n                 * Automatically save the configuration in the users ~/.dvd-homevideo\n                 * directory.  This way if they forget to click on the Save button in\n                 * the File menu, it will still be saved once they start capturing \n                 * from their camcorder. \n                 */\n                WriteSession();\n            } catch (IOException e) {\n            }\n            blnBegin = true;\n            btnPlay.setEnabled(false);\n        }\n    }\n\n    //GEN-LAST:event_btnStartKeyTyped\n    private void btnExitKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnExitKeyTyped\n        if (evt.getKeyChar() == evt.VK_ENTER)\n            ExitDVDHomevideo();\n    }\n\n    //GEN-LAST:event_btnExitKeyTyped\n    private void menuChkThreadItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuChkThreadItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuChkThreadItemStateChanged\n    private void menuAboutMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuAboutMousePressed\n        MessageBox(\"dvd-homevideo, version 0.4\\n\" + \"Created by: Shane Santner\", 1);\n    }\n\n    //GEN-LAST:event_menuAboutMousePressed\n    /**\n     * This is the code that handles the user clicking the Exit button.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnExitMouseClicked\n        ExitDVDHomevideo();\n    }\n\n    //GEN-LAST:event_btnExitMouseClicked\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRd_16_9ItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRd_16_9ItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRd_16_9ItemStateChanged\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRd_4_3ItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRd_4_3ItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRd_4_3ItemStateChanged\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRdPALItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRdPALItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRdPALItemStateChanged\n    /**\n     * This is the code that handles the user changing the state of one\n     * of the menu radio buttions.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void menuRdNTSCItemStateChanged(java.awt.event.ItemEvent evt) {\n        //GEN-FIRST:event_menuRdNTSCItemStateChanged\n        WriteProjProperties();\n    }\n\n    //GEN-LAST:event_menuRdNTSCItemStateChanged\n    /**\n     * This is the code that handles the user clicking the Play button.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void btnPlayMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnPlayMouseClicked\n        /*\n         * Try to play the DVD in kaffeine first, if that fails then\n         * try xine next.  TODO Need to also add code for mplayer as well.\n         */\n        try {\n            String[] cmd = { \"kaffeine\", \"dvd:\" + strOutputDir + \"/DVD/\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"xine\", \"dvd:\" + strOutputDir + \"/DVD/\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have xine or kaffeine installed.\\n\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_btnPlayMouseClicked\n    /**\n     * This is the code that handles the user clicking on the SubmitBug button\n     * in the Help menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuBugMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuBugMousePressed\n        /* Open a web browser pointing to the hard coded link */\n        try {\n            String[] cmd = { \"firefox\", \"http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"konqueror\", \"http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have firefox or konqueror installed.\\n\" + \"Open up your favorite web browser and paste:\\n\" + \"http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\\n\" + \"in the address bar to submit a bug for dvd-homevideo.\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_menuBugMousePressed\n    /**\n     * If you don't need to recapture video from the camcorder because of\n     * an error later in the program, then you can check this box in the Tools\n     * menu and this will allow you to not have to recapture.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    /**\n     * If you don't need to recapture video or retranscode the video to DVD format\n     * because of an error later in the program, then you can check this box in\n     * the Tools menu and this will allow you to not have to recapture or retranscode.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    /**\n     * If you only need to rerun dvd-author then you can check this box in\n     * the Tools menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    /**\n     * This is the code that handles the user clicking the Open button\n     * from the File menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuOpenMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuOpenMousePressed\n        File home = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo\");\n        fcMenuOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        fcMenuOpen.addChoosableFileFilter(new CustomFileFilter(\".xml\"));\n        fcMenuOpen.setCurrentDirectory(home);\n        int returnVal = fcMenuOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            ReadSession(fcMenuOpen.getSelectedFile().getPath());\n        enableStartButton();\n    }\n\n    //GEN-LAST:event_menuOpenMousePressed\n    /**\n     * This is the code that handles the user clicking the Save button\n     * from the File menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuSaveMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuSaveMousePressed\n        /* \n         * The default action is to call WriteSession to store all of the \n         * GUI widget information for later retrieval.\n         */\n        try {\n            WriteSession();\n        } catch (IOException e) {\n        }\n    }\n\n    //GEN-LAST:event_menuSaveMousePressed\n    /**\n     * This is the code that handles the user clicking the dvd-homevideo website\n     * button from the Help menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuInternetMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuInternetMousePressed\n        /* Open a web browser pointing to the hard coded link */\n        try {\n            String[] cmd = { \"firefox\", \"http://dvd-homevideo.sourceforge.net/\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"konqueror\", \"http://dvd-homevideo.sourceforge.net/\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have firefox or konqueror installed.\\n\" + \"Open up your favorite web browser and paste:\\n\" + \"http://dvd-homevideo.sourceforge.net/\\n\" + \"in the address bar for help with running dvd-homevideo.\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_menuInternetMousePressed\n    /**\n     * This is the code that handles the user clicking the README file\n     * button from the Help menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuREADMEMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuREADMEMousePressed\n        /* Open a web browser pointing to the hard coded link */\n        try {\n            String[] cmd = { \"firefox\", \"http://dvd-homevideo.sourceforge.net/README.html\" };\n            Process p = Runtime.getRuntime().exec(cmd);\n        } catch (IOException ioe) {\n            try {\n                String[] cmd = { \"konqueror\", \"http://dvd-homevideo.sourceforge.net/README.html\" };\n                Process p = Runtime.getRuntime().exec(cmd);\n            } catch (IOException io) {\n                MessageBox(\"It appears that you do not have firefox or konqueror installed.\\n\" + \"Open up your favorite web browser and paste:\\n\" + \"http://dvd-homevideo.sourceforge.net/README.html\\n\" + \"in the address bar for help with running dvd-homevideo.\", 1);\n            }\n        }\n    }\n\n    //GEN-LAST:event_menuREADMEMousePressed\n    /**\n     * This is the code that handles the user clicking the Exit button\n     * from the File menu.\n     * @param   evt    The mousePressed event handled by this method\n     */\n    private void menuExitMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_menuExitMousePressed\n        /* TODO Write properties of PAL/NTSC and 4:3/16:9 to properties file */\n        ExitDVDHomevideo();\n    }\n\n    //GEN-LAST:event_menuExitMousePressed\n    /**\n     * This is the code that handles the user clicking the Start button.\n     * @param   evt    The mouseClicked event handled by this method\n     */\n    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnStartMouseClicked\n        try {\n            /* \n             * Automatically save the configuration in the users ~/.dvd-homevideo\n             * directory.  This way if they forget to click on the Save button in\n             * the File menu, it will still be saved once they start capturing \n             * from their camcorder. \n             */\n            WriteSession();\n        } catch (IOException e) {\n        }\n        blnBegin = true;\n        btnPlay.setEnabled(false);\n    }\n\n    //GEN-LAST:event_btnStartMouseClicked\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for a title file to use for dvd-menu.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_TextFileKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnOpen_TextFileKeyTyped\n        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtTextFile.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_TextFileKeyTyped\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for an output directory to store\n     * everything in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for an output directory to locate an\n     * audio file.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_AudioKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnOpen_AudioKeyTyped\n        if (chkMenu.isSelected()) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtAudio.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_AudioKeyTyped\n    /**\n     * This is the code that handles the user typing Return on the\n     * Open button to search for an output directory to locate a\n     * picture in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_PictureKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_btnOpen_PictureKeyTyped\n        if (chkMenu.isSelected() == true) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtPicture.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_PictureKeyTyped\n    /**\n     * This is the code that handles the user typing the Space bar\n     * on the check box for the menu\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkMenuKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_chkMenuKeyTyped\n        if (chkMenu.isSelected()) {\n            lblPicture.setEnabled(false);\n            txtPicture.setEnabled(false);\n            btnOpen_Picture.setEnabled(false);\n            lblAudio.setEnabled(false);\n            txtAudio.setEnabled(false);\n            btnOpen_Audio.setEnabled(false);\n        } else {\n            lblPicture.setEnabled(true);\n            txtPicture.setEnabled(true);\n            btnOpen_Picture.setEnabled(true);\n            lblAudio.setEnabled(true);\n            txtAudio.setEnabled(true);\n            btnOpen_Audio.setEnabled(true);\n        }\n    }\n\n    //GEN-LAST:event_chkMenuKeyTyped\n    /**\n     * This is the code that handles the user typing the Space bar\n     * on the check box for the quality group of radio buttons\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkQualityKeyTyped(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_chkQualityKeyTyped\n        if (chkQuality.isSelected()) {\n            rdSuper.setEnabled(false);\n            rdGood.setEnabled(false);\n            rdAverage.setEnabled(false);\n        } else {\n            rdSuper.setEnabled(true);\n            rdGood.setEnabled(true);\n            rdAverage.setEnabled(true);\n        }\n    }\n\n    //GEN-LAST:event_chkQualityKeyTyped\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for an output directory to locate a\n     * picture in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_PictureMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnOpen_PictureMouseClicked\n        if (chkMenu.isSelected() == true) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtPicture.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_PictureMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for an output directory to locate an\n     * audio file in.\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_AudioMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnOpen_AudioMouseClicked\n        if (chkMenu.isSelected()) {\n            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n            int returnVal = fcOpen.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION)\n                txtAudio.setText(fcOpen.getSelectedFile().getPath());\n        }\n    }\n\n    //GEN-LAST:event_btnOpen_AudioMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for an output directory to store\n     * all of their files in\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    /**\n     * This is the code that handles the user clicking on the\n     * Open button to search for a title file to be used for\n     * the background menu of the DVD\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void btnOpen_TextFileMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_btnOpen_TextFileMouseClicked\n        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        int returnVal = fcOpen.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION)\n            txtTextFile.setText(fcOpen.getSelectedFile().getPath());\n    }\n\n    //GEN-LAST:event_btnOpen_TextFileMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * check box to select the quality of video conversion for\n     * their DVD\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkQualityMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_chkQualityMouseClicked\n        if (chkQuality.isSelected()) {\n            rdSuper.setEnabled(true);\n            rdGood.setEnabled(true);\n            rdAverage.setEnabled(true);\n        } else {\n            rdSuper.setEnabled(false);\n            rdGood.setEnabled(false);\n            rdAverage.setEnabled(false);\n        }\n    }\n\n    //GEN-LAST:event_chkQualityMouseClicked\n    /**\n     * This is the code that handles the user clicking on the\n     * check box to specify details for the DVD menu\n     * @param   evt    The KeyTyped event handled by this method\n     */\n    private void chkMenuMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_chkMenuMouseClicked\n        if (chkMenu.isSelected()) {\n            lblPicture.setEnabled(true);\n            txtPicture.setEnabled(true);\n            btnOpen_Picture.setEnabled(true);\n            lblAudio.setEnabled(true);\n            txtAudio.setEnabled(true);\n            btnOpen_Audio.setEnabled(true);\n        } else {\n            lblPicture.setEnabled(false);\n            txtPicture.setEnabled(false);\n            btnOpen_Picture.setEnabled(false);\n            lblAudio.setEnabled(false);\n            txtAudio.setEnabled(false);\n            btnOpen_Audio.setEnabled(false);\n        }\n    }\n\n    //GEN-LAST:event_chkMenuMouseClicked\n    public void enableStartButton() {\n        int tempMinutes, tempSeconds, tempTotal;\n        String tempStrTitle, tempStrOutputDir;\n        /* First, load the values from the form into local variables */\n        tempMinutes = ((Integer) spnMinutes.getValue()).intValue();\n        tempSeconds = ((Integer) spnSeconds.getValue()).intValue();\n        tempTotal = tempSeconds + tempMinutes;\n        tempStrTitle = txtTitle.getText();\n        tempStrOutputDir = txtOutputDir.getText();\n        /*\n         * Now do the error checking.  Here we look for a capture time\n         * that is greater than zero and less than 65 minutes \n         */\n        if (tempTotal >= 1 && !tempStrOutputDir.equals(\"\") && !tempStrTitle.equals(\"\")) {\n            strOutputDir = txtOutputDir.getText() + \"/\" + txtTitle.getText();\n            btnStart.setEnabled(true);\n        } else if (!tempStrOutputDir.equals(\"\") && !tempStrTitle.equals(\"\") && (menuRd_IgnoreCap.isSelected() || menuRd_IgnoreCapConv.isSelected() || menuRd_IgnoreCapConvMenu.isSelected())) {\n            strOutputDir = txtOutputDir.getText() + \"/\" + txtTitle.getText();\n            btnStart.setEnabled(true);\n        } else\n            btnStart.setEnabled(false);\n    }\n\n    /**\n     * On startup, checks to ensure that the raw1394 module is loaded.\n     * This module is only needed to capture audio and video from the\n     * dv camcorder.\n     * return   A boolean indicating if the module is present\n     */\n    public boolean checkForModules() {\n        try {\n            String line;\n            String modules = \"cat /proc/modules | grep raw1394\";\n            String[] module_cmd = { \"/bin/sh\", \"-c\", modules };\n            Process p = Runtime.getRuntime().exec(module_cmd);\n            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n            line = in.readLine();\n            p.waitFor();\n            if (line == null)\n                return false;\n            else\n                return true;\n        } catch (Exception ioe) {\n            /* If we have made it here then the module is not loaded */\n            return false;\n        }\n    }\n\n    /**\n     * On startup, checks to ensure that all dependent programs are installed\n     * @param   Prog[]  List of dependent programs needed for dvd-homevideo\n     * @return  A boolean to determine if an error occurred in the function\n     */\n    public boolean checkForProg(String[] Prog) {\n        /* Declare local variables */\n        int i = 0;\n        int j = 0;\n        String build_list = \"\";\n        String[] uninstalled = new String[Prog.length];\n        while (true) {\n            try {\n                /* \n                 * Walk through the list of programs needed for dvd-homevideo\n                 * to operate correctly.\n                 */\n                while (i < Prog.length) {\n                    /* \n                     * This is how I test for a program.  I simple try to \n                     * execute the application, if it fails then the software\n                     * jumps to the catch block and I know that the program\n                     * is either not installed or not in the users path.\n                     */\n                    Process p = Runtime.getRuntime().exec(Prog[i]);\n                    /* \n                     * If I make it here then the program exists and I need to\n                     * kill it.\n                     */\n                    p.destroy();\n                    i++;\n                }\n                /* Check for any uninstalled programs */\n                for (i = 0; i < uninstalled.length; i++) {\n                    /* If not null then add to the list */\n                    if (uninstalled[i] != null)\n                        build_list += uninstalled[i] + \"\\n\";\n                }\n                /* \n                 * If the first element is null, then all programs are \n                 * installed correctly.\n                 */\n                if (uninstalled[0] == null)\n                    return true;\n                else\n                    /* Otherwise tell the user what they are missing */\n                    MessageBox(\"The following programs are not installed or not in \" + \"your path!\\n\" + build_list, 0);\n                return false;\n            } catch (IOException ioe) {\n                /* Add the missing program to the uninstalled array */\n                uninstalled[j] = Prog[i];\n                i++;\n                j++;\n            }\n        }\n    }\n\n    /**\n     * Displays a message box with the supplied text and yes/no options\n     * @param   message    The message to display in the box\n     */\n    public int MessageBox(String message) {\n        return JOptionPane.showConfirmDialog(null, message, \"dvd-homevideo\", JOptionPane.YES_NO_OPTION);\n    }\n\n    /**\n     * Displays a message box with the supplied text and type\n     * @param   message    The message to display in the box\n     * @param   type       The type of message (Info, Warning or Error)\n     */\n    public void MessageBox(String message, int type) {\n        JOptionPane.showMessageDialog(null, message, \"dvd-homevideo\", type);\n    }\n\n    /**\n     * Displays a message box with the supplied text and type\n     * @param   message    The message to display in the box\n     * @param   type       The type of message (Info, Warning or Error)\n     * @param   picture    Picture to display in the MessageBox\n     */\n    public void MessageBox(String message, int type, String picture) {\n        JOptionPane.showMessageDialog(null, message, \"dvd-homevideo\", type, new javax.swing.ImageIcon(getClass().getResource(picture)));\n    }\n\n    /**\n     * Check dvd-homevideo for runtime errors\n     * @param   fileName    This is a log file to parse through, looking for\n     *                      the keyword \"Error\"\n     * @return   A boolean indicating if an error was found\n     */\n    public boolean ErrorCheck(String fileName) {\n        String line;\n        StringTokenizer st;\n        String testToken;\n        boolean error = false;\n        /*\n         * Need to parse through the supplies file and look for any\n         * instances of the words 'error' or 'broken'.  If found, this\n         * is treated as a run-time error of one of the dependent programs\n         * that dvd-homevideo relies on.\n         */\n        try {\n            BufferedReader in = new BufferedReader(new FileReader(fileName));\n            while ((line = in.readLine()) != null) {\n                /* Check for a specific burn error */\n                if (line.equals(\":-( /dev/dvd: media is not recognized as recordable DVD: 9\")) {\n                    MessageBox(\"Non-recoverable error occurred.\" + \"\\nClass Name: \" + new Exception().getStackTrace()[1].getClassName() + \"\\nMethod Name: \" + new Exception().getStackTrace()[1].getMethodName() + \"\\nError was: \" + line, 0);\n                    return true;\n                }\n                /*\n                 * Need to catch all instances of 'error' or 'broken'.  This\n                 * includes cases such as:\n                 * **Error:\n                 * error~\n                 * Broken pipe\n                 * etc, etc, etc.  We need to catch ALL instances.\n                 */\n                st = new StringTokenizer(line, \"*,;:'-~\\t \");\n                while (st.hasMoreTokens()) {\n                    testToken = st.nextToken();\n                    if (// ||\n                    testToken.equalsIgnoreCase(\"Error\")) //testToken.equalsIgnoreCase(\"Broken\"))\n                    {\n                        MessageBox(\"Non-recoverable error occurred.\" + \"\\nClass Name: \" + new Exception().getStackTrace()[1].getClassName() + \"\\nMethod Name: \" + new Exception().getStackTrace()[1].getMethodName() + \"\\nError was: \" + line, 0);\n                        error = true;\n                    }\n                }\n            }\n        } catch (FileNotFoundException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"Can not find \" + fileName + \"\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        }\n        return error;\n    }\n\n    /**\n     * Update the Status textbox\n     * @param   typeColor   red, green, or grey\n     * @param   typeUpdate  Values should be PASS, FAIL, Status\n     */\n    public void UpdateStatus(Color typeColor, String typeUpdate) {\n        /* \n         * Set the background and text to let the user know that\n         * dvd-homevideo failed\n         */\n        txtStatus.setBackground(typeColor);\n        txtStatus.setText(typeUpdate);\n        if (typeUpdate.equals(\"FAIL\"))\n            txtStatus.setToolTipText(\"Look at dvd-homevideo.err and files\" + \" in the log directory for possible\" + \" reasons why dvd-homevideo failed.\");\n        /* \n         * If we need to wait for user input because dvd-homevideo\n         * has completed...either because of passing or failing then\n         * set blnBegin to false.\n         */\n        if (!typeUpdate.equals(\"Status\"))\n            blnBegin = false;\n    }\n\n    /**\n     * This method should be called every time the application exits normally.  This allows the\n     * current session to be saved before quiting dvd-homevideo.\n     */\n    public void ExitDVDHomevideo() {\n        try {\n            /* \n             * Automatically save the configuration in the users ~/.dvd-homevideo\n             * directory.  This should be the only place in the project where System.exit(0) is called. \n             */\n            WriteSession();\n            WriteProjProperties();\n            System.exit(0);\n        } catch (IOException e) {\n        }\n    }\n\n    /**\n     * This method retrieves user specific information from the\n     * properties xml file in the users ~/.dvd-homevideo directory\n     */\n    public void ReadProjProperties() {\n        File home = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo/properties\");\n        String line, token;\n        StringTokenizer st;\n        try {\n            /* \n             * Read the xml properties file and set widgets on the \n             * form accordingly\n             */\n            BufferedReader reader = new BufferedReader(new FileReader(home));\n            while ((line = reader.readLine()) != null) {\n                st = new StringTokenizer(line, \"<>\");\n                while (st.hasMoreTokens()) {\n                    token = st.nextToken();\n                    if (token.equals(\"menuRdNTSC\")) {\n                        line = reader.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        menuRdNTSC.setSelected(Boolean.parseBoolean(token));\n                        menuRdPAL.setSelected(!Boolean.parseBoolean(token));\n                        rdNTSC.setSelected(menuRdNTSC.isSelected());\n                        rdPAL.setSelected(menuRdPAL.isSelected());\n                    } else if (token.equals(\"menuRd_4_3\")) {\n                        line = reader.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        menuRd_4_3.setSelected(Boolean.parseBoolean(token));\n                        menuRd_16_9.setSelected(!Boolean.parseBoolean(token));\n                        rd4_3.setSelected(menuRd_4_3.isSelected());\n                        rd16_9.setSelected(menuRd_16_9.isSelected());\n                    } else if (token.equals(\"menuChkThread\")) {\n                        line = reader.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        menuChkThread.setSelected(Boolean.parseBoolean(token));\n                    }\n                }\n            }\n            reader.close();\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error in ReadProjectProperties in GUI.java\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * This method stores user specific information in a properties xml file\n     * in the users ~/.dvd-homevideo directory\n     */\n    public void WriteProjProperties() {\n        File home = new File(System.getProperty(\"user.home\") + \"/.dvd-homevideo/properties\");\n        try {\n            /* Write/rewrite the xml properties file */\n            BufferedWriter writer = new BufferedWriter(new FileWriter(home));\n            writer.write(\"<dvd-homevideo properties>\");\n            writer.newLine();\n            writer.write(\"\\t<JRadioButtonMenuItem>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menuRdNTSC>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<selected>\" + menuRdNTSC.isSelected() + \"</selected>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menuRdNTSC>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menuRd_4_3>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<selected>\" + menuRd_4_3.isSelected() + \"</selected>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menuRd_4_3>\");\n            writer.newLine();\n            writer.write(\"\\t</JRadioButonMenuItem>\");\n            writer.newLine();\n            writer.write(\"\\t<JCheckBoxMenuItem>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menuChkThread>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<selected>\" + menuChkThread.isSelected() + \"</selected>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menuChkThread>\");\n            writer.newLine();\n            writer.write(\"\\t</JCheckBoxMenuItem>\");\n            writer.newLine();\n            writer.close();\n            /* Update the states on the form */\n            rdNTSC.setSelected(menuRdNTSC.isSelected());\n            rdPAL.setSelected(menuRdPAL.isSelected());\n            rd4_3.setSelected(menuRd_4_3.isSelected());\n            rd16_9.setSelected(menuRd_16_9.isSelected());\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error in WriteProjectProperties in GUI.java\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * Opens a previous dvd-homevideo session by reading an xml file\n     * @param   xmlPath    Path to the xml file\n     */\n    public void ReadSession(String xmlPath) {\n        String line, token;\n        StringTokenizer st;\n        boolean done = false;\n        int i;\n        /* \n         * Define an exhaustive list of the widgets that we need to track\n         * on the form.\n         */\n        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };\n        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };\n        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };\n        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };\n        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };\n        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };\n        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };\n        try {\n            BufferedReader in = new BufferedReader(new FileReader(xmlPath));\n            line = in.readLine();\n            st = new StringTokenizer(line, \"<>\");\n            token = st.nextToken();\n            /* \n             * If the first line does not contain dvd-homevideo then\n             * we have a bad xml file.\n             */\n            if (!token.equals(\"dvd-homevideo\")) {\n                MessageBox(\"Invalid File Format!\", 1);\n                done = true;\n            }\n            while (((line = in.readLine()) != null) && !done) {\n                st = new StringTokenizer(line, \"<>\");\n                if (!st.nextToken().equals(\"/dvd-homevideo\"))\n                    token = st.nextToken();\n                /* Read in the variables and set them on the form */\n                if (token.equals(\"JLabel\")) {\n                    for (i = 0; i < lbl_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        lbl_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JSpinner\")) {\n                    for (i = 0; i < spn_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        spn_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        // SDK 1.4 didn't like this\n                        spn_widgets[i].setValue(Integer.parseInt(token));\n                        //spn_widgets[i].getModel().setValue((Object)token);\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JCheckBox\")) {\n                    for (i = 0; i < chk_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chk_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chk_widgets[i].setSelected(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JRadioButton\")) {\n                    for (i = 0; i < rd_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        rd_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        rd_widgets[i].setSelected(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JTextField\")) {\n                    for (i = 0; i < txt_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        txt_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        if (!token.substring(1, 4).equals(\"tex\"))\n                            txt_widgets[i].setText(token);\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JButton\")) {\n                    for (i = 0; i < btn_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        btn_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else if (token.equals(\"JRadioButtonMenuItem\")) {\n                    for (i = 0; i < chkMenu_widgets.length; i++) {\n                        in.readLine();\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chkMenu_widgets[i].setEnabled(Boolean.parseBoolean(token));\n                        line = in.readLine();\n                        st = new StringTokenizer(line, \"<>\");\n                        st.nextToken();\n                        st.nextToken();\n                        token = st.nextToken();\n                        chkMenu_widgets[i].setSelected(Boolean.parseBoolean(token));\n                        in.readLine();\n                    }\n                } else {\n                    lblCapture.setEnabled(false);\n                    lblConvert.setEnabled(false);\n                    lblAuthor.setEnabled(false);\n                    lblCaptureProg.setEnabled(false);\n                    lblConvertProg.setEnabled(false);\n                    lblAuthorProg.setEnabled(false);\n                    prgCapture.setEnabled(false);\n                    prgConvert.setEnabled(false);\n                    prgAuthor.setEnabled(false);\n                    lblCaptureProg.setText(\"0%\");\n                    lblConvertProg.setText(\"0%\");\n                    lblAuthorProg.setText(\"0%\");\n                }\n            }\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error while reading the xml file\" + \"\\nfor the requested dvd-homevideo session.\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * Saves the state of all widgets on the GUI form in an xml file\n     * in the users ~/.dvd-homevideo directory\n     */\n    public void WriteSession() throws IOException {\n        int i;\n        /* Again, we must have this exhaustive list of widgets to parse through */\n        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };\n        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };\n        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };\n        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };\n        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };\n        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };\n        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };\n        try {\n            /* Write the file to the users ~/.dvd-homevideo directory */\n            String home = System.getProperty(\"user.home\");\n            File msgboxSave = new File(home + \"/.dvd-homevideo/properties\");\n            BufferedWriter msgboxSaveWriter = new BufferedWriter(new FileWriter(home + \"/.dvd-homevideo/properties\"));\n            msgboxSaveWriter.close();\n            /* Now write the xml file to the users home/dvd-homevideo directory */\n            BufferedWriter writer = new BufferedWriter(new FileWriter(home + \"/.dvd-homevideo/\" + txtTitle.getText() + \".xml\"));\n            writer.write(\"<dvd-homevideo>\");\n            writer.newLine();\n            writer.write(\"\\t<JLabel>\");\n            writer.newLine();\n            for (i = 0; i < lbl_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + lbl_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + lbl_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + lbl_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JLabel>\");\n            writer.newLine();\n            writer.write(\"\\t<JSpinner>\");\n            writer.newLine();\n            for (i = 0; i < spn_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + spn_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + spn_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<value>\" + spn_widgets[i].getValue() + \"</value>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + spn_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JSpinner>\");\n            writer.newLine();\n            writer.write(\"\\t<JCheckBox>\");\n            writer.newLine();\n            for (i = 0; i < chk_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + chk_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + chk_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<selected>\" + chk_widgets[i].isSelected() + \"</selected>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + chk_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JCheckBox>\");\n            writer.newLine();\n            writer.write(\"\\t<JRadioButton>\");\n            writer.newLine();\n            for (i = 0; i < rd_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + rd_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + rd_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<selected>\" + rd_widgets[i].isSelected() + \"</selected>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + rd_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JRadioButton>\");\n            writer.newLine();\n            writer.write(\"\\t<JTextField>\");\n            writer.newLine();\n            for (i = 0; i < txt_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + txt_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + txt_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<text>\" + txt_widgets[i].getText() + \"</text>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + txt_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JTextField>\");\n            writer.newLine();\n            writer.write(\"\\t<JButton>\");\n            writer.newLine();\n            for (i = 0; i < btn_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + btn_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + btn_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + btn_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JButton>\");\n            writer.newLine();\n            writer.write(\"\\t<JRadioButtonMenuItem>\");\n            writer.newLine();\n            for (i = 0; i < chkMenu_widgets.length; i++) {\n                writer.write(\"\\t\\t<\" + chkMenu_widgets[i].getName() + \">\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<enabled>\" + chkMenu_widgets[i].isEnabled() + \"</enabled>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<selected>\" + chkMenu_widgets[i].isSelected() + \"</selected>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</\" + chkMenu_widgets[i].getName() + \">\");\n                writer.newLine();\n            }\n            writer.write(\"\\t</JRadioButtonMenuItem>\");\n            writer.newLine();\n            writer.write(\"</dvd-homevideo>\");\n            writer.newLine();\n            writer.close();\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(strOutputDir, ex);\n            MessageBox(\"IO Error while writing the xml file\" + \"\\nfor this dvd-homevideo session.\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n        }\n    }\n\n    /*\n    public void setIcon()\n    {\n        javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(\"/logo_32x32.png\"));\n        setIconImage(new javax.swing.ImageIcon(image.getImage()));\n    }\n    */\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    private javax.swing.JButton btnExit;\n\n    private javax.swing.JButton btnOpen_Audio;\n\n    private javax.swing.JButton btnOpen_OutputDir;\n\n    private javax.swing.JButton btnOpen_Picture;\n\n    private javax.swing.JButton btnOpen_TextFile;\n\n    protected javax.swing.JButton btnPlay;\n\n    private javax.swing.JButton btnStart;\n\n    protected javax.swing.JCheckBox chkBurn;\n\n    protected javax.swing.JCheckBox chkMenu;\n\n    protected javax.swing.JCheckBox chkQuality;\n\n    private javax.swing.JFileChooser fcMenuOpen;\n\n    private javax.swing.JFileChooser fcOpen;\n\n    private javax.swing.ButtonGroup grpAspectRatio;\n\n    private javax.swing.ButtonGroup grpFormat;\n\n    private javax.swing.ButtonGroup grpMenuAspectRatio;\n\n    private javax.swing.ButtonGroup grpMenuFormat;\n\n    private javax.swing.ButtonGroup grpMenuIgnore;\n\n    private javax.swing.ButtonGroup grpMenuMode;\n\n    private javax.swing.ButtonGroup grpQuality;\n\n    private javax.swing.JLabel lblAspectRatio;\n\n    private javax.swing.JLabel lblAudio;\n\n    protected javax.swing.JLabel lblAuthor;\n\n    protected javax.swing.JLabel lblAuthorProg;\n\n    protected javax.swing.JLabel lblCapture;\n\n    protected javax.swing.JLabel lblCaptureProg;\n\n    protected javax.swing.JLabel lblConvert;\n\n    protected javax.swing.JLabel lblConvertProg;\n\n    private javax.swing.JLabel lblFormat;\n\n    private javax.swing.JLabel lblMinutes;\n\n    private javax.swing.JLabel lblOutputDir;\n\n    private javax.swing.JLabel lblPicture;\n\n    private javax.swing.JLabel lblSeconds;\n\n    private javax.swing.JLabel lblTextFile;\n\n    private javax.swing.JLabel lblTitle;\n\n    private javax.swing.JMenuItem menuAbout;\n\n    protected javax.swing.JMenuBar menuBarMain;\n\n    private javax.swing.JMenuItem menuBug;\n\n    protected javax.swing.JCheckBoxMenuItem menuChkThread;\n\n    protected javax.swing.JMenuItem menuExit;\n\n    protected javax.swing.JMenu menuFile;\n\n    protected javax.swing.JMenu menuHelp;\n\n    protected javax.swing.JMenuItem menuInternet;\n\n    protected javax.swing.JMenuItem menuOpen;\n\n    private javax.swing.JMenu menuProjProp;\n\n    protected javax.swing.JMenuItem menuREADME;\n\n    private javax.swing.JRadioButtonMenuItem menuRdNTSC;\n\n    private javax.swing.JRadioButtonMenuItem menuRdPAL;\n\n    private javax.swing.JRadioButtonMenuItem menuRd_16_9;\n\n    private javax.swing.JRadioButtonMenuItem menuRd_4_3;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCap;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConv;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConvMenu;\n\n    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreNone;\n\n    protected javax.swing.JMenuItem menuSave;\n\n    protected javax.swing.JMenu menuTools;\n\n    private javax.swing.JPanel pnlGUI;\n\n    protected javax.swing.JProgressBar prgAuthor;\n\n    protected javax.swing.JProgressBar prgCapture;\n\n    protected javax.swing.JProgressBar prgConvert;\n\n    protected javax.swing.JRadioButton rd16_9;\n\n    protected javax.swing.JRadioButton rd4_3;\n\n    protected javax.swing.JRadioButton rdAverage;\n\n    protected javax.swing.JRadioButton rdGood;\n\n    protected javax.swing.JRadioButton rdNTSC;\n\n    protected javax.swing.JRadioButton rdPAL;\n\n    protected javax.swing.JRadioButton rdSuper;\n\n    private javax.swing.JScrollPane spTextArea;\n\n    protected javax.swing.JSpinner spnMinutes;\n\n    protected javax.swing.JSpinner spnSeconds;\n\n    private javax.swing.JSeparator sprAspectRatio;\n\n    private javax.swing.JSeparator sprCapConvert;\n\n    private javax.swing.JSeparator sprIgnore;\n\n    private javax.swing.JSeparator sprMenuAuthor;\n\n    private javax.swing.JSeparator sprMenuFormatAspect;\n\n    private javax.swing.JSeparator sprMenuThread;\n\n    protected javax.swing.JSeparator sprOpen;\n\n    protected javax.swing.JSeparator sprSave;\n\n    protected javax.swing.JTextArea txtAreaOutput;\n\n    protected javax.swing.JTextField txtAudio;\n\n    protected javax.swing.JTextField txtOutputDir;\n\n    protected javax.swing.JTextField txtPicture;\n\n    protected javax.swing.JTextField txtStatus;\n\n    protected javax.swing.JTextField txtTextFile;\n\n    protected javax.swing.JTextField txtTitle;\n\n    // End of variables declaration//GEN-END:variables\n    /* My GUI variable declarations */\n    protected javax.swing.SpinnerNumberModel spnSecondsSize = new javax.swing.SpinnerNumberModel(0, 0, 59, 1);\n\n    protected javax.swing.SpinnerNumberModel spnMinutesSize = new javax.swing.SpinnerNumberModel(0, 0, 64, 1);\n}\n",
    "test_prompt": "// GUI_3Test.java\n\n\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GUI}.\n* It contains ten unit test cases for the {@link GUI#ErrorCheck(String)} method.\n*/\nclass GUI_3Test {",
    "time_taken": -1
},
{
    "id": "cmpl-6wT3gkot800SkS15Ih9Ycu31K8S2g",
    "object": "text_completion",
    "created": 1679392744,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test case for {@link Menu#init()}\n\t* <p>\n\t* This test case checks if the {@link Menu#init()} method returns true when\n\t* the {@link Menu#dvd_menu} variable is set to \"dvd-menu\".\n\t*/\n\t@Test\n\tvoid testInit_0() {\n\t\tMenu menu = new Menu();\n\t\tmenu.dvd_menu = \"dvd-menu\";\n\t\tassertTrue(menu.init());\n\t}\n\t\n\t/**\n\t* Test case for {@link Menu#init()}\n\t* <p>\n\t* This test case checks if the {@link Menu#init()} method returns true when\n\t* the {@link Menu#dvd_menu} variable is set to \"dvd-menu -c -D -n 'Test' -o /home/test/output\".\n\t*/\n\t@Test\n\tvoid testInit_1() {\n\t\tMenu menu = new Menu();\n\t\tmenu.dvd_menu = \"dvd-menu -c -D -n 'Test' -o /home/test/output\";\n\t\tassertTrue(menu.init());\n\t}\n\t\n\t/**\n\t* Test case for {@link Menu#init()}\n\t* <p>\n\t* This test case checks if the {@link Menu#init()} method returns true when\n\t* the {@link Menu#dvd_menu} variable is set to \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3\".\n\t*/\n\t@Test\n\tvoid testInit_2() {\n\t\tMenu menu = new Menu();\n\t\tmenu.dvd_menu = \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3\";\n\t\tassertTrue(menu.init());\n\t}\n\t\n\t/**\n\t* Test case for {@link Menu#init()}\n\t* <p>\n\t* This test case checks if the {@link Menu#init()} method returns true when\n\t* the {@link Menu#dvd_menu} variable is set to \"dvd-menu -c -D -n 'Test' -o /home/test/output -b /home/test/picture.jpg\".\n\t*/\n\t@Test\n\tvoid testInit_3() {\n\t\tMenu menu = new Menu();\n\t\tmenu.dvd_menu = \"dvd-menu -c -D -n 'Test' -o /home/test/output -b /home/test/picture.jpg\";\n\t\tassertTrue(menu.init());\n\t}\n\t\n\t/**\n\t* Test case for {@link Menu#init()}\n\t* <p>\n\t* This test case checks if the {@link Menu#init()} method returns true when\n\t* the {@link Menu#dvd_menu} variable is set to \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg\".\n\t*/\n\t@Test\n\tvoid testInit_4() {\n\t\tMenu menu = new Menu();\n\t\tmenu.dvd_menu = \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg\";\n\t\tassertTrue(menu.init());\n\t}\n\t\n\t/**\n\t* Test case for {@link Menu#init()}\n\t* <p>\n\t* This test case checks if the {@link Menu#init()} method returns true when\n\t* the {@link Menu#dvd_menu} variable is set to \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test'\".\n\t*/\n\t@Test\n\tvoid testInit_5() {\n\t\tMenu menu = new Menu();\n\t\tmenu.dvd_menu = \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test'\";\n\t\tassertTrue(menu.init());\n\t}\n\t\n\t/**\n\t* Test case for {@link Menu#init()}\n\t* <p>\n\t* This test case checks if the {@link Menu#init()} method returns true when\n\t* the {@link Menu#dvd_menu} variable is set to \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -p\".\n\t*/\n\t@Test\n\tvoid testInit_6() {\n\t\tMenu menu = new Menu();\n\t\tmenu.dvd_menu = \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -p\";\n\t\tassertTrue(menu.init());\n\t}\n\t\n\t/**\n\t* Test case for {@link Menu#init()}\n\t* <p>\n\t* This test case checks if the {@link Menu#init()} method returns true when\n\t* the {@link Menu#dvd_menu} variable is set to \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test'\".\n\t*/\n\t@Test\n\tvoid testInit_7() {\n\t\tMenu menu = new Menu();\n\t\tmenu.dvd_menu = \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test'\";\n\t\tassertTrue(menu.init());\n\t}\n\t\n\t/**\n\t* Test case for {@link Menu#init()}\n\t* <p>\n\t* This test case checks if the {@link Menu#init()} method returns true when\n\t* the {@link Menu#dvd_menu} variable is set to \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test' -p\".\n\t*/\n\t@Test\n\tvoid testInit_8() {\n\t\tMenu menu = new Menu();\n\t\tmenu.dvd_menu = \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test' -p\";\n\t\tassertTrue(menu.init());\n\t}\n\t\n\t/**\n\t* Test case for {@link Menu#init()}\n\t* <p>\n\t* This test case checks if the {@link Menu#init()} method returns true when\n\t* the {@link Menu#dvd_menu} variable is set to \"dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test'\".\n\t*/\n\t@",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 4965,
        "completion_tokens": 2000,
        "total_tokens": 6965
    },
    "time_taken": 61.61380624771118,
    "prompt_id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Menu_0Test.java",
    "original_code": "// Menu.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class creates a background menu for a DVD.  The user\n * can specify a background picture and audio to use for the\n * menu, or a default background can also be used.  The user\n * also has the option of specifying unique titles for each\n * chapter of the DVD.  If nothing is specified then the title\n * of the DVD will be used followed by an underscore and increasing\n * integer for each video clip.\n *\n * TODO - Can I use streams on dvd-menu?  Really need to standardize\n *        how I use streams across the board for all classes.\n */\npublic class Menu implements Runnable {\n\n    /**\n     * Creates a default instance of Menu\n     */\n    public Menu() {\n    }\n\n    /**\n     * Creates a new instance of Menu with the title, text file path and PAL/NTSC format\n     * passed as parameters.\n     * @param   title           The title of the DVD\n     * @param   TextFilePath    The path to the title file\n     * @param   isPAL           Is this a PAL or NTSC DVD\n     */\n    public Menu(String title, String TextFilePath, boolean isPAL, GUI DVD_GUI) {\n        strTitle = title;\n        strTextFilePath = TextFilePath;\n        pal_menu = isPAL;\n        m_GUI = DVD_GUI;\n    }\n\n    /**\n     * Creates a new instance of Menu with the title, text file path, PAL/NTSC format,\n     * menu picture path and audio path passed as parameters.\n     * @param   title           The title of the DVD\n     * @param   picPath         The path to the background picture of the DVD Menu\n     * @param   audioPath       The path to the background audio of the DVD Menu\n     * @param   TextFilePath    The path to the title file\n     * @param   isPAL           Is this a PAL or NTSC DVD\n     */\n    public Menu(String title, String picPath, String audioPath, String TextFilePath, boolean isPAL, GUI DVD_GUI) {\n        strTitle = title;\n        strPicPath = picPath;\n        strAudioPath = audioPath;\n        strTextFilePath = TextFilePath;\n        pal_menu = isPAL;\n        m_GUI = DVD_GUI;\n    }\n\n    /**\n     * Menu Member Variables\n     */\n    private String strTitle;\n\n    private String strPicPath;\n\n    private String strAudioPath;\n\n    private String strTextFilePath;\n\n    private String dvd_menu = \"dvd-menu\";\n\n    private String[] titles = new String[50];\n\n    private boolean pal_menu;\n\n    private String baseErr = \"Menu Error - \";\n\n    private String[] video_files;\n\n    private GUI m_GUI;\n\n    private Thread m_Thread;\n\n    private boolean m_Error;\n\n    /**\n     * Used to instantiate a new thread and to perform error checking.\n     * @return  A boolean to determine if an error occurred in the function\n     */\n    public boolean init() {\n        /* Create and start the new thread */\n        m_Thread = new Thread(this);\n        m_Thread.start();\n        try {\n            m_Thread.join();\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n        /* \n         * If an error occurred while executing DV_Capture then m_Error will be set\n         * to true.  Also check the log file for any evidence of an error.\n         */\n        return (m_Error || m_GUI.ErrorCheck(m_GUI.strOutputDir + \"/log/dvd-menu.log\"));\n    }\n\n    /**\n     * Implements the run() method of the Runnable interface.  Makes multi-threading\n     * possible.\n     */\n    public void run() {\n        DVDMainMenu();\n    }\n\n    /**\n     * Creates DVD menu using optional picture and music by calling dvd-menu\n     * @param   m_GUI This is the GUI object used to control the form\n     * @return  A boolean to determine if an error occurred in the function\n     */\n    public void DVDMainMenu() {\n        /* First we need to extract all of the .vob files that were\n         * created using transcode and store these file names in \n         * the video_files array. */\n        File ListDir = new File(m_GUI.strOutputDir);\n        FilenameFilter filter = new FilenameFilter() {\n\n            boolean ret_val = true;\n\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\"vob\")) {\n                    if (!name.equals(\"menu.vob\"))\n                        ret_val = true;\n                    else\n                        ret_val = false;\n                } else\n                    ret_val = false;\n                return ret_val;\n            }\n        };\n        /* This is where the .vob files actually get stored in the array */\n        video_files = ListDir.list(filter);\n        /* Enable the Menu progress portion of the GUI */\n        m_GUI.lblAuthor.setEnabled(true);\n        m_GUI.lblAuthorProg.setEnabled(true);\n        m_GUI.prgAuthor.setEnabled(true);\n        m_GUI.prgAuthor.setIndeterminate(true);\n        /* Add to the dvd-menu string based on user supplied parameters */\n        String menu_options;\n        if (strPicPath == null && strAudioPath == null)\n            menu_options = \" -c -D -n '\" + strTitle + \"' -o \" + m_GUI.strOutputDir;\n        else if (strPicPath.equals(\"\") && strAudioPath != null)\n            menu_options = \" -c -D -n '\" + strTitle + \"' -o \" + m_GUI.strOutputDir + \" -a \" + strAudioPath;\n        else if (strPicPath != null && strAudioPath.equals(\"\"))\n            menu_options = \" -c -D -n '\" + strTitle + \"' -o \" + m_GUI.strOutputDir + \" -b \" + strPicPath;\n        else\n            menu_options = \" -c -D -n '\" + strTitle + \"' -o \" + m_GUI.strOutputDir + \" -a \" + strAudioPath + \" -b \" + strPicPath;\n        /* First scenario - the user DID NOT supply a title file */\n        int i = 0;\n        if (strTextFilePath.equals(\"\") || strTextFilePath == null) {\n            while (i < video_files.length) {\n                /* Add default naming to the dvd-menu since nothing else was specified */\n                menu_options += \" -f \" + m_GUI.strOutputDir + \"/\" + video_files[i].substring(0, 11) + \".vob -t \" + strTitle + \"_\" + (i + 1);\n                i++;\n            }\n        } else /* Otherwise they DID supply a text file, so we need to read from it */\n        {\n            try {\n                BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(m_GUI.txtTextFile.getText())));\n                String line;\n                i = 0;\n                /* \n                 * Read in the user supplied title file and store\n                 * each line in an array.\n                 */\n                while ((line = in.readLine()) != null) {\n                    titles[i] = line;\n                    i++;\n                }\n                /* Determine the number of lines in the text file */\n                int num_blanks = 0;\n                for (i = 0; i < titles.length; i++) {\n                    if (titles[i].equals(\"BLANK\"))\n                        num_blanks++;\n                    if (titles[i].equals(\"DONE\"))\n                        break;\n                }\n                /* Error check the user supplied text file */\n                int num_lines = i;\n                if ((num_lines - num_blanks) > 10) {\n                    m_GUI.MessageBox(\"Your text file can only have a maximum\" + \"of 10 titles!  Please edit your text file and rerun\" + \"dvd-homevideo.\", 1);\n                    /* \n                     * Can't recover from this user error, so make them start over...\n                     * or at least run dvd-menu and dvdauthor again\n                     */\n                    m_Error = true;\n                    ;\n                } else if (num_lines == video_files.length) {\n                    i = 0;\n                    while (i < video_files.length) {\n                        /* Look for the keywords BLANK and DONE */\n                        if (!titles[i].equals(\"BLANK\") && !titles[i].equals(\"DONE\")) {\n                            menu_options += \" -t \" + titles[i] + \" -f \" + m_GUI.strOutputDir + \"/\" + video_files[i].substring(0, 11) + \".vob\";\n                            i++;\n                        } else /* If we find DONE, then quit parsing the text file */\n                        if (titles[i].equals(\"DONE\"))\n                            break;\n                        else {\n                            menu_options += \" -f \" + m_GUI.strOutputDir + \"/\" + video_files[i].substring(0, 11) + \".vob\";\n                            i++;\n                        }\n                    }\n                } else {\n                    m_GUI.MessageBox(\"It appears that your text file is not\\n\" + \"formatted correctly.  You currently have\\n\" + (video_files.length + 1) + \" vob files, \\n\" + \"however your text file is showing\\n\" + num_lines + \" lines.\", 1);\n                    /* \n                     * Can't recover from this user error, so make them start over...\n                     * or at least run dvd-menu and dvdauthor again\n                     */\n                    m_Error = true;\n                    ;\n                }\n            } catch (FileNotFoundException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(\"Can not find \" + m_GUI.txtTextFile + \"\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(baseErr + \"IO Error\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            }\n        }\n        if (pal_menu == true)\n            menu_options += \" -p\";\n        /* \n         * I don't like this but for some reason dvd-menu requires\n         * that I redirect the error stream.  It doesn't care where,\n         * it just has to be redirected.  Possibly something to do \n         * with lame?\n         */\n        // log/dvd-menu.err <2\");\n        dvd_menu += (menu_options + \" 2>&1\");\n        m_GUI.txtAreaOutput.append(dvd_menu + \"\\n\");\n        try {\n            String[] dvd_menu_cmd = { \"/bin/sh\", \"-c\", dvd_menu };\n            Process p = Runtime.getRuntime().exec(dvd_menu_cmd, null, new File(m_GUI.strOutputDir));\n            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n            BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n            String line;\n            StringTokenizer st;\n            /* \n             * Write anything from the input stream for dvd-menu\n             * to the txtAreaOutput that the user sees\n             */\n            while ((line = in.readLine()) != null) {\n                /* \n                 * Check for the case where the necessary dependencies are not\n                 * installed, but the user tries to run dvd-homevideo anyway\n                 */\n                if (line.equals(\"/bin/sh: dvd-menu: command not found\")) {\n                    m_GUI.MessageBox(\"Could not locate dvd-menu in your path.\" + \"\\nPlease install all necessary dependencies\" + \"\\nand rerun dvd-homevideo.\", 0);\n                    /* Close all open streams */\n                    in.close();\n                    //out.close();\n                    err_in.close();\n                    //err_out.close();\n                    /* Indicate that there was an error */\n                    m_Error = true;\n                }\n                st = new StringTokenizer(line);\n                if (st.hasMoreTokens()) {\n                    /* \n                     * Since dvd-menu makes us redirect the error stream to stdin,\n                     * we don't want to waste a ton of time in I/O, so ignore lines\n                     * that start with 'Frame#'\n                     */\n                    if (!st.nextToken().equals(\"Frame#\")) {\n                        m_GUI.txtAreaOutput.append(line + \"\\n\");\n                        m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());\n                    }\n                }\n            }\n            /*\n             * p.waitFor() throws an InterruptedException\n             */\n            p.waitFor();\n            /* move dvd-menu.log into the log directory */\n            p = Runtime.getRuntime().exec(\"mv dvd-menu.log log/\", null, new File(m_GUI.strOutputDir));\n            /* Delete unnecessary output directory created by dvd-menu */\n            File CreateOutDir = new File(m_GUI.strOutputDir + \"/dvd_fs\");\n            if (CreateOutDir.exists() && CreateOutDir.isDirectory())\n                CreateOutDir.delete();\n            /* Put in a slight delay to ensure dvd-menu.log closes */\n            Thread.sleep(2000);\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n            m_GUI.MessageBox(baseErr + \"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            m_Error = true;\n        } catch (InterruptedException ex) {\n            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n            m_GUI.MessageBox(baseErr + \"dvd-homevideo thread was interrupted\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            m_Error = true;\n        }\n    }\n\n    /**\n     * Creates the xml file to pass to dvdauthor\n     * @param   m_GUI This is the GUI object used to control the form\n     */\n    public boolean createXML() {\n        File xmlFile = new File(m_GUI.strOutputDir + \"/vmgm.xml\");\n        File ListDir = new File(m_GUI.strOutputDir);\n        /* \n         * Need to find all vob files, but don't want to include menu.vob\n         * which was created by dvd-menu.\n         */\n        FilenameFilter filter = new FilenameFilter() {\n\n            boolean ret_val = true;\n\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\"vob\")) {\n                    if (!name.equals(\"menu.vob\"))\n                        ret_val = true;\n                    else\n                        ret_val = false;\n                } else\n                    ret_val = false;\n                return ret_val;\n            }\n        };\n        video_files = ListDir.list(filter);\n        /* Write the xml file.  It's not pretty, but it works. */\n        int i;\n        try {\n            BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile));\n            writer.write(\"<dvdauthor dest=\\\"\" + m_GUI.strOutputDir + \"/DVD/\\\" jumppad=\\\"0\\\">\");\n            writer.newLine();\n            writer.write(\"\\t<vmgm>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menus>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<pgc entry=\\\"title\\\" >\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t\\t<vob file=\\\"\" + m_GUI.strOutputDir + \"/menu.vob\\\" pause=\\\"inf\\\" />\");\n            writer.newLine();\n            if (titles[0] == null) {\n                for (i = 1; i <= video_files.length; i++) {\n                    writer.write(\"\\t\\t\\t\\t<button>jump title \" + i + \";</button>\");\n                    writer.newLine();\n                }\n            } else {\n                for (i = 1; i < titles.length; i++) {\n                    if (!titles[i - 1].equals(\"BLANK\") && !titles[i - 1].equals(\"DONE\")) {\n                        writer.write(\"\\t\\t\\t\\t<button>jump title \" + i + \";</button>\");\n                        writer.newLine();\n                    } else if (titles[i - 1].equals(\"DONE\"))\n                        break;\n                }\n            }\n            writer.write(\"\\t\\t\\t\\t<post> jump vmgm menu 1; </post>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t</pgc>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menus>\");\n            writer.newLine();\n            writer.write(\"\\t</vmgm>\");\n            writer.newLine();\n            writer.write(\"\\t<titleset>\");\n            writer.newLine();\n            writer.write(\"\\t<titles>\");\n            writer.newLine();\n            for (i = 1; i < video_files.length; i++) {\n                writer.write(\"\\t\\t<pgc>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<vob file=\\\"\" + video_files[i - 1] + \"\\\" />\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<post>jump title \" + (i + 1) + \";</post>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</pgc>\");\n                writer.newLine();\n            }\n            writer.write(\"\\t\\t<pgc>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<vob file=\\\"\" + video_files[i - 1] + \"\\\" />\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<post>call vmgm menu 1;</post>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</pgc>\");\n            writer.newLine();\n            writer.write(\"\\t</titles>\");\n            writer.newLine();\n            writer.write(\"\\t</titleset>\");\n            writer.newLine();\n            writer.write(\"</dvdauthor>\");\n            writer.newLine();\n            writer.close();\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n            m_GUI.MessageBox(baseErr + \"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        }\n        /* Shouldn't expect to see any errors from this method call. */\n        return false;\n    }\n}\n",
    "test_prompt": "// Menu_0Test.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Menu}.\n* It contains ten unit test cases for the {@link Menu#init()} method.\n*/\nclass Menu_0Test {"
},
{
    "id": "cmpl-6wT4fLBtrxvlKfhkwfuiNPWXNhST3",
    "object": "text_completion",
    "created": 1679392805,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t* Test case for {@link Menu#createXML()} method.\n\t\t* This test case checks if the method creates the xml file correctly.\n\t\t*/\n\t\t@Test\n\t\tvoid testCreateXML() {\n\t\t\t\t\n\t\t\t\t// Create a new Menu object\n\t\t\t\tMenu menu = new Menu();\n\t\t\t\t\n\t\t\t\t// Create a new File object\n\t\t\t\tFile xmlFile = new File(\"vmgm.xml\");\n\t\t\t\t\n\t\t\t\t// Create a new File object\n\t\t\t\tFile ListDir = new File(\".\");\n\t\t\t\t\n\t\t\t\t// Create a new FilenameFilter object\n\t\t\t\tFilenameFilter filter = new FilenameFilter() {\n\t\t\t\t\t\t\n\t\t\t\t\t\tboolean ret_val = true;\n\t\t\t\t\t\t\n\t\t\t\t\t\tpublic boolean accept(File dir, String name) {\n\t\t\t\t\t\t\t\tif (name.endsWith(\"vob\")) {\n\t\t\t\t\t\t\t\t\t\tif (!name.equals(\"menu.vob\"))\n\t\t\t\t\t\t\t\t\t\t\t\tret_val = true;\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\tret_val = false;\n\t\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\t\t\tret_val = false;\n\t\t\t\t\t\t\t\treturn ret_val;\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Create a new String array\n\t\t\t\tString[] video_files = ListDir.list(filter);\n\t\t\t\t\n\t\t\t\t// Create a new BufferedWriter object\n\t\t\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile));\n\t\t\t\t\n\t\t\t\t// Create a new StringTokenizer object\n\t\t\t\tStringTokenizer st;\n\t\t\t\t\n\t\t\t\t// Create a new BufferedReader object\n\t\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(xmlFile)));\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line2;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line3;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line4;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line5;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line6;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line7;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line8;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line9;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line10;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line11;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line12;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line13;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line14;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line15;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line16;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line17;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line18;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line19;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line20;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line21;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line22;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line23;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line24;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line25;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line26;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line27;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line28;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line29;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line30;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line31;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line32;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line33;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line34;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line35;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line36;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line37;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line38;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line39;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line40;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line41;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line42;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line43;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line44;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line45;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line46;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line47;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line48;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line49;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line50;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line51;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line52;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line53;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line54;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line55;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line56;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line57;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line58;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line59;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line60;\n\t\t\t\t\n\t\t\t\t// Create a new String\n\t\t\t\tString line61;\n\t\t\t\t\n\t\t\t",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 4967,
        "completion_tokens": 2000,
        "total_tokens": 6967
    },
    "time_taken": 56.100706338882446,
    "prompt_id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Menu_1Test.java",
    "original_code": "// Menu.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class creates a background menu for a DVD.  The user\n * can specify a background picture and audio to use for the\n * menu, or a default background can also be used.  The user\n * also has the option of specifying unique titles for each\n * chapter of the DVD.  If nothing is specified then the title\n * of the DVD will be used followed by an underscore and increasing\n * integer for each video clip.\n *\n * TODO - Can I use streams on dvd-menu?  Really need to standardize\n *        how I use streams across the board for all classes.\n */\npublic class Menu implements Runnable {\n\n    /**\n     * Creates a default instance of Menu\n     */\n    public Menu() {\n    }\n\n    /**\n     * Creates a new instance of Menu with the title, text file path and PAL/NTSC format\n     * passed as parameters.\n     * @param   title           The title of the DVD\n     * @param   TextFilePath    The path to the title file\n     * @param   isPAL           Is this a PAL or NTSC DVD\n     */\n    public Menu(String title, String TextFilePath, boolean isPAL, GUI DVD_GUI) {\n        strTitle = title;\n        strTextFilePath = TextFilePath;\n        pal_menu = isPAL;\n        m_GUI = DVD_GUI;\n    }\n\n    /**\n     * Creates a new instance of Menu with the title, text file path, PAL/NTSC format,\n     * menu picture path and audio path passed as parameters.\n     * @param   title           The title of the DVD\n     * @param   picPath         The path to the background picture of the DVD Menu\n     * @param   audioPath       The path to the background audio of the DVD Menu\n     * @param   TextFilePath    The path to the title file\n     * @param   isPAL           Is this a PAL or NTSC DVD\n     */\n    public Menu(String title, String picPath, String audioPath, String TextFilePath, boolean isPAL, GUI DVD_GUI) {\n        strTitle = title;\n        strPicPath = picPath;\n        strAudioPath = audioPath;\n        strTextFilePath = TextFilePath;\n        pal_menu = isPAL;\n        m_GUI = DVD_GUI;\n    }\n\n    /**\n     * Menu Member Variables\n     */\n    private String strTitle;\n\n    private String strPicPath;\n\n    private String strAudioPath;\n\n    private String strTextFilePath;\n\n    private String dvd_menu = \"dvd-menu\";\n\n    private String[] titles = new String[50];\n\n    private boolean pal_menu;\n\n    private String baseErr = \"Menu Error - \";\n\n    private String[] video_files;\n\n    private GUI m_GUI;\n\n    private Thread m_Thread;\n\n    private boolean m_Error;\n\n    /**\n     * Used to instantiate a new thread and to perform error checking.\n     * @return  A boolean to determine if an error occurred in the function\n     */\n    public boolean init() {\n        /* Create and start the new thread */\n        m_Thread = new Thread(this);\n        m_Thread.start();\n        try {\n            m_Thread.join();\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n        /* \n         * If an error occurred while executing DV_Capture then m_Error will be set\n         * to true.  Also check the log file for any evidence of an error.\n         */\n        return (m_Error || m_GUI.ErrorCheck(m_GUI.strOutputDir + \"/log/dvd-menu.log\"));\n    }\n\n    /**\n     * Implements the run() method of the Runnable interface.  Makes multi-threading\n     * possible.\n     */\n    public void run() {\n        DVDMainMenu();\n    }\n\n    /**\n     * Creates DVD menu using optional picture and music by calling dvd-menu\n     * @param   m_GUI This is the GUI object used to control the form\n     * @return  A boolean to determine if an error occurred in the function\n     */\n    public void DVDMainMenu() {\n        /* First we need to extract all of the .vob files that were\n         * created using transcode and store these file names in \n         * the video_files array. */\n        File ListDir = new File(m_GUI.strOutputDir);\n        FilenameFilter filter = new FilenameFilter() {\n\n            boolean ret_val = true;\n\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\"vob\")) {\n                    if (!name.equals(\"menu.vob\"))\n                        ret_val = true;\n                    else\n                        ret_val = false;\n                } else\n                    ret_val = false;\n                return ret_val;\n            }\n        };\n        /* This is where the .vob files actually get stored in the array */\n        video_files = ListDir.list(filter);\n        /* Enable the Menu progress portion of the GUI */\n        m_GUI.lblAuthor.setEnabled(true);\n        m_GUI.lblAuthorProg.setEnabled(true);\n        m_GUI.prgAuthor.setEnabled(true);\n        m_GUI.prgAuthor.setIndeterminate(true);\n        /* Add to the dvd-menu string based on user supplied parameters */\n        String menu_options;\n        if (strPicPath == null && strAudioPath == null)\n            menu_options = \" -c -D -n '\" + strTitle + \"' -o \" + m_GUI.strOutputDir;\n        else if (strPicPath.equals(\"\") && strAudioPath != null)\n            menu_options = \" -c -D -n '\" + strTitle + \"' -o \" + m_GUI.strOutputDir + \" -a \" + strAudioPath;\n        else if (strPicPath != null && strAudioPath.equals(\"\"))\n            menu_options = \" -c -D -n '\" + strTitle + \"' -o \" + m_GUI.strOutputDir + \" -b \" + strPicPath;\n        else\n            menu_options = \" -c -D -n '\" + strTitle + \"' -o \" + m_GUI.strOutputDir + \" -a \" + strAudioPath + \" -b \" + strPicPath;\n        /* First scenario - the user DID NOT supply a title file */\n        int i = 0;\n        if (strTextFilePath.equals(\"\") || strTextFilePath == null) {\n            while (i < video_files.length) {\n                /* Add default naming to the dvd-menu since nothing else was specified */\n                menu_options += \" -f \" + m_GUI.strOutputDir + \"/\" + video_files[i].substring(0, 11) + \".vob -t \" + strTitle + \"_\" + (i + 1);\n                i++;\n            }\n        } else /* Otherwise they DID supply a text file, so we need to read from it */\n        {\n            try {\n                BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(m_GUI.txtTextFile.getText())));\n                String line;\n                i = 0;\n                /* \n                 * Read in the user supplied title file and store\n                 * each line in an array.\n                 */\n                while ((line = in.readLine()) != null) {\n                    titles[i] = line;\n                    i++;\n                }\n                /* Determine the number of lines in the text file */\n                int num_blanks = 0;\n                for (i = 0; i < titles.length; i++) {\n                    if (titles[i].equals(\"BLANK\"))\n                        num_blanks++;\n                    if (titles[i].equals(\"DONE\"))\n                        break;\n                }\n                /* Error check the user supplied text file */\n                int num_lines = i;\n                if ((num_lines - num_blanks) > 10) {\n                    m_GUI.MessageBox(\"Your text file can only have a maximum\" + \"of 10 titles!  Please edit your text file and rerun\" + \"dvd-homevideo.\", 1);\n                    /* \n                     * Can't recover from this user error, so make them start over...\n                     * or at least run dvd-menu and dvdauthor again\n                     */\n                    m_Error = true;\n                    ;\n                } else if (num_lines == video_files.length) {\n                    i = 0;\n                    while (i < video_files.length) {\n                        /* Look for the keywords BLANK and DONE */\n                        if (!titles[i].equals(\"BLANK\") && !titles[i].equals(\"DONE\")) {\n                            menu_options += \" -t \" + titles[i] + \" -f \" + m_GUI.strOutputDir + \"/\" + video_files[i].substring(0, 11) + \".vob\";\n                            i++;\n                        } else /* If we find DONE, then quit parsing the text file */\n                        if (titles[i].equals(\"DONE\"))\n                            break;\n                        else {\n                            menu_options += \" -f \" + m_GUI.strOutputDir + \"/\" + video_files[i].substring(0, 11) + \".vob\";\n                            i++;\n                        }\n                    }\n                } else {\n                    m_GUI.MessageBox(\"It appears that your text file is not\\n\" + \"formatted correctly.  You currently have\\n\" + (video_files.length + 1) + \" vob files, \\n\" + \"however your text file is showing\\n\" + num_lines + \" lines.\", 1);\n                    /* \n                     * Can't recover from this user error, so make them start over...\n                     * or at least run dvd-menu and dvdauthor again\n                     */\n                    m_Error = true;\n                    ;\n                }\n            } catch (FileNotFoundException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(\"Can not find \" + m_GUI.txtTextFile + \"\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            } catch (IOException ex) {\n                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n                m_GUI.MessageBox(baseErr + \"IO Error\\n\" + ex.toString(), 0);\n                ex.printStackTrace();\n                m_Error = true;\n            }\n        }\n        if (pal_menu == true)\n            menu_options += \" -p\";\n        /* \n         * I don't like this but for some reason dvd-menu requires\n         * that I redirect the error stream.  It doesn't care where,\n         * it just has to be redirected.  Possibly something to do \n         * with lame?\n         */\n        // log/dvd-menu.err <2\");\n        dvd_menu += (menu_options + \" 2>&1\");\n        m_GUI.txtAreaOutput.append(dvd_menu + \"\\n\");\n        try {\n            String[] dvd_menu_cmd = { \"/bin/sh\", \"-c\", dvd_menu };\n            Process p = Runtime.getRuntime().exec(dvd_menu_cmd, null, new File(m_GUI.strOutputDir));\n            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n            BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n            String line;\n            StringTokenizer st;\n            /* \n             * Write anything from the input stream for dvd-menu\n             * to the txtAreaOutput that the user sees\n             */\n            while ((line = in.readLine()) != null) {\n                /* \n                 * Check for the case where the necessary dependencies are not\n                 * installed, but the user tries to run dvd-homevideo anyway\n                 */\n                if (line.equals(\"/bin/sh: dvd-menu: command not found\")) {\n                    m_GUI.MessageBox(\"Could not locate dvd-menu in your path.\" + \"\\nPlease install all necessary dependencies\" + \"\\nand rerun dvd-homevideo.\", 0);\n                    /* Close all open streams */\n                    in.close();\n                    //out.close();\n                    err_in.close();\n                    //err_out.close();\n                    /* Indicate that there was an error */\n                    m_Error = true;\n                }\n                st = new StringTokenizer(line);\n                if (st.hasMoreTokens()) {\n                    /* \n                     * Since dvd-menu makes us redirect the error stream to stdin,\n                     * we don't want to waste a ton of time in I/O, so ignore lines\n                     * that start with 'Frame#'\n                     */\n                    if (!st.nextToken().equals(\"Frame#\")) {\n                        m_GUI.txtAreaOutput.append(line + \"\\n\");\n                        m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());\n                    }\n                }\n            }\n            /*\n             * p.waitFor() throws an InterruptedException\n             */\n            p.waitFor();\n            /* move dvd-menu.log into the log directory */\n            p = Runtime.getRuntime().exec(\"mv dvd-menu.log log/\", null, new File(m_GUI.strOutputDir));\n            /* Delete unnecessary output directory created by dvd-menu */\n            File CreateOutDir = new File(m_GUI.strOutputDir + \"/dvd_fs\");\n            if (CreateOutDir.exists() && CreateOutDir.isDirectory())\n                CreateOutDir.delete();\n            /* Put in a slight delay to ensure dvd-menu.log closes */\n            Thread.sleep(2000);\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n            m_GUI.MessageBox(baseErr + \"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            m_Error = true;\n        } catch (InterruptedException ex) {\n            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n            m_GUI.MessageBox(baseErr + \"dvd-homevideo thread was interrupted\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            m_Error = true;\n        }\n    }\n\n    /**\n     * Creates the xml file to pass to dvdauthor\n     * @param   m_GUI This is the GUI object used to control the form\n     */\n    public boolean createXML() {\n        File xmlFile = new File(m_GUI.strOutputDir + \"/vmgm.xml\");\n        File ListDir = new File(m_GUI.strOutputDir);\n        /* \n         * Need to find all vob files, but don't want to include menu.vob\n         * which was created by dvd-menu.\n         */\n        FilenameFilter filter = new FilenameFilter() {\n\n            boolean ret_val = true;\n\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\"vob\")) {\n                    if (!name.equals(\"menu.vob\"))\n                        ret_val = true;\n                    else\n                        ret_val = false;\n                } else\n                    ret_val = false;\n                return ret_val;\n            }\n        };\n        video_files = ListDir.list(filter);\n        /* Write the xml file.  It's not pretty, but it works. */\n        int i;\n        try {\n            BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile));\n            writer.write(\"<dvdauthor dest=\\\"\" + m_GUI.strOutputDir + \"/DVD/\\\" jumppad=\\\"0\\\">\");\n            writer.newLine();\n            writer.write(\"\\t<vmgm>\");\n            writer.newLine();\n            writer.write(\"\\t\\t<menus>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<pgc entry=\\\"title\\\" >\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t\\t<vob file=\\\"\" + m_GUI.strOutputDir + \"/menu.vob\\\" pause=\\\"inf\\\" />\");\n            writer.newLine();\n            if (titles[0] == null) {\n                for (i = 1; i <= video_files.length; i++) {\n                    writer.write(\"\\t\\t\\t\\t<button>jump title \" + i + \";</button>\");\n                    writer.newLine();\n                }\n            } else {\n                for (i = 1; i < titles.length; i++) {\n                    if (!titles[i - 1].equals(\"BLANK\") && !titles[i - 1].equals(\"DONE\")) {\n                        writer.write(\"\\t\\t\\t\\t<button>jump title \" + i + \";</button>\");\n                        writer.newLine();\n                    } else if (titles[i - 1].equals(\"DONE\"))\n                        break;\n                }\n            }\n            writer.write(\"\\t\\t\\t\\t<post> jump vmgm menu 1; </post>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t</pgc>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</menus>\");\n            writer.newLine();\n            writer.write(\"\\t</vmgm>\");\n            writer.newLine();\n            writer.write(\"\\t<titleset>\");\n            writer.newLine();\n            writer.write(\"\\t<titles>\");\n            writer.newLine();\n            for (i = 1; i < video_files.length; i++) {\n                writer.write(\"\\t\\t<pgc>\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<vob file=\\\"\" + video_files[i - 1] + \"\\\" />\");\n                writer.newLine();\n                writer.write(\"\\t\\t\\t<post>jump title \" + (i + 1) + \";</post>\");\n                writer.newLine();\n                writer.write(\"\\t\\t</pgc>\");\n                writer.newLine();\n            }\n            writer.write(\"\\t\\t<pgc>\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<vob file=\\\"\" + video_files[i - 1] + \"\\\" />\");\n            writer.newLine();\n            writer.write(\"\\t\\t\\t<post>call vmgm menu 1;</post>\");\n            writer.newLine();\n            writer.write(\"\\t\\t</pgc>\");\n            writer.newLine();\n            writer.write(\"\\t</titles>\");\n            writer.newLine();\n            writer.write(\"\\t</titleset>\");\n            writer.newLine();\n            writer.write(\"</dvdauthor>\");\n            writer.newLine();\n            writer.close();\n        } catch (IOException ex) {\n            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);\n            m_GUI.MessageBox(baseErr + \"IO Error\\n\" + ex.toString(), 0);\n            ex.printStackTrace();\n            return true;\n        }\n        /* Shouldn't expect to see any errors from this method call. */\n        return false;\n    }\n}\n",
    "test_prompt": "// Menu_1Test.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Menu}.\n* It contains ten unit test cases for the {@link Menu#createXML()} method.\n*/\nclass Menu_1Test {"
}
]