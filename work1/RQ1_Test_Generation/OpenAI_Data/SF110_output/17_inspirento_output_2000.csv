ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wQaKsOd0Uj445PjBZga4Y5uFwwOD,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/core/ConfigurationManager_1Test.java,63.17831373214722,length,"// ConfigurationManager.java
/*
 * @(#)ConfigurationManager.java
 * Created on 2005-8-10
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;

/**
 * Manages the configuration for Inspirento.<br>
 * This manager uses XML format to store information.
 * The configuration file is, by default, saved in the
 * ""config"" directory and named ""config.xml"". Clearly,
 * this class should be a singleton, so we use
 * {@link #getInstance()} to get an instance and call
 * other instance methods to get the settings needed
 * by Inspirento, such as ""window.size"", ""window.location"",
 * and etc.<br>
 * The program first tries to get the configuration from
 * this <code>ConfigurationManager</code>. If it fails to
 * get any key, it uses the default settings presetted in
 * the protected <code>default</code> field.
 *
 * @author Allen Chue
 */
public class ConfigurationManager extends Properties {

    public static final String CONFIG_DIRECTORY = ""config"";

    public static final String CONFIG_FILE = ""config.xml"";

    public static final String COMMON_PREFIX = ""Inspirento."";

    private static ConfigurationManager instance = null;

    private XmlIO xmlIO;

    /**
     * Private constructor for singleton use.
     */
    private ConfigurationManager() {
        initDefaultSettings();
        readIn();
    }

    public static ConfigurationManager getInstance() {
        if (instance != null) {
            return instance;
        } else {
            instance = new ConfigurationManager();
            return instance;
        }
    }

    public void readIn() {
        try {
            File configFile = new File(CONFIG_DIRECTORY + System.getProperty(""file.separator"") + //$NON-NLS-1$
            CONFIG_FILE);
            if (configFile.exists()) {
                FileInputStream configStream = new FileInputStream(configFile);
                xmlIO = new XmlIO();
                xmlIO.load(configStream);
                configStream.close();
            }
        } catch (Exception e) {
            System.out.println(""Cannot load configuration file"" + "" supposed to be at \""config\\config.xml\"""" + //$NON-NLS-1$
            ""\nDefault settings will be stored as the replacement."");
            writeDefaultsToFile();
            e.printStackTrace();
        }
    }

    public void writeBack() {
        try {
            FileOutputStream configFile = new FileOutputStream(CONFIG_DIRECTORY + System.getProperty(""file.separator"") + CONFIG_FILE);
            xmlIO.write(configFile);
            configFile.close();
        } catch (Exception e) {
            System.out.println(""Cannot write configuration file"" + //$NON-NLS-1$
            "" to \""config\\config.xml\"""");
            e.printStackTrace();
        }
    }

    /**
     * Uses XML parser to get the specified property.
     * If there is no such a key, the method returns
     * <code>null</code>.
     * @param key the key of the property
     * @return the property value
     */
    @Override
    public synchronized String getProperty(String key) {
        String value = xmlIO.getRoot().getElement(Constants.PROJECT_NAME + ""."" + getPath(key)[0]).getAttribute(getPath(key)[1]);
        if (value == null) {
            //Perhaps some element is lost in the file
            value = defaults.getProperty(key);
            //null value has no side effect
            setProperty(key, value);
            new Thread() {

                @Override
                public void run() {
                    writeBack();
                }
            }.start();
        }
        return value;
    }

    @Override
    public synchronized Object setProperty(String key, String value) {
        xmlIO.getRoot().getElement(Constants.PROJECT_NAME + ""."" + getPath(key)[0]).addAttribute(getPath(key)[1], value);
        return value;
    }

    /**
     * When the configuration file is lost, this method
     * is used to write the default settings stored in
     * the program itself to file.
     */
    private void writeDefaultsToFile() {
        Enumeration keys = defaults.keys();
        XmlElement xe = new XmlElement(Constants.PROJECT_NAME);
        xmlIO = new XmlIO(xe);
        for (; keys.hasMoreElements(); ) {
            String pathText = (String) keys.nextElement();
            String[] path = getPath(pathText);
            //Test if the element to be modified exists
            XmlElement elementAdded = xe.getElement(path[0]);
            if (elementAdded == null) {
                elementAdded = xe.addSubElement(path[0]);
            }
            elementAdded.addAttribute(path[1], defaults.getProperty(pathText));
        }
        try {
            FileOutputStream configFile = new FileOutputStream(CONFIG_DIRECTORY + System.getProperty(""file.separator"") + //$NON-NLS-1$
            CONFIG_FILE);
            xmlIO.write(configFile);
            configFile.close();
        } catch (Exception e) {
            System.out.println(""Cannot write configuration file"" + //$NON-NLS-1$
            "" to \""config\\config.xml\"""");
            e.printStackTrace();
        }
    }

    /**
     * Returns an string array of length 2.
     * The parameter <code>pathText</code> is supposed to
     * be a string separated with dots. For example,
     * ""Inspirento.window.location"" is a valid parameter.
     * This method puts the token after the last dot in
     * the second position of the result array, and the
     * remaining string(excluding the last dot) in the first
     * position of the result array. It is a rivate helping method.
     * <br>
     * Example: getPath(""Inspirento.window.location"") returns
     * the array {""Inspirento.window"", ""location""}.<br>
     * <em>No format checking is done in this method! <code>
     * ArrayOutOfBoundsException</code> will be thrown
     * when no dots are found in the string.</em>
     * @param pathText the path text to be processed
     * @return an array containing the result
     */
    private static String[] getPath(String pathText) {
        int dotPos = pathText.lastIndexOf('.');
        String[] result = new String[2];
        result[0] = pathText.substring(0, dotPos);
        result[1] = pathText.substring(dotPos + 1);
        return result;
    }

    private void initDefaultSettings() {
        String[] configDefaults = { ""window.location"", ""400,300"", ""window.size"", ""450,300"" };
        defaults = new Properties();
        for (int i = 0, max = configDefaults.length; i < max; i += 2) {
            String value = configDefaults[i + 1];
            defaults.setProperty(configDefaults[i], value);
        }
    }
}
","// ConfigurationManager_1Test.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManager}.
* It contains ten unit test cases for the {@link ConfigurationManager#getProperty(String)} method.
*/
class ConfigurationManager_1Test {","// ConfigurationManager_1Test.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManager}.
* It contains ten unit test cases for the {@link ConfigurationManager#getProperty(String)} method.
*/
class ConfigurationManager_1Test {

		/**
		* Test case 1.
		* Tests if the method returns the correct value when the key is valid.
		*/
		@Test
		public void testGetProperty1() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.getProperty(""window.location"");
				assertEquals(""400,300"", value);
		}
		
		/**
		* Test case 2.
		* Tests if the method returns the correct value when the key is valid.
		*/
		@Test
		public void testGetProperty2() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.getProperty(""window.size"");
				assertEquals(""450,300"", value);
		}
		
		/**
		* Test case 3.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testGetProperty3() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.getProperty(""window.location.x"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 4.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testGetProperty4() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.getProperty(""window.location.y"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 5.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testGetProperty5() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.getProperty(""window.size.width"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 6.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testGetProperty6() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.getProperty(""window.size.height"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 7.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testGetProperty7() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.getProperty(""window.location.x.y"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 8.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testGetProperty8() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.getProperty(""window.size.width.height"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 9.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testGetProperty9() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.getProperty(""window.location.x.y.z"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 10.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testGetProperty10() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.getProperty(""window.size.width.height.depth"");
				assertEquals(null, value);
		}
}

// ConfigurationManager_2Test.java
package com.allenstudio.ir.core;

import java.util.*;
import java.io.*;
import com.allenstudio.ir.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManager}.
* It contains ten unit test cases for the {@link ConfigurationManager#setProperty(String, String)} method.
*/
class ConfigurationManager_2Test {
		
		/**
		* Test case 1.
		* Tests if the method returns the correct value when the key is valid.
		*/
		@Test
		public void testSetProperty1() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.setProperty(""window.location"", ""100,100"");
				assertEquals(""100,100"", value);
		}
		
		/**
		* Test case 2.
		* Tests if the method returns the correct value when the key is valid.
		*/
		@Test
		public void testSetProperty2() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.setProperty(""window.size"", ""200,200"");
				assertEquals(""200,200"", value);
		}
		
		/**
		* Test case 3.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testSetProperty3() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.setProperty(""window.location.x"", ""100"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 4.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testSetProperty4() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.setProperty(""window.location.y"", ""100"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 5.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testSetProperty5() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.setProperty(""window.size.width"", ""100"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 6.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testSetProperty6() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.setProperty(""window.size.height"", ""100"");
				assertEquals(null, value);
		}
		
		/**
		* Test case 7.
		* Tests if the method returns <code>null</code> when the key is invalid.
		*/
		@Test
		public void testSetProperty7() {
				ConfigurationManager cm = ConfigurationManager.getInstance();
				String value = cm.setProperty(""window.location.x.y"", ""100"");
				assertEquals(null, value);
		}
		
		/**
	"
cmpl-6wQbL4waSUBSoGRG2Il5tJ5O6my4w,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_0Test.java,56.20842146873474,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_0Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#capacity()} method.
*/
class DefaultNoteListModel_0Test {","// DefaultNoteListModel_0Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#capacity()} method.
*/
class DefaultNoteListModel_0Test {

		/**
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test case 1 for method capacity.
		* Test"
cmpl-6wQcOP9ZkgMPLDLI2CUbuW2DDN1ml,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_10Test.java,59.56792402267456,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_10Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#lastElement()} method.
*/
class DefaultNoteListModel_10Test {","// DefaultNoteListModel_10Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#lastElement()} method.
*/
class DefaultNoteListModel_10Test {

		/**
		* Test case 1:
		*
		* Purpose:
		*
		* Assertion:
		*
		* Cases covered:
		*
		* Cases not covered:
		*
		* Remark:
		*/
		@Test
		public void testCase1() {
				DefaultNoteListModel defaultNoteListModel0 = new DefaultNoteListModel();
				defaultNoteListModel0.addNoteListDataListener(new NoteListDataListener() {
						public void contentChanged(NoteListDataEvent e) {
						}
						public void itemAdded(NoteListDataEvent e) {
						}
						public void itemRemoved(NoteListDataEvent e) {
						}
				});
				AbstractNote abstractNote0 = new AbstractNote() {
						public void setTitle(String title) {
						}
						public void setContent(String content) {
						}
						public String getTitle() {
								return null;
						}
						public String getContent() {
								return null;
						}
				};
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0.addElement(abstractNote0);
				defaultNoteListModel0."
cmpl-6wQdRtxmnkfdu6MGp3Ps6OlEDjQXU,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_11Test.java,58.76626753807068,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_11Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.
*/
class DefaultNoteListModel_11Test {","// DefaultNoteListModel_11Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.
*/
class DefaultNoteListModel_11Test {

		/**
		* Test case 1:
		* Test if the method can remove the first element.
		*/
		@Test
		void testCase1() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model."
cmpl-6wQeUznGeXJydGr8KoRTXHYs4UhcX,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_12Test.java,64.18307256698608,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_12Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#toArray()} method.
*/
class DefaultNoteListModel_12Test {","// DefaultNoteListModel_12Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#toArray()} method.
*/
class DefaultNoteListModel_12Test {

		/**
		 * Test case 1:
		 * Test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel#toArray()} method.
		 * The test case is to test the {@link DefaultNoteListModel"
cmpl-6wQfWUZGC0aBWvrMykeH8WdLgGyiA,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_13Test.java,65.64713335037231,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_13Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#get(int)} method.
*/
class DefaultNoteListModel_13Test {","// DefaultNoteListModel_13Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#get(int)} method.
*/
class DefaultNoteListModel_13Test {

		/**
		* Test case 1:
		* Test the {@link DefaultNoteListModel#get(int)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testGet_1() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.get(0));
		}
		
		/**
		* Test case 2:
		* Test the {@link DefaultNoteListModel#get(int)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testGet_2() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.get(0));
		}
		
		/**
		* Test case 3:
		* Test the {@link DefaultNoteListModel#get(int)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testGet_3() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.get(0));
		}
		
		/**
		* Test case 4:
		* Test the {@link DefaultNoteListModel#get(int)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testGet_4() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.get(0));
		}
		
		/**
		* Test case 5:
		* Test the {@link DefaultNoteListModel#get(int)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testGet_5() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.get(0));
		}
		
		/**
		* Test case 6:
		* Test the {@link DefaultNoteListModel#get(int)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testGet_6() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.get(0));
		}
		
		/**
		* Test case 7:
		* Test the {@link DefaultNoteListModel#get(int)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testGet_7() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.get(0));
		}
		
		/**
		* Test case 8:
		* Test the {@link DefaultNoteListModel#get(int)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testGet_8() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.get(0));
		}
		
		/**
		* Test case 9:
		* Test the {@link DefaultNoteListModel#get(int)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testGet_9() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.get(0));
		}
		
		/**
		* Test case 10:
		* Test the {@link DefaultNoteListModel#get(int)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testGet_10() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.get(0));
		}
}

// DefaultNoteListModel_14Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#set(int, AbstractNote)} method.
*/
class DefaultNoteListModel_14Test {
		
		/**
		* Test case 1:
		* Test the {@link DefaultNoteListModel#set(int, AbstractNote)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testSet_1() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.set(0, note));
		}
		
		/**
		* Test case 2:
		* Test the {@link DefaultNoteListModel#set(int, AbstractNote)} method.
		* The test case tests the method with a valid index.
		* The expected result is the element at the specified index.
		*/
		@Test
		void testSet_2() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				AbstractNote note = new AbstractNote();
				model.addElement(note);
				assertEquals(note, model.set(0, note));
		}
		
		/**
		* Test case 3:
		* Test the {@link DefaultNoteListModel#set(int, AbstractNote)} method.
		* The test case tests the method with a valid index."
cmpl-6wQgavtmdA7VTzqkPKPbVzDeWLCfH,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_14Test.java,60.13450026512146,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_14Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#remove(int)} method.
*/
class DefaultNoteListModel_14Test {","// DefaultNoteListModel_14Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#remove(int)} method.
*/
class DefaultNoteListModel_14Test {

	/**
	 * Test case 1:
	 * Test the {@link DefaultNoteListModel#remove(int)} method.
	 * Test the {@link DefaultNoteListModel#getElementAt(int)} method.
	 * Test the {@link DefaultNoteListModel#getSize()} method.
	 * Test the {@link DefaultNoteListModel#isEmpty()} method.
	 * Test the {@link DefaultNoteListModel#contains(AbstractNote)} method.
	 * Test the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.
	 * Test the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.
	 * Test the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.
	 * Test the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.
	 * Test the {@link DefaultNoteListModel#elementAt(int)} method.
	 * Test the {@link DefaultNoteListModel#firstElement()} method.
	 * Test the {@link DefaultNoteListModel#lastElement()} method.
	 * Test the {@link DefaultNoteListModel#elements()} method.
	 * Test the {@link DefaultNoteListModel#toArray()} method.
	 * Test the {@link DefaultNoteListModel#get(int)} method.
	 * Test the {@link DefaultNoteListModel#set(int, AbstractNote)} method.
	 * Test the {@link DefaultNoteListModel#add(int, AbstractNote)} method.
	 * Test the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.
	 * Test the {@link DefaultNoteListModel#removeElementAt(int)} method.
	 * Test the {@link DefaultNoteListModel#insertElementAt(AbstractNote, int)} method.
	 * Test the {@link DefaultNoteListModel#addElement(AbstractNote)} method.
	 * Test the {@link DefaultNoteListModel#setElementAt(AbstractNote, int)} method.
	 * Test the {@link DefaultNoteListModel#capacity()} method.
	 * Test the {@link DefaultNoteListModel#size()} method.
	 * Test the {@link DefaultNoteListModel#toString()} method.
	 */
	@Test
	void testRemove_0() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.remove(0);
		assertEquals(9, model.getSize());
		assertEquals(new AbstractNote(), model.getElementAt(0));
		assertEquals(new AbstractNote(), model.getElementAt(1));
		assertEquals(new AbstractNote(), model.getElementAt(2));
		assertEquals(new AbstractNote(), model.getElementAt(3));
		assertEquals(new AbstractNote(), model.getElementAt(4));
		assertEquals(new AbstractNote(), model.getElementAt(5));
		assertEquals(new AbstractNote(), model.getElementAt(6));
		assertEquals(new AbstractNote(), model.getElementAt(7));
		assertEquals(new AbstractNote(), model.getElementAt(8));
		assertFalse(model.isEmpty());
		assertTrue(model.contains(new AbstractNote()));
		assertEquals(0, model.indexOf(new AbstractNote()));
		assertEquals(0, model.indexOf(new AbstractNote(), 0));
		assertEquals(8, model.lastIndexOf(new AbstractNote()));
		assertEquals(8, model.lastIndexOf(new AbstractNote(), 8));
		assertEquals(new AbstractNote(), model.elementAt(0));
		assertEquals(new AbstractNote(), model.firstElement());
		assertEquals(new AbstractNote(), model.lastElement());
		Enumeration<AbstractNote> e = model.elements();
		assertEquals(new AbstractNote(), e.nextElement());
		assertEquals(new AbstractNote(), e.nextElement());
		assertEquals(new AbstractNote(), e.nextElement());
		assertEquals(new AbstractNote(), e.nextElement());
		assertEquals(new AbstractNote(), e.nextElement());
		assertEquals(new AbstractNote(), e.nextElement());
		assertEquals(new AbstractNote(), e.nextElement());
		assertEquals(new AbstractNote(), e.nextElement());
		assertEquals(new AbstractNote(), e.nextElement());
		AbstractNote[] an = model.toArray();
		assertEquals(new AbstractNote(), an[0]);
		assertEquals(new AbstractNote(), an[1]);
		assertEquals(new AbstractNote(), an[2]);
		assertEquals(new AbstractNote(), an[3]);
		assertEquals(new AbstractNote(), an[4]);
		assertEquals(new AbstractNote(), an[5]);
		assertEquals(new AbstractNote(), an[6]);
		assertEquals(new AbstractNote(), an[7]);
		assertEquals(new AbstractNote(), an[8]);
		assertEquals(new AbstractNote(), model.get(0));
		assertEquals(new AbstractNote(), model.set(0, new AbstractNote()));
		assertEquals(new AbstractNote(), model.get(0));
		assertEquals(new AbstractNote(), model.get(1));
		assertEquals(new AbstractNote(), model.get(2));
		assertEquals(new AbstractNote(), model.get(3));
		assertEquals(new AbstractNote(), model.get(4));
		assertEquals(new AbstractNote(), model.get(5));
		assertEquals(new AbstractNote(), model.get(6));
		assertEquals(new AbstractNote(), model.get(7));
		assertEquals(new AbstractNote(), model.get(8));
		model.add(0, new AbstractNote());
		assertEquals(10, model.getSize());
		assertEquals(new AbstractNote(), model.getElementAt(0));
		assertEquals(new AbstractNote(), model.getElementAt(1));
		assertEquals(new AbstractNote(), model.getElementAt(2));
		assertEquals(new AbstractNote(), model.getElementAt(3));
		assertEquals(new AbstractNote(), model.getElementAt(4));
		assertEquals(new AbstractNote(), model.getElementAt(5));
		assertEquals(new AbstractNote(), model.getElementAt(6));
		assertEquals(new AbstractNote(), model.getElementAt(7));
		assertEquals(new AbstractNote(), model.getElementAt(8));
		assertEquals(new AbstractNote(), model.getElementAt(9));
		assertEquals(new AbstractNote(), model.remove(0));
		assertEquals(9, model.getSize());
		assertEquals(new AbstractNote(), model.getElementAt(0));
		assertEquals(new AbstractNote(), model.getElementAt(1));
		assertEquals(new AbstractNote(), model.getElementAt(2));
		assertEquals(new AbstractNote(), model.getElementAt(3));
		assertEquals(new AbstractNote(), model.getElementAt(4));
		assertEquals(new AbstractNote(), model.getElementAt(5));
		assertEquals(new AbstractNote(), model.getElementAt(6));
		assertEquals(new AbstractNote(), model.getElementAt(7));
		assertEquals(new AbstractNote(), model.getElementAt(8));
		assertTrue(model.removeElement(new AbstractNote()));
		assertEquals(8, model.getSize());
		assertEquals(new AbstractNote(), model.getElementAt(0));
		assertEqu"
cmpl-6wQhY3NTVY2yoo4wYGhcRO7uAue5s,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_1Test.java,58.47504019737244,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_1Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#size()} method.
*/
class DefaultNoteListModel_1Test {","// DefaultNoteListModel_1Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#size()} method.
*/
class DefaultNoteListModel_1Test {

		/**
		* Test case 1:
		* Test the size method.
		*
		* @throws Exception
		* 				if any exception occurs
		*/
		@Test
		void testSize1() throws Exception {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				assertEquals(1, model.size());
		}
		
		/**
		* Test case 2:
		* Test the size method.
		*
		* @throws Exception
		* 				if any exception occurs
		*/
		@Test
		void testSize2() throws Exception {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(2, model.size());
		}
		
		/**
		* Test case 3:
		* Test the size method.
		*
		* @throws Exception
		* 				if any exception occurs
		*/
		@Test
		void testSize3() throws Exception {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(3, model.size());
		}
		
		/**
		* Test case 4:
		* Test the size method.
		*
		* @throws Exception
		* 				if any exception occurs
		*/
		@Test
		void testSize4() throws Exception {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(4, model.size());
		}
		
		/**
		* Test case 5:
		* Test the size method.
		*
		* @throws Exception
		* 				if any exception occurs
		*/
		@Test
		void testSize5() throws Exception {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(5, model.size());
		}
		
		/**
		* Test case 6:
		* Test the size method.
		*
		* @throws Exception
		* 				if any exception occurs
		*/
		@Test
		void testSize6() throws Exception {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(6, model.size());
		}
		
		/**
		* Test case 7:
		* Test the size method.
		*
		* @throws Exception
		* 				if any exception occurs
		*/
		@Test
		void testSize7() throws Exception {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(7, model.size());
		}
		
		/**
		* Test case 8:
		* Test the size method.
		*
		* @throws Exception
		* 				if any exception occurs
		*/
		@Test
		void testSize8() throws Exception {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(8, model.size());
		}
		
		/**
		* Test case 9:
		* Test the size method.
		*
		* @throws Exception
		* 				if any exception occurs
		*/
		@Test
		void testSize9() throws Exception {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(9, model.size());
		}
		
		/**
		* Test case 10:
		* Test the size method.
		*
		* @throws Exception
		* 				if any exception occurs
		*/
		@Test
		void testSize10() throws Exception {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(10, model.size());
		}
}

// DefaultNoteListModel_2Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#isEmpty()} method.
*/
class DefaultNoteListModel_2Test {
		
		/**
		"
cmpl-6wQibXgNPgZHnFKxO5zD9XRS4QuSB,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_2Test.java,58.327513456344604,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_2Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#elements()} method.
*/
class DefaultNoteListModel_2Test {","// DefaultNoteListModel_2Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#elements()} method.
*/
class DefaultNoteListModel_2Test {

		/**
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#elements()}.
		* Test case 1 for {@link DefaultNoteListModel#"
cmpl-6wQjekJ8quVgFVdzpPVvtbhcZmdxI,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_3Test.java,61.40566277503967,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_3Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#contains(AbstractNote)} method.
*/
class DefaultNoteListModel_3Test {","// DefaultNoteListModel_3Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#contains(AbstractNote)} method.
*/
class DefaultNoteListModel_3Test {

		/**
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		* Test case 1 for {@link DefaultNoteListModel#contains(AbstractNote)} method.
		*"
cmpl-6wQkdIgs8y1TeLAiFpMQW9S8HpcFv,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_4Test.java,61.85806727409363,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_4Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_4Test {","// DefaultNoteListModel_4Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_4Test {

		private DefaultNoteListModel model;
		private AbstractNote note1;
		private AbstractNote note2;
		private AbstractNote note3;
		private AbstractNote note4;
		private AbstractNote note5;
		private AbstractNote note6;
		private AbstractNote note7;
		private AbstractNote note8;
		private AbstractNote note9;
		private AbstractNote note10;
		
		public DefaultNoteListModel_4Test() {
				model = new DefaultNoteListModel();
				note1 = new AbstractNote();
				note2 = new AbstractNote();
				note3 = new AbstractNote();
				note4 = new AbstractNote();
				note5 = new AbstractNote();
				note6 = new AbstractNote();
				note7 = new AbstractNote();
				note8 = new AbstractNote();
				note9 = new AbstractNote();
				note10 = new AbstractNote();
		}
		
		@Test
		void testIndexOf_1() {
				model.addElement(note1);
				model.addElement(note2);
				model.addElement(note3);
				model.addElement(note4);
				model.addElement(note5);
				model.addElement(note6);
				model.addElement(note7);
				model.addElement(note8);
				model.addElement(note9);
				model.addElement(note10);
				assertEquals(0, model.indexOf(note1));
				assertEquals(1, model.indexOf(note2));
				assertEquals(2, model.indexOf(note3));
				assertEquals(3, model.indexOf(note4));
				assertEquals(4, model.indexOf(note5));
				assertEquals(5, model.indexOf(note6));
				assertEquals(6, model.indexOf(note7));
				assertEquals(7, model.indexOf(note8));
				assertEquals(8, model.indexOf(note9));
				assertEquals(9, model.indexOf(note10));
		}
		
		@Test
		void testIndexOf_2() {
				model.addElement(note1);
				model.addElement(note2);
				model.addElement(note3);
				model.addElement(note4);
				model.addElement(note5);
				model.addElement(note6);
				model.addElement(note7);
				model.addElement(note8);
				model.addElement(note9);
				model.addElement(note10);
				assertEquals(0, model.indexOf(note1, 0));
				assertEquals(1, model.indexOf(note2, 0));
				assertEquals(2, model.indexOf(note3, 0));
				assertEquals(3, model.indexOf(note4, 0));
				assertEquals(4, model.indexOf(note5, 0));
				assertEquals(5, model.indexOf(note6, 0));
				assertEquals(6, model.indexOf(note7, 0));
				assertEquals(7, model.indexOf(note8, 0));
				assertEquals(8, model.indexOf(note9, 0));
				assertEquals(9, model.indexOf(note10, 0));
		}
		
		@Test
		void testIndexOf_3() {
				model.addElement(note1);
				model.addElement(note2);
				model.addElement(note3);
				model.addElement(note4);
				model.addElement(note5);
				model.addElement(note6);
				model.addElement(note7);
				model.addElement(note8);
				model.addElement(note9);
				model.addElement(note10);
				assertEquals(0, model.indexOf(note1, 1));
				assertEquals(1, model.indexOf(note2, 1));
				assertEquals(2, model.indexOf(note3, 1));
				assertEquals(3, model.indexOf(note4, 1));
				assertEquals(4, model.indexOf(note5, 1));
				assertEquals(5, model.indexOf(note6, 1));
				assertEquals(6, model.indexOf(note7, 1));
				assertEquals(7, model.indexOf(note8, 1));
				assertEquals(8, model.indexOf(note9, 1));
				assertEquals(9, model.indexOf(note10, 1));
		}
		
		@Test
		void testIndexOf_4() {
				model.addElement(note1);
				model.addElement(note2);
				model.addElement(note3);
				model.addElement(note4);
				model.addElement(note5);
				model.addElement(note6);
				model.addElement(note7);
				model.addElement(note8);
				model.addElement(note9);
				model.addElement(note10);
				assertEquals(0, model.indexOf(note1, 2));
				assertEquals(1, model.indexOf(note2, 2));
				assertEquals(2, model.indexOf(note3, 2));
				assertEquals(3, model.indexOf(note4, 2));
				assertEquals(4, model.indexOf(note5, 2));
				assertEquals(5, model.indexOf(note6, 2));
				assertEquals(6, model.indexOf(note7, 2));
				assertEquals(7, model.indexOf(note8, 2));
				assertEquals(8, model.indexOf(note9, 2));
				assertEquals(9, model.indexOf(note10, 2));
		}
		
		@Test
		void testIndexOf_5() {
				model.addElement(note1);
				model.addElement(note2);
				model.addElement(note3);
				model.addElement(note4);
				model.addElement(note5);
				model.addElement(note6);
				model.addElement(note7);
				model.addElement(note8);
				model.addElement(note9);
				model.addElement(note10);
				assertEquals(0, model.indexOf(note1, 3));
				assertEquals(1, model.indexOf(note2, 3));
				assertEquals(2, model.indexOf(note3, 3));
				assertEquals(3, model.indexOf(note4, 3));
				assertEquals(4, model.indexOf(note5, 3));
				assertEquals(5, model.indexOf(note6, 3));
				assertEquals(6, model.indexOf(note7, 3));
				assertEquals(7, model.indexOf(note8,"
cmpl-6wQldXNFS1hcySQn5tL1MPFzAEHv2,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_5Test.java,59.56778526306152,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_5Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_5Test {","// DefaultNoteListModel_5Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_5Test {

		/**
		 * Test case 1 for {@link DefaultNoteListModel#indexOf(AbstractNote, int)}
		 * 
		 * @see DefaultNoteListModel#indexOf(AbstractNote, int)
		 */
		@Test
		void testIndexOf1() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(0, model.indexOf(model.getElementAt(0), 0));
		}
		
		/**
		 * Test case 2 for {@link DefaultNoteListModel#indexOf(AbstractNote, int)}
		 * 
		 * @see DefaultNoteListModel#indexOf(AbstractNote, int)
		 */
		@Test
		void testIndexOf2() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(9, model.indexOf(model.getElementAt(9), 0));
		}
		
		/**
		 * Test case 3 for {@link DefaultNoteListModel#indexOf(AbstractNote, int)}
		 * 
		 * @see DefaultNoteListModel#indexOf(AbstractNote, int)
		 */
		@Test
		void testIndexOf3() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(5, model.indexOf(model.getElementAt(5), 0));
		}
		
		/**
		 * Test case 4 for {@link DefaultNoteListModel#indexOf(AbstractNote, int)}
		 * 
		 * @see DefaultNoteListModel#indexOf(AbstractNote, int)
		 */
		@Test
		void testIndexOf4() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(0, model.indexOf(model.getElementAt(0), 1));
		}
		
		/**
		 * Test case 5 for {@link DefaultNoteListModel#indexOf(AbstractNote, int)}
		 * 
		 * @see DefaultNoteListModel#indexOf(AbstractNote, int)
		 */
		@Test
		void testIndexOf5() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(9, model.indexOf(model.getElementAt(9), 1));
		}
		
		/**
		 * Test case 6 for {@link DefaultNoteListModel#indexOf(AbstractNote, int)}
		 * 
		 * @see DefaultNoteListModel#indexOf(AbstractNote, int)
		 */
		@Test
		void testIndexOf6() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(5, model.indexOf(model.getElementAt(5), 1));
		}
		
		/**
		 * Test case 7 for {@link DefaultNoteListModel#indexOf(AbstractNote, int)}
		 * 
		 * @see DefaultNoteListModel#indexOf(AbstractNote, int)
		 */
		@Test
		void testIndexOf7() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(0, model.indexOf(model.getElementAt(0), 2));
		}
		
		/**
		 * Test case 8 for {@link DefaultNoteListModel#indexOf(AbstractNote, int)}
		 * 
		 * @see DefaultNoteListModel#indexOf(AbstractNote, int)
		 */
		@Test
		void testIndexOf8() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
"
cmpl-6wQmgYvL5lbXUJzIPjcpTkPlP9WON,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_6Test.java,58.04893779754639,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_6Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_6Test {","// DefaultNoteListModel_6Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.
*/
class DefaultNoteListModel_6Test {

		/**
		* Test case 1:
		* The element is not in the list.
		*/
		@Test
		void testCase1() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addNoteListDataListener(new NoteListDataListener() {
						public void contentChanged(NoteListDataEvent e) {
						}
						public void itemAdded(NoteListDataEvent e) {
						}
						public void itemRemoved(NoteListDataEvent e) {
						}
				});
				AbstractNote note = new AbstractNote() {
						public String getName() {
								return ""test"";
						}
						public String getDescription() {
								return ""test"";
						}
						public String getVersion() {
								return ""test"";
						}
						public String getAuthor() {
								return ""test"";
						}
						public String getDate() {
								return ""test"";
						}
						public String getIcon() {
								return ""test"";
						}
						public String getContent() {
								return ""test"";
						}
						public void setContent(String content) {
						}
				};
				model.addElement(note);
				assertEquals(-1, model.lastIndexOf(new AbstractNote() {
						public String getName() {
								return ""test"";
						}
						public String getDescription() {
								return ""test"";
						}
						public String getVersion() {
								return ""test"";
						}
						public String getAuthor() {
								return ""test"";
						}
						public String getDate() {
								return ""test"";
						}
						public String getIcon() {
								return ""test"";
						}
						public String getContent() {
								return ""test"";
						}
						public void setContent(String content) {
						}
				}));
		}
		
		/**
		* Test case 2:
		* The element is in the list.
		*/
		@Test
		void testCase2() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addNoteListDataListener(new NoteListDataListener() {
						public void contentChanged(NoteListDataEvent e) {
						}
						public void itemAdded(NoteListDataEvent e) {
						}
						public void itemRemoved(NoteListDataEvent e) {
						}
				});
				AbstractNote note = new AbstractNote() {
						public String getName() {
								return ""test"";
						}
						public String getDescription() {
								return ""test"";
						}
						public String getVersion() {
								return ""test"";
						}
						public String getAuthor() {
								return ""test"";
						}
						public String getDate() {
								return ""test"";
						}
						public String getIcon() {
								return ""test"";
						}
						public String getContent() {
								return ""test"";
						}
						public void setContent(String content) {
						}
				};
				model.addElement(note);
				assertEquals(0, model.lastIndexOf(note));
		}
		
		/**
		* Test case 3:
		* The element is in the list.
		*/
		@Test
		void testCase3() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addNoteListDataListener(new NoteListDataListener() {
						public void contentChanged(NoteListDataEvent e) {
						}
						public void itemAdded(NoteListDataEvent e) {
						}
						public void itemRemoved(NoteListDataEvent e) {
						}
				});
				AbstractNote note = new AbstractNote() {
						public String getName() {
								return ""test"";
						}
						public String getDescription() {
								return ""test"";
						}
						public String getVersion() {
								return ""test"";
						}
						public String getAuthor() {
								return ""test"";
						}
						public String getDate() {
								return ""test"";
						}
						public String getIcon() {
								return ""test"";
						}
						public String getContent() {
								return ""test"";
						}
						public void setContent(String content) {
						}
				};
				model.addElement(note);
				model.addElement(note);
				assertEquals(1, model.lastIndexOf(note));
		}
		
		/**
		* Test case 4:
		* The element is in the list.
		*/
		@Test
		void testCase4() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addNoteListDataListener(new NoteListDataListener() {
						public void contentChanged(NoteListDataEvent e) {
						}
						public void itemAdded(NoteListDataEvent e) {
						}
						public void itemRemoved(NoteListDataEvent e) {
						}
				});
				AbstractNote note = new AbstractNote() {
						public String getName() {
								return ""test"";
						}
						public String getDescription() {
								return ""test"";
						}
						public String getVersion() {"
cmpl-6wQnjl7mlV7RWP9HWORAOFv9fyFJn,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_7Test.java,58.409714698791504,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_7Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_7Test {","// DefaultNoteListModel_7Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.
*/
class DefaultNoteListModel_7Test {

	/**
	 * Test case 1 for method lastIndexOf(AbstractNote, int).
	 * Test case for the case when the index is negative.
	 * Expected result: {@link ArrayIndexOutOfBoundsException} is thrown.
	 */
	@Test
	void testLastIndexOf_1() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		
		try {
			model.lastIndexOf(new AbstractNote(), -1);
			fail(""ArrayIndexOutOfBoundsException is expected."");
		} catch (ArrayIndexOutOfBoundsException e) {
			// Expected
		}
	}
	
	/**
	 * Test case 2 for method lastIndexOf(AbstractNote, int).
	 * Test case for the case when the index is greater than the size of the list.
	 * Expected result: {@link ArrayIndexOutOfBoundsException} is thrown.
	 */
	@Test
	void testLastIndexOf_2() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		
		try {
			model.lastIndexOf(new AbstractNote(), 10);
			fail(""ArrayIndexOutOfBoundsException is expected."");
		} catch (ArrayIndexOutOfBoundsException e) {
			// Expected
		}
	}
	
	/**
	 * Test case 3 for method lastIndexOf(AbstractNote, int).
	 * Test case for the case when the index is equal to the size of the list.
	 * Expected result: {@link ArrayIndexOutOfBoundsException} is thrown.
	 */
	@Test
	void testLastIndexOf_3() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		
		try {
			model.lastIndexOf(new AbstractNote(), 9);
			fail(""ArrayIndexOutOfBoundsException is expected."");
		} catch (ArrayIndexOutOfBoundsException e) {
			// Expected
		}
	}
	
	/**
	 * Test case 4 for method lastIndexOf(AbstractNote, int).
	 * Test case for the case when the index is equal to the size of the list.
	 * Expected result: {@link ArrayIndexOutOfBoundsException} is thrown.
	 */
	@Test
	void testLastIndexOf_4() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		
		try {
			model.lastIndexOf(new AbstractNote(), 9);
			fail(""ArrayIndexOutOfBoundsException is expected."");
		} catch (ArrayIndexOutOfBoundsException e) {
			// Expected
		}
	}
	
	/**
	 * Test case 5 for method lastIndexOf(AbstractNote, int).
	 * Test case for the case when the index is equal to the size of the list.
	 * Expected result: {@link ArrayIndexOutOfBoundsException} is thrown.
	 */
	@Test
	void testLastIndexOf_5() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		
		try {
			model.lastIndexOf(new AbstractNote(), 9);
			fail(""ArrayIndexOutOfBoundsException is expected."");
		} catch (ArrayIndexOutOfBoundsException e) {
			// Expected
		}
	}
	
	/**
	 * Test case 6 for method lastIndexOf(AbstractNote, int).
	 * Test case for the case when the index is equal to the size of the list.
	 * Expected result: {@link ArrayIndexOutOfBoundsException} is thrown.
	 */
	@Test
	void testLastIndexOf_6() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		
		try {
			model.lastIndexOf(new AbstractNote(), 9);
			fail(""ArrayIndexOutOfBoundsException is expected."");
		} catch (ArrayIndexOutOfBoundsException e) {
			// Expected
		}
	}
	
	/**
	 * Test case 7 for method lastIndexOf(AbstractNote, int).
	 * Test case for the case when the index is equal to the size of the list.
	 * Expected result: {@link ArrayIndexOutOfBoundsException} is thrown.
	 */
	@Test
	void testLastIndexOf_7() {
		DefaultNoteListModel model = new DefaultNoteListModel();
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		model.addElement(new AbstractNote());
		
		try {
			model.lastIndexOf(new AbstractNote(), 9);
			fail(""ArrayIndexOutOfBoundsException is expected."");
		} catch (ArrayIndexOutOfBoundsException e) {
			// Expected
		}
"
cmpl-6wQomqG3QPA3TvFGGypsdnri8tt8N,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_8Test.java,58.15335464477539,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_8Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#elementAt(int)} method.
*/
class DefaultNoteListModel_8Test {","// DefaultNoteListModel_8Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#elementAt(int)} method.
*/
class DefaultNoteListModel_8Test {

		/**
		* Test case 1 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 1 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 1 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 1 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 1 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 1 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 1 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 1 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 1 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 1 for {@link DefaultNoteListModel#elementAt(int)}
		*/
		@Test
		void testElementAt1() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertEquals(model.elementAt(0), model.elementAt(0));
				assertEquals(model.elementAt(1), model.elementAt(1));
				assertEquals(model.elementAt(2), model.elementAt(2));
				assertEquals(model.elementAt(3), model.elementAt(3));
				assertEquals(model.elementAt(4), model.elementAt(4));
				assertEquals(model.elementAt(5), model.elementAt(5));
				assertEquals(model.elementAt(6), model.elementAt(6));
				assertEquals(model.elementAt(7), model.elementAt(7));
				assertEquals(model.elementAt(8), model.elementAt(8));
				assertEquals(model.elementAt(9), model.elementAt(9));
		}
		
		/**
		* Test case 2 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 2 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 2 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 2 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 2 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 2 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 2 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 2 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 2 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 2 for {@link DefaultNoteListModel#elementAt(int)}
		*/
		@Test
		void testElementAt2() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertNotEquals(model.elementAt(0), model.elementAt(1));
				assertNotEquals(model.elementAt(1), model.elementAt(2));
				assertNotEquals(model.elementAt(2), model.elementAt(3));
				assertNotEquals(model.elementAt(3), model.elementAt(4));
				assertNotEquals(model.elementAt(4), model.elementAt(5));
				assertNotEquals(model.elementAt(5), model.elementAt(6));
				assertNotEquals(model.elementAt(6), model.elementAt(7));
				assertNotEquals(model.elementAt(7), model.elementAt(8));
				assertNotEquals(model.elementAt(8), model.elementAt(9));
				assertNotEquals(model.elementAt(9), model.elementAt(0));
		}
		
		/**
		* Test case 3 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 3 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 3 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 3 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 3 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 3 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 3 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 3 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 3 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 3 for {@link DefaultNoteListModel#elementAt(int)}
		*/
		@Test
		void testElementAt3() {
				DefaultNoteListModel model = new DefaultNoteListModel();
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				model.addElement(new AbstractNote());
				assertNotEquals(model.elementAt(0), model.elementAt(2));
				assertNotEquals(model.elementAt(1), model.elementAt(3));
				assertNotEquals(model.elementAt(2), model.elementAt(4));
				assertNotEquals(model.elementAt(3), model.elementAt(5));
				assertNotEquals(model.elementAt(4), model.elementAt(6));
				assertNotEquals(model.elementAt(5), model.elementAt(7));
				assertNotEquals(model.elementAt(6), model.elementAt(8));
				assertNotEquals(model.elementAt(7), model.elementAt(9));
				assertNotEquals(model.elementAt(8), model.elementAt(0));
				assertNotEquals(model.elementAt(9), model.elementAt(1));
		}
		
		/**
		* Test case 4 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 4 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 4 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 4 for {@link DefaultNoteListModel#elementAt(int)}
		* Test case 4 for {@link"
cmpl-6wQppcNY3mDWYbwiMnbSAV2CZSXfw,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_9Test.java,56.23102641105652,length,"// DefaultNoteListModel.java
/*
 * @(#)DefaultNoteListModel.java
 * Created on 2005-8-4
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;

/**
 * Default implementation of <code>NoteListModel</code>
 *
 * @author Allen Chue
 */
public class DefaultNoteListModel implements NoteListModel {

    private Vector<AbstractNote> delegate = new Vector<AbstractNote>();

    // Uni-listener temporary
    private NoteListDataListener dataListener;

    /**
     * Returns the current capacity of this list.
     *
     * @return the current capacity
     * @see Vector#capacity()
     */
    public int capacity() {
        return delegate.capacity();
    }

    /**
     * Returns the number of components in this list.
     *
     * @return the number of components in this list
     * @see Vector#size()
     */
    public int size() {
        return delegate.size();
    }

    /**
     * Tests whether this list has any components.
     *
     * @return <code>true</code> if and only if this list has no components,
     *         that is, its size is zero; <code>false</code> otherwise
     * @see Vector#isEmpty()
     */
    public boolean isEmpty() {
        return delegate.isEmpty();
    }

    /**
     * Returns an enumeration of the components of this list.
     *
     * @return an enumeration of the components of this list
     * @see Vector#elements()
     */
    public Enumeration<AbstractNote> elements() {
        return delegate.elements();
    }

    /**
     * Tests whether the specified object is a component in this list.
     *
     * @param elem
     *            an object
     * @return <code>true</code> if the specified object is the same as a
     *         component in this list
     * @see Vector#contains(Object)
     */
    public boolean contains(AbstractNote elem) {
        return delegate.contains(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>.
     *
     * @param elem
     *            an object
     * @return the index of the first occurrence of the argument in this list;
     *         returns <code>-1</code> if the object is not found
     * @see Vector#indexOf(Object)
     */
    public int indexOf(AbstractNote elem) {
        return delegate.indexOf(elem);
    }

    /**
     * Searches for the first occurrence of <code>elem</code>, beginning the
     * search at <code>index</code>.
     *
     * @param elem
     *            an desired component
     * @param index
     *            the index from which to begin searching
     * @return the index where the first occurrence of <code>elem</code> is
     *         found after <code>index</code>; returns <code>-1</code> if
     *         the <code>elem</code> is not found in the list
     * @see Vector#indexOf(Object,int)
     */
    public int indexOf(AbstractNote elem, int index) {
        return delegate.indexOf(elem, index);
    }

    /**
     * Returns the index of the last occurrence of <code>elem</code>.
     *
     * @param elem
     *            the desired component
     * @return the index of the last occurrence of <code>elem</code> in the
     *         list; returns <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object)
     */
    public int lastIndexOf(AbstractNote elem) {
        return delegate.lastIndexOf(elem);
    }

    /**
     * Searches backwards for <code>elem</code>, starting from the specified
     * index, and returns an index to it.
     *
     * @param elem
     *            the desired component
     * @param index
     *            the index to start searching from
     * @return the index of the last occurrence of the <code>elem</code> in
     *         this list at position less than <code>index</code>; returns
     *         <code>-1</code> if the object is not found
     * @see Vector#lastIndexOf(Object,int)
     */
    public int lastIndexOf(AbstractNote elem, int index) {
        return delegate.lastIndexOf(elem, index);
    }

    /**
     * Returns the component at the specified index. Throws an
     * <code>ArrayIndexOutOfBoundsException</code> if the index is negative or
     * not less than the size of the list. <blockquote> <b>Note:</b> Although
     * this method is not deprecated, the preferred method to use is
     * <code>get(int)</code>, which implements the <code>List</code>
     * interface defined in the 1.2 Collections framework. </blockquote>
     *
     * @param index
     *            an index into this list
     * @return the component at the specified index
     * @see #get(int)
     * @see Vector#elementAt(int)
     */
    public AbstractNote elementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Returns the first component of this list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the first component of this list
     * @see java.util.Vector#firstElement()
     */
    public AbstractNote firstElement() {
        return delegate.firstElement();
    }

    /**
     * Returns the last component of the list. Throws a
     * <code>NoSuchElementException</code> if this vector has no components.
     *
     * @return the last component of the list
     * @see Vector#lastElement()
     */
    public AbstractNote lastElement() {
        return delegate.lastElement();
    }

    /**
     * Return the number of components in the list.
     *
     * @return the number of components in the list
     * @see NoteListModel#getSize()
     */
    public int getSize() {
        return delegate.size();
    }

    /**
     * Sets the component at the specified <code>index</code> of this list to
     * be the specified object. The previous component at that position is
     * discarded.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>set(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            what the component is to be set to
     * @param index
     *            the specified index
     * @see #set(int,Object)
     * @see Vector#setElementAt(Object,int)
     */
    public void setElementAt(AbstractNote obj, int index) {
        delegate.setElementAt(obj, index);
        fireContentChanged(this, index);
    }

    /**
     * Deletes the component at the specified index.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>remove(int)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param index
     *            the index of the object to remove
     * @see #remove(int)
     * @see Vector#removeElementAt(int)
     */
    public void removeElementAt(int index) {
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
    }

    /**
     * Inserts the specified object as a component in this list at the specified
     * <code>index</code>.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * invalid. <blockquote> <b>Note:</b> Although this method is not
     * deprecated, the preferred method to use is <code>add(int,Object)</code>,
     * which implements the <code>List</code> interface defined in the 1.2
     * Collections framework. </blockquote>
     *
     * @param obj
     *            the component to insert
     * @param index
     *            where to insert the new component
     * @exception ArrayIndexOutOfBoundsException
     *                if the index was invalid
     * @see #add(int,Object)
     * @see Vector#insertElementAt(Object,int)
     */
    public void insertElementAt(AbstractNote obj, int index) {
        delegate.insertElementAt(obj, index);
        fireItemAdded(this, index);
    }

    /**
     * Adds the specified component to the end of this list.
     *
     * @param obj
     *            the component to be added
     * @see Vector#addElement(Object)
     */
    public void addElement(AbstractNote obj) {
        int index = delegate.size();
        delegate.addElement(obj);
        fireItemAdded(this, index);
    }

    /**
     * Removes the first (lowest-indexed) occurrence of the argument from this
     * list.
     *
     * @param obj
     *            the component to be removed
     * @return <code>true</code> if the argument was a component of this list;
     *         <code>false</code> otherwise
     * @see Vector#removeElement(Object)
     */
    public boolean removeElement(AbstractNote obj) {
        int index = indexOf(obj);
        boolean an = delegate.removeElement(obj);
        if (index >= 0) {
            fireItemRemoved(this, index);
        }
        return an;
    }

    /**
     * Returns a string that displays and identifies this object's properties.
     *
     * @return a String representation of this object
     */
    @Override
    public String toString() {
        return delegate.toString();
    }

    /*
     * The remaining methods are included for compatibility with the Java 2
     * platform Vector class.
     */
    /**
     * Returns an array containing all of the elements in this list in the
     * correct order.
     *
     * @return an array containing the elements of the list
     * @see Vector#toArray()
     */
    public AbstractNote[] toArray() {
        AbstractNote[] an = new AbstractNote[delegate.size()];
        delegate.copyInto(an);
        return an;
    }

    /**
     * Returns the element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to return
     */
    public AbstractNote get(int index) {
        return delegate.elementAt(index);
    }

    /**
     * Replaces the element at the specified position in this list with the
     * specified element.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            index of element to replace
     * @param element
     *            element to be stored at the specified position
     * @return the element previously at the specified position
     */
    public AbstractNote set(int index, AbstractNote element) {
        AbstractNote an = delegate.elementAt(index);
        delegate.setElementAt(element, index);
        fireContentChanged(this, index);
        return an;
    }

    /**
     * Inserts the specified element at the specified position in this list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt; size()</code>).
     *
     * @param index
     *            index at which the specified element is to be inserted
     * @param element
     *            element to be inserted
     */
    public void add(int index, AbstractNote element) {
        delegate.insertElementAt(element, index);
        fireItemAdded(this, index);
    }

    /**
     * Removes the element at the specified position in this list. Returns the
     * element that was removed from the list.
     * <p>
     * Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is
     * out of range (<code>index &lt; 0 || index &gt;= size()</code>).
     *
     * @param index
     *            the index of the element to removed
     */
    public AbstractNote remove(int index) {
        AbstractNote an = delegate.elementAt(index);
        delegate.removeElementAt(index);
        fireItemRemoved(this, index);
        return an;
    }

    /**
     * Returns the value at position <code>index</code>
     *
     * @return the value at position <code>index</code>
     * @see NoteListModel#getElementAt(int)
     */
    public AbstractNote getElementAt(int index) {
        return delegate.elementAt(index);
    }

    /**
     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void addNoteListDataListener(NoteListDataListener l) {
        this.dataListener = l;
    }

    /**
     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)
     */
    public void removeNoteListDataListener() {
        this.dataListener = null;
    }

    /**
     * Fired when one element's value is changed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireContentChanged(Object source, int index) {
        dataListener.contentChanged(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one new element is added.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index added element's index
     */
    protected void fireItemAdded(Object source, int index) {
        dataListener.itemAdded(new NoteListDataEvent(source, index));
    }

    /**
     * Fired when one element is removed.
     *
     * @param source the <code>NoteListModel</code> changed, typically ""this""
     * @param index changed element's index
     */
    protected void fireItemRemoved(Object source, int index) {
        dataListener.itemRemoved(new NoteListDataEvent(source, index));
    }
}
","// DefaultNoteListModel_9Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#firstElement()} method.
*/
class DefaultNoteListModel_9Test {","// DefaultNoteListModel_9Test.java
package com.allenstudio.ir.ui;

import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.event.NoteListDataEvent;
import com.allenstudio.ir.event.NoteListDataListener;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultNoteListModel}.
* It contains ten unit test cases for the {@link DefaultNoteListModel#firstElement()} method.
*/
class DefaultNoteListModel_9Test {

		/**
		* Test case 1:
		*
		* Purpose:
		*
		* Assertion:
		*
		* Cases covered:
		*
		* Cases not covered:
		*
		* Remark:
		*/
		@Test
		public void testCase1() {
				DefaultNoteListModel defaultNoteListModel = new DefaultNoteListModel();
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				defaultNoteListModel.addElement(new AbstractNote());
				default"
cmpl-6wQqsbU3HM4A6RocQ06yICcuurM58,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_0Test.java,49.03237986564636,length,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/*
 * @(#)InspirentoUtilities.java
 * Created on 2005-8-1
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    /**
     * Tokenizes a input string to produce
     * an array of type <code>String</code>.<br>
     * This method is used in building menus and
     * toolbar using a resource file. For instance,
     * the following code will get an array of contents
     * {""file"", ""edit"", ""view""}:
     * <pre>
     * String str = ""file edit view"";
     * String[] array = tokenize(str);
     * </pre>
     * @param input the input <code>String</code>
     * @return an String array containing all tokens
     * @see java.util.StringTokenizer
     */
    public static String[] tokenize(String input) {
        Vector<String> v = new Vector<String>();
        StringTokenizer t = new StringTokenizer(input);
        String[] cmd;
        while (t.hasMoreTokens()) v.addElement(t.nextToken());
        cmd = new String[v.size()];
        for (int i = 0; i < cmd.length; i++) cmd[i] = v.elementAt(i);
        return cmd;
    }

    /**
     * Tokenizes a input string to produce
     * an array of type <code>String</code>.<br>
     * This method is used in building menus and
     * toolbar using a resource file. For instance,
     * the following code will get an array of contents
     * {""file"", ""edit"", ""view""}:
     * <pre>
     * String str = ""file edit view"";
     * String[] array = tokenize(str);
     * </pre>
     * <br>This method offers customized delim.
     * @param input the input <code>String</code>
     * @return an String array containing all tokens
     * @see java.util.StringTokenizer
     */
    public static String[] tokenize(String input, String delim) {
        Vector<String> v = new Vector<String>();
        StringTokenizer t = new StringTokenizer(input, "" \t\n\r\f"" + delim);
        String[] cmd;
        while (t.hasMoreTokens()) v.addElement(t.nextToken());
        cmd = new String[v.size()];
        for (int i = 0; i < cmd.length; i++) cmd[i] = v.elementAt(i);
        return cmd;
    }

    /**
     * Replaces all characters that may
     * affect program's normal running in the string
     * with the escape strings in HTML.
     * @param str source string
     * @return a string which is processed
     */
    public static String escapeText(String str) {
        StringBuffer buffer = new StringBuffer(str);
        stringReplaceAll(buffer, '&', ""&amp;"");
        stringReplaceAll(buffer, '<', ""&lt;"");
        stringReplaceAll(buffer, '>', ""&gt;"");
        stringReplaceAll(buffer, '""', ""&quot;"");
        stringReplaceAll(buffer, '\'', ""&apos;"");
        return buffer.toString();
    }

    /**
     * Utility method to replace all the specified <code>token</code> in
     * string <code>source</code> with the specified <code>
     * replacement</code>.
     * @param source the source string
     * @param token the token to be replaced
     * @param replacement the string used to replace the token
     * @return a <code>StringBuffer</code> object that contains
     *         the modified string
     * @see java.lang.StringBuffer#replace(int, int, java.lang.String)
     */
    public static StringBuffer stringReplaceAll(StringBuffer source, char token, String replacement) {
        for (int i = 0; i < source.length(); i++) {
            if (source.charAt(i) == token) {
                //++i?
                source = source.replace(i, ++i, replacement);
            }
        }
        return source;
    }
}
","// InspirentoUtilities_0Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains ten unit test cases for the {@link InspirentoUtilities#tokenize(String)} method.
*/
class InspirentoUtilities_0Test {","// InspirentoUtilities_0Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains ten unit test cases for the {@link InspirentoUtilities#tokenize(String)} method.
*/
class InspirentoUtilities_0Test {

	/**
	* Test case 1 for {@link InspirentoUtilities#tokenize(String)}.
	* Test if the method can tokenize a string with only one token.
	*/
	@Test
	void testTokenize_0() {
		String input = ""file"";
		String[] expected = {""file""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 2 for {@link InspirentoUtilities#tokenize(String)}.
	* Test if the method can tokenize a string with two tokens.
	*/
	@Test
	void testTokenize_1() {
		String input = ""file edit"";
		String[] expected = {""file"", ""edit""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 3 for {@link InspirentoUtilities#tokenize(String)}.
	* Test if the method can tokenize a string with three tokens.
	*/
	@Test
	void testTokenize_2() {
		String input = ""file edit view"";
		String[] expected = {""file"", ""edit"", ""view""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 4 for {@link InspirentoUtilities#tokenize(String)}.
	* Test if the method can tokenize a string with four tokens.
	*/
	@Test
	void testTokenize_3() {
		String input = ""file edit view help"";
		String[] expected = {""file"", ""edit"", ""view"", ""help""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 5 for {@link InspirentoUtilities#tokenize(String)}.
	* Test if the method can tokenize a string with five tokens.
	*/
	@Test
	void testTokenize_4() {
		String input = ""file edit view help tools"";
		String[] expected = {""file"", ""edit"", ""view"", ""help"", ""tools""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 6 for {@link InspirentoUtilities#tokenize(String)}.
	* Test if the method can tokenize a string with six tokens.
	*/
	@Test
	void testTokenize_5() {
		String input = ""file edit view help tools window"";
		String[] expected = {""file"", ""edit"", ""view"", ""help"", ""tools"", ""window""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 7 for {@link InspirentoUtilities#tokenize(String)}.
	* Test if the method can tokenize a string with seven tokens.
	*/
	@Test
	void testTokenize_6() {
		String input = ""file edit view help tools window help"";
		String[] expected = {""file"", ""edit"", ""view"", ""help"", ""tools"", ""window"", ""help""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 8 for {@link InspirentoUtilities#tokenize(String)}.
	* Test if the method can tokenize a string with eight tokens.
	*/
	@Test
	void testTokenize_7() {
		String input = ""file edit view help tools window help tools"";
		String[] expected = {""file"", ""edit"", ""view"", ""help"", ""tools"", ""window"", ""help"", ""tools""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 9 for {@link InspirentoUtilities#tokenize(String)}.
	* Test if the method can tokenize a string with nine tokens.
	*/
	@Test
	void testTokenize_8() {
		String input = ""file edit view help tools window help tools window"";
		String[] expected = {""file"", ""edit"", ""view"", ""help"", ""tools"", ""window"", ""help"", ""tools"", ""window""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 10 for {@link InspirentoUtilities#tokenize(String)}.
	* Test if the method can tokenize a string with ten tokens.
	*/
	@Test
	void testTokenize_9() {
		String input = ""file edit view help tools window help tools window help"";
		String[] expected = {""file"", ""edit"", ""view"", ""help"", ""tools"", ""window"", ""help"", ""tools"", ""window"", ""help""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
}

// InspirentoUtilities_1Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains ten unit test cases for the {@link InspirentoUtilities#tokenize(String, String)} method.
*/
class InspirentoUtilities_1Test {
		
	/**
	* Test case 1 for {@link InspirentoUtilities#tokenize(String, String)}.
	* Test if the method can tokenize a string with only one token.
	*/
	@Test
	void testTokenize_0() {
		String input = ""file"";
		String delim = "" "";
		String[] expected = {""file""};
		String[] actual = InspirentoUtilities.tokenize(input, delim);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 2 for {@link InspirentoUtilities#tokenize(String, String)}.
	* Test if the method can tokenize a string with two tokens.
	*/
	@Test
	void testTokenize_1() {
		String input = ""file edit"";
		String delim = "" "";
		String[] expected = {""file"", ""edit""};
		String[] actual = InspirentoUtilities.tokenize(input, delim);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 3 for {@link InspirentoUtilities#tokenize(String, String)}.
	* Test if the method can tokenize a string with three tokens.
	*/
	@Test
	void testTokenize_2() {
		String input = ""file edit view"";
		String delim = "" "";
		String[] expected = {""file"", ""edit"", ""view""};
		String[] actual = InspirentoUtilities.tokenize(input, delim);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 4 for {@link InspirentoUtilities#tokenize(String, String)}.
	* Test if the method can tokenize a string with four tokens.
	*/
	@Test
	void testTokenize_3() {
		String input = ""file edit view help"";
		String delim = "" "";
		String[] expected = {""file"", ""edit"", ""view"", ""help""};
		String[] actual = InspirentoUtilities.tokenize(input, delim);
		assertArrayEquals"
cmpl-6wQrvbgft3y7Us4wVo7SBZVVD4n7L,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_2Test.java,55.349387407302856,length,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/*
 * @(#)InspirentoUtilities.java
 * Created on 2005-8-1
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    /**
     * Tokenizes a input string to produce
     * an array of type <code>String</code>.<br>
     * This method is used in building menus and
     * toolbar using a resource file. For instance,
     * the following code will get an array of contents
     * {""file"", ""edit"", ""view""}:
     * <pre>
     * String str = ""file edit view"";
     * String[] array = tokenize(str);
     * </pre>
     * @param input the input <code>String</code>
     * @return an String array containing all tokens
     * @see java.util.StringTokenizer
     */
    public static String[] tokenize(String input) {
        Vector<String> v = new Vector<String>();
        StringTokenizer t = new StringTokenizer(input);
        String[] cmd;
        while (t.hasMoreTokens()) v.addElement(t.nextToken());
        cmd = new String[v.size()];
        for (int i = 0; i < cmd.length; i++) cmd[i] = v.elementAt(i);
        return cmd;
    }

    /**
     * Tokenizes a input string to produce
     * an array of type <code>String</code>.<br>
     * This method is used in building menus and
     * toolbar using a resource file. For instance,
     * the following code will get an array of contents
     * {""file"", ""edit"", ""view""}:
     * <pre>
     * String str = ""file edit view"";
     * String[] array = tokenize(str);
     * </pre>
     * <br>This method offers customized delim.
     * @param input the input <code>String</code>
     * @return an String array containing all tokens
     * @see java.util.StringTokenizer
     */
    public static String[] tokenize(String input, String delim) {
        Vector<String> v = new Vector<String>();
        StringTokenizer t = new StringTokenizer(input, "" \t\n\r\f"" + delim);
        String[] cmd;
        while (t.hasMoreTokens()) v.addElement(t.nextToken());
        cmd = new String[v.size()];
        for (int i = 0; i < cmd.length; i++) cmd[i] = v.elementAt(i);
        return cmd;
    }

    /**
     * Replaces all characters that may
     * affect program's normal running in the string
     * with the escape strings in HTML.
     * @param str source string
     * @return a string which is processed
     */
    public static String escapeText(String str) {
        StringBuffer buffer = new StringBuffer(str);
        stringReplaceAll(buffer, '&', ""&amp;"");
        stringReplaceAll(buffer, '<', ""&lt;"");
        stringReplaceAll(buffer, '>', ""&gt;"");
        stringReplaceAll(buffer, '""', ""&quot;"");
        stringReplaceAll(buffer, '\'', ""&apos;"");
        return buffer.toString();
    }

    /**
     * Utility method to replace all the specified <code>token</code> in
     * string <code>source</code> with the specified <code>
     * replacement</code>.
     * @param source the source string
     * @param token the token to be replaced
     * @param replacement the string used to replace the token
     * @return a <code>StringBuffer</code> object that contains
     *         the modified string
     * @see java.lang.StringBuffer#replace(int, int, java.lang.String)
     */
    public static StringBuffer stringReplaceAll(StringBuffer source, char token, String replacement) {
        for (int i = 0; i < source.length(); i++) {
            if (source.charAt(i) == token) {
                //++i?
                source = source.replace(i, ++i, replacement);
            }
        }
        return source;
    }
}
","// InspirentoUtilities_2Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains ten unit test cases for the {@link InspirentoUtilities#escapeText(String)} method.
*/
class InspirentoUtilities_2Test {","// InspirentoUtilities_2Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains ten unit test cases for the {@link InspirentoUtilities#escapeText(String)} method.
*/
class InspirentoUtilities_2Test {

	/**
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText(String)}.
	* Test case 1 for {@link InspirentoUtilities#escapeText"
cmpl-6wQsyHuOrcMS97NBmaMevdbMDpNbr,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_3Test.java,53.188658237457275,length,"// InspirentoUtilities.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;

/*
 * @(#)InspirentoUtilities.java
 * Created on 2005-8-1
 * Inspirento, Copyright AllenStudio, All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */
/**
 * Wraps some static utility method employed
 * in Inspirento.
 *
 * @author Allen Chue
 */
public class InspirentoUtilities {

    /**
     * Tokenizes a input string to produce
     * an array of type <code>String</code>.<br>
     * This method is used in building menus and
     * toolbar using a resource file. For instance,
     * the following code will get an array of contents
     * {""file"", ""edit"", ""view""}:
     * <pre>
     * String str = ""file edit view"";
     * String[] array = tokenize(str);
     * </pre>
     * @param input the input <code>String</code>
     * @return an String array containing all tokens
     * @see java.util.StringTokenizer
     */
    public static String[] tokenize(String input) {
        Vector<String> v = new Vector<String>();
        StringTokenizer t = new StringTokenizer(input);
        String[] cmd;
        while (t.hasMoreTokens()) v.addElement(t.nextToken());
        cmd = new String[v.size()];
        for (int i = 0; i < cmd.length; i++) cmd[i] = v.elementAt(i);
        return cmd;
    }

    /**
     * Tokenizes a input string to produce
     * an array of type <code>String</code>.<br>
     * This method is used in building menus and
     * toolbar using a resource file. For instance,
     * the following code will get an array of contents
     * {""file"", ""edit"", ""view""}:
     * <pre>
     * String str = ""file edit view"";
     * String[] array = tokenize(str);
     * </pre>
     * <br>This method offers customized delim.
     * @param input the input <code>String</code>
     * @return an String array containing all tokens
     * @see java.util.StringTokenizer
     */
    public static String[] tokenize(String input, String delim) {
        Vector<String> v = new Vector<String>();
        StringTokenizer t = new StringTokenizer(input, "" \t\n\r\f"" + delim);
        String[] cmd;
        while (t.hasMoreTokens()) v.addElement(t.nextToken());
        cmd = new String[v.size()];
        for (int i = 0; i < cmd.length; i++) cmd[i] = v.elementAt(i);
        return cmd;
    }

    /**
     * Replaces all characters that may
     * affect program's normal running in the string
     * with the escape strings in HTML.
     * @param str source string
     * @return a string which is processed
     */
    public static String escapeText(String str) {
        StringBuffer buffer = new StringBuffer(str);
        stringReplaceAll(buffer, '&', ""&amp;"");
        stringReplaceAll(buffer, '<', ""&lt;"");
        stringReplaceAll(buffer, '>', ""&gt;"");
        stringReplaceAll(buffer, '""', ""&quot;"");
        stringReplaceAll(buffer, '\'', ""&apos;"");
        return buffer.toString();
    }

    /**
     * Utility method to replace all the specified <code>token</code> in
     * string <code>source</code> with the specified <code>
     * replacement</code>.
     * @param source the source string
     * @param token the token to be replaced
     * @param replacement the string used to replace the token
     * @return a <code>StringBuffer</code> object that contains
     *         the modified string
     * @see java.lang.StringBuffer#replace(int, int, java.lang.String)
     */
    public static StringBuffer stringReplaceAll(StringBuffer source, char token, String replacement) {
        for (int i = 0; i < source.length(); i++) {
            if (source.charAt(i) == token) {
                //++i?
                source = source.replace(i, ++i, replacement);
            }
        }
        return source;
    }
}
","// InspirentoUtilities_3Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains ten unit test cases for the {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)} method.
*/
class InspirentoUtilities_3Test {","// InspirentoUtilities_3Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains ten unit test cases for the {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)} method.
*/
class InspirentoUtilities_3Test {

	/**
	* Test case 1 for {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)}.
	* It tests the method with a string that contains no token.
	*/
	@Test
	void testStringReplaceAll_1() {
		StringBuffer source = new StringBuffer(""abcdefg"");
		StringBuffer expected = new StringBuffer(""abcdefg"");
		StringBuffer actual = InspirentoUtilities.stringReplaceAll(source, 'h', ""h"");
		assertEquals(expected.toString(), actual.toString());
	}
	
	/**
	* Test case 2 for {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)}.
	* It tests the method with a string that contains one token.
	*/
	@Test
	void testStringReplaceAll_2() {
		StringBuffer source = new StringBuffer(""abcdefg"");
		StringBuffer expected = new StringBuffer(""abcdefg"");
		StringBuffer actual = InspirentoUtilities.stringReplaceAll(source, 'a', ""a"");
		assertEquals(expected.toString(), actual.toString());
	}
	
	/**
	* Test case 3 for {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)}.
	* It tests the method with a string that contains two tokens.
	*/
	@Test
	void testStringReplaceAll_3() {
		StringBuffer source = new StringBuffer(""abcdefg"");
		StringBuffer expected = new StringBuffer(""abcdefg"");
		StringBuffer actual = InspirentoUtilities.stringReplaceAll(source, 'a', ""a"");
		assertEquals(expected.toString(), actual.toString());
	}
	
	/**
	* Test case 4 for {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)}.
	* It tests the method with a string that contains three tokens.
	*/
	@Test
	void testStringReplaceAll_4() {
		StringBuffer source = new StringBuffer(""abcdefg"");
		StringBuffer expected = new StringBuffer(""abcdefg"");
		StringBuffer actual = InspirentoUtilities.stringReplaceAll(source, 'a', ""a"");
		assertEquals(expected.toString(), actual.toString());
	}
	
	/**
	* Test case 5 for {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)}.
	* It tests the method with a string that contains four tokens.
	*/
	@Test
	void testStringReplaceAll_5() {
		StringBuffer source = new StringBuffer(""abcdefg"");
		StringBuffer expected = new StringBuffer(""abcdefg"");
		StringBuffer actual = InspirentoUtilities.stringReplaceAll(source, 'a', ""a"");
		assertEquals(expected.toString(), actual.toString());
	}
	
	/**
	* Test case 6 for {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)}.
	* It tests the method with a string that contains five tokens.
	*/
	@Test
	void testStringReplaceAll_6() {
		StringBuffer source = new StringBuffer(""abcdefg"");
		StringBuffer expected = new StringBuffer(""abcdefg"");
		StringBuffer actual = InspirentoUtilities.stringReplaceAll(source, 'a', ""a"");
		assertEquals(expected.toString(), actual.toString());
	}
	
	/**
	* Test case 7 for {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)}.
	* It tests the method with a string that contains six tokens.
	*/
	@Test
	void testStringReplaceAll_7() {
		StringBuffer source = new StringBuffer(""abcdefg"");
		StringBuffer expected = new StringBuffer(""abcdefg"");
		StringBuffer actual = InspirentoUtilities.stringReplaceAll(source, 'a', ""a"");
		assertEquals(expected.toString(), actual.toString());
	}
	
	/**
	* Test case 8 for {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)}.
	* It tests the method with a string that contains seven tokens.
	*/
	@Test
	void testStringReplaceAll_8() {
		StringBuffer source = new StringBuffer(""abcdefg"");
		StringBuffer expected = new StringBuffer(""abcdefg"");
		StringBuffer actual = InspirentoUtilities.stringReplaceAll(source, 'a', ""a"");
		assertEquals(expected.toString(), actual.toString());
	}
	
	/**
	* Test case 9 for {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)}.
	* It tests the method with a string that contains eight tokens.
	*/
	@Test
	void testStringReplaceAll_9() {
		StringBuffer source = new StringBuffer(""abcdefg"");
		StringBuffer expected = new StringBuffer(""abcdefg"");
		StringBuffer actual = InspirentoUtilities.stringReplaceAll(source, 'a', ""a"");
		assertEquals(expected.toString(), actual.toString());
	}
	
	/**
	* Test case 10 for {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)}.
	* It tests the method with a string that contains nine tokens.
	*/
	@Test
	void testStringReplaceAll_10() {
		StringBuffer source = new StringBuffer(""abcdefg"");
		StringBuffer expected = new StringBuffer(""abcdefg"");
		StringBuffer actual = InspirentoUtilities.stringReplaceAll(source, 'a', ""a"");
		assertEquals(expected.toString(), actual.toString());
	}
}

// InspirentoUtilities_4Test.java
package com.allenstudio.ir.util;

import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InspirentoUtilities}.
* It contains ten unit test cases for the {@link InspirentoUtilities#tokenize(String)} method.
*/
class InspirentoUtilities_4Test {
		
	/**
	* Test case 1 for {@link InspirentoUtilities#tokenize(String)}.
	* It tests the method with a string that contains no token.
	*/
	@Test
	void testTokenize_1() {
		String input = ""abcdefg"";
		String[] expected = {""abcdefg""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 2 for {@link InspirentoUtilities#tokenize(String)}.
	* It tests the method with a string that contains one token.
	*/
	@Test
	void testTokenize_2() {
		String input = ""abcdefg"";
		String[] expected = {""abcdefg""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 3 for {@link InspirentoUtilities#tokenize(String)}.
	* It tests the method with a string that contains two tokens.
	*/
	@Test
	void testTokenize_3() {
		String input = ""abcdefg"";
		String[] expected = {""abcdefg""};
		String[] actual = InspirentoUtilities.tokenize(input);
		assertArrayEquals(expected, actual);
	}
	
	/**
	* Test case 4 for {@link InspirentoUtilities#tokenize(String)}.
	* It tests the method with a string that contains three tokens.
	*/
	"
cmpl-6wQu1IISTm6oZrRlVl6gHvvmwoKAX,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_0Test.java,70.76465725898743,length,"// XmlElement.java
/*
 * @(#)XmlElement.java
 * Created on 2005-8-12
 */
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    String name;

    String data;

    Hashtable<String, String> attributes;

    List<XmlElement> subElements;

    XmlElement parent;

    /**
     * Constructor
     */
    public XmlElement() {
        subElements = new Vector<XmlElement>();
        this.attributes = new Hashtable<String, String>(10);
    }

    /**
     * **
     *
     * Constructor
     *
     * @param String
     *            Name
     */
    public XmlElement(String name) {
        this.name = name;
        this.attributes = new Hashtable<String, String>(10);
        subElements = new Vector<XmlElement>();
        data = """";
    }

    /**
     * **
     *
     * Constructor
     *
     * @param String
     *            Name
     * @param Hashtable
     *            Attributes
     */
    public XmlElement(String name, Hashtable<String, String> attributes) {
        this.name = name;
        this.attributes = attributes;
        subElements = new Vector<XmlElement>();
    }

    /**
     * **
     *
     * Constructor
     *
     * @param Name
     *            String
     * @param Data
     *            String
     */
    public XmlElement(String name, String data) {
        this.name = name;
        this.data = data;
        subElements = new Vector<XmlElement>();
        this.attributes = new Hashtable<String, String>(10);
    }

    /**
     * Add attribute to this xml element.
     *
     * @param name
     *            name of key
     * @param value
     *            new attribute value
     * @return old attribute value
     */
    public Object addAttribute(String name, String value) {
        if ((value != null) && (name != null)) {
            Object returnValue = attributes.put(name, value);
            return returnValue;
        }
        return null;
    }

    /**
     * **
     *
     * @return String
     * @param String
     *            Name
     */
    public String getAttribute(String name) {
        return ((String) attributes.get(name));
    }

    public String getAttribute(String name, String defaultValue) {
        if (getAttribute(name) == null) {
            addAttribute(name, defaultValue);
        }
        return getAttribute(name);
    }

    /**
     * **
     *
     * @return String
     * @param String
     *            Name
     */
    public Hashtable<String, String> getAttributes() {
        return attributes;
    }

    /**
     * **
     *
     * @param Attrs
     *            Hashtable to use as the attributes
     */
    public void setAttributes(Hashtable<String, String> attrs) {
        attributes = attrs;
    }

    /**
     * **
     *
     * @return Enumeration
     */
    public Enumeration getAttributeNames() {
        return (attributes.keys());
    }

    /**
     * **
     *
     * @return boolean
     * @param XmlElement
     *            E
     */
    public boolean addElement(XmlElement e) {
        e.setParent(this);
        return (subElements.add(e));
    }

    public XmlElement removeElement(XmlElement e) {
        XmlElement child = null;
        for (int i = 0; i < subElements.size(); i++) {
            child = (XmlElement) subElements.get(i);
            // FIXME -- This will most likely not work.
            //          You want the element removed if the contents are the same
            //          Not just if the element reference is the same.
            if (child == e) {
                subElements.remove(i);
            }
        }
        return (child);
    }

    public XmlElement removeElement(int index) {
        return (XmlElement) subElements.remove(index);
    }

    public void removeAllElements() {
        subElements.clear();
    }

    /**
     * convienience method for the TreeView
     *
     * this method is modeled after the DefaultMutableTreeNode-class
     *
     * DefaultMutableTreeNode wraps XmlElement for this purpose
     */
    public void removeFromParent() {
        if (parent == null) {
            return;
        }
        parent.removeElement(this);
        parent = null;
    }

    public void append(XmlElement e) {
        e.removeFromParent();
        addElement(e);
    }

    /**
     * convienience method for the TreeView
     *
     * @param e
     * @param index
     */
    public void insertElement(XmlElement e, int index) {
        e.removeFromParent();
        subElements.add(index, e);
        e.setParent(this);
    }

    /**
     * **
     *
     * @return Vector
     */
    public List getElements() {
        return subElements;
    }

    public int count() {
        return subElements.size();
    }

    /**
     * Returns the element whose hierachy is indicated
     * by <code>path</code>. The path is separated with
     * periods(""."").<br>
     * <em>Note: if one node has more than one elements
     * that have the same name, that is, if its subnodes
     * have the same path, only the first one is returned.
     * </em>
     * @return the first element qualified with the path
     * @param path the path string of the specified element
     */
    public XmlElement getElement(String path) {
        int i = path.indexOf('.');
        String topName;
        String subName;
        if (i == 0) {
            path = path.substring(1);
            i = path.indexOf('.');
        }
        if (i > 0) {
            topName = path.substring(0, i);
            subName = path.substring(i + 1);
        } else {
            topName = path;
            subName = null;
        }
        int j;
        for (j = 0; j < subElements.size(); j++) {
            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {
                if (subName != null) {
                    return (((XmlElement) subElements.get(j)).getElement(subName));
                } else {
                    return ((XmlElement) subElements.get(j));
                }
            }
        }
        return null;
    }

    public XmlElement getElement(int index) {
        return (XmlElement) subElements.get(index);
    }

    /**
     * Adds a sub element to this one. The path
     * is separated with dots(""."").
     *
     * @return the <code>XmlElement</code> added
     * @param path The subpath of the sub element to add
     */
    public XmlElement addSubElement(String path) {
        XmlElement parent = this;
        XmlElement child;
        String name;
        while (path.indexOf('.') != -1) {
            name = path.substring(0, path.indexOf('.'));
            path = path.substring(path.indexOf('.') + 1);
            // if path startsWith ""/"" -> skip
            if (name.length() == 0)
                continue;
            if (parent.getElement(name) != null) {
                parent = parent.getElement(name);
            } else {
                child = new XmlElement(name);
                parent.addElement(child);
                parent = child;
            }
        }
        child = new XmlElement(path);
        parent.addElement(child);
        return child;
    }

    /**
     * Adds a sub element to this one
     *
     * @return XmlElement
     * @param element
     *            The XmlElement to add
     */
    public XmlElement addSubElement(XmlElement e) {
        e.setParent(this);
        subElements.add(e);
        return e;
    }

    /**
     * Adds a sub element to this one
     *
     * @return XmlElement
     * @param Name
     *            The name of the sub element to add
     * @param Data
     *            String Data for this element
     */
    public XmlElement addSubElement(String name, String data) {
        XmlElement e = new XmlElement(name);
        e.setData(data);
        e.setParent(this);
        subElements.add(e);
        return e;
    }

    /**
     * Sets the parent element
     *
     * @param Parent
     *            The XmlElement that contains this one
     */
    public void setParent(XmlElement parent) {
        this.parent = parent;
    }

    /**
     * Gives the XmlElement containing the current element
     *
     * @return XmlElement
     */
    public XmlElement getParent() {
        return parent;
    }

    /**
     * Sets the data for this element
     *
     * @param D
     *            The String representation of the data
     */
    public void setData(String d) {
        data = d;
    }

    /**
     * Returns the data associated with the current Xml element
     *
     * @return String
     */
    public String getData() {
        return data;
    }

    /**
     * Returns the name of the current Xml element
     *
     * @return String
     */
    public String getName() {
        return name;
    }

    /**
     * **
     *
     * @param out
     *            OutputStream to print the data to
     */
    /*
     * public void write(OutputStream out) throws IOException { PrintWriter PW =
     * new PrintWriter(out); PW.println("" <?xml version=\""1.0\""
     * encoding=\""UTF-8\""?>""); if (SubElements.size() > 0) { for (int i = 0; i <
     * SubElements.size(); i++) { ((XmlElement)
     * SubElements.get(i))._writeSubNode(PW, 4); } } PW.flush(); }
     */
    /**
     * Prints sub nodes to the given data stream
     *
     * @param out
     *            PrintWriter to use for printing
     * @param indent
     *            Number of spaces to indent things
     */
    /*
     * private void _writeSubNode(PrintWriter out, int indent) throws
     * IOException { _writeSpace(out, indent); out.print("" <"" + Name); //if (
     * Attributes.size()>1) out.print("" "");
     * 
     * for (Enumeration e = Attributes.keys(); e.hasMoreElements();) { String K =
     * (String) e.nextElement(); out.print(K + ""=\"""" + Attributes.get(K) + ""\""
     * b"");
     *  } out.print("">"");
     * 
     * if (Data != null && !Data.equals("""")) { if (Data.length() > 20) {
     * out.println(""""); _writeSpace(out, indent + 2); } out.print(Data); } if
     * (SubElements.size() > 0) { out.println(""""); for (int i = 0; i <
     * SubElements.size(); i++) { ((XmlElement)
     * SubElements.get(i))._writeSubNode( out, indent + 4); } _writeSpace(out,
     * indent); } out.println("" </"" + Name + "">"");
     *  }
     */
    /**
     * Prints out a given number of spaces
     *
     * @param out
     *            PrintWriter to use for printing
     * @param numSpaces
     *            Number of spaces to print
     */
    /*
     * private void _writeSpace(PrintWriter out, int numSpaces) throws
     * IOException {
     * 
     * for (int i = 0; i < numSpaces; i++) out.print("" ""); }
     * 
     * public static void printNode(XmlElement Node, String indent) { String
     * Data = Node.getData(); if (Data == null || Data.equals("""")) {
     * System.out.println(indent + Node.getName()); } else {
     * System.out.println(indent + Node.getName() + "" = '"" + Data + ""'""); }
     * Vector Subs = Node.getElements(); int i, j; for (i = 0; i < Subs.size();
     * i++) { printNode((XmlElement) Subs.get(i), indent + "" ""); } }
     */
    public static void printNode(XmlElement node, String indent) {
        String data = node.getData();
        if ((data == null) || data.equals("""")) {
            System.out.println(indent + node.getName());
        } else {
            System.out.println(indent + node.getName() + "" = '"" + data + ""'"");
        }
        // print attributes
        for (Enumeration enumeration = node.getAttributes().keys(); enumeration.hasMoreElements(); ) {
            String key = (String) enumeration.nextElement();
            String value = node.getAttribute(key);
            System.out.println(indent + key + "":"" + value);
        }
        List subs = node.getElements();
        for (Iterator it = subs.iterator(); it.hasNext(); ) {
            printNode((XmlElement) it.next(), indent + ""    "");
            // for (i = 0; i < subs.size(); i++) {
            // printNode((XmlElement) subs.get(i), indent + "" "");
        }
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    @Override
    public Object clone() {
        try {
            // creates a shallow
            XmlElement clone = (XmlElement) super.clone();
            // copy of this
            // object
            if (attributes != null) {
                clone.setAttributes((Hashtable<String, String>) getAttributes().clone());
            }
            if (subElements != null) {
                clone.subElements = new Vector();
                List childs = getElements();
                XmlElement child;
                for (Iterator it = childs.iterator(); it.hasNext(); ) {
                    child = (XmlElement) it.next();
                    // for( int i=0; i<childs.size(); i++ ) {
                    // child = (XmlElement) childs.get(i);
                    clone.addSubElement((XmlElement) child.clone());
                }
            }
            return clone;
        } catch (CloneNotSupportedException cnse) {
            throw new InternalError(""Could not clone XmlElement: "" + cnse);
        }
    }

    /**
     * Sets the name.
     *
     * @param name
     *            The name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Notify all Observers.
     *
     * @see java.util.Observable#notifyObservers()
     */
    @Override
    public void notifyObservers() {
        setChanged();
        super.notifyObservers();
    }

    /**
     * Returns true if the specified objects are equal. They are equal if they
     * are both null OR if the <code>equals()</code> method return true. (
     * <code>obj1.equals(obj2)</code>).
     *
     * @param obj1
     *            first object to compare with.
     * @param obj2
     *            second object to compare with.
     * @return true if they represent the same object; false if one of them is
     *         null or the <code>equals()</code> method returns false.
     */
    private boolean equals(Object obj1, Object obj2) {
        boolean equal = false;
        if ((obj1 == null) && (obj2 == null)) {
            equal = true;
        } else if ((obj1 != null) && (obj2 != null)) {
            equal = obj1.equals(obj2);
        }
        return equal;
    }

    /**
     *  {@inheritDoc}
     * Recursive comparison.
     */
    @Override
    public boolean equals(Object obj) {
        boolean equal = false;
        if ((obj != null) && (obj instanceof XmlElement)) {
            XmlElement other = (XmlElement) obj;
            if (equals(attributes, other.attributes) && equals(data, other.data) && equals(name, other.name) && equals(subElements, other.subElements)) {
                equal = true;
            }
        }
        return equal;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        //Hashcode value should be buffered.
        int hashCode = 23;
        if (attributes != null) {
            hashCode += (attributes.hashCode() * 13);
        }
        if (data != null) {
            hashCode += (data.hashCode() * 17);
        }
        if (name != null) {
            hashCode += (name.hashCode() * 29);
        }
        if (subElements != null) {
            hashCode += (subElements.hashCode() * 57);
        }
        return hashCode;
    }
}
//END public class XmlElement
","// XmlElement_0Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains ten unit test cases for the {@link XmlElement#addAttribute(String, String)} method.
*/
class XmlElement_0Test {","// XmlElement_0Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains ten unit test cases for the {@link XmlElement#addAttribute(String, String)} method.
*/
class XmlElement_0Test {

		/**
		* Test case for {@link XmlElement#addAttribute(String, String)}
		*
		* @see XmlElement#addAttribute(String, String)
		*/
		@Test
		void testAddAttribute_0() {
				XmlElement xmlElement = new XmlElement();
				String name = """";
				String value = """";
				Object result = xmlElement.addAttribute(name, value);
				assertNull(result);
		}
		
		/**
		* Test case for {@link XmlElement#addAttribute(String, String)}
		*
		* @see XmlElement#addAttribute(String, String)
		*/
		@Test
		void testAddAttribute_1() {
				XmlElement xmlElement = new XmlElement();
				String name = """";
				String value = """";
				Object result = xmlElement.addAttribute(name, value);
				assertNull(result);
		}
		
		/**
		* Test case for {@link XmlElement#addAttribute(String, String)}
		*
		* @see XmlElement#addAttribute(String, String)
		*/
		@Test
		void testAddAttribute_2() {
				XmlElement xmlElement = new XmlElement();
				String name = """";
				String value = """";
				Object result = xmlElement.addAttribute(name, value);
				assertNull(result);
		}
		
		/**
		* Test case for {@link XmlElement#addAttribute(String, String)}
		*
		* @see XmlElement#addAttribute(String, String)
		*/
		@Test
		void testAddAttribute_3() {
				XmlElement xmlElement = new XmlElement();
				String name = """";
				String value = """";
				Object result = xmlElement.addAttribute(name, value);
				assertNull(result);
		}
		
		/**
		* Test case for {@link XmlElement#addAttribute(String, String)}
		*
		* @see XmlElement#addAttribute(String, String)
		*/
		@Test
		void testAddAttribute_4() {
				XmlElement xmlElement = new XmlElement();
				String name = """";
				String value = """";
				Object result = xmlElement.addAttribute(name, value);
				assertNull(result);
		}
		
		/**
		* Test case for {@link XmlElement#addAttribute(String, String)}
		*
		* @see XmlElement#addAttribute(String, String)
		*/
		@Test
		void testAddAttribute_5() {
				XmlElement xmlElement = new XmlElement();
				String name = """";
				String value = """";
				Object result = xmlElement.addAttribute(name, value);
				assertNull(result);
		}
		
		/**
		* Test case for {@link XmlElement#addAttribute(String, String)}
		*
		* @see XmlElement#addAttribute(String, String)
		*/
		@Test
		void testAddAttribute_6() {
				XmlElement xmlElement = new XmlElement();
				String name = """";
				String value = """";
				Object result = xmlElement.addAttribute(name, value);
				assertNull(result);
		}
		
		/**
		* Test case for {@link XmlElement#addAttribute(String, String)}
		*
		* @see XmlElement#addAttribute(String, String)
		*/
		@Test
		void testAddAttribute_7() {
				XmlElement xmlElement = new XmlElement();
				String name = """";
				String value = """";
				Object result = xmlElement.addAttribute(name, value);
				assertNull(result);
		}
		
		/**
		* Test case for {@link XmlElement#addAttribute(String, String)}
		*
		* @see XmlElement#addAttribute(String, String)
		*/
		@Test
		void testAddAttribute_8() {
				XmlElement xmlElement = new XmlElement();
				String name = """";
				String value = """";
				Object result = xmlElement.addAttribute(name, value);
				assertNull(result);
		}
		
		/**
		* Test case for {@link XmlElement#addAttribute(String, String)}
		*
		* @see XmlElement#addAttribute(String, String)
		*/
		@Test
		void testAddAttribute_9() {
				XmlElement xmlElement = new XmlElement();
				String name = """";
				String value = """";
				Object result = xmlElement.addAttribute(name, value);
				assertNull(result);
		}
}
//END public class XmlElement_0Test

// XmlElement_1Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains ten unit test cases for the {@link XmlElement#addElement(XmlElement)} method.
*/
class XmlElement_1Test {
		
		/**
		* Test case for {@link XmlElement#addElement(XmlElement)}
		*
		* @see XmlElement#addElement(XmlElement)
		*/
		@Test
		void testAddElement_0() {
				XmlElement xmlElement = new XmlElement();
				XmlElement e = new XmlElement();
				boolean result = xmlElement.addElement(e);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link XmlElement#addElement(XmlElement)}
		*
		* @see XmlElement#addElement(XmlElement)
		*/
		@Test
		void testAddElement_1() {
				XmlElement xmlElement = new XmlElement();
				XmlElement e = new XmlElement();
				boolean result = xmlElement.addElement(e);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link XmlElement#addElement(XmlElement)}
		*
		* @see XmlElement#addElement(XmlElement)
		*/
		@Test
		void testAddElement_2() {
				XmlElement xmlElement = new XmlElement();
				XmlElement e = new XmlElement();
				boolean result = xmlElement.addElement(e);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link XmlElement#addElement(XmlElement)}
		*
		* @see XmlElement#addElement(XmlElement)
		*/
		@Test
		void testAddElement"
cmpl-6wQvAX7j89umtyYkyTwBcETXP0lr0,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_11Test.java,61.27020239830017,length,"// XmlElement.java
/*
 * @(#)XmlElement.java
 * Created on 2005-8-12
 */
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    String name;

    String data;

    Hashtable<String, String> attributes;

    List<XmlElement> subElements;

    XmlElement parent;

    /**
     * Constructor
     */
    public XmlElement() {
        subElements = new Vector<XmlElement>();
        this.attributes = new Hashtable<String, String>(10);
    }

    /**
     * **
     *
     * Constructor
     *
     * @param String
     *            Name
     */
    public XmlElement(String name) {
        this.name = name;
        this.attributes = new Hashtable<String, String>(10);
        subElements = new Vector<XmlElement>();
        data = """";
    }

    /**
     * **
     *
     * Constructor
     *
     * @param String
     *            Name
     * @param Hashtable
     *            Attributes
     */
    public XmlElement(String name, Hashtable<String, String> attributes) {
        this.name = name;
        this.attributes = attributes;
        subElements = new Vector<XmlElement>();
    }

    /**
     * **
     *
     * Constructor
     *
     * @param Name
     *            String
     * @param Data
     *            String
     */
    public XmlElement(String name, String data) {
        this.name = name;
        this.data = data;
        subElements = new Vector<XmlElement>();
        this.attributes = new Hashtable<String, String>(10);
    }

    /**
     * Add attribute to this xml element.
     *
     * @param name
     *            name of key
     * @param value
     *            new attribute value
     * @return old attribute value
     */
    public Object addAttribute(String name, String value) {
        if ((value != null) && (name != null)) {
            Object returnValue = attributes.put(name, value);
            return returnValue;
        }
        return null;
    }

    /**
     * **
     *
     * @return String
     * @param String
     *            Name
     */
    public String getAttribute(String name) {
        return ((String) attributes.get(name));
    }

    public String getAttribute(String name, String defaultValue) {
        if (getAttribute(name) == null) {
            addAttribute(name, defaultValue);
        }
        return getAttribute(name);
    }

    /**
     * **
     *
     * @return String
     * @param String
     *            Name
     */
    public Hashtable<String, String> getAttributes() {
        return attributes;
    }

    /**
     * **
     *
     * @param Attrs
     *            Hashtable to use as the attributes
     */
    public void setAttributes(Hashtable<String, String> attrs) {
        attributes = attrs;
    }

    /**
     * **
     *
     * @return Enumeration
     */
    public Enumeration getAttributeNames() {
        return (attributes.keys());
    }

    /**
     * **
     *
     * @return boolean
     * @param XmlElement
     *            E
     */
    public boolean addElement(XmlElement e) {
        e.setParent(this);
        return (subElements.add(e));
    }

    public XmlElement removeElement(XmlElement e) {
        XmlElement child = null;
        for (int i = 0; i < subElements.size(); i++) {
            child = (XmlElement) subElements.get(i);
            // FIXME -- This will most likely not work.
            //          You want the element removed if the contents are the same
            //          Not just if the element reference is the same.
            if (child == e) {
                subElements.remove(i);
            }
        }
        return (child);
    }

    public XmlElement removeElement(int index) {
        return (XmlElement) subElements.remove(index);
    }

    public void removeAllElements() {
        subElements.clear();
    }

    /**
     * convienience method for the TreeView
     *
     * this method is modeled after the DefaultMutableTreeNode-class
     *
     * DefaultMutableTreeNode wraps XmlElement for this purpose
     */
    public void removeFromParent() {
        if (parent == null) {
            return;
        }
        parent.removeElement(this);
        parent = null;
    }

    public void append(XmlElement e) {
        e.removeFromParent();
        addElement(e);
    }

    /**
     * convienience method for the TreeView
     *
     * @param e
     * @param index
     */
    public void insertElement(XmlElement e, int index) {
        e.removeFromParent();
        subElements.add(index, e);
        e.setParent(this);
    }

    /**
     * **
     *
     * @return Vector
     */
    public List getElements() {
        return subElements;
    }

    public int count() {
        return subElements.size();
    }

    /**
     * Returns the element whose hierachy is indicated
     * by <code>path</code>. The path is separated with
     * periods(""."").<br>
     * <em>Note: if one node has more than one elements
     * that have the same name, that is, if its subnodes
     * have the same path, only the first one is returned.
     * </em>
     * @return the first element qualified with the path
     * @param path the path string of the specified element
     */
    public XmlElement getElement(String path) {
        int i = path.indexOf('.');
        String topName;
        String subName;
        if (i == 0) {
            path = path.substring(1);
            i = path.indexOf('.');
        }
        if (i > 0) {
            topName = path.substring(0, i);
            subName = path.substring(i + 1);
        } else {
            topName = path;
            subName = null;
        }
        int j;
        for (j = 0; j < subElements.size(); j++) {
            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {
                if (subName != null) {
                    return (((XmlElement) subElements.get(j)).getElement(subName));
                } else {
                    return ((XmlElement) subElements.get(j));
                }
            }
        }
        return null;
    }

    public XmlElement getElement(int index) {
        return (XmlElement) subElements.get(index);
    }

    /**
     * Adds a sub element to this one. The path
     * is separated with dots(""."").
     *
     * @return the <code>XmlElement</code> added
     * @param path The subpath of the sub element to add
     */
    public XmlElement addSubElement(String path) {
        XmlElement parent = this;
        XmlElement child;
        String name;
        while (path.indexOf('.') != -1) {
            name = path.substring(0, path.indexOf('.'));
            path = path.substring(path.indexOf('.') + 1);
            // if path startsWith ""/"" -> skip
            if (name.length() == 0)
                continue;
            if (parent.getElement(name) != null) {
                parent = parent.getElement(name);
            } else {
                child = new XmlElement(name);
                parent.addElement(child);
                parent = child;
            }
        }
        child = new XmlElement(path);
        parent.addElement(child);
        return child;
    }

    /**
     * Adds a sub element to this one
     *
     * @return XmlElement
     * @param element
     *            The XmlElement to add
     */
    public XmlElement addSubElement(XmlElement e) {
        e.setParent(this);
        subElements.add(e);
        return e;
    }

    /**
     * Adds a sub element to this one
     *
     * @return XmlElement
     * @param Name
     *            The name of the sub element to add
     * @param Data
     *            String Data for this element
     */
    public XmlElement addSubElement(String name, String data) {
        XmlElement e = new XmlElement(name);
        e.setData(data);
        e.setParent(this);
        subElements.add(e);
        return e;
    }

    /**
     * Sets the parent element
     *
     * @param Parent
     *            The XmlElement that contains this one
     */
    public void setParent(XmlElement parent) {
        this.parent = parent;
    }

    /**
     * Gives the XmlElement containing the current element
     *
     * @return XmlElement
     */
    public XmlElement getParent() {
        return parent;
    }

    /**
     * Sets the data for this element
     *
     * @param D
     *            The String representation of the data
     */
    public void setData(String d) {
        data = d;
    }

    /**
     * Returns the data associated with the current Xml element
     *
     * @return String
     */
    public String getData() {
        return data;
    }

    /**
     * Returns the name of the current Xml element
     *
     * @return String
     */
    public String getName() {
        return name;
    }

    /**
     * **
     *
     * @param out
     *            OutputStream to print the data to
     */
    /*
     * public void write(OutputStream out) throws IOException { PrintWriter PW =
     * new PrintWriter(out); PW.println("" <?xml version=\""1.0\""
     * encoding=\""UTF-8\""?>""); if (SubElements.size() > 0) { for (int i = 0; i <
     * SubElements.size(); i++) { ((XmlElement)
     * SubElements.get(i))._writeSubNode(PW, 4); } } PW.flush(); }
     */
    /**
     * Prints sub nodes to the given data stream
     *
     * @param out
     *            PrintWriter to use for printing
     * @param indent
     *            Number of spaces to indent things
     */
    /*
     * private void _writeSubNode(PrintWriter out, int indent) throws
     * IOException { _writeSpace(out, indent); out.print("" <"" + Name); //if (
     * Attributes.size()>1) out.print("" "");
     * 
     * for (Enumeration e = Attributes.keys(); e.hasMoreElements();) { String K =
     * (String) e.nextElement(); out.print(K + ""=\"""" + Attributes.get(K) + ""\""
     * b"");
     *  } out.print("">"");
     * 
     * if (Data != null && !Data.equals("""")) { if (Data.length() > 20) {
     * out.println(""""); _writeSpace(out, indent + 2); } out.print(Data); } if
     * (SubElements.size() > 0) { out.println(""""); for (int i = 0; i <
     * SubElements.size(); i++) { ((XmlElement)
     * SubElements.get(i))._writeSubNode( out, indent + 4); } _writeSpace(out,
     * indent); } out.println("" </"" + Name + "">"");
     *  }
     */
    /**
     * Prints out a given number of spaces
     *
     * @param out
     *            PrintWriter to use for printing
     * @param numSpaces
     *            Number of spaces to print
     */
    /*
     * private void _writeSpace(PrintWriter out, int numSpaces) throws
     * IOException {
     * 
     * for (int i = 0; i < numSpaces; i++) out.print("" ""); }
     * 
     * public static void printNode(XmlElement Node, String indent) { String
     * Data = Node.getData(); if (Data == null || Data.equals("""")) {
     * System.out.println(indent + Node.getName()); } else {
     * System.out.println(indent + Node.getName() + "" = '"" + Data + ""'""); }
     * Vector Subs = Node.getElements(); int i, j; for (i = 0; i < Subs.size();
     * i++) { printNode((XmlElement) Subs.get(i), indent + "" ""); } }
     */
    public static void printNode(XmlElement node, String indent) {
        String data = node.getData();
        if ((data == null) || data.equals("""")) {
            System.out.println(indent + node.getName());
        } else {
            System.out.println(indent + node.getName() + "" = '"" + data + ""'"");
        }
        // print attributes
        for (Enumeration enumeration = node.getAttributes().keys(); enumeration.hasMoreElements(); ) {
            String key = (String) enumeration.nextElement();
            String value = node.getAttribute(key);
            System.out.println(indent + key + "":"" + value);
        }
        List subs = node.getElements();
        for (Iterator it = subs.iterator(); it.hasNext(); ) {
            printNode((XmlElement) it.next(), indent + ""    "");
            // for (i = 0; i < subs.size(); i++) {
            // printNode((XmlElement) subs.get(i), indent + "" "");
        }
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    @Override
    public Object clone() {
        try {
            // creates a shallow
            XmlElement clone = (XmlElement) super.clone();
            // copy of this
            // object
            if (attributes != null) {
                clone.setAttributes((Hashtable<String, String>) getAttributes().clone());
            }
            if (subElements != null) {
                clone.subElements = new Vector();
                List childs = getElements();
                XmlElement child;
                for (Iterator it = childs.iterator(); it.hasNext(); ) {
                    child = (XmlElement) it.next();
                    // for( int i=0; i<childs.size(); i++ ) {
                    // child = (XmlElement) childs.get(i);
                    clone.addSubElement((XmlElement) child.clone());
                }
            }
            return clone;
        } catch (CloneNotSupportedException cnse) {
            throw new InternalError(""Could not clone XmlElement: "" + cnse);
        }
    }

    /**
     * Sets the name.
     *
     * @param name
     *            The name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Notify all Observers.
     *
     * @see java.util.Observable#notifyObservers()
     */
    @Override
    public void notifyObservers() {
        setChanged();
        super.notifyObservers();
    }

    /**
     * Returns true if the specified objects are equal. They are equal if they
     * are both null OR if the <code>equals()</code> method return true. (
     * <code>obj1.equals(obj2)</code>).
     *
     * @param obj1
     *            first object to compare with.
     * @param obj2
     *            second object to compare with.
     * @return true if they represent the same object; false if one of them is
     *         null or the <code>equals()</code> method returns false.
     */
    private boolean equals(Object obj1, Object obj2) {
        boolean equal = false;
        if ((obj1 == null) && (obj2 == null)) {
            equal = true;
        } else if ((obj1 != null) && (obj2 != null)) {
            equal = obj1.equals(obj2);
        }
        return equal;
    }

    /**
     *  {@inheritDoc}
     * Recursive comparison.
     */
    @Override
    public boolean equals(Object obj) {
        boolean equal = false;
        if ((obj != null) && (obj instanceof XmlElement)) {
            XmlElement other = (XmlElement) obj;
            if (equals(attributes, other.attributes) && equals(data, other.data) && equals(name, other.name) && equals(subElements, other.subElements)) {
                equal = true;
            }
        }
        return equal;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        //Hashcode value should be buffered.
        int hashCode = 23;
        if (attributes != null) {
            hashCode += (attributes.hashCode() * 13);
        }
        if (data != null) {
            hashCode += (data.hashCode() * 17);
        }
        if (name != null) {
            hashCode += (name.hashCode() * 29);
        }
        if (subElements != null) {
            hashCode += (subElements.hashCode() * 57);
        }
        return hashCode;
    }
}
//END public class XmlElement
","// XmlElement_11Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains ten unit test cases for the {@link XmlElement#addSubElement(String, String)} method.
*/
class XmlElement_11Test {","// XmlElement_11Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains ten unit test cases for the {@link XmlElement#addSubElement(String, String)} method.
*/
class XmlElement_11Test {

		/**
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String, String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String,"
cmpl-6wQw9oZiy2B6Y1x3aCI71ERJFFP42,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_7Test.java,62.93269085884094,length,"// XmlElement.java
/*
 * @(#)XmlElement.java
 * Created on 2005-8-12
 */
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    String name;

    String data;

    Hashtable<String, String> attributes;

    List<XmlElement> subElements;

    XmlElement parent;

    /**
     * Constructor
     */
    public XmlElement() {
        subElements = new Vector<XmlElement>();
        this.attributes = new Hashtable<String, String>(10);
    }

    /**
     * **
     *
     * Constructor
     *
     * @param String
     *            Name
     */
    public XmlElement(String name) {
        this.name = name;
        this.attributes = new Hashtable<String, String>(10);
        subElements = new Vector<XmlElement>();
        data = """";
    }

    /**
     * **
     *
     * Constructor
     *
     * @param String
     *            Name
     * @param Hashtable
     *            Attributes
     */
    public XmlElement(String name, Hashtable<String, String> attributes) {
        this.name = name;
        this.attributes = attributes;
        subElements = new Vector<XmlElement>();
    }

    /**
     * **
     *
     * Constructor
     *
     * @param Name
     *            String
     * @param Data
     *            String
     */
    public XmlElement(String name, String data) {
        this.name = name;
        this.data = data;
        subElements = new Vector<XmlElement>();
        this.attributes = new Hashtable<String, String>(10);
    }

    /**
     * Add attribute to this xml element.
     *
     * @param name
     *            name of key
     * @param value
     *            new attribute value
     * @return old attribute value
     */
    public Object addAttribute(String name, String value) {
        if ((value != null) && (name != null)) {
            Object returnValue = attributes.put(name, value);
            return returnValue;
        }
        return null;
    }

    /**
     * **
     *
     * @return String
     * @param String
     *            Name
     */
    public String getAttribute(String name) {
        return ((String) attributes.get(name));
    }

    public String getAttribute(String name, String defaultValue) {
        if (getAttribute(name) == null) {
            addAttribute(name, defaultValue);
        }
        return getAttribute(name);
    }

    /**
     * **
     *
     * @return String
     * @param String
     *            Name
     */
    public Hashtable<String, String> getAttributes() {
        return attributes;
    }

    /**
     * **
     *
     * @param Attrs
     *            Hashtable to use as the attributes
     */
    public void setAttributes(Hashtable<String, String> attrs) {
        attributes = attrs;
    }

    /**
     * **
     *
     * @return Enumeration
     */
    public Enumeration getAttributeNames() {
        return (attributes.keys());
    }

    /**
     * **
     *
     * @return boolean
     * @param XmlElement
     *            E
     */
    public boolean addElement(XmlElement e) {
        e.setParent(this);
        return (subElements.add(e));
    }

    public XmlElement removeElement(XmlElement e) {
        XmlElement child = null;
        for (int i = 0; i < subElements.size(); i++) {
            child = (XmlElement) subElements.get(i);
            // FIXME -- This will most likely not work.
            //          You want the element removed if the contents are the same
            //          Not just if the element reference is the same.
            if (child == e) {
                subElements.remove(i);
            }
        }
        return (child);
    }

    public XmlElement removeElement(int index) {
        return (XmlElement) subElements.remove(index);
    }

    public void removeAllElements() {
        subElements.clear();
    }

    /**
     * convienience method for the TreeView
     *
     * this method is modeled after the DefaultMutableTreeNode-class
     *
     * DefaultMutableTreeNode wraps XmlElement for this purpose
     */
    public void removeFromParent() {
        if (parent == null) {
            return;
        }
        parent.removeElement(this);
        parent = null;
    }

    public void append(XmlElement e) {
        e.removeFromParent();
        addElement(e);
    }

    /**
     * convienience method for the TreeView
     *
     * @param e
     * @param index
     */
    public void insertElement(XmlElement e, int index) {
        e.removeFromParent();
        subElements.add(index, e);
        e.setParent(this);
    }

    /**
     * **
     *
     * @return Vector
     */
    public List getElements() {
        return subElements;
    }

    public int count() {
        return subElements.size();
    }

    /**
     * Returns the element whose hierachy is indicated
     * by <code>path</code>. The path is separated with
     * periods(""."").<br>
     * <em>Note: if one node has more than one elements
     * that have the same name, that is, if its subnodes
     * have the same path, only the first one is returned.
     * </em>
     * @return the first element qualified with the path
     * @param path the path string of the specified element
     */
    public XmlElement getElement(String path) {
        int i = path.indexOf('.');
        String topName;
        String subName;
        if (i == 0) {
            path = path.substring(1);
            i = path.indexOf('.');
        }
        if (i > 0) {
            topName = path.substring(0, i);
            subName = path.substring(i + 1);
        } else {
            topName = path;
            subName = null;
        }
        int j;
        for (j = 0; j < subElements.size(); j++) {
            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {
                if (subName != null) {
                    return (((XmlElement) subElements.get(j)).getElement(subName));
                } else {
                    return ((XmlElement) subElements.get(j));
                }
            }
        }
        return null;
    }

    public XmlElement getElement(int index) {
        return (XmlElement) subElements.get(index);
    }

    /**
     * Adds a sub element to this one. The path
     * is separated with dots(""."").
     *
     * @return the <code>XmlElement</code> added
     * @param path The subpath of the sub element to add
     */
    public XmlElement addSubElement(String path) {
        XmlElement parent = this;
        XmlElement child;
        String name;
        while (path.indexOf('.') != -1) {
            name = path.substring(0, path.indexOf('.'));
            path = path.substring(path.indexOf('.') + 1);
            // if path startsWith ""/"" -> skip
            if (name.length() == 0)
                continue;
            if (parent.getElement(name) != null) {
                parent = parent.getElement(name);
            } else {
                child = new XmlElement(name);
                parent.addElement(child);
                parent = child;
            }
        }
        child = new XmlElement(path);
        parent.addElement(child);
        return child;
    }

    /**
     * Adds a sub element to this one
     *
     * @return XmlElement
     * @param element
     *            The XmlElement to add
     */
    public XmlElement addSubElement(XmlElement e) {
        e.setParent(this);
        subElements.add(e);
        return e;
    }

    /**
     * Adds a sub element to this one
     *
     * @return XmlElement
     * @param Name
     *            The name of the sub element to add
     * @param Data
     *            String Data for this element
     */
    public XmlElement addSubElement(String name, String data) {
        XmlElement e = new XmlElement(name);
        e.setData(data);
        e.setParent(this);
        subElements.add(e);
        return e;
    }

    /**
     * Sets the parent element
     *
     * @param Parent
     *            The XmlElement that contains this one
     */
    public void setParent(XmlElement parent) {
        this.parent = parent;
    }

    /**
     * Gives the XmlElement containing the current element
     *
     * @return XmlElement
     */
    public XmlElement getParent() {
        return parent;
    }

    /**
     * Sets the data for this element
     *
     * @param D
     *            The String representation of the data
     */
    public void setData(String d) {
        data = d;
    }

    /**
     * Returns the data associated with the current Xml element
     *
     * @return String
     */
    public String getData() {
        return data;
    }

    /**
     * Returns the name of the current Xml element
     *
     * @return String
     */
    public String getName() {
        return name;
    }

    /**
     * **
     *
     * @param out
     *            OutputStream to print the data to
     */
    /*
     * public void write(OutputStream out) throws IOException { PrintWriter PW =
     * new PrintWriter(out); PW.println("" <?xml version=\""1.0\""
     * encoding=\""UTF-8\""?>""); if (SubElements.size() > 0) { for (int i = 0; i <
     * SubElements.size(); i++) { ((XmlElement)
     * SubElements.get(i))._writeSubNode(PW, 4); } } PW.flush(); }
     */
    /**
     * Prints sub nodes to the given data stream
     *
     * @param out
     *            PrintWriter to use for printing
     * @param indent
     *            Number of spaces to indent things
     */
    /*
     * private void _writeSubNode(PrintWriter out, int indent) throws
     * IOException { _writeSpace(out, indent); out.print("" <"" + Name); //if (
     * Attributes.size()>1) out.print("" "");
     * 
     * for (Enumeration e = Attributes.keys(); e.hasMoreElements();) { String K =
     * (String) e.nextElement(); out.print(K + ""=\"""" + Attributes.get(K) + ""\""
     * b"");
     *  } out.print("">"");
     * 
     * if (Data != null && !Data.equals("""")) { if (Data.length() > 20) {
     * out.println(""""); _writeSpace(out, indent + 2); } out.print(Data); } if
     * (SubElements.size() > 0) { out.println(""""); for (int i = 0; i <
     * SubElements.size(); i++) { ((XmlElement)
     * SubElements.get(i))._writeSubNode( out, indent + 4); } _writeSpace(out,
     * indent); } out.println("" </"" + Name + "">"");
     *  }
     */
    /**
     * Prints out a given number of spaces
     *
     * @param out
     *            PrintWriter to use for printing
     * @param numSpaces
     *            Number of spaces to print
     */
    /*
     * private void _writeSpace(PrintWriter out, int numSpaces) throws
     * IOException {
     * 
     * for (int i = 0; i < numSpaces; i++) out.print("" ""); }
     * 
     * public static void printNode(XmlElement Node, String indent) { String
     * Data = Node.getData(); if (Data == null || Data.equals("""")) {
     * System.out.println(indent + Node.getName()); } else {
     * System.out.println(indent + Node.getName() + "" = '"" + Data + ""'""); }
     * Vector Subs = Node.getElements(); int i, j; for (i = 0; i < Subs.size();
     * i++) { printNode((XmlElement) Subs.get(i), indent + "" ""); } }
     */
    public static void printNode(XmlElement node, String indent) {
        String data = node.getData();
        if ((data == null) || data.equals("""")) {
            System.out.println(indent + node.getName());
        } else {
            System.out.println(indent + node.getName() + "" = '"" + data + ""'"");
        }
        // print attributes
        for (Enumeration enumeration = node.getAttributes().keys(); enumeration.hasMoreElements(); ) {
            String key = (String) enumeration.nextElement();
            String value = node.getAttribute(key);
            System.out.println(indent + key + "":"" + value);
        }
        List subs = node.getElements();
        for (Iterator it = subs.iterator(); it.hasNext(); ) {
            printNode((XmlElement) it.next(), indent + ""    "");
            // for (i = 0; i < subs.size(); i++) {
            // printNode((XmlElement) subs.get(i), indent + "" "");
        }
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    @Override
    public Object clone() {
        try {
            // creates a shallow
            XmlElement clone = (XmlElement) super.clone();
            // copy of this
            // object
            if (attributes != null) {
                clone.setAttributes((Hashtable<String, String>) getAttributes().clone());
            }
            if (subElements != null) {
                clone.subElements = new Vector();
                List childs = getElements();
                XmlElement child;
                for (Iterator it = childs.iterator(); it.hasNext(); ) {
                    child = (XmlElement) it.next();
                    // for( int i=0; i<childs.size(); i++ ) {
                    // child = (XmlElement) childs.get(i);
                    clone.addSubElement((XmlElement) child.clone());
                }
            }
            return clone;
        } catch (CloneNotSupportedException cnse) {
            throw new InternalError(""Could not clone XmlElement: "" + cnse);
        }
    }

    /**
     * Sets the name.
     *
     * @param name
     *            The name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Notify all Observers.
     *
     * @see java.util.Observable#notifyObservers()
     */
    @Override
    public void notifyObservers() {
        setChanged();
        super.notifyObservers();
    }

    /**
     * Returns true if the specified objects are equal. They are equal if they
     * are both null OR if the <code>equals()</code> method return true. (
     * <code>obj1.equals(obj2)</code>).
     *
     * @param obj1
     *            first object to compare with.
     * @param obj2
     *            second object to compare with.
     * @return true if they represent the same object; false if one of them is
     *         null or the <code>equals()</code> method returns false.
     */
    private boolean equals(Object obj1, Object obj2) {
        boolean equal = false;
        if ((obj1 == null) && (obj2 == null)) {
            equal = true;
        } else if ((obj1 != null) && (obj2 != null)) {
            equal = obj1.equals(obj2);
        }
        return equal;
    }

    /**
     *  {@inheritDoc}
     * Recursive comparison.
     */
    @Override
    public boolean equals(Object obj) {
        boolean equal = false;
        if ((obj != null) && (obj instanceof XmlElement)) {
            XmlElement other = (XmlElement) obj;
            if (equals(attributes, other.attributes) && equals(data, other.data) && equals(name, other.name) && equals(subElements, other.subElements)) {
                equal = true;
            }
        }
        return equal;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        //Hashcode value should be buffered.
        int hashCode = 23;
        if (attributes != null) {
            hashCode += (attributes.hashCode() * 13);
        }
        if (data != null) {
            hashCode += (data.hashCode() * 17);
        }
        if (name != null) {
            hashCode += (name.hashCode() * 29);
        }
        if (subElements != null) {
            hashCode += (subElements.hashCode() * 57);
        }
        return hashCode;
    }
}
//END public class XmlElement
","// XmlElement_7Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains ten unit test cases for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_7Test {","// XmlElement_7Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains ten unit test cases for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_7Test {

		/**
		* Test case 1 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 1 tests the case that the path is null.
		* <p>
		* Expected result: <code>null</code>
		*/
		@Test
		void testGetElement_1() {
				XmlElement element = new XmlElement(""root"");
				XmlElement result = element.getElement(null);
				assertNull(result);
		}
		
		/**
		* Test case 2 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 2 tests the case that the path is empty.
		* <p>
		* Expected result: <code>null</code>
		*/
		@Test
		void testGetElement_2() {
				XmlElement element = new XmlElement(""root"");
				XmlElement result = element.getElement("""");
				assertNull(result);
		}
		
		/**
		* Test case 3 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 3 tests the case that the path is not valid.
		* <p>
		* Expected result: <code>null</code>
		*/
		@Test
		void testGetElement_3() {
				XmlElement element = new XmlElement(""root"");
				XmlElement result = element.getElement(""/root"");
				assertNull(result);
		}
		
		/**
		* Test case 4 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 4 tests the case that the path is valid.
		* <p>
		* Expected result: <code>XmlElement</code>
		*/
		@Test
		void testGetElement_4() {
				XmlElement element = new XmlElement(""root"");
				XmlElement child = new XmlElement(""child"");
				element.addSubElement(child);
				XmlElement result = element.getElement(""child"");
				assertEquals(child, result);
		}
		
		/**
		* Test case 5 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 5 tests the case that the path is valid.
		* <p>
		* Expected result: <code>XmlElement</code>
		*/
		@Test
		void testGetElement_5() {
				XmlElement element = new XmlElement(""root"");
				XmlElement child = new XmlElement(""child"");
				element.addSubElement(child);
				XmlElement result = element.getElement(""/root/child"");
				assertEquals(child, result);
		}
		
		/**
		* Test case 6 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 6 tests the case that the path is valid.
		* <p>
		* Expected result: <code>XmlElement</code>
		*/
		@Test
		void testGetElement_6() {
				XmlElement element = new XmlElement(""root"");
				XmlElement child = new XmlElement(""child"");
				element.addSubElement(child);
				XmlElement result = element.getElement(""/root/./child"");
				assertEquals(child, result);
		}
		
		/**
		* Test case 7 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 7 tests the case that the path is valid.
		* <p>
		* Expected result: <code>XmlElement</code>
		*/
		@Test
		void testGetElement_7() {
				XmlElement element = new XmlElement(""root"");
				XmlElement child = new XmlElement(""child"");
				element.addSubElement(child);
				XmlElement result = element.getElement(""/root/child/"");
				assertEquals(child, result);
		}
		
		/**
		* Test case 8 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 8 tests the case that the path is valid.
		* <p>
		* Expected result: <code>XmlElement</code>
		*/
		@Test
		void testGetElement_8() {
				XmlElement element = new XmlElement(""root"");
				XmlElement child = new XmlElement(""child"");
				element.addSubElement(child);
				XmlElement result = element.getElement(""/root/child/."");
				assertEquals(child, result);
		}
		
		/**
		* Test case 9 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 9 tests the case that the path is valid.
		* <p>
		* Expected result: <code>XmlElement</code>
		*/
		@Test
		void testGetElement_9() {
				XmlElement element = new XmlElement(""root"");
				XmlElement child = new XmlElement(""child"");
				element.addSubElement(child);
				XmlElement result = element.getElement(""/root/child/.."");
				assertEquals(element, result);
		}
		
		/**
		* Test case 10 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 10 tests the case that the path is valid.
		* <p>
		* Expected result: <code>XmlElement</code>
		*/
		@Test
		void testGetElement_10() {
				XmlElement element = new XmlElement(""root"");
				XmlElement child = new XmlElement(""child"");
				element.addSubElement(child);
				XmlElement result = element.getElement(""/root/child/../child"");
				assertEquals(child, result);
		}
}
//END public class XmlElement_7Test

// XmlElement_8Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains ten unit test cases for the {@link XmlElement#getElement(String)} method.
*/
class XmlElement_8Test {
		
		/**
		* Test case 1 for {@link XmlElement#getElement(String)} method.
		* <p>
		* Test case 1 tests the case that the path is null.
		* <p>
		* Expected result: <code>null</code>
		*/
		@Test
		void testGetElement_1() {
				XmlElement element = new XmlElement(""root"");
				XmlElement result = element.getElement(null);
				assertNull(result"
cmpl-6wQxAskQJy3WzDJOJWtbnDyE5FcAL,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_9Test.java,53.68938970565796,length,"// XmlElement.java
/*
 * @(#)XmlElement.java
 * Created on 2005-8-12
 */
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;

/**
 * The XmlElement is a generic containment class for elements within an XML
 * file.
 * <p>
 *
 * It extends Observable which should be used for gui elements which are
 * interested in configuration changes.
 * <p>
 *
 * Show interested in:
 *
 * <pre>
 * xmlElement.addObserver(yourObserver);
 * </pre>
 *
 * <p>
 * When making bigger changes on XmlElement and probably its subnodes and/or a
 * greater number of attributes at once, you should just change XmlElement
 * directly and manually notify the Observers by calling:
 * <p>
 *
 * <pre>
 * xmlElement.setChanged();
 * xmlElement.notifyObservers();
 * </pre>
 *
 * <p>
 * There a good introduction for the Observable/Observer pattern in
 * Model/View/Controller based applications at www.javaworld.com: -
 * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}
 *
 * @author fdietz
 */
public class XmlElement extends Observable implements Cloneable {

    String name;

    String data;

    Hashtable<String, String> attributes;

    List<XmlElement> subElements;

    XmlElement parent;

    /**
     * Constructor
     */
    public XmlElement() {
        subElements = new Vector<XmlElement>();
        this.attributes = new Hashtable<String, String>(10);
    }

    /**
     * **
     *
     * Constructor
     *
     * @param String
     *            Name
     */
    public XmlElement(String name) {
        this.name = name;
        this.attributes = new Hashtable<String, String>(10);
        subElements = new Vector<XmlElement>();
        data = """";
    }

    /**
     * **
     *
     * Constructor
     *
     * @param String
     *            Name
     * @param Hashtable
     *            Attributes
     */
    public XmlElement(String name, Hashtable<String, String> attributes) {
        this.name = name;
        this.attributes = attributes;
        subElements = new Vector<XmlElement>();
    }

    /**
     * **
     *
     * Constructor
     *
     * @param Name
     *            String
     * @param Data
     *            String
     */
    public XmlElement(String name, String data) {
        this.name = name;
        this.data = data;
        subElements = new Vector<XmlElement>();
        this.attributes = new Hashtable<String, String>(10);
    }

    /**
     * Add attribute to this xml element.
     *
     * @param name
     *            name of key
     * @param value
     *            new attribute value
     * @return old attribute value
     */
    public Object addAttribute(String name, String value) {
        if ((value != null) && (name != null)) {
            Object returnValue = attributes.put(name, value);
            return returnValue;
        }
        return null;
    }

    /**
     * **
     *
     * @return String
     * @param String
     *            Name
     */
    public String getAttribute(String name) {
        return ((String) attributes.get(name));
    }

    public String getAttribute(String name, String defaultValue) {
        if (getAttribute(name) == null) {
            addAttribute(name, defaultValue);
        }
        return getAttribute(name);
    }

    /**
     * **
     *
     * @return String
     * @param String
     *            Name
     */
    public Hashtable<String, String> getAttributes() {
        return attributes;
    }

    /**
     * **
     *
     * @param Attrs
     *            Hashtable to use as the attributes
     */
    public void setAttributes(Hashtable<String, String> attrs) {
        attributes = attrs;
    }

    /**
     * **
     *
     * @return Enumeration
     */
    public Enumeration getAttributeNames() {
        return (attributes.keys());
    }

    /**
     * **
     *
     * @return boolean
     * @param XmlElement
     *            E
     */
    public boolean addElement(XmlElement e) {
        e.setParent(this);
        return (subElements.add(e));
    }

    public XmlElement removeElement(XmlElement e) {
        XmlElement child = null;
        for (int i = 0; i < subElements.size(); i++) {
            child = (XmlElement) subElements.get(i);
            // FIXME -- This will most likely not work.
            //          You want the element removed if the contents are the same
            //          Not just if the element reference is the same.
            if (child == e) {
                subElements.remove(i);
            }
        }
        return (child);
    }

    public XmlElement removeElement(int index) {
        return (XmlElement) subElements.remove(index);
    }

    public void removeAllElements() {
        subElements.clear();
    }

    /**
     * convienience method for the TreeView
     *
     * this method is modeled after the DefaultMutableTreeNode-class
     *
     * DefaultMutableTreeNode wraps XmlElement for this purpose
     */
    public void removeFromParent() {
        if (parent == null) {
            return;
        }
        parent.removeElement(this);
        parent = null;
    }

    public void append(XmlElement e) {
        e.removeFromParent();
        addElement(e);
    }

    /**
     * convienience method for the TreeView
     *
     * @param e
     * @param index
     */
    public void insertElement(XmlElement e, int index) {
        e.removeFromParent();
        subElements.add(index, e);
        e.setParent(this);
    }

    /**
     * **
     *
     * @return Vector
     */
    public List getElements() {
        return subElements;
    }

    public int count() {
        return subElements.size();
    }

    /**
     * Returns the element whose hierachy is indicated
     * by <code>path</code>. The path is separated with
     * periods(""."").<br>
     * <em>Note: if one node has more than one elements
     * that have the same name, that is, if its subnodes
     * have the same path, only the first one is returned.
     * </em>
     * @return the first element qualified with the path
     * @param path the path string of the specified element
     */
    public XmlElement getElement(String path) {
        int i = path.indexOf('.');
        String topName;
        String subName;
        if (i == 0) {
            path = path.substring(1);
            i = path.indexOf('.');
        }
        if (i > 0) {
            topName = path.substring(0, i);
            subName = path.substring(i + 1);
        } else {
            topName = path;
            subName = null;
        }
        int j;
        for (j = 0; j < subElements.size(); j++) {
            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {
                if (subName != null) {
                    return (((XmlElement) subElements.get(j)).getElement(subName));
                } else {
                    return ((XmlElement) subElements.get(j));
                }
            }
        }
        return null;
    }

    public XmlElement getElement(int index) {
        return (XmlElement) subElements.get(index);
    }

    /**
     * Adds a sub element to this one. The path
     * is separated with dots(""."").
     *
     * @return the <code>XmlElement</code> added
     * @param path The subpath of the sub element to add
     */
    public XmlElement addSubElement(String path) {
        XmlElement parent = this;
        XmlElement child;
        String name;
        while (path.indexOf('.') != -1) {
            name = path.substring(0, path.indexOf('.'));
            path = path.substring(path.indexOf('.') + 1);
            // if path startsWith ""/"" -> skip
            if (name.length() == 0)
                continue;
            if (parent.getElement(name) != null) {
                parent = parent.getElement(name);
            } else {
                child = new XmlElement(name);
                parent.addElement(child);
                parent = child;
            }
        }
        child = new XmlElement(path);
        parent.addElement(child);
        return child;
    }

    /**
     * Adds a sub element to this one
     *
     * @return XmlElement
     * @param element
     *            The XmlElement to add
     */
    public XmlElement addSubElement(XmlElement e) {
        e.setParent(this);
        subElements.add(e);
        return e;
    }

    /**
     * Adds a sub element to this one
     *
     * @return XmlElement
     * @param Name
     *            The name of the sub element to add
     * @param Data
     *            String Data for this element
     */
    public XmlElement addSubElement(String name, String data) {
        XmlElement e = new XmlElement(name);
        e.setData(data);
        e.setParent(this);
        subElements.add(e);
        return e;
    }

    /**
     * Sets the parent element
     *
     * @param Parent
     *            The XmlElement that contains this one
     */
    public void setParent(XmlElement parent) {
        this.parent = parent;
    }

    /**
     * Gives the XmlElement containing the current element
     *
     * @return XmlElement
     */
    public XmlElement getParent() {
        return parent;
    }

    /**
     * Sets the data for this element
     *
     * @param D
     *            The String representation of the data
     */
    public void setData(String d) {
        data = d;
    }

    /**
     * Returns the data associated with the current Xml element
     *
     * @return String
     */
    public String getData() {
        return data;
    }

    /**
     * Returns the name of the current Xml element
     *
     * @return String
     */
    public String getName() {
        return name;
    }

    /**
     * **
     *
     * @param out
     *            OutputStream to print the data to
     */
    /*
     * public void write(OutputStream out) throws IOException { PrintWriter PW =
     * new PrintWriter(out); PW.println("" <?xml version=\""1.0\""
     * encoding=\""UTF-8\""?>""); if (SubElements.size() > 0) { for (int i = 0; i <
     * SubElements.size(); i++) { ((XmlElement)
     * SubElements.get(i))._writeSubNode(PW, 4); } } PW.flush(); }
     */
    /**
     * Prints sub nodes to the given data stream
     *
     * @param out
     *            PrintWriter to use for printing
     * @param indent
     *            Number of spaces to indent things
     */
    /*
     * private void _writeSubNode(PrintWriter out, int indent) throws
     * IOException { _writeSpace(out, indent); out.print("" <"" + Name); //if (
     * Attributes.size()>1) out.print("" "");
     * 
     * for (Enumeration e = Attributes.keys(); e.hasMoreElements();) { String K =
     * (String) e.nextElement(); out.print(K + ""=\"""" + Attributes.get(K) + ""\""
     * b"");
     *  } out.print("">"");
     * 
     * if (Data != null && !Data.equals("""")) { if (Data.length() > 20) {
     * out.println(""""); _writeSpace(out, indent + 2); } out.print(Data); } if
     * (SubElements.size() > 0) { out.println(""""); for (int i = 0; i <
     * SubElements.size(); i++) { ((XmlElement)
     * SubElements.get(i))._writeSubNode( out, indent + 4); } _writeSpace(out,
     * indent); } out.println("" </"" + Name + "">"");
     *  }
     */
    /**
     * Prints out a given number of spaces
     *
     * @param out
     *            PrintWriter to use for printing
     * @param numSpaces
     *            Number of spaces to print
     */
    /*
     * private void _writeSpace(PrintWriter out, int numSpaces) throws
     * IOException {
     * 
     * for (int i = 0; i < numSpaces; i++) out.print("" ""); }
     * 
     * public static void printNode(XmlElement Node, String indent) { String
     * Data = Node.getData(); if (Data == null || Data.equals("""")) {
     * System.out.println(indent + Node.getName()); } else {
     * System.out.println(indent + Node.getName() + "" = '"" + Data + ""'""); }
     * Vector Subs = Node.getElements(); int i, j; for (i = 0; i < Subs.size();
     * i++) { printNode((XmlElement) Subs.get(i), indent + "" ""); } }
     */
    public static void printNode(XmlElement node, String indent) {
        String data = node.getData();
        if ((data == null) || data.equals("""")) {
            System.out.println(indent + node.getName());
        } else {
            System.out.println(indent + node.getName() + "" = '"" + data + ""'"");
        }
        // print attributes
        for (Enumeration enumeration = node.getAttributes().keys(); enumeration.hasMoreElements(); ) {
            String key = (String) enumeration.nextElement();
            String value = node.getAttribute(key);
            System.out.println(indent + key + "":"" + value);
        }
        List subs = node.getElements();
        for (Iterator it = subs.iterator(); it.hasNext(); ) {
            printNode((XmlElement) it.next(), indent + ""    "");
            // for (i = 0; i < subs.size(); i++) {
            // printNode((XmlElement) subs.get(i), indent + "" "");
        }
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    @Override
    public Object clone() {
        try {
            // creates a shallow
            XmlElement clone = (XmlElement) super.clone();
            // copy of this
            // object
            if (attributes != null) {
                clone.setAttributes((Hashtable<String, String>) getAttributes().clone());
            }
            if (subElements != null) {
                clone.subElements = new Vector();
                List childs = getElements();
                XmlElement child;
                for (Iterator it = childs.iterator(); it.hasNext(); ) {
                    child = (XmlElement) it.next();
                    // for( int i=0; i<childs.size(); i++ ) {
                    // child = (XmlElement) childs.get(i);
                    clone.addSubElement((XmlElement) child.clone());
                }
            }
            return clone;
        } catch (CloneNotSupportedException cnse) {
            throw new InternalError(""Could not clone XmlElement: "" + cnse);
        }
    }

    /**
     * Sets the name.
     *
     * @param name
     *            The name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Notify all Observers.
     *
     * @see java.util.Observable#notifyObservers()
     */
    @Override
    public void notifyObservers() {
        setChanged();
        super.notifyObservers();
    }

    /**
     * Returns true if the specified objects are equal. They are equal if they
     * are both null OR if the <code>equals()</code> method return true. (
     * <code>obj1.equals(obj2)</code>).
     *
     * @param obj1
     *            first object to compare with.
     * @param obj2
     *            second object to compare with.
     * @return true if they represent the same object; false if one of them is
     *         null or the <code>equals()</code> method returns false.
     */
    private boolean equals(Object obj1, Object obj2) {
        boolean equal = false;
        if ((obj1 == null) && (obj2 == null)) {
            equal = true;
        } else if ((obj1 != null) && (obj2 != null)) {
            equal = obj1.equals(obj2);
        }
        return equal;
    }

    /**
     *  {@inheritDoc}
     * Recursive comparison.
     */
    @Override
    public boolean equals(Object obj) {
        boolean equal = false;
        if ((obj != null) && (obj instanceof XmlElement)) {
            XmlElement other = (XmlElement) obj;
            if (equals(attributes, other.attributes) && equals(data, other.data) && equals(name, other.name) && equals(subElements, other.subElements)) {
                equal = true;
            }
        }
        return equal;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        //Hashcode value should be buffered.
        int hashCode = 23;
        if (attributes != null) {
            hashCode += (attributes.hashCode() * 13);
        }
        if (data != null) {
            hashCode += (data.hashCode() * 17);
        }
        if (name != null) {
            hashCode += (name.hashCode() * 29);
        }
        if (subElements != null) {
            hashCode += (subElements.hashCode() * 57);
        }
        return hashCode;
    }
}
//END public class XmlElement
","// XmlElement_9Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains ten unit test cases for the {@link XmlElement#addSubElement(String)} method.
*/
class XmlElement_9Test {","// XmlElement_9Test.java
package com.allenstudio.ir.util;

import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlElement}.
* It contains ten unit test cases for the {@link XmlElement#addSubElement(String)} method.
*/
class XmlElement_9Test {

		/**
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement(String)} method.
		* Test case 1 for {@link XmlElement#addSubElement"
cmpl-6wQyDn55oThzAp7nGSUETFOHx6L7G,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_1Test.java,55.13977289199829,length,"// XmlIO.java
/*
 * @(#)XmlIO.java
 * Created on 2005-8-12
 */
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * XML IO reading and writing utility.
 *
 * @author fdietz
 */
public class XmlIO extends DefaultHandler {

    private static final Logger LOG = Logger.getLogger(""org.columba.core.xml"");

    private static final String ROOT_XML_ELEMENT_NAME = ""__INSPIRENTO_XML_TREE_TOP__"";

    // List of sub-elements
    @SuppressWarnings(""unused"")
    private List<XmlElement> elements;

    // Top level element (Used to hold everything else)
    private XmlElement rootElement;

    // The current element you are working on
    private XmlElement currentElement;

    // For writing out the data
    // Indent for each level
    private int writeIndent = 2;

    // Maximum data to put on a ""one liner""
    private int maxOneLineData = 20;

    // The SAX 2 parser...
    @SuppressWarnings(""unused"")
    private XMLReader xr;

    // Buffer for collecting data from
    // the ""characters"" SAX event.
    private CharArrayWriter contents = new CharArrayWriter();

    private URL url = null;

    /*
  // Default constructor
  public XmlIO() {
  }
  */
    /*
  // setup and load constructor
  public XmlIO(String FilePath) {
          currentElement = null;


  }
  */
    public XmlIO(URL url) {
        super();
        this.url = url;
    }

    // setup and load constructor
    public XmlIO() {
        currentElement = null;
    }

    // setup and load constructor
    /**
     * Creates a XmlIO object with the specified element at the top.
     * @param element the element at the top.
     */
    public XmlIO(XmlElement element) {
        rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        rootElement.addElement(element);
    }

    public void setURL(URL url) {
        this.url = url;
    }

    public boolean load() {
        //this.file = F;
        return load(url);
    }

    // Load a file. This is what starts things off.
    /**
     * Loads from the InputStream into the root Xml Element.
     * @param input the input stream to load from.
     */
    public boolean load(InputStream input) {
        elements = new Vector<XmlElement>();
        rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        currentElement = rootElement;
        try {
            // Create the XML reader...
            //      xr = XMLReaderFactory.createXMLReader();
            SAXParserFactory factory = SAXParserFactory.newInstance();
            // Set the ContentHandler...
            //      xr.setContentHandler( this );
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse(input, this);
        } catch (javax.xml.parsers.ParserConfigurationException ex) {
            LOG.severe(""XML config error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (SAXException ex) {
            // Error
            LOG.severe(""XML parse error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (IOException ex) {
            LOG.severe(""I/O error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        }
        //XmlElement.printNode( getRoot(), """");
        return (true);
    }

    /**
     * Load a file. This is what starts things off.
     * @param inputURL the URL to load XML from.
     */
    public boolean load(URL inputURL) {
        elements = new Vector<XmlElement>();
        rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        currentElement = rootElement;
        try {
            // Create the XML reader...
            //      xr = XMLReaderFactory.createXMLReader();
            SAXParserFactory factory = SAXParserFactory.newInstance();
            // Set the ContentHandler...
            //      xr.setContentHandler( this );
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse(inputURL.toString(), this);
        } catch (javax.xml.parsers.ParserConfigurationException ex) {
            LOG.severe(""XML config error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (SAXException ex) {
            // Error
            LOG.severe(""XML parse error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (IOException ex) {
            LOG.severe(""I/O error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        }
        //XmlElement.printNode( getRoot(), """");
        return (true);
    }

    // Implement the content hander methods that
    // will delegate SAX events to the tag tracker network.
    @Override
    public void startElement(String namespaceURI, String localName, String qName, Attributes attrs) throws SAXException {
        // Resetting contents buffer.
        // Assuming that tags either tag content or children, not both.
        // This is usually the case with XML that is representing
        // data strucutures in a programming language independant way.
        // This assumption is not typically valid where XML is being
        // used in the classical text mark up style where tagging
        // is used to style content and several styles may overlap
        // at once.
        try {
            contents.reset();
            // element name
            String name = localName;
            if (name.equals("""")) {
                // namespaceAware = false
                name = qName;
            }
            XmlElement p = currentElement;
            currentElement = currentElement.addSubElement(name);
            currentElement.setParent(p);
            if (attrs != null) {
                for (int i = 0; i < attrs.getLength(); i++) {
                    // Attr name
                    String aName = attrs.getLocalName(i);
                    if (aName.equals("""")) {
                        aName = attrs.getQName(i);
                    }
                    currentElement.addAttribute(aName, attrs.getValue(i));
                }
            }
        } catch (java.lang.NullPointerException ex) {
            LOG.severe(""Null!!!"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
        }
    }

    @Override
    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
        currentElement.setData(contents.toString().trim());
        contents.reset();
        currentElement = currentElement.getParent();
    }

    @Override
    public void characters(char[] ch, int start, int length) throws SAXException {
        // accumulate the contents into a buffer.
        contents.write(ch, start, length);
    }

    /**
     * Returns the root for the XmlElement hiearchy.
     * Note that this Xml Element will always have the name <code>__COLUMBA_XML_TREE_TOP__</code>.
     * <p>
     * Methods that want to retrieve elements from this root should use
     * the {@link XmlElement#getElement(String)} in order to get the wanted
     * element.
     * @return a XmlElement if it has been loaded or initialized with it; null otherwise.
     */
    public XmlElement getRoot() {
        return (rootElement);
    }

    public void errorDialog(String Msg) {
        JOptionPane.showMessageDialog(null, ""Error: "" + Msg);
    }

    public void warningDialog(String Msg) {
        JOptionPane.showMessageDialog(null, ""Warning: "" + Msg);
    }

    public void infoDialog(String Msg) {
        JOptionPane.showMessageDialog(null, ""Info: "" + Msg);
    }

    public void save() throws Exception {
        write(new FileOutputStream(url.getPath()));
    }

    //
    // Writer interface
    //
    public void write(OutputStream out) throws IOException {
        BufferedWriter PW = new BufferedWriter(new OutputStreamWriter(out, ""UTF-8""));
        PW.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"");
        if (rootElement.subElements.size() > 0) {
            for (int i = 0; i < rootElement.subElements.size(); i++) {
                _writeSubNode(PW, (XmlElement) rootElement.subElements.get(i), 0);
            }
        }
        PW.flush();
    }

    private void _writeSubNode(Writer out, XmlElement element, int indent) throws IOException {
        _writeSpace(out, indent);
        out.write(""<"");
        out.write(element.getName());
        for (Enumeration e = element.getAttributeNames(); e.hasMoreElements(); ) {
            String K = (String) e.nextElement();
            out.write("" "" + K + ""=\"""" + InspirentoUtilities.escapeText(element.getAttribute(K)) + ""\"""");
        }
        out.write("">"");
        String data = element.getData();
        if ((data != null) && !data.equals("""")) {
            if (data.length() > maxOneLineData) {
                out.write(""\n"");
                _writeSpace(out, indent + writeIndent);
            }
            out.write(InspirentoUtilities.escapeText(data));
        }
        List subElements = element.getElements();
        if (subElements.size() > 0) {
            out.write(""\n"");
            for (Iterator it = subElements.iterator(); it.hasNext(); ) {
                _writeSubNode(out, (XmlElement) it.next(), indent + writeIndent);
                // for (int i = 0; i < subElements.size(); i++) {
                // _writeSubNode(
                // out,
                // (XmlElement) subElements.get(i),
                // indent + writeIndent);
            }
            _writeSpace(out, indent);
        }
        if (data.length() > maxOneLineData) {
            out.write(""\n"");
            _writeSpace(out, indent);
        }
        out.write(""</"" + InspirentoUtilities.escapeText(element.getName()) + "">\n"");
    }

    private void _writeSpace(Writer out, int numSpaces) throws IOException {
        for (int i = 0; i < numSpaces; i++) {
            out.write("" "");
        }
    }
}
//End class XmlIO
","// XmlIO_1Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains ten unit test cases for the {@link XmlIO#load(InputStream)} method.
*/
class XmlIO_1Test {","// XmlIO_1Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains ten unit test cases for the {@link XmlIO#load(InputStream)} method.
*/
class XmlIO_1Test {

		/**
		* Test case 1 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the input stream is null.
		*/
		@Test
		void testLoad_1() {
				XmlIO fixture = new XmlIO();
				InputStream input = null;
				boolean result = fixture.load(input);
				assertFalse(result);
		}
		
		/**
		* Test case 2 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the input stream is empty.
		*/
		@Test
		void testLoad_2() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream() {
						@Override
						public int read() throws IOException {
								return -1;
						}
				};
				boolean result = fixture.load(input);
				assertFalse(result);
		}
		
		/**
		* Test case 3 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the input stream is not empty but the XML is not well-formed.
		*/
		@Test
		void testLoad_3() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream() {
						@Override
						public int read() throws IOException {
								return '<';
						}
				};
				boolean result = fixture.load(input);
				assertFalse(result);
		}
		
		/**
		* Test case 4 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the input stream is not empty and the XML is well-formed but the root element is not <code>__INSPIRENTO_XML_TREE_TOP__</code>.
		*/
		@Test
		void testLoad_4() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream() {
						@Override
						public int read() throws IOException {
								return '<';
						}
				};
				boolean result = fixture.load(input);
				assertFalse(result);
		}
		
		/**
		* Test case 5 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the input stream is not empty and the XML is well-formed and the root element is <code>__INSPIRENTO_XML_TREE_TOP__</code> but the XML is not valid.
		*/
		@Test
		void testLoad_5() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream() {
						@Override
						public int read() throws IOException {
								return '<';
						}
				};
				boolean result = fixture.load(input);
				assertFalse(result);
		}
		
		/**
		* Test case 6 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the input stream is not empty and the XML is well-formed and the root element is <code>__INSPIRENTO_XML_TREE_TOP__</code> and the XML is valid but the root element has no sub-elements.
		*/
		@Test
		void testLoad_6() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream() {
						@Override
						public int read() throws IOException {
								return '<';
						}
				};
				boolean result = fixture.load(input);
				assertFalse(result);
		}
		
		/**
		* Test case 7 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the input stream is not empty and the XML is well-formed and the root element is <code>__INSPIRENTO_XML_TREE_TOP__</code> and the XML is valid and the root element has one sub-element but the sub-element has no sub-elements.
		*/
		@Test
		void testLoad_7() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream() {
						@Override
						public int read() throws IOException {
								return '<';
						}
				};
				boolean result = fixture.load(input);
				assertFalse(result);
		}
		
		/**
		* Test case 8 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the input stream is not empty and the XML is well-formed and the root element is <code>__INSPIRENTO_XML_TREE_TOP__</code> and the XML is valid and the root element has one sub-element and the sub-element has one sub-element but the sub-element has no sub-elements.
		*/
		@Test
		void testLoad_8() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream() {
						@Override
						public int read() throws IOException {
								return '<';
						}
				};
				boolean result = fixture.load(input);
				assertFalse(result);
		}
		
		/**
		* Test case 9 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the input stream is not empty and the XML is well-formed and the root element is <code>__INSPIRENTO_XML_TREE_TOP__</code> and the XML is valid and the root element has one sub-element and the sub-element has one sub-element and the sub-element has one sub-element but the sub-element has no sub-elements.
		*/
		@Test
		void testLoad_9() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream() {
						@Override
						public int read() throws IOException {
								return '<';
						}
				};
				boolean result = fixture.load(input);
				assertFalse(result);
		}
		
		/**
		* Test case 10 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the input stream is not empty and the XML is well-formed and the root element is <code>__INSPIRENTO_XML_TREE_TOP__</code> and the XML is valid and the root element has one sub-element and the sub-element has one sub-element and the sub-element has one sub-element and the sub-element has one sub-element.
		*/
		@Test
		void testLoad_10() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream() {
						@Override
"
cmpl-6wQzGyHfvQl1tD0sCW1taUWIiYoux,/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_2Test.java,69.70949697494507,length,"// XmlIO.java
/*
 * @(#)XmlIO.java
 * Created on 2005-8-12
 */
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * XML IO reading and writing utility.
 *
 * @author fdietz
 */
public class XmlIO extends DefaultHandler {

    private static final Logger LOG = Logger.getLogger(""org.columba.core.xml"");

    private static final String ROOT_XML_ELEMENT_NAME = ""__INSPIRENTO_XML_TREE_TOP__"";

    // List of sub-elements
    @SuppressWarnings(""unused"")
    private List<XmlElement> elements;

    // Top level element (Used to hold everything else)
    private XmlElement rootElement;

    // The current element you are working on
    private XmlElement currentElement;

    // For writing out the data
    // Indent for each level
    private int writeIndent = 2;

    // Maximum data to put on a ""one liner""
    private int maxOneLineData = 20;

    // The SAX 2 parser...
    @SuppressWarnings(""unused"")
    private XMLReader xr;

    // Buffer for collecting data from
    // the ""characters"" SAX event.
    private CharArrayWriter contents = new CharArrayWriter();

    private URL url = null;

    /*
  // Default constructor
  public XmlIO() {
  }
  */
    /*
  // setup and load constructor
  public XmlIO(String FilePath) {
          currentElement = null;


  }
  */
    public XmlIO(URL url) {
        super();
        this.url = url;
    }

    // setup and load constructor
    public XmlIO() {
        currentElement = null;
    }

    // setup and load constructor
    /**
     * Creates a XmlIO object with the specified element at the top.
     * @param element the element at the top.
     */
    public XmlIO(XmlElement element) {
        rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        rootElement.addElement(element);
    }

    public void setURL(URL url) {
        this.url = url;
    }

    public boolean load() {
        //this.file = F;
        return load(url);
    }

    // Load a file. This is what starts things off.
    /**
     * Loads from the InputStream into the root Xml Element.
     * @param input the input stream to load from.
     */
    public boolean load(InputStream input) {
        elements = new Vector<XmlElement>();
        rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        currentElement = rootElement;
        try {
            // Create the XML reader...
            //      xr = XMLReaderFactory.createXMLReader();
            SAXParserFactory factory = SAXParserFactory.newInstance();
            // Set the ContentHandler...
            //      xr.setContentHandler( this );
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse(input, this);
        } catch (javax.xml.parsers.ParserConfigurationException ex) {
            LOG.severe(""XML config error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (SAXException ex) {
            // Error
            LOG.severe(""XML parse error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (IOException ex) {
            LOG.severe(""I/O error while attempting to read from the input stream \n'"" + input + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        }
        //XmlElement.printNode( getRoot(), """");
        return (true);
    }

    /**
     * Load a file. This is what starts things off.
     * @param inputURL the URL to load XML from.
     */
    public boolean load(URL inputURL) {
        elements = new Vector<XmlElement>();
        rootElement = new XmlElement(ROOT_XML_ELEMENT_NAME);
        currentElement = rootElement;
        try {
            // Create the XML reader...
            //      xr = XMLReaderFactory.createXMLReader();
            SAXParserFactory factory = SAXParserFactory.newInstance();
            // Set the ContentHandler...
            //      xr.setContentHandler( this );
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse(inputURL.toString(), this);
        } catch (javax.xml.parsers.ParserConfigurationException ex) {
            LOG.severe(""XML config error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (SAXException ex) {
            // Error
            LOG.severe(""XML parse error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        } catch (IOException ex) {
            LOG.severe(""I/O error while attempting to read XML file \n'"" + inputURL + ""'"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
            return (false);
        }
        //XmlElement.printNode( getRoot(), """");
        return (true);
    }

    // Implement the content hander methods that
    // will delegate SAX events to the tag tracker network.
    @Override
    public void startElement(String namespaceURI, String localName, String qName, Attributes attrs) throws SAXException {
        // Resetting contents buffer.
        // Assuming that tags either tag content or children, not both.
        // This is usually the case with XML that is representing
        // data strucutures in a programming language independant way.
        // This assumption is not typically valid where XML is being
        // used in the classical text mark up style where tagging
        // is used to style content and several styles may overlap
        // at once.
        try {
            contents.reset();
            // element name
            String name = localName;
            if (name.equals("""")) {
                // namespaceAware = false
                name = qName;
            }
            XmlElement p = currentElement;
            currentElement = currentElement.addSubElement(name);
            currentElement.setParent(p);
            if (attrs != null) {
                for (int i = 0; i < attrs.getLength(); i++) {
                    // Attr name
                    String aName = attrs.getLocalName(i);
                    if (aName.equals("""")) {
                        aName = attrs.getQName(i);
                    }
                    currentElement.addAttribute(aName, attrs.getValue(i));
                }
            }
        } catch (java.lang.NullPointerException ex) {
            LOG.severe(""Null!!!"");
            LOG.severe(ex.toString());
            ex.printStackTrace();
        }
    }

    @Override
    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
        currentElement.setData(contents.toString().trim());
        contents.reset();
        currentElement = currentElement.getParent();
    }

    @Override
    public void characters(char[] ch, int start, int length) throws SAXException {
        // accumulate the contents into a buffer.
        contents.write(ch, start, length);
    }

    /**
     * Returns the root for the XmlElement hiearchy.
     * Note that this Xml Element will always have the name <code>__COLUMBA_XML_TREE_TOP__</code>.
     * <p>
     * Methods that want to retrieve elements from this root should use
     * the {@link XmlElement#getElement(String)} in order to get the wanted
     * element.
     * @return a XmlElement if it has been loaded or initialized with it; null otherwise.
     */
    public XmlElement getRoot() {
        return (rootElement);
    }

    public void errorDialog(String Msg) {
        JOptionPane.showMessageDialog(null, ""Error: "" + Msg);
    }

    public void warningDialog(String Msg) {
        JOptionPane.showMessageDialog(null, ""Warning: "" + Msg);
    }

    public void infoDialog(String Msg) {
        JOptionPane.showMessageDialog(null, ""Info: "" + Msg);
    }

    public void save() throws Exception {
        write(new FileOutputStream(url.getPath()));
    }

    //
    // Writer interface
    //
    public void write(OutputStream out) throws IOException {
        BufferedWriter PW = new BufferedWriter(new OutputStreamWriter(out, ""UTF-8""));
        PW.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"");
        if (rootElement.subElements.size() > 0) {
            for (int i = 0; i < rootElement.subElements.size(); i++) {
                _writeSubNode(PW, (XmlElement) rootElement.subElements.get(i), 0);
            }
        }
        PW.flush();
    }

    private void _writeSubNode(Writer out, XmlElement element, int indent) throws IOException {
        _writeSpace(out, indent);
        out.write(""<"");
        out.write(element.getName());
        for (Enumeration e = element.getAttributeNames(); e.hasMoreElements(); ) {
            String K = (String) e.nextElement();
            out.write("" "" + K + ""=\"""" + InspirentoUtilities.escapeText(element.getAttribute(K)) + ""\"""");
        }
        out.write("">"");
        String data = element.getData();
        if ((data != null) && !data.equals("""")) {
            if (data.length() > maxOneLineData) {
                out.write(""\n"");
                _writeSpace(out, indent + writeIndent);
            }
            out.write(InspirentoUtilities.escapeText(data));
        }
        List subElements = element.getElements();
        if (subElements.size() > 0) {
            out.write(""\n"");
            for (Iterator it = subElements.iterator(); it.hasNext(); ) {
                _writeSubNode(out, (XmlElement) it.next(), indent + writeIndent);
                // for (int i = 0; i < subElements.size(); i++) {
                // _writeSubNode(
                // out,
                // (XmlElement) subElements.get(i),
                // indent + writeIndent);
            }
            _writeSpace(out, indent);
        }
        if (data.length() > maxOneLineData) {
            out.write(""\n"");
            _writeSpace(out, indent);
        }
        out.write(""</"" + InspirentoUtilities.escapeText(element.getName()) + "">\n"");
    }

    private void _writeSpace(Writer out, int numSpaces) throws IOException {
        for (int i = 0; i < numSpaces; i++) {
            out.write("" "");
        }
    }
}
//End class XmlIO
","// XmlIO_2Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains ten unit test cases for the {@link XmlIO#load(URL)} method.
*/
class XmlIO_2Test {","// XmlIO_2Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains ten unit test cases for the {@link XmlIO#load(URL)} method.
*/
class XmlIO_2Test {

		/**
		* Test case 1 for {@link XmlIO#load(URL)}.
		* It tests the case that the URL is null.
		*/
		@Test
		void testLoad_1() {
				XmlIO fixture = new XmlIO();
				URL inputURL = null;
				boolean result = fixture.load(inputURL);
				assertFalse(result);
		}
		
		/**
		* Test case 2 for {@link XmlIO#load(URL)}.
		* It tests the case that the URL is not null.
		*/
		@Test
		void testLoad_2() {
				XmlIO fixture = new XmlIO();
				URL inputURL = new URL(""http://www.google.com"");
				boolean result = fixture.load(inputURL);
				assertTrue(result);
		}
		
		/**
		* Test case 3 for {@link XmlIO#load(URL)}.
		* It tests the case that the URL is not null.
		*/
		@Test
		void testLoad_3() {
				XmlIO fixture = new XmlIO();
				URL inputURL = new URL(""http://www.google.com"");
				boolean result = fixture.load(inputURL);
				assertTrue(result);
		}
		
		/**
		* Test case 4 for {@link XmlIO#load(URL)}.
		* It tests the case that the URL is not null.
		*/
		@Test
		void testLoad_4() {
				XmlIO fixture = new XmlIO();
				URL inputURL = new URL(""http://www.google.com"");
				boolean result = fixture.load(inputURL);
				assertTrue(result);
		}
		
		/**
		* Test case 5 for {@link XmlIO#load(URL)}.
		* It tests the case that the URL is not null.
		*/
		@Test
		void testLoad_5() {
				XmlIO fixture = new XmlIO();
				URL inputURL = new URL(""http://www.google.com"");
				boolean result = fixture.load(inputURL);
				assertTrue(result);
		}
		
		/**
		* Test case 6 for {@link XmlIO#load(URL)}.
		* It tests the case that the URL is not null.
		*/
		@Test
		void testLoad_6() {
				XmlIO fixture = new XmlIO();
				URL inputURL = new URL(""http://www.google.com"");
				boolean result = fixture.load(inputURL);
				assertTrue(result);
		}
		
		/**
		* Test case 7 for {@link XmlIO#load(URL)}.
		* It tests the case that the URL is not null.
		*/
		@Test
		void testLoad_7() {
				XmlIO fixture = new XmlIO();
				URL inputURL = new URL(""http://www.google.com"");
				boolean result = fixture.load(inputURL);
				assertTrue(result);
		}
		
		/**
		* Test case 8 for {@link XmlIO#load(URL)}.
		* It tests the case that the URL is not null.
		*/
		@Test
		void testLoad_8() {
				XmlIO fixture = new XmlIO();
				URL inputURL = new URL(""http://www.google.com"");
				boolean result = fixture.load(inputURL);
				assertTrue(result);
		}
		
		/**
		* Test case 9 for {@link XmlIO#load(URL)}.
		* It tests the case that the URL is not null.
		*/
		@Test
		void testLoad_9() {
				XmlIO fixture = new XmlIO();
				URL inputURL = new URL(""http://www.google.com"");
				boolean result = fixture.load(inputURL);
				assertTrue(result);
		}
		
		/**
		* Test case 10 for {@link XmlIO#load(URL)}.
		* It tests the case that the URL is not null.
		*/
		@Test
		void testLoad_10() {
				XmlIO fixture = new XmlIO();
				URL inputURL = new URL(""http://www.google.com"");
				boolean result = fixture.load(inputURL);
				assertTrue(result);
		}
}
//End class XmlIO_2Test

// XmlIO_1Test.java
package com.allenstudio.ir.util;

import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlIO}.
* It contains ten unit test cases for the {@link XmlIO#load(InputStream)} method.
*/
class XmlIO_1Test {
		
		/**
		* Test case 1 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the InputStream is null.
		*/
		@Test
		void testLoad_1() {
				XmlIO fixture = new XmlIO();
				InputStream input = null;
				boolean result = fixture.load(input);
				assertFalse(result);
		}
		
		/**
		* Test case 2 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the InputStream is not null.
		*/
		@Test
		void testLoad_2() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream();
				boolean result = fixture.load(input);
				assertTrue(result);
		}
		
		/**
		* Test case 3 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the InputStream is not null.
		*/
		@Test
		void testLoad_3() {
				XmlIO fixture = new XmlIO();
				InputStream input = new InputStream();
				boolean result = fixture.load(input);
				assertTrue(result);
		}
		
		/**
		* Test case 4 for {@link XmlIO#load(InputStream)}.
		* It tests the case that the InputStream is not null.
		*/
	"
