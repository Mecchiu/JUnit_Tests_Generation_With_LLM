[
{
    "id": "chatcmpl-AGQRdlvebBkJfqreLVbMc8ZRU7yxR",
    "object": "chat.completion",
    "created": 1728478265,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testInitHSLbyRGB_Red() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 0);\n        assertEquals(0, color.getHue());\n        assertEquals(255, color.getSaturation());\n        assertEquals(128, color.getLuminence());\n    }\n\n    @Test\n    void testInitHSLbyRGB_Green() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 255, 0);\n        assertEquals(85, color.getHue());\n        assertEquals(255, color.getSaturation());\n        assertEquals(128, color.getLuminence());\n    }\n\n    @Test\n    void testInitHSLbyRGB_Blue() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 255);\n        assertEquals(170, color.getHue());\n        assertEquals(255, color.getSaturation());\n        assertEquals(128, color.getLuminence());\n    }\n\n    @Test\n    void testInitHSLbyRGB_White() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 255);\n        assertEquals(170, color.getHue());\n        assertEquals(0, color.getSaturation());\n        assertEquals(255, color.getLuminence());\n    }\n\n    @Test\n    void testInitHSLbyRGB_Black() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 0);\n        assertEquals(170, color.getHue());\n        assertEquals(0, color.getSaturation());\n        assertEquals(0, color.getLuminence());\n    }\n\n    @Test\n    void testInitHSLbyRGB_Gray() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 128, 128);\n        assertEquals(170, color.getHue());\n        assertEquals(0, color.getSaturation());\n        assertEquals(128, color.getLuminence());\n    }\n\n    @Test\n    void testInitHSLbyRGB_Yellow() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 0);\n        assertEquals(43, color.getHue());\n        assertEquals(255, color.getSaturation());\n        assertEquals(128, color.getLuminence());\n    }\n\n    @Test\n    void testInitHSLbyRGB_Cyan() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 255, 255);\n        assertEquals(128, color.getHue());\n        assertEquals(255, color.getSaturation());\n        assertEquals(128, color.getLuminence());\n    }\n\n    @Test\n    void testInitHSLbyRGB_Magenta() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 255);\n        assertEquals(213, color.getHue());\n        assertEquals(255, color.getSaturation());\n        assertEquals(128, color.getLuminence());\n    }\n\n    @Test\n    void testInitHSLbyRGB_Orange() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 165, 0);\n        assertEquals(28, color.getHue());\n        assertEquals(255, color.getSaturation());\n        assertEquals(128, color.getLuminence());\n    }\n}\n```\n\nThese test cases cover a variety of colors, including primary colors, secondary colors, and some common colors like white, black, and gray. They ensure that the `initHSLbyRGB` method correctly calculates the HSL values from given RGB values.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2039,
        "completion_tokens": 838,
        "total_tokens": 2877,
        "prompt_tokens_details": {
            "cached_tokens": 0
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 10.327211380004883,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_0Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_0Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#initHSLbyRGB(int, int, int)} method.\n*/\nclass HSLColor_0Test {"
}
,{
    "id": "chatcmpl-AGQSgQC3gLTs5PTxCQZ6nRD4Gkilo",
    "object": "chat.completion",
    "created": 1728478330,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testInitRGBbyHSL_Greyscale() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(0, 0, 128);\n        assertEquals(128, color.getRed());\n        assertEquals(128, color.getGreen());\n        assertEquals(128, color.getBlue());\n    }\n\n    @Test\n    void testInitRGBbyHSL_Red() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(0, 255, 128);\n        assertEquals(255, color.getRed());\n        assertEquals(0, color.getGreen());\n        assertEquals(0, color.getBlue());\n    }\n\n    @Test\n    void testInitRGBbyHSL_Green() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(85, 255, 128);\n        assertEquals(0, color.getRed());\n        assertEquals(255, color.getGreen());\n        assertEquals(0, color.getBlue());\n    }\n\n    @Test\n    void testInitRGBbyHSL_Blue() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(170, 255, 128);\n        assertEquals(0, color.getRed());\n        assertEquals(0, color.getGreen());\n        assertEquals(255, color.getBlue());\n    }\n\n    @Test\n    void testInitRGBbyHSL_Yellow() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(42, 255, 128);\n        assertEquals(255, color.getRed());\n        assertEquals(255, color.getGreen());\n        assertEquals(0, color.getBlue());\n    }\n\n    @Test\n    void testInitRGBbyHSL_Cyan() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(127, 255, 128);\n        assertEquals(0, color.getRed());\n        assertEquals(255, color.getGreen());\n        assertEquals(255, color.getBlue());\n    }\n\n    @Test\n    void testInitRGBbyHSL_Magenta() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(213, 255, 128);\n        assertEquals(255, color.getRed());\n        assertEquals(0, color.getGreen());\n        assertEquals(255, color.getBlue());\n    }\n\n    @Test\n    void testInitRGBbyHSL_LightnessZero() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(0, 255, 0);\n        assertEquals(0, color.getRed());\n        assertEquals(0, color.getGreen());\n        assertEquals(0, color.getBlue());\n    }\n\n    @Test\n    void testInitRGBbyHSL_LightnessFull() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(0, 255, 255);\n        assertEquals(255, color.getRed());\n        assertEquals(255, color.getGreen());\n        assertEquals(255, color.getBlue());\n    }\n\n    @Test\n    void testInitRGBbyHSL_SaturationZero() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(0, 0, 128);\n        assertEquals(128, color.getRed());\n        assertEquals(128, color.getGreen());\n        assertEquals(128, color.getBlue());\n    }\n}\n```\n\nThese test cases cover various scenarios for the `initRGBbyHSL` method, including greyscale, primary and secondary colors, and edge cases for lightness and saturation.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2039,
        "completion_tokens": 800,
        "total_tokens": 2839,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 9.206413745880127,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_1Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_1Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#initRGBbyHSL(int, int, int)} method.\n*/\nclass HSLColor_1Test {"
}
,{
    "id": "chatcmpl-AGQTjB4tRiRFatBRzhOEFRDmtKo8O",
    "object": "chat.completion",
    "created": 1728478395,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testGetHue_initialValue() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 0); // Red\n        assertEquals(0, color.getHue());\n    }\n\n    @Test\n    void testGetHue_afterSettingHue() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 0); // Red\n        color.setHue(85);\n        assertEquals(85, color.getHue());\n    }\n\n    @Test\n    void testGetHue_wrapAroundPositive() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 0); // Red\n        color.setHue(300);\n        color.setHue(300 + 255); // Wrap around\n        assertEquals(45, color.getHue());\n    }\n\n    @Test\n    void testGetHue_wrapAroundNegative() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 0); // Red\n        color.setHue(-30);\n        assertEquals(225, color.getHue());\n    }\n\n    @Test\n    void testGetHue_greyscale() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 128, 128); // Grey\n        assertEquals(170, color.getHue()); // UNDEFINED\n    }\n\n    @Test\n    void testGetHue_fullSaturation() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 255, 0); // Green\n        assertEquals(85, color.getHue());\n    }\n\n    @Test\n    void testGetHue_fullLightness() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 255); // White\n        assertEquals(170, color.getHue()); // UNDEFINED\n    }\n\n    @Test\n    void testGetHue_noLightness() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 0); // Black\n        assertEquals(170, color.getHue()); // UNDEFINED\n    }\n\n    @Test\n    void testGetHue_halfSaturation() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 255, 128); // Light Green\n        assertEquals(85, color.getHue());\n    }\n\n    @Test\n    void testGetHue_halfLightness() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 0, 0); // Dark Red\n        assertEquals(0, color.getHue());\n    }\n}\n```\n\nThis test class `HSLColor_2Test` contains ten unit test cases for the `getHue()` method of the `HSLColor` class. Each test case checks different scenarios, such as initial values, setting new values, handling wrap-around, and dealing with greyscale and extreme lightness/saturation values.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2030,
        "completion_tokens": 681,
        "total_tokens": 2711,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 7.2710230350494385,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_2Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_2Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getHue()} method.\n*/\nclass HSLColor_2Test {"
}
,{
    "id": "chatcmpl-AGQUmEPFTVyQuGg23Tcl5iEYPtcCK",
    "object": "chat.completion",
    "created": 1728478460,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testSetHueWithinRange() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int originalSaturation = color.getSaturation();\n        int originalLuminance = color.getLuminence();\n        \n        color.setHue(120);\n        assertEquals(120, color.getHue());\n        assertEquals(originalSaturation, color.getSaturation());\n        assertEquals(originalLuminance, color.getLuminence());\n    }\n\n    @Test\n    void testSetHueBelowZero() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int originalSaturation = color.getSaturation();\n        int originalLuminance = color.getLuminence();\n        \n        color.setHue(-10);\n        assertEquals(245, color.getHue()); // -10 + 255\n        assertEquals(originalSaturation, color.getSaturation());\n        assertEquals(originalLuminance, color.getLuminence());\n    }\n\n    @Test\n    void testSetHueAboveMax() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int originalSaturation = color.getSaturation();\n        int originalLuminance = color.getLuminence();\n        \n        color.setHue(300);\n        assertEquals(45, color.getHue()); // 300 - 255\n        assertEquals(originalSaturation, color.getSaturation());\n        assertEquals(originalLuminance, color.getLuminence());\n    }\n\n    @Test\n    void testSetHueAtZero() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int originalSaturation = color.getSaturation();\n        int originalLuminance = color.getLuminence();\n        \n        color.setHue(0);\n        assertEquals(0, color.getHue());\n        assertEquals(originalSaturation, color.getSaturation());\n        assertEquals(originalLuminance, color.getLuminence());\n    }\n\n    @Test\n    void testSetHueAtMax() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int originalSaturation = color.getSaturation();\n        int originalLuminance = color.getLuminence();\n        \n        color.setHue(255);\n        assertEquals(255, color.getHue());\n        assertEquals(originalSaturation, color.getSaturation());\n        assertEquals(originalLuminance, color.getLuminence());\n    }\n\n    @Test\n    void testSetHueWithGreyscale() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 128, 128); // Greyscale\n        int originalSaturation = color.getSaturation();\n        int originalLuminance = color.getLuminence();\n        \n        color.setHue(100);\n        assertEquals(100, color.getHue());\n        assertEquals(originalSaturation, color.getSaturation());\n        assertEquals(originalLuminance, color.getLuminence());\n    }\n\n    @Test\n    void testSetHueWithFullSaturation() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 0); // Full saturation\n        int originalSaturation = color.getSaturation();\n        int originalLuminance = color.getLuminence();\n        \n        color.setHue(180);\n        assertEquals(180, color.getHue());\n        assertEquals(originalSaturation, color.getSaturation());\n        assertEquals(originalLuminance, color.getLuminence());\n    }\n\n    @Test\n    void testSetHueWithFullLuminance() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 255); // Full luminance\n        int originalSaturation = color.getSaturation();\n        int originalLuminance = color.getLuminence();\n        \n        color.setHue(90);\n        assertEquals(90, color.getHue());\n        assertEquals(originalSaturation, color.getSaturation());\n        assertEquals(originalLuminance, color.getLuminence());\n    }\n\n    @Test\n    void testSetHueWithZeroSaturation() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 128, 128); // Zero saturation\n        int originalSaturation = color.getSaturation();\n        int originalLuminance = color.getLuminence();\n        \n        color.setHue(200);\n        assertEquals(200, color.getHue());\n        assertEquals(originalSaturation, color.getSaturation());\n        assertEquals(originalLuminance, color.getLuminence());\n    }\n\n    @Test\n    void testSetHueWithZeroLuminance() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 0); // Zero luminance\n        int originalSaturation = color.getSaturation();\n        int originalLuminance = color.getLuminence();\n        \n        color.setHue(150);\n        assertEquals(150, color.getHue());\n        assertEquals(originalSaturation, color.getSaturation());\n        assertEquals(originalLuminance, color.getLuminence());\n    }\n}\n```\n\nThese test cases cover various scenarios for the `setHue` method, including edge cases and typical use cases. They ensure that the hue is set correctly and that the saturation and luminance remain unchanged.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2031,
        "completion_tokens": 1195,
        "total_tokens": 3226,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 12.938257217407227,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_3Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_3Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#setHue(int)} method.\n*/\nclass HSLColor_3Test {"
}
,{
    "id": "chatcmpl-AGQVpRvViyOWKFrKP6V4XqSzFbPRn",
    "object": "chat.completion",
    "created": 1728478525,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testGetSaturation_ZeroSaturation() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 128, 128); // Grey color\n        assertEquals(0, color.getSaturation(), \"Saturation should be 0 for grey color\");\n    }\n\n    @Test\n    void testGetSaturation_MaxSaturation() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 0); // Pure red color\n        assertEquals(255, color.getSaturation(), \"Saturation should be 255 for pure red color\");\n    }\n\n    @Test\n    void testGetSaturation_HalfSaturation() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(192, 64, 64); // A shade of red\n        assertTrue(color.getSaturation() > 0 && color.getSaturation() < 255, \"Saturation should be between 0 and 255 for a shade of red\");\n    }\n\n    @Test\n    void testGetSaturation_BlackColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 0); // Black color\n        assertEquals(0, color.getSaturation(), \"Saturation should be 0 for black color\");\n    }\n\n    @Test\n    void testGetSaturation_WhiteColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 255); // White color\n        assertEquals(0, color.getSaturation(), \"Saturation should be 0 for white color\");\n    }\n\n    @Test\n    void testGetSaturation_MidGreyColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 128, 128); // Mid grey color\n        assertEquals(0, color.getSaturation(), \"Saturation should be 0 for mid grey color\");\n    }\n\n    @Test\n    void testGetSaturation_LightGreyColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(192, 192, 192); // Light grey color\n        assertEquals(0, color.getSaturation(), \"Saturation should be 0 for light grey color\");\n    }\n\n    @Test\n    void testGetSaturation_DarkGreyColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(64, 64, 64); // Dark grey color\n        assertEquals(0, color.getSaturation(), \"Saturation should be 0 for dark grey color\");\n    }\n\n    @Test\n    void testGetSaturation_NonGreyColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200); // Non-grey color\n        assertTrue(color.getSaturation() > 0, \"Saturation should be greater than 0 for non-grey color\");\n    }\n\n    @Test\n    void testGetSaturation_AnotherNonGreyColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(50, 100, 150); // Another non-grey color\n        assertTrue(color.getSaturation() > 0, \"Saturation should be greater than 0 for another non-grey color\");\n    }\n}\n```\n\nThese test cases cover various scenarios for the `getSaturation()` method, including colors with zero saturation (greyscale colors), maximum saturation (pure colors), and colors with intermediate saturation values.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2031,
        "completion_tokens": 791,
        "total_tokens": 2822,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 8.92306137084961,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_4Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_4Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getSaturation()} method.\n*/\nclass HSLColor_4Test {"
}
,{
    "id": "chatcmpl-AGQWsU5kEHUglmYzne8cwDW3LHWMe",
    "object": "chat.completion",
    "created": 1728478590,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testSetSaturationWithinRange() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(128);\n        assertEquals(128, color.getSaturation());\n    }\n\n    @Test\n    void testSetSaturationBelowZero() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(-10);\n        assertEquals(0, color.getSaturation());\n    }\n\n    @Test\n    void testSetSaturationAboveMax() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(300);\n        assertEquals(255, color.getSaturation());\n    }\n\n    @Test\n    void testSetSaturationZero() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(0);\n        assertEquals(0, color.getSaturation());\n    }\n\n    @Test\n    void testSetSaturationMax() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(255);\n        assertEquals(255, color.getSaturation());\n    }\n\n    @Test\n    void testSetSaturationNoChange() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int initialSaturation = color.getSaturation();\n        color.setSaturation(initialSaturation);\n        assertEquals(initialSaturation, color.getSaturation());\n    }\n\n    @Test\n    void testSetSaturationFromZeroToMax() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(0);\n        color.setSaturation(255);\n        assertEquals(255, color.getSaturation());\n    }\n\n    @Test\n    void testSetSaturationFromMaxToZero() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(255);\n        color.setSaturation(0);\n        assertEquals(0, color.getSaturation());\n    }\n\n    @Test\n    void testSetSaturationMidRange() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(128);\n        assertEquals(128, color.getSaturation());\n    }\n\n    @Test\n    void testSetSaturationWithNegativeInput() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(-50);\n        assertEquals(0, color.getSaturation());\n    }\n}\n```\n\nThis test class `HSLColor_5Test` contains ten unit test cases for the `setSaturation(int)` method of the `HSLColor` class. Each test case checks different scenarios, such as setting the saturation within the valid range, below zero, above the maximum, and ensuring no change when setting the same value.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2032,
        "completion_tokens": 726,
        "total_tokens": 2758,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 10.202232837677002,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_5Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_5Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#setSaturation(int)} method.\n*/\nclass HSLColor_5Test {"
}
,{
    "id": "chatcmpl-AGQXvwov9SJceAnCCtPZattR3ev8w",
    "object": "chat.completion",
    "created": 1728478655,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testGetLuminenceForBlack() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 0);\n        assertEquals(0, color.getLuminence(), \"Luminance for black should be 0\");\n    }\n\n    @Test\n    void testGetLuminenceForWhite() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 255);\n        assertEquals(255, color.getLuminence(), \"Luminance for white should be 255\");\n    }\n\n    @Test\n    void testGetLuminenceForRed() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 0);\n        assertEquals(128, color.getLuminence(), \"Luminance for red should be 128\");\n    }\n\n    @Test\n    void testGetLuminenceForGreen() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 255, 0);\n        assertEquals(128, color.getLuminence(), \"Luminance for green should be 128\");\n    }\n\n    @Test\n    void testGetLuminenceForBlue() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 255);\n        assertEquals(128, color.getLuminence(), \"Luminance for blue should be 128\");\n    }\n\n    @Test\n    void testGetLuminenceForGray() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 128, 128);\n        assertEquals(128, color.getLuminence(), \"Luminance for gray should be 128\");\n    }\n\n    @Test\n    void testGetLuminenceForCyan() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 255, 255);\n        assertEquals(191, color.getLuminence(), \"Luminance for cyan should be 191\");\n    }\n\n    @Test\n    void testGetLuminenceForMagenta() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 255);\n        assertEquals(191, color.getLuminence(), \"Luminance for magenta should be 191\");\n    }\n\n    @Test\n    void testGetLuminenceForYellow() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 0);\n        assertEquals(191, color.getLuminence(), \"Luminance for yellow should be 191\");\n    }\n\n    @Test\n    void testGetLuminenceForRandomColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(123, 234, 45);\n        assertEquals(140, color.getLuminence(), \"Luminance for the color (123, 234, 45) should be 140\");\n    }\n}\n```\n\nThis test class `HSLColor_6Test` contains ten unit test cases for the `getLuminence()` method of the `HSLColor` class. Each test case initializes an `HSLColor` object with specific RGB values and asserts that the calculated luminance matches the expected value.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2032,
        "completion_tokens": 751,
        "total_tokens": 2783,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 7.362465858459473,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_6Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_6Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getLuminence()} method.\n*/\nclass HSLColor_6Test {"
}
,{
    "id": "chatcmpl-AGQYy5qMDeYh1IBVuCs432Q27jmZV",
    "object": "chat.completion",
    "created": 1728478720,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testSetLuminenceWithinRange() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setLuminence(128);\n        assertEquals(128, color.getLuminence());\n    }\n\n    @Test\n    void testSetLuminenceBelowRange() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setLuminence(-10);\n        assertEquals(0, color.getLuminence());\n    }\n\n    @Test\n    void testSetLuminenceAboveRange() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setLuminence(300);\n        assertEquals(255, color.getLuminence());\n    }\n\n    @Test\n    void testSetLuminenceZero() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setLuminence(0);\n        assertEquals(0, color.getLuminence());\n    }\n\n    @Test\n    void testSetLuminenceMax() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setLuminence(255);\n        assertEquals(255, color.getLuminence());\n    }\n\n    @Test\n    void testSetLuminenceMidRange() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setLuminence(127);\n        assertEquals(127, color.getLuminence());\n    }\n\n    @Test\n    void testSetLuminenceNoChange() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int initialLum = color.getLuminence();\n        color.setLuminence(initialLum);\n        assertEquals(initialLum, color.getLuminence());\n    }\n\n    @Test\n    void testSetLuminenceFromMinToMax() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 0);\n        color.setLuminence(255);\n        assertEquals(255, color.getLuminence());\n    }\n\n    @Test\n    void testSetLuminenceFromMaxToMin() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 255);\n        color.setLuminence(0);\n        assertEquals(0, color.getLuminence());\n    }\n\n    @Test\n    void testSetLuminenceWithNegativeInput() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setLuminence(-50);\n        assertEquals(0, color.getLuminence());\n    }\n}\n```\n\nThese test cases cover various scenarios for the `setLuminence` method, including setting luminance within the valid range, below the range, above the range, and edge cases like zero and maximum luminance.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2033,
        "completion_tokens": 713,
        "total_tokens": 2746,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 8.740880727767944,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_7Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_7Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#setLuminence(int)} method.\n*/\nclass HSLColor_7Test {"
}
,{
    "id": "chatcmpl-AGQa1Ddvm9semHOxOgStlmWw8dNVy",
    "object": "chat.completion",
    "created": 1728478785,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testGetRed_InitialValue() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        assertEquals(100, color.getRed());\n    }\n\n    @Test\n    void testGetRed_AfterSetRed() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setRed(120);\n        assertEquals(120, color.getRed());\n    }\n\n    @Test\n    void testGetRed_AfterSetGreen() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setGreen(180);\n        assertEquals(100, color.getRed());\n    }\n\n    @Test\n    void testGetRed_AfterSetBlue() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setBlue(220);\n        assertEquals(100, color.getRed());\n    }\n\n    @Test\n    void testGetRed_AfterSetHue() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setHue(50);\n        assertNotEquals(100, color.getRed());\n    }\n\n    @Test\n    void testGetRed_AfterSetSaturation() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(100);\n        assertNotEquals(100, color.getRed());\n    }\n\n    @Test\n    void testGetRed_AfterSetLuminance() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setLuminence(100);\n        assertNotEquals(100, color.getRed());\n    }\n\n    @Test\n    void testGetRed_AfterReverseColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.reverseColor();\n        assertNotEquals(100, color.getRed());\n    }\n\n    @Test\n    void testGetRed_AfterBrighten() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.brighten(1.2f);\n        assertNotEquals(100, color.getRed());\n    }\n\n    @Test\n    void testGetRed_AfterBlend() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(50, 100, 150, 0.5f);\n        assertNotEquals(100, color.getRed());\n    }\n}\n```\n\nThis test class `HSLColor_8Test` contains ten unit test cases for the `getRed()` method of the `HSLColor` class. Each test case checks the value of the red component of the color after various operations, ensuring that the method behaves as expected.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2030,
        "completion_tokens": 690,
        "total_tokens": 2720,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 8.53323483467102,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_8Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_8Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getRed()} method.\n*/\nclass HSLColor_8Test {"
}
,{
    "id": "chatcmpl-AGQb4LNplbuRTb9G7VtrsBZdgwzUp",
    "object": "chat.completion",
    "created": 1728478850,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testGetGreenWithBlack() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 0);\n        assertEquals(0, color.getGreen());\n    }\n\n    @Test\n    void testGetGreenWithWhite() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 255);\n        assertEquals(255, color.getGreen());\n    }\n\n    @Test\n    void testGetGreenWithRed() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 0);\n        assertEquals(0, color.getGreen());\n    }\n\n    @Test\n    void testGetGreenWithLime() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 255, 0);\n        assertEquals(255, color.getGreen());\n    }\n\n    @Test\n    void testGetGreenWithBlue() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 255);\n        assertEquals(0, color.getGreen());\n    }\n\n    @Test\n    void testGetGreenWithYellow() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 0);\n        assertEquals(255, color.getGreen());\n    }\n\n    @Test\n    void testGetGreenWithCyan() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 255, 255);\n        assertEquals(255, color.getGreen());\n    }\n\n    @Test\n    void testGetGreenWithMagenta() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 255);\n        assertEquals(0, color.getGreen());\n    }\n\n    @Test\n    void testGetGreenWithGray() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 128, 128);\n        assertEquals(128, color.getGreen());\n    }\n\n    @Test\n    void testGetGreenWithRandomColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(123, 234, 45);\n        assertEquals(234, color.getGreen());\n    }\n}\n```\n\nThis test class `HSLColor_9Test` contains ten unit test cases for the `getGreen()` method of the `HSLColor` class. Each test case initializes the `HSLColor` object with specific RGB values and asserts that the `getGreen()` method returns the expected green component.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2030,
        "completion_tokens": 592,
        "total_tokens": 2622,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 7.069946050643921,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_9Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_9Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getGreen()} method.\n*/\nclass HSLColor_9Test {"
}
,{
    "id": "chatcmpl-AGQc7jbDq2vvoPrjuEKlKIgHQaLBT",
    "object": "chat.completion",
    "created": 1728478915,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testGetBlue_initialValue() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 255);\n        assertEquals(255, color.getBlue());\n    }\n\n    @Test\n    void testGetBlue_afterSettingRGB() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        assertEquals(200, color.getBlue());\n    }\n\n    @Test\n    void testGetBlue_afterSettingHSL() {\n        HSLColor color = new HSLColor();\n        color.initRGBbyHSL(170, 255, 128);\n        assertEquals(128, color.getBlue());\n    }\n\n    @Test\n    void testGetBlue_afterChangingHue() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setHue(85);\n        assertEquals(200, color.getBlue());\n    }\n\n    @Test\n    void testGetBlue_afterChangingSaturation() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setSaturation(128);\n        assertEquals(200, color.getBlue());\n    }\n\n    @Test\n    void testGetBlue_afterChangingLuminance() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.setLuminence(128);\n        assertEquals(200, color.getBlue());\n    }\n\n    @Test\n    void testGetBlue_afterReversingColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.reverseColor();\n        assertEquals(200, color.getBlue());\n    }\n\n    @Test\n    void testGetBlue_afterBrightening() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.brighten(1.2f);\n        assertEquals(200, color.getBlue());\n    }\n\n    @Test\n    void testGetBlue_afterBlending() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(50, 100, 150, 0.5f);\n        assertEquals(175, color.getBlue());\n    }\n\n    @Test\n    void testGetBlue_afterSettingToGreyscale() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.greyscale();\n        assertEquals(128, color.getBlue());\n    }\n}\n```\n\nThis test class `HSLColor_10Test` contains ten unit test cases for the `getBlue()` method of the `HSLColor` class. Each test case checks the value of the blue component of the color after performing various operations on the `HSLColor` object.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2030,
        "completion_tokens": 667,
        "total_tokens": 2697,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 9.394365310668945,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_10Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_10Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getBlue()} method.\n*/\nclass HSLColor_10Test {"
}
,{
    "id": "chatcmpl-AGQdAeP4z27MneqwPQkdVc4JUiynF",
    "object": "chat.completion",
    "created": 1728478980,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testReverseColor1() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 0); // Red\n        color.reverseColor();\n        assertEquals(85, color.getHue()); // Cyan\n    }\n\n    @Test\n    void testReverseColor2() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 255, 0); // Green\n        color.reverseColor();\n        assertEquals(213, color.getHue()); // Magenta\n    }\n\n    @Test\n    void testReverseColor3() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 255); // Blue\n        color.reverseColor();\n        assertEquals(42, color.getHue()); // Yellow\n    }\n\n    @Test\n    void testReverseColor4() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 0); // Yellow\n        color.reverseColor();\n        assertEquals(127, color.getHue()); // Blue\n    }\n\n    @Test\n    void testReverseColor5() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 255, 255); // Cyan\n        color.reverseColor();\n        assertEquals(0, color.getHue()); // Red\n    }\n\n    @Test\n    void testReverseColor6() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 0, 255); // Magenta\n        color.reverseColor();\n        assertEquals(170, color.getHue()); // Green\n    }\n\n    @Test\n    void testReverseColor7() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 128, 128); // Grey\n        color.reverseColor();\n        assertEquals(170, color.getHue()); // Grey remains unchanged\n    }\n\n    @Test\n    void testReverseColor8() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 165, 0); // Orange\n        color.reverseColor();\n        assertEquals(85, color.getHue()); // Blueish\n    }\n\n    @Test\n    void testReverseColor9() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(75, 0, 130); // Indigo\n        color.reverseColor();\n        assertEquals(213, color.getHue()); // Yellowish\n    }\n\n    @Test\n    void testReverseColor10() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(238, 130, 238); // Violet\n        color.reverseColor();\n        assertEquals(42, color.getHue()); // Greenish\n    }\n}\n```\n\nThese test cases cover a variety of colors and their expected reversed hues. The `reverseColor` method should correctly adjust the hue by adding half of the HSL range, effectively inverting the color on the color wheel. The tests also include edge cases like grey, which should remain unchanged.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2031,
        "completion_tokens": 691,
        "total_tokens": 2722,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 14.079076051712036,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_11Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_11Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#reverseColor()} method.\n*/\nclass HSLColor_11Test {"
}
,{
    "id": "chatcmpl-AGQeDGeaKEFq5IVbWVNkSIw0jjLGk",
    "object": "chat.completion",
    "created": 1728479045,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testBrightenZeroPercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int originalLuminance = color.getLuminence();\n        color.brighten(0);\n        assertEquals(originalLuminance, color.getLuminence(), \"Luminance should remain unchanged when brightening by 0%\");\n    }\n\n    @Test\n    void testBrightenFullPercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.brighten(1);\n        assertEquals(HSLColor.HSLMAX, color.getLuminence(), \"Luminance should be max when brightening by 100%\");\n    }\n\n    @Test\n    void testBrightenHalfPercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int originalLuminance = color.getLuminence();\n        color.brighten(0.5f);\n        assertEquals(originalLuminance / 2, color.getLuminence(), \"Luminance should be halved when brightening by 50%\");\n    }\n\n    @Test\n    void testBrightenNegativePercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.brighten(-0.5f);\n        assertEquals(0, color.getLuminence(), \"Luminance should be 0 when brightening by a negative percent\");\n    }\n\n    @Test\n    void testBrightenOverMaxPercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.brighten(2);\n        assertEquals(HSLColor.HSLMAX, color.getLuminence(), \"Luminance should be max when brightening by more than 100%\");\n    }\n\n    @Test\n    void testBrightenSmallPercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int originalLuminance = color.getLuminence();\n        color.brighten(0.1f);\n        assertEquals((int)(originalLuminance * 0.1f), color.getLuminence(), \"Luminance should be 10% of original when brightening by 10%\");\n    }\n\n    @Test\n    void testBrightenLargePercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        int originalLuminance = color.getLuminence();\n        color.brighten(0.9f);\n        assertEquals((int)(originalLuminance * 0.9f), color.getLuminence(), \"Luminance should be 90% of original when brightening by 90%\");\n    }\n\n    @Test\n    void testBrightenWithZeroLuminance() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(0, 0, 0);\n        color.brighten(0.5f);\n        assertEquals(0, color.getLuminence(), \"Luminance should remain 0 when brightening a black color\");\n    }\n\n    @Test\n    void testBrightenWithMaxLuminance() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(255, 255, 255);\n        color.brighten(0.5f);\n        assertEquals(HSLColor.HSLMAX, color.getLuminence(), \"Luminance should remain max when brightening a white color\");\n    }\n\n    @Test\n    void testBrightenWithMidLuminance() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(128, 128, 128);\n        int originalLuminance = color.getLuminence();\n        color.brighten(0.5f);\n        assertEquals((int)(originalLuminance * 0.5f), color.getLuminence(), \"Luminance should be halved when brightening a mid-gray color by 50%\");\n    }\n}\n```\n\nThis test class contains ten unit test cases for the `brighten(float)` method of the `HSLColor` class. Each test case checks a different scenario to ensure the method behaves as expected.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2032,
        "completion_tokens": 973,
        "total_tokens": 3005,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 14.290399551391602,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_12Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_12Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#brighten(float)} method.\n*/\nclass HSLColor_12Test {"
}
,{
    "id": "chatcmpl-AGQfGGjKHRUtxRCU2IbEWazmAxfPN",
    "object": "chat.completion",
    "created": 1728479110,
    "model": "gpt-4o-2024-08-06",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\n    @Test\n    void testBlendFullPercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(50, 100, 150, 1.0f);\n        assertEquals(50, color.getRed());\n        assertEquals(100, color.getGreen());\n        assertEquals(150, color.getBlue());\n    }\n\n    @Test\n    void testBlendZeroPercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(50, 100, 150, 0.0f);\n        assertEquals(100, color.getRed());\n        assertEquals(150, color.getGreen());\n        assertEquals(200, color.getBlue());\n    }\n\n    @Test\n    void testBlendHalfPercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(50, 100, 150, 0.5f);\n        assertEquals(75, color.getRed());\n        assertEquals(125, color.getGreen());\n        assertEquals(175, color.getBlue());\n    }\n\n    @Test\n    void testBlendQuarterPercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(50, 100, 150, 0.25f);\n        assertEquals(87, color.getRed());\n        assertEquals(137, color.getGreen());\n        assertEquals(187, color.getBlue());\n    }\n\n    @Test\n    void testBlendThreeQuarterPercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(50, 100, 150, 0.75f);\n        assertEquals(62, color.getRed());\n        assertEquals(112, color.getGreen());\n        assertEquals(162, color.getBlue());\n    }\n\n    @Test\n    void testBlendNegativePercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(50, 100, 150, -0.5f);\n        assertEquals(100, color.getRed());\n        assertEquals(150, color.getGreen());\n        assertEquals(200, color.getBlue());\n    }\n\n    @Test\n    void testBlendOverOnePercent() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(50, 100, 150, 1.5f);\n        assertEquals(50, color.getRed());\n        assertEquals(100, color.getGreen());\n        assertEquals(150, color.getBlue());\n    }\n\n    @Test\n    void testBlendWithBlack() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(0, 0, 0, 0.5f);\n        assertEquals(50, color.getRed());\n        assertEquals(75, color.getGreen());\n        assertEquals(100, color.getBlue());\n    }\n\n    @Test\n    void testBlendWithWhite() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(255, 255, 255, 0.5f);\n        assertEquals(177, color.getRed());\n        assertEquals(202, color.getGreen());\n        assertEquals(227, color.getBlue());\n    }\n\n    @Test\n    void testBlendWithSameColor() {\n        HSLColor color = new HSLColor();\n        color.initHSLbyRGB(100, 150, 200);\n        color.blend(100, 150, 200, 0.5f);\n        assertEquals(100, color.getRed());\n        assertEquals(150, color.getGreen());\n        assertEquals(200, color.getBlue());\n    }\n}\n```\n\nThese test cases cover various scenarios for the `blend` method, including blending with full, zero, and fractional percentages, as well as edge cases like blending with black, white, and the same color.",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2037,
        "completion_tokens": 950,
        "total_tokens": 2987,
        "prompt_tokens_details": {
            "cached_tokens": 1792
        },
        "completion_tokens_details": {
            "reasoning_tokens": 0
        }
    },
    "system_fingerprint": "fp_e5e4913e83",
    "time_taken": 10.683159351348877,
    "prompt_id": "\\HSLColorSourceCode\\original\\HSLColor_13Test.java",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX = 255;\r\n\r\n    private final static int RGBMAX = 255;\r\n\r\n    private final static int UNDEFINED = 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed = R;\r\n        pGreen = G;\r\n        pBlue = B;\r\n        //Set Max & MinColor Values\r\n        cMax = iMax(iMax(R, G), B);\r\n        cMin = iMin(iMin(R, G), B);\r\n        cMinus = cMax - cMin;\r\n        cPlus = cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum = ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax == cMin) {\r\n            // greyscale\r\n            pSat = 0;\r\n            pHue = UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum <= (HSLMAX / 2)) {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat = (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta = (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta = (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta = (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax == R) {\r\n                pHue = BDelta - GDelta;\r\n            } else if (cMax == G) {\r\n                pHue = (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax == B) {\r\n                pHue = ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue < 0) {\r\n                pHue = pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue = H;\r\n        pLum = L;\r\n        pSat = S;\r\n        if (S == 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed = (L * RGBMAX) / HSLMAX;\r\n            pGreen = pRed;\r\n            pBlue = pRed;\r\n        } else {\r\n            if (L <= HSLMAX / 2) {\r\n                Magic2 = (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 = L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 = 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed = (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed > RGBMAX) {\r\n                pRed = RGBMAX;\r\n            }\r\n            pGreen = (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen > RGBMAX) {\r\n                pGreen = RGBMAX;\r\n            }\r\n            pBlue = (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue > RGBMAX) {\r\n                pBlue = RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue < 0) {\r\n            Hue = Hue + HSLMAX;\r\n        } else if (Hue > HSLMAX) {\r\n            Hue = Hue - HSLMAX;\r\n        }\r\n        if (Hue < (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue < (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue < (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue < 0) {\r\n            iToValue = HSLMAX + iToValue;\r\n        }\r\n        while (iToValue > HSLMAX) {\r\n            iToValue = iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue < 0) {\r\n            iToValue = 0;\r\n        } else if (iToValue > HSLMAX) {\r\n            iToValue = HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent == 0) {\r\n            return;\r\n        }\r\n        L = (int) (pLum * fPercent);\r\n        if (L < 0)\r\n            L = 0;\r\n        if (L > HSLMAX)\r\n            L = HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent >= 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent <= 0)\r\n            return;\r\n        int newR = (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG = (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB = (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "test_prompt": "// HSLColor_13Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#blend(int, int, int, float)} method.\n*/\nclass HSLColor_13Test {"
}
]