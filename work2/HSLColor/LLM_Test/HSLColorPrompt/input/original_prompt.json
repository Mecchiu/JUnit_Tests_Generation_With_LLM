[
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_0Test.java",
    "test_prompt": "// HSLColor_0Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#initHSLbyRGB(int, int, int)} method.\n*/\nclass HSLColor_0Test {",
    "method_signature": "initHSLbyRGB(int, int, int)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_1Test.java",
    "test_prompt": "// HSLColor_1Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#initRGBbyHSL(int, int, int)} method.\n*/\nclass HSLColor_1Test {",
    "method_signature": "initRGBbyHSL(int, int, int)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_2Test.java",
    "test_prompt": "// HSLColor_2Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getHue()} method.\n*/\nclass HSLColor_2Test {",
    "method_signature": "getHue()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_3Test.java",
    "test_prompt": "// HSLColor_3Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#setHue(int)} method.\n*/\nclass HSLColor_3Test {",
    "method_signature": "setHue(int)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_4Test.java",
    "test_prompt": "// HSLColor_4Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getSaturation()} method.\n*/\nclass HSLColor_4Test {",
    "method_signature": "getSaturation()",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_5Test.java",
    "test_prompt": "// HSLColor_5Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#setSaturation(int)} method.\n*/\nclass HSLColor_5Test {",
    "method_signature": "setSaturation(int)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_6Test.java",
    "test_prompt": "// HSLColor_6Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getLuminence()} method.\n*/\nclass HSLColor_6Test {",
    "method_signature": "getLuminence()",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_7Test.java",
    "test_prompt": "// HSLColor_7Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#setLuminence(int)} method.\n*/\nclass HSLColor_7Test {",
    "method_signature": "setLuminence(int)",
    "suffix": "7"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_8Test.java",
    "test_prompt": "// HSLColor_8Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getRed()} method.\n*/\nclass HSLColor_8Test {",
    "method_signature": "getRed()",
    "suffix": "8"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_9Test.java",
    "test_prompt": "// HSLColor_9Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getGreen()} method.\n*/\nclass HSLColor_9Test {",
    "method_signature": "getGreen()",
    "suffix": "9"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_10Test.java",
    "test_prompt": "// HSLColor_10Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#getBlue()} method.\n*/\nclass HSLColor_10Test {",
    "method_signature": "getBlue()",
    "suffix": "10"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_11Test.java",
    "test_prompt": "// HSLColor_11Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#reverseColor()} method.\n*/\nclass HSLColor_11Test {",
    "method_signature": "reverseColor()",
    "suffix": "11"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_12Test.java",
    "test_prompt": "// HSLColor_12Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#brighten(float)} method.\n*/\nclass HSLColor_12Test {",
    "method_signature": "brighten(float)",
    "suffix": "12"
  },
  {
    "numberTests": "ten",
    "original_code": "// HSLColor.java\npublic class HSLColor {\r\n\r\n    private final static int HSLMAX \u003d 255;\r\n\r\n    private final static int RGBMAX \u003d 255;\r\n\r\n    private final static int UNDEFINED \u003d 170;\r\n\r\n    private int pHue;\r\n\r\n    private int pSat;\r\n\r\n    private int pLum;\r\n\r\n    private int pRed;\r\n\r\n    private int pGreen;\r\n\r\n    private int pBlue;\r\n\r\n    public void initHSLbyRGB(int R, int G, int B) {\r\n        // sets Hue, Sat, Lum\r\n        int cMax;\r\n        int cMin;\r\n        int RDelta;\r\n        int GDelta;\r\n        int BDelta;\r\n        int cMinus;\r\n        int cPlus;\r\n        pRed \u003d R;\r\n        pGreen \u003d G;\r\n        pBlue \u003d B;\r\n        //Set Max \u0026 MinColor Values\r\n        cMax \u003d iMax(iMax(R, G), B);\r\n        cMin \u003d iMin(iMin(R, G), B);\r\n        cMinus \u003d cMax - cMin;\r\n        cPlus \u003d cMax + cMin;\r\n        // Calculate luminescence (lightness)\r\n        pLum \u003d ((cPlus * HSLMAX) + RGBMAX) / (2 * RGBMAX);\r\n        if (cMax \u003d\u003d cMin) {\r\n            // greyscale\r\n            pSat \u003d 0;\r\n            pHue \u003d UNDEFINED;\r\n        } else {\r\n            // Calculate color saturation\r\n            if (pLum \u003c\u003d (HSLMAX / 2)) {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / cPlus);\r\n            } else {\r\n                pSat \u003d (int) (((cMinus * HSLMAX) + 0.5) / (2 * RGBMAX - cPlus));\r\n            }\r\n            //Calculate hue\r\n            RDelta \u003d (int) ((((cMax - R) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            GDelta \u003d (int) ((((cMax - G) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            BDelta \u003d (int) ((((cMax - B) * (HSLMAX / 6)) + 0.5) / cMinus);\r\n            if (cMax \u003d\u003d R) {\r\n                pHue \u003d BDelta - GDelta;\r\n            } else if (cMax \u003d\u003d G) {\r\n                pHue \u003d (HSLMAX / 3) + RDelta - BDelta;\r\n            } else if (cMax \u003d\u003d B) {\r\n                pHue \u003d ((2 * HSLMAX) / 3) + GDelta - RDelta;\r\n            }\r\n            if (pHue \u003c 0) {\r\n                pHue \u003d pHue + HSLMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initRGBbyHSL(int H, int S, int L) {\r\n        int Magic1;\r\n        int Magic2;\r\n        pHue \u003d H;\r\n        pLum \u003d L;\r\n        pSat \u003d S;\r\n        if (S \u003d\u003d 0) {\r\n            //Greyscale\r\n            //luminescence: set to range\r\n            pRed \u003d (L * RGBMAX) / HSLMAX;\r\n            pGreen \u003d pRed;\r\n            pBlue \u003d pRed;\r\n        } else {\r\n            if (L \u003c\u003d HSLMAX / 2) {\r\n                Magic2 \u003d (L * (HSLMAX + S) + (HSLMAX / 2)) / (HSLMAX);\r\n            } else {\r\n                Magic2 \u003d L + S - ((L * S) + (HSLMAX / 2)) / HSLMAX;\r\n            }\r\n            Magic1 \u003d 2 * L - Magic2;\r\n            //get R, G, B; change units from HSLMAX range to RGBMAX range\r\n            pRed \u003d (hueToRGB(Magic1, Magic2, H + (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pRed \u003e RGBMAX) {\r\n                pRed \u003d RGBMAX;\r\n            }\r\n            pGreen \u003d (hueToRGB(Magic1, Magic2, H) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pGreen \u003e RGBMAX) {\r\n                pGreen \u003d RGBMAX;\r\n            }\r\n            pBlue \u003d (hueToRGB(Magic1, Magic2, H - (HSLMAX / 3)) * RGBMAX + (HSLMAX / 2)) / HSLMAX;\r\n            if (pBlue \u003e RGBMAX) {\r\n                pBlue \u003d RGBMAX;\r\n            }\r\n        }\r\n    }\r\n\r\n    private int hueToRGB(int mag1, int mag2, int Hue) {\r\n        // check the range\r\n        if (Hue \u003c 0) {\r\n            Hue \u003d Hue + HSLMAX;\r\n        } else if (Hue \u003e HSLMAX) {\r\n            Hue \u003d Hue - HSLMAX;\r\n        }\r\n        if (Hue \u003c (HSLMAX / 6))\r\n            return (mag1 + (((mag2 - mag1) * Hue + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        if (Hue \u003c (HSLMAX / 2))\r\n            return mag2;\r\n        if (Hue \u003c (HSLMAX * 2 / 3))\r\n            return (mag1 + (((mag2 - mag1) * ((HSLMAX * 2 / 3) - Hue) + (HSLMAX / 12)) / (HSLMAX / 6)));\r\n        return mag1;\r\n    }\r\n\r\n    private int iMax(int a, int b) {\r\n        if (a \u003e b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private int iMin(int a, int b) {\r\n        if (a \u003c b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    private void greyscale() {\r\n        initRGBbyHSL(UNDEFINED, 0, pLum);\r\n    }\r\n\r\n    public int getHue() {\r\n        return pHue;\r\n    }\r\n\r\n    public void setHue(int iToValue) {\r\n        while (iToValue \u003c 0) {\r\n            iToValue \u003d HSLMAX + iToValue;\r\n        }\r\n        while (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d iToValue - HSLMAX;\r\n        }\r\n        initRGBbyHSL(iToValue, pSat, pLum);\r\n    }\r\n\r\n    public int getSaturation() {\r\n        return pSat;\r\n    }\r\n\r\n    public void setSaturation(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, iToValue, pLum);\r\n    }\r\n\r\n    public int getLuminence() {\r\n        return pLum;\r\n    }\r\n\r\n    public void setLuminence(int iToValue) {\r\n        if (iToValue \u003c 0) {\r\n            iToValue \u003d 0;\r\n        } else if (iToValue \u003e HSLMAX) {\r\n            iToValue \u003d HSLMAX;\r\n        }\r\n        initRGBbyHSL(pHue, pSat, iToValue);\r\n    }\r\n\r\n    public int getRed() {\r\n        return pRed;\r\n    }\r\n\r\n    private void setRed(int iNewValue) {\r\n        initHSLbyRGB(iNewValue, pGreen, pBlue);\r\n    }\r\n\r\n    public int getGreen() {\r\n        return pGreen;\r\n    }\r\n\r\n    private void setGreen(int iNewValue) {\r\n        initHSLbyRGB(pRed, iNewValue, pBlue);\r\n    }\r\n\r\n    public int getBlue() {\r\n        return pBlue;\r\n    }\r\n\r\n    private void setBlue(int iNewValue) {\r\n        initHSLbyRGB(pRed, pGreen, iNewValue);\r\n    }\r\n\r\n    public void reverseColor() {\r\n        setHue(pHue + (HSLMAX / 2));\r\n    }\r\n\r\n    private void reverseLight() {\r\n        setLuminence(HSLMAX - pLum);\r\n    }\r\n\r\n    public void brighten(float fPercent) {\r\n        int L;\r\n        if (fPercent \u003d\u003d 0) {\r\n            return;\r\n        }\r\n        L \u003d (int) (pLum * fPercent);\r\n        if (L \u003c 0)\r\n            L \u003d 0;\r\n        if (L \u003e HSLMAX)\r\n            L \u003d HSLMAX;\r\n        setLuminence(L);\r\n    }\r\n\r\n    public void blend(int R, int G, int B, float fPercent) {\r\n        if (fPercent \u003e\u003d 1) {\r\n            initHSLbyRGB(R, G, B);\r\n            return;\r\n        }\r\n        if (fPercent \u003c\u003d 0)\r\n            return;\r\n        int newR \u003d (int) ((R * fPercent) + (pRed * (1.0 - fPercent)));\r\n        int newG \u003d (int) ((G * fPercent) + (pGreen * (1.0 - fPercent)));\r\n        int newB \u003d (int) ((B * fPercent) + (pBlue * (1.0 - fPercent)));\r\n        initHSLbyRGB(newR, newG, newB);\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "HSLColor",
    "id": "\\HSLColorSourceCode\\original\\HSLColor_13Test.java",
    "test_prompt": "// HSLColor_13Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSLColor}.\n* It contains ten unit test cases for the {@link HSLColor#blend(int, int, int, float)} method.\n*/\nclass HSLColor_13Test {",
    "method_signature": "blend(int, int, int, float)",
    "suffix": "13"
  }
]