[
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_0Test.java",
    "test_prompt": "// FTPFile_0Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#setRawListing(String)} method.\n*/\nclass FTPFile_0Test {",
    "method_signature": "setRawListing(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_1Test.java",
    "test_prompt": "// FTPFile_1Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#getRawListing()} method.\n*/\nclass FTPFile_1Test {",
    "method_signature": "getRawListing()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_2Test.java",
    "test_prompt": "// FTPFile_2Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#isDirectory()} method.\n*/\nclass FTPFile_2Test {",
    "method_signature": "isDirectory()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_3Test.java",
    "test_prompt": "// FTPFile_3Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#isFile()} method.\n*/\nclass FTPFile_3Test {",
    "method_signature": "isFile()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_4Test.java",
    "test_prompt": "// FTPFile_4Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#isSymbolicLink()} method.\n*/\nclass FTPFile_4Test {",
    "method_signature": "isSymbolicLink()",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_5Test.java",
    "test_prompt": "// FTPFile_5Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#isUnknown()} method.\n*/\nclass FTPFile_5Test {",
    "method_signature": "isUnknown()",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_6Test.java",
    "test_prompt": "// FTPFile_6Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#isValid()} method.\n*/\nclass FTPFile_6Test {",
    "method_signature": "isValid()",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_7Test.java",
    "test_prompt": "// FTPFile_7Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#setType(int)} method.\n*/\nclass FTPFile_7Test {",
    "method_signature": "setType(int)",
    "suffix": "7"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_8Test.java",
    "test_prompt": "// FTPFile_8Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#getType()} method.\n*/\nclass FTPFile_8Test {",
    "method_signature": "getType()",
    "suffix": "8"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_9Test.java",
    "test_prompt": "// FTPFile_9Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#setName(String)} method.\n*/\nclass FTPFile_9Test {",
    "method_signature": "setName(String)",
    "suffix": "9"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_10Test.java",
    "test_prompt": "// FTPFile_10Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#getName()} method.\n*/\nclass FTPFile_10Test {",
    "method_signature": "getName()",
    "suffix": "10"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_11Test.java",
    "test_prompt": "// FTPFile_11Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#setSize(long)} method.\n*/\nclass FTPFile_11Test {",
    "method_signature": "setSize(long)",
    "suffix": "11"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_12Test.java",
    "test_prompt": "// FTPFile_12Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#getSize()} method.\n*/\nclass FTPFile_12Test {",
    "method_signature": "getSize()",
    "suffix": "12"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_13Test.java",
    "test_prompt": "// FTPFile_13Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#setHardLinkCount(int)} method.\n*/\nclass FTPFile_13Test {",
    "method_signature": "setHardLinkCount(int)",
    "suffix": "13"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_14Test.java",
    "test_prompt": "// FTPFile_14Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#getHardLinkCount()} method.\n*/\nclass FTPFile_14Test {",
    "method_signature": "getHardLinkCount()",
    "suffix": "14"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_15Test.java",
    "test_prompt": "// FTPFile_15Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#setGroup(String)} method.\n*/\nclass FTPFile_15Test {",
    "method_signature": "setGroup(String)",
    "suffix": "15"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_16Test.java",
    "test_prompt": "// FTPFile_16Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#getGroup()} method.\n*/\nclass FTPFile_16Test {",
    "method_signature": "getGroup()",
    "suffix": "16"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_17Test.java",
    "test_prompt": "// FTPFile_17Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#setUser(String)} method.\n*/\nclass FTPFile_17Test {",
    "method_signature": "setUser(String)",
    "suffix": "17"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_18Test.java",
    "test_prompt": "// FTPFile_18Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#getUser()} method.\n*/\nclass FTPFile_18Test {",
    "method_signature": "getUser()",
    "suffix": "18"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_19Test.java",
    "test_prompt": "// FTPFile_19Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#setLink(String)} method.\n*/\nclass FTPFile_19Test {",
    "method_signature": "setLink(String)",
    "suffix": "19"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_20Test.java",
    "test_prompt": "// FTPFile_20Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#getLink()} method.\n*/\nclass FTPFile_20Test {",
    "method_signature": "getLink()",
    "suffix": "20"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_21Test.java",
    "test_prompt": "// FTPFile_21Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#setTimestamp(Calendar)} method.\n*/\nclass FTPFile_21Test {",
    "method_signature": "setTimestamp(Calendar)",
    "suffix": "21"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_22Test.java",
    "test_prompt": "// FTPFile_22Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#getTimestamp()} method.\n*/\nclass FTPFile_22Test {",
    "method_signature": "getTimestamp()",
    "suffix": "22"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_23Test.java",
    "test_prompt": "// FTPFile_23Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#setPermission(int, int, boolean)} method.\n*/\nclass FTPFile_23Test {",
    "method_signature": "setPermission(int, int, boolean)",
    "suffix": "23"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_24Test.java",
    "test_prompt": "// FTPFile_24Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#hasPermission(int, int)} method.\n*/\nclass FTPFile_24Test {",
    "method_signature": "hasPermission(int, int)",
    "suffix": "24"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_25Test.java",
    "test_prompt": "// FTPFile_25Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#toString()} method.\n*/\nclass FTPFile_25Test {",
    "method_signature": "toString()",
    "suffix": "25"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_26Test.java",
    "test_prompt": "// FTPFile_26Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#toFormattedString()} method.\n*/\nclass FTPFile_26Test {",
    "method_signature": "toFormattedString()",
    "suffix": "26"
  },
  {
    "numberTests": "ten",
    "original_code": "// FTPFile.java\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Formatter;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n *  The FTPFile class is used to represent information about files stored\r\n *  on an FTP server.\r\n * *\r\n */\r\npublic class FTPFile implements Serializable {\r\n\r\n    private static final long serialVersionUID \u003d 9010790363003271996L;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a file.\r\n     * *\r\n     */\r\n    public static final int FILE_TYPE \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a directory.\r\n     * *\r\n     */\r\n    public static final int DIRECTORY_TYPE \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is a symbolic link.\r\n     * *\r\n     */\r\n    public static final int SYMBOLIC_LINK_TYPE \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating an FTPFile is of unknown type.\r\n     * *\r\n     */\r\n    public static final int UNKNOWN_TYPE \u003d 3;\r\n\r\n    /**\r\n     *  A constant indicating user access permissions.\r\n     * *\r\n     */\r\n    public static final int USER_ACCESS \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating group access permissions.\r\n     * *\r\n     */\r\n    public static final int GROUP_ACCESS \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating world access permissions.\r\n     * *\r\n     */\r\n    public static final int WORLD_ACCESS \u003d 2;\r\n\r\n    /**\r\n     *  A constant indicating file/directory read permission.\r\n     * *\r\n     */\r\n    public static final int READ_PERMISSION \u003d 0;\r\n\r\n    /**\r\n     *  A constant indicating file/directory write permission.\r\n     * *\r\n     */\r\n    public static final int WRITE_PERMISSION \u003d 1;\r\n\r\n    /**\r\n     *  A constant indicating file execute permission or directory listing\r\n     *  permission.\r\n     * *\r\n     */\r\n    public static final int EXECUTE_PERMISSION \u003d 2;\r\n\r\n    private int _type, _hardLinkCount;\r\n\r\n    private long _size;\r\n\r\n    private String _rawListing, _user, _group, _name, _link;\r\n\r\n    private Calendar _date;\r\n\r\n    // If this is null, then list entry parsing failed\r\n    // e.g. _permissions[USER_ACCESS][READ_PERMISSION]\r\n    private final boolean[][] _permissions;\r\n\r\n    /**\r\n     * Creates an empty FTPFile. **\r\n     */\r\n    public FTPFile() {\r\n        _permissions \u003d new boolean[3][3];\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     * Constructor used to create FTPFile entries for failed parses\r\n     *\r\n     * @param rawListing line that could not be parsed.\r\n     */\r\n    FTPFile(String rawListing) {\r\n        // flag that entry is invalid\r\n        _permissions \u003d null;\r\n        _rawListing \u003d rawListing;\r\n        _type \u003d UNKNOWN_TYPE;\r\n        // init these to values that do not occur in listings\r\n        // so can distinguish which fields are unset\r\n        // 0 is invalid as a link count\r\n        _hardLinkCount \u003d 0;\r\n        // 0 is valid, so use -1\r\n        _size \u003d -1;\r\n        _user \u003d \"\";\r\n        _group \u003d \"\";\r\n        _date \u003d null;\r\n        _name \u003d null;\r\n    }\r\n\r\n    /**\r\n     *  Set the original FTP server raw listing from which the FTPFile was\r\n     *  created.\r\n     *\r\n     *  @param rawListing  The raw FTP server listing.\r\n     * *\r\n     */\r\n    public void setRawListing(String rawListing) {\r\n        _rawListing \u003d rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Get the original FTP server raw listing used to initialize the FTPFile.\r\n     *\r\n     *  @return The original FTP server raw listing used to initialize the\r\n     *          FTPFile.\r\n     * *\r\n     */\r\n    public String getRawListing() {\r\n        return _rawListing;\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a directory.\r\n     *\r\n     *  @return True if the file is of type DIRECTORY_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isDirectory() {\r\n        return (_type \u003d\u003d DIRECTORY_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a regular file.\r\n     *\r\n     *  @return True if the file is of type FILE_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isFile() {\r\n        return (_type \u003d\u003d FILE_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the file is a symbolic link.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isSymbolicLink() {\r\n        return (_type \u003d\u003d SYMBOLIC_LINK_TYPE);\r\n    }\r\n\r\n    /**\r\n     *  Determine if the type of the file is unknown.\r\n     *\r\n     *  @return True if the file is of type UNKNOWN_TYPE, false if\r\n     *          not.\r\n     * *\r\n     */\r\n    public boolean isUnknown() {\r\n        return (_type \u003d\u003d UNKNOWN_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Used to indicate whether an entry is valid or not.\r\n     * If the entry is invalid, only the getRawListing() method will be useful.\r\n     * Other methods may fail.\r\n     *\r\n     * Used in conjunction with list parsing that preseverves entries that failed to parse.\r\n     *\r\n     * @return true if the entry is valid\r\n     */\r\n    public boolean isValid() {\r\n        return (_permissions !\u003d null);\r\n    }\r\n\r\n    /**\r\n     *  Set the type of the file (DIRECTORY_TYPE,\r\n     *  FILE_TYPE, etc.).\r\n     *\r\n     *  @param type  The integer code representing the type of the file.\r\n     * *\r\n     */\r\n    public void setType(int type) {\r\n        _type \u003d type;\r\n    }\r\n\r\n    /**\r\n     *  Return the type of the file (one of the _TYPE constants),\r\n     *  e.g., if it is a directory, a regular file, or a symbolic link.\r\n     *\r\n     *  @return The type of the file.\r\n     * *\r\n     */\r\n    public int getType() {\r\n        return _type;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the file.\r\n     *\r\n     *  @param name  The name of the file.\r\n     * *\r\n     */\r\n    public void setName(String name) {\r\n        _name \u003d name;\r\n    }\r\n\r\n    /**\r\n     *  Return the name of the file.\r\n     *\r\n     *  @return The name of the file.\r\n     * *\r\n     */\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * Set the file size in bytes.\r\n     *\r\n     * @param size The file size in bytes.\r\n     */\r\n    public void setSize(long size) {\r\n        _size \u003d size;\r\n    }\r\n\r\n    /**\r\n     *  Return the file size in bytes.\r\n     *\r\n     *  @return The file size in bytes.\r\n     * *\r\n     */\r\n    public long getSize() {\r\n        return _size;\r\n    }\r\n\r\n    /**\r\n     *  Set the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @param links  The number of hard links to this file.\r\n     * *\r\n     */\r\n    public void setHardLinkCount(int links) {\r\n        _hardLinkCount \u003d links;\r\n    }\r\n\r\n    /**\r\n     *  Return the number of hard links to this file.  This is not to be\r\n     *  confused with symbolic links.\r\n     *\r\n     *  @return The number of hard links to this file.\r\n     * *\r\n     */\r\n    public int getHardLinkCount() {\r\n        return _hardLinkCount;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the group owning the file.  This may be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @param group The name of the group owning the file.\r\n     * *\r\n     */\r\n    public void setGroup(String group) {\r\n        _group \u003d group;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the group owning the file.  Sometimes this will be\r\n     *  a string representation of the group number.\r\n     *\r\n     *  @return The name of the group owning the file.\r\n     * *\r\n     */\r\n    public String getGroup() {\r\n        return _group;\r\n    }\r\n\r\n    /**\r\n     *  Set the name of the user owning the file.  This may be\r\n     *  a string representation of the user number;\r\n     *\r\n     *  @param user The name of the user owning the file.\r\n     * *\r\n     */\r\n    public void setUser(String user) {\r\n        _user \u003d user;\r\n    }\r\n\r\n    /**\r\n     *  Returns the name of the user owning the file.  Sometimes this will be\r\n     *  a string representation of the user number.\r\n     *\r\n     *  @return The name of the user owning the file.\r\n     * *\r\n     */\r\n    public String getUser() {\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, use this method to set the name of the\r\n     *  file being pointed to by the symbolic link.\r\n     *\r\n     *  @param link  The file pointed to by the symbolic link.\r\n     * *\r\n     */\r\n    public void setLink(String link) {\r\n        _link \u003d link;\r\n    }\r\n\r\n    /**\r\n     *  If the FTPFile is a symbolic link, this method returns the name of the\r\n     *  file being pointed to by the symbolic link.  Otherwise it returns null.\r\n     *\r\n     *  @return The file pointed to by the symbolic link (null if the FTPFile\r\n     *          is not a symbolic link).\r\n     * *\r\n     */\r\n    public String getLink() {\r\n        return _link;\r\n    }\r\n\r\n    /**\r\n     *  Set the file timestamp.  This usually the last modification time.\r\n     *  The parameter is not cloned, so do not alter its value after calling\r\n     *  this method.\r\n     *\r\n     *  @param date A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public void setTimestamp(Calendar date) {\r\n        _date \u003d date;\r\n    }\r\n\r\n    /**\r\n     *  Returns the file timestamp.  This usually the last modification time.\r\n     *\r\n     *  @return A Calendar instance representing the file timestamp.\r\n     * *\r\n     */\r\n    public Calendar getTimestamp() {\r\n        return _date;\r\n    }\r\n\r\n    /**\r\n     *  Set if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @param value  True if permission is allowed, false if not.\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     * *\r\n     */\r\n    public void setPermission(int access, int permission, boolean value) {\r\n        _permissions[access][permission] \u003d value;\r\n    }\r\n\r\n    /**\r\n     *  Determines if the given access group (one of the  _ACCESS\r\n     *  constants) has the given access permission (one of the\r\n     *   _PERMISSION  constants) to the file.\r\n     *\r\n     *  @param access The access group (one of the  _ACCESS\r\n     *                constants)\r\n     *  @param permission The access permission (one of the\r\n     *                 _PERMISSION  constants)\r\n     *  @throws ArrayIndexOutOfBoundsException if either of the parameters is out of range\r\n     *  @return true if isValid() is true and the associated permission is set;\r\n     *  false otherwise.\r\n     *\r\n     *  Example of usage:\r\n     *  \u003e hasPermission(USER_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, WRITE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, READ_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(GROUP_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPErmission(GROUP_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, READ_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, WRITE_PERMISSION)\r\n     *  \"false\"\r\n     *  \u003e hasPermission(WORLD_ACCESS, EXECUTE_PERMISSION)\r\n     *  \"true\"\r\n     *  \u003e hasPermission(USER_ACCESS, 10)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     *  \u003e hasPermission(-1, WRITE_PERMISSION)\r\n     *  \"ArrayIndexOutOfBoundsException\"\r\n     * *\r\n     */\r\n    public boolean hasPermission(int access, int permission) {\r\n        if (_permissions \u003d\u003d null) {\r\n            return false;\r\n        }\r\n        return _permissions[access][permission];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        return getRawListing();\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method uses the timezone of the Calendar entry, which is\r\n     * the server time zone (if one was provided) otherwise it is\r\n     * the local time zone.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @return A string representation of the FTPFile information.\r\n     */\r\n    public String toFormattedString() {\r\n        return toFormattedString(null);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the FTPFile information.\r\n     * This currently mimics the Unix listing format.\r\n     * This method allows the Calendar time zone to be overridden.\r\n     *\r\n     * Note: if the instance is not valid, no useful\r\n     * information can be returned. In this case, use getRawListing()\r\n     * instead.\r\n     *\r\n     * @param timezone the timezone to use for displaying the time stamp\r\n     *                 If null, then use the Calendar entry timezone\r\n     * @return A string representation of the FTPFile information.\r\n     * Examples of usage:\r\n     * \u003e toFormattedString(\"GMT\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"PST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 08:30:45 PST fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 CEST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"EST\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 10:30:45 EST fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"UTC\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 UTC fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"Invalid-Timezone\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 GMT fileName\"\r\n     *\r\n     * \u003e toFormattedString(\"CET\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 16:30:45 CET fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // Without timezone override\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 15:30:45 localTZ fileName\"\r\n     *\r\n     * \u003e toFormattedString(null)  // With invalid FTPFile (isValid() is false)\r\n     * \"[Invalid: could not parse file entry]\"\r\n     *\r\n     * \u003e toFormattedString(\"Asia/Tokyo\")\r\n     * \"drwxr-xr-x   2 user     group        4096 2024-09-19 00:30:45 JST fileName\"\r\n     */\r\n    public String toFormattedString(final String timezone) {\r\n        if (!isValid()) {\r\n            return \"[Invalid: could not parse file entry]\";\r\n        }\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        Formatter fmt \u003d new Formatter(sb);\r\n        sb.append(formatType());\r\n        sb.append(permissionToString(USER_ACCESS));\r\n        sb.append(permissionToString(GROUP_ACCESS));\r\n        sb.append(permissionToString(WORLD_ACCESS));\r\n        fmt.format(\" %4d\", Integer.valueOf(getHardLinkCount()));\r\n        fmt.format(\" %-8s %-8s\", getUser(), getGroup());\r\n        fmt.format(\" %8d\", Long.valueOf(getSize()));\r\n        Calendar timestamp \u003d getTimestamp();\r\n        if (timestamp !\u003d null) {\r\n            if (timezone !\u003d null) {\r\n                TimeZone newZone \u003d TimeZone.getTimeZone(timezone);\r\n                if (!newZone.equals(timestamp.getTimeZone())) {\r\n                    Date original \u003d timestamp.getTime();\r\n                    Calendar newStamp \u003d Calendar.getInstance(newZone);\r\n                    newStamp.setTime(original);\r\n                    timestamp \u003d newStamp;\r\n                }\r\n            }\r\n            fmt.format(\" %1$tY-%1$tm-%1$td\", timestamp);\r\n            // Only display time units if they are present\r\n            if (timestamp.isSet(Calendar.HOUR_OF_DAY)) {\r\n                fmt.format(\" %1$tH\", timestamp);\r\n                if (timestamp.isSet(Calendar.MINUTE)) {\r\n                    fmt.format(\":%1$tM\", timestamp);\r\n                    if (timestamp.isSet(Calendar.SECOND)) {\r\n                        fmt.format(\":%1$tS\", timestamp);\r\n                        if (timestamp.isSet(Calendar.MILLISECOND)) {\r\n                            fmt.format(\".%1$tL\", timestamp);\r\n                        }\r\n                    }\r\n                }\r\n                fmt.format(\" %1$tZ\", timestamp);\r\n            }\r\n        }\r\n        sb.append(\u0027 \u0027);\r\n        sb.append(getName());\r\n        fmt.close();\r\n        return sb.toString();\r\n    }\r\n\r\n    private char formatType() {\r\n        switch(_type) {\r\n            case FILE_TYPE:\r\n                return \u0027-\u0027;\r\n            case DIRECTORY_TYPE:\r\n                return \u0027d\u0027;\r\n            case SYMBOLIC_LINK_TYPE:\r\n                return \u0027l\u0027;\r\n            default:\r\n                return \u0027?\u0027;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the permissions for a given access group (user, group, world) into a string.\r\n     *\r\n     * @param access The access group (one of the _ACCESS constants: USER_ACCESS, GROUP_ACCESS, WORLD_ACCESS)\r\n     * @return A string representing the permissions for the given access group in Unix format (e.g., \"rwx\", \"r--\").\r\n     *\r\n     * Examples of usage:\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"rwx\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"r--\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"---\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"rw-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"--x\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     *\r\n     * \u003e permissionToString(GROUP_ACCESS)\r\n     * \"-w-\"\r\n     *\r\n     * \u003e permissionToString(WORLD_ACCESS)\r\n     * \"-wx\"\r\n     *\r\n     * \u003e permissionToString(USER_ACCESS)\r\n     * \"r-x\"\r\n     */\r\n    private String permissionToString(int access) {\r\n        StringBuilder sb \u003d new StringBuilder();\r\n        if (hasPermission(access, READ_PERMISSION)) {\r\n            sb.append(\u0027r\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, WRITE_PERMISSION)) {\r\n            sb.append(\u0027w\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        if (hasPermission(access, EXECUTE_PERMISSION)) {\r\n            sb.append(\u0027x\u0027);\r\n        } else {\r\n            sb.append(\u0027-\u0027);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "FTPFile",
    "id": "\\FTPFileSourceCode\\original\\FTPFile_27Test.java",
    "test_prompt": "// FTPFile_27Test.java\n\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Formatter;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FTPFile}.\n* It contains ten unit test cases for the {@link FTPFile#toFormattedString(String)} method.\n*/\nclass FTPFile_27Test {",
    "method_signature": "toFormattedString(String)",
    "suffix": "27"
  }
]