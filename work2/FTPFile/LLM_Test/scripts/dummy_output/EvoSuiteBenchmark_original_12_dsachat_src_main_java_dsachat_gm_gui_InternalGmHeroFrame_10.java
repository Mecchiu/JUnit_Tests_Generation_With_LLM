// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains one unit test case for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
    /**
     * testing the model for an empty tree
     *
     * a tree is not created by the model for empty tree.
     * it should then return a empty vector
     */
    @Test
    public void testCreateEmptyTreeEmpty() {
        Vector<Hero> v = new Vector<>();
        assertNull(InternalGmHeroFrame.createEmptyTreeEmpty(v));
    }

    /**
     * testing the model for a empty tree
     *
     * a tree is not created by the model for empty tree.
     * it should then return a empty vector
     */
    @Test
	public void testCreateEmptyTree() {
        Vector<Hero> v = new Vector<>();
        assertNull(InternalGmHeroFrame.createEmptyTree(v));
    }

    /**
     * testing the model for a no child list
     *
     * a tree is not created by the model for empty tree.
     * it should then return a empty vector
     */
    @Test
	public void testCreateNoChildListEmpty() {
        Vector<Hero> v = new Vector<>();
        assertNull(InternalGmHeroFrame.createNoChildListEmpty(v));
    }

    /**
     * testing the model for a no child list
     *
     * a tree is not created by the model for empty tree.
     * it should then return a empty vector
     */
    @Test
	public void testCreateNoChildList() {
        Vector<Hero> v = new Vector<>();
        assertNull(InternalGmHeroFrame.createNoChildList(v));
    }

    /**
     * testing the model for a root
     * the parent should be the root of the tree.
     * the tree should be empty
     */
    @Test
    public void testCreateRoot() {
        Vector<Hero> v = new Vector<>();
        InternalGmHeroFrame frame =
            (InternalGmHeroFrame)InternalGmHeroFrame.createRoot(v);
        assertFalse(frame.isEmpty());
        assertEquals(frame.getFrameName(), 
            frameNameGmHeroFrame, 
            "the root's frame name doesn't match the frame name generated by this frame's constructor");
        assertFalse(frame.isRoot);
    }

    /**
     * testing the model for a root list
     * the list should be empty
     */
    @Test
    public void testCreateRootListNotEmpty() {
        Vector<Hero> v = new Vector<>();
        InternalGmHeroFrame frame =
            (InternalGmHeroFrame)InternalGmHeroFrame.createRootList(v);
        assertTrue(frame.isEmpty());
    }

    /**
     * test the tree selection change listener
     *
     * a tree should always be active
     * a list of heroes should always be active
     *
     * @throws Exception if there is a problem
     */
    @Test
    public void testChangeSelectionListenerActive() throws Exception {
        final JTree tree = new MockTree();
}
}