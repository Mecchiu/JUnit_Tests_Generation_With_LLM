ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-A80AiA6cAi3bEbxKSHJD7hEyLsL5K,\CalcolatriceSourceCode\scenario1\Calcolatrice_0Test.java,7.54721212387085,stop,"// Calcolatrice.java
public class Calcolatrice {

    public int add(int a, int b) {
        return a + b;
    }

    public int subtract(int a, int b) {
        return a - b;
    }

    public int multiply(int a, int b) {
        return a * b;
    }

    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_0Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#add(int, int)} method.
*/
class Calcolatrice_0Test {","// Calcolatrice_0Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#add(int, int)} method.
*/
class Calcolatrice_0Test {
	// Test case #1
			@Test
			void testAdd1() {
				Calcolatrice calc = new Calcolatrice();
				int result = calc.add(1, 1);
				assertEquals(2, result);
			}

			// Test case #2
			@Test
			void testAdd2() {
				Calcolatrice calc = new Calcolatrice();
				int result = calc.add(0, 0);
				assertEquals(0, result);
			}

			// Test case #3
			@Test
			void testAdd3() {
				Calcolatrice calc = new Calcolatrice();
				int result = calc.add(-1, -1);
				assertEquals(-2, result);
			}

			// Test case #4
			@Test
			void testAdd4() {
				Calcolatrice calc = new Calcolatrice();
				int result = calc.add(1, -1);
				assertEquals(0, result);
			}

			// Test case #5
			@Test
			void testAdd5() {
				Calcolatrice calc = new Calcolatrice();
				int result = calc.add(-1, 1);
				assertEquals(0, result);
			}

			// Test case #6
			@Test
			void testAdd6() {
				Calcolatrice calc = new Calcolatrice();
				int result = calc.add(0, 1);
				assertEquals(1, result);
			}

			// Test case #7
			@Test
			void testAdd7() {
				Calcolatrice calc = new Calcolatrice();
				int result = calc.add(1, 0);
				assertEquals(1, result);
			}

			// Test case #8
			@Test
			void testAdd8() {
				Calcolatrice calc = new Calcolatrice();
				int result = calc.add(0, -1);
				assertEquals(-1, result);
			}

			// Test case #9
			@Test
			void testAdd9() {
				Calcolatrice calc = new Calcolatrice();
				int result = calc.add(-1, 0);
				assertEquals(-1, result);
			}

			// Test case #10
			@Test
			void testAdd10() {
				Calcolatrice calc = new Calcolatrice();
				int result = calc.add(-1, 1);
				assertEquals(0, result);
			}
}"
cmpl-A80Bl5yujkXOtDXfcfQqUkbMFsRQQ,\CalcolatriceSourceCode\scenario1\Calcolatrice_1Test.java,6.405803442001343,stop,"// Calcolatrice.java
public class Calcolatrice {

    public int add(int a, int b) {
        return a + b;
    }

    public int subtract(int a, int b) {
        return a - b;
    }

    public int multiply(int a, int b) {
        return a * b;
    }

    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_1Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#subtract(int, int)} method.
*/
class Calcolatrice_1Test {","// Calcolatrice_1Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#subtract(int, int)} method.
*/
class Calcolatrice_1Test {
	@Test
			void testSubtractPositiveNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(5, 3);
				assertEquals(2, result);
			}

			@Test
			void testSubtractNegativeNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(-5, -3);
				assertEquals(-2, result);
			}

			@Test
			void testSubtractPositiveAndNegativeNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(5, -3);
				assertEquals(8, result);
			}

			@Test
			void testSubtractNegativeAndPositiveNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(-5, 3);
				assertEquals(-8, result);
			}

			@Test
			void testSubtractZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(5, 0);
				assertEquals(5, result);
			}

			@Test
			void testSubtractPositiveAndZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(5, 0);
				assertEquals(5, result);
			}

			@Test
			void testSubtractNegativeAndZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(-5, 0);
				assertEquals(-5, result);
			}

			@Test
			void testSubtractZeroAndPositive() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(0, 5);
				assertEquals(-5, result);
			}

			@Test
			void testSubtractZeroAndNegative() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(0, -5);
				assertEquals(5, result);
			}

			@Test
			void testSubtractMaxValue() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(Integer.MAX_VALUE, 0);
				assertEquals(Integer.MAX_VALUE, result);
			}
}"
cmpl-A80CopDyHiD5K2Y1drKBhmTn3Tw7K,\CalcolatriceSourceCode\scenario1\Calcolatrice_2Test.java,7.696409702301025,stop,"// Calcolatrice.java
public class Calcolatrice {

    public int add(int a, int b) {
        return a + b;
    }

    public int subtract(int a, int b) {
        return a - b;
    }

    public int multiply(int a, int b) {
        return a * b;
    }

    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_2Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#multiply(int, int)} method.
*/
class Calcolatrice_2Test {","// Calcolatrice_2Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#multiply(int, int)} method.
*/
class Calcolatrice_2Test {
	@Test
			void testMultiply() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(0, calcolatrice.multiply(0, 0));
			}

			@Test
			void testMultiply2() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(0, calcolatrice.multiply(0, 1));
			}

			@Test
			void testMultiply3() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(0, calcolatrice.multiply(1, 0));
			}

			@Test
			void testMultiply4() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(1, calcolatrice.multiply(1, 1));
			}

			@Test
			void testMultiply5() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(2, calcolatrice.multiply(1, 2));
			}

			@Test
			void testMultiply6() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(2, calcolatrice.multiply(2, 1));
			}

			@Test
			void testMultiply7() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(4, calcolatrice.multiply(2, 2));
			}

			@Test
			void testMultiply8() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(6, calcolatrice.multiply(2, 3));
			}

			@Test
			void testMultiply9() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(6, calcolatrice.multiply(3, 2));
			}

			@Test
			void testMultiply10() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(9, calcolatrice.multiply(3, 3));
			}
}"
cmpl-A80DroL86vivMPMPUdB6s78unIWIn,\CalcolatriceSourceCode\scenario1\Calcolatrice_3Test.java,7.024313688278198,stop,"// Calcolatrice.java
public class Calcolatrice {

    public int add(int a, int b) {
        return a + b;
    }

    public int subtract(int a, int b) {
        return a - b;
    }

    public int multiply(int a, int b) {
        return a * b;
    }

    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_3Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#divide(double, double)} method.
*/
class Calcolatrice_3Test {","// Calcolatrice_3Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#divide(double, double)} method.
*/
class Calcolatrice_3Test {
	// Test case #1
			@Test
			void testDivide1() {
				Calcolatrice calc = new Calcolatrice();
				double result = calc.divide(10, 2);
				assertEquals(5, result);
			}

			// Test case #2
			@Test
			void testDivide2() {
				Calcolatrice calc = new Calcolatrice();
				double result = calc.divide(10, 3);
				assertEquals(3.3333333333333335, result);
			}

			// Test case #3
			@Test
			void testDivide3() {
				Calcolatrice calc = new Calcolatrice();
				double result = calc.divide(10, 0);
				assertEquals(Double.POSITIVE_INFINITY, result);
			}

			// Test case #4
			@Test
			void testDivide4() {
				Calcolatrice calc = new Calcolatrice();
				double result = calc.divide(0, 10);
				assertEquals(0, result);
			}

			// Test case #5
			@Test
			void testDivide5() {
				Calcolatrice calc = new Calcolatrice();
				double result = calc.divide(0, 0);
				assertEquals(Double.NaN, result);
			}

			// Test case #6
			@Test
			void testDivide6() {
				Calcolatrice calc = new Calcolatrice();
				double result = calc.divide(-10, 2);
				assertEquals(-5, result);
			}

			// Test case #7
			@Test
			void testDivide7() {
				Calcolatrice calc = new Calcolatrice();
				double result = calc.divide(10, -2);
				assertEquals(-5, result);
			}

			// Test case #8
			@Test
			void testDivide8() {
				Calcolatrice calc = new Calcolatrice();
				double result = calc.divide(-10, -2);
				assertEquals(5, result);
			}

			// Test case #9
			@Test
			void testDivide9() {
				Calcolatrice calc = new Calcolatrice();
				double result = calc.divide(10, 2.5);
				assertEquals(4, result);
			}

			// Test case #10
			@Test
			void testDivide10() {
				Calcolatrice calc = new Calcolatrice();
				double result = calc.divide(10, 2.5);
				assertEquals(4, result);
			}
}"
cmpl-A80EukUZa5VnML9mxAoC5CsQL0oHJ,\CalcolatriceSourceCode\scenario1\Calcolatrice_4Test.java,6.5111918449401855,stop,"// Calcolatrice.java
public class Calcolatrice {

    public int add(int a, int b) {
        return a + b;
    }

    public int subtract(int a, int b) {
        return a - b;
    }

    public int multiply(int a, int b) {
        return a * b;
    }

    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_4Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#factorial(int)} method.
*/
class Calcolatrice_4Test {","// Calcolatrice_4Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#factorial(int)} method.
*/
class Calcolatrice_4Test {
	// Test case #1
			@Test
			void testFactorialOfZero() {
				Calcolatrice calc = new Calcolatrice();
				int actual = calc.factorial(0);
				assertEquals(1, actual);
			}

			// Test case #2
			@Test
			void testFactorialOfOne() {
				Calcolatrice calc = new Calcolatrice();
				int actual = calc.factorial(1);
				assertEquals(1, actual);
			}

			// Test case #3
			@Test
			void testFactorialOfTwo() {
				Calcolatrice calc = new Calcolatrice();
				int actual = calc.factorial(2);
				assertEquals(2, actual);
			}

			// Test case #4
			@Test
			void testFactorialOfThree() {
				Calcolatrice calc = new Calcolatrice();
				int actual = calc.factorial(3);
				assertEquals(6, actual);
			}

			// Test case #5
			@Test
			void testFactorialOfFour() {
				Calcolatrice calc = new Calcolatrice();
				int actual = calc.factorial(4);
				assertEquals(24, actual);
			}

			// Test case #6
			@Test
			void testFactorialOfFive() {
				Calcolatrice calc = new Calcolatrice();
				int actual = calc.factorial(5);
				assertEquals(120, actual);
			}

			// Test case #7
			@Test
			void testFactorialOfSix() {
				Calcolatrice calc = new Calcolatrice();
				int actual = calc.factorial(6);
				assertEquals(720, actual);
			}

			// Test case #8
			@Test
			void testFactorialOfSeven() {
				Calcolatrice calc = new Calcolatrice();
				int actual = calc.factorial(7);
				assertEquals(5040, actual);
			}

			// Test case #9
			@Test
			void testFactorialOfEight() {
				Calcolatrice calc = new Calcolatrice();
				int actual = calc.factorial(8);
				assertEquals(40320, actual);
			}

			// Test case #10
			@Test
			void testFactorialOfNine() {
				Calcolatrice calc = new Calcolatrice();
				int actual = calc.factorial(9);
				assertEquals(362880, actual);
			}
}"
