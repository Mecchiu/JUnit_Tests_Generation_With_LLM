ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-A80BNBTQHnEMMY5jWcB9YPfH6jGly,\CalcolatriceSourceCode\scenario2\Calcolatrice_0Test.java,5.043015718460083,stop,"// Calcolatrice.java
public class Calcolatrice {

    /**
     * Return the sum of two int input a and b.
     */
    public int add(int a, int b) {
        return a + b;
    }

    /**
     * Return the difference between the two input a and b.
     */
    public int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Return the product of two int input a and b.
     */
    public int multiply(int a, int b) {
        return a * b;
    }

    /**
     * Return the division of double input a and b.
     */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    /**
     * Return the product of all positive integers less than or equal to the input n.
     */
    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_0Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#add(int, int)} method.
*/
class Calcolatrice_0Test {","// Calcolatrice_0Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#add(int, int)} method.
*/
class Calcolatrice_0Test {
	@Test
			void testAdd() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(5, calcolatrice.add(2, 3));
			}

			@Test
			void testAddNegative() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-5, calcolatrice.add(-2, -3));
			}

			@Test
			void testAddZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(0, calcolatrice.add(0, 0));
			}

			@Test
			void testAddPositiveNegative() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-1, calcolatrice.add(2, -3));
			}

			@Test
			void testAddPositiveZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(2, calcolatrice.add(2, 0));
			}

			@Test
			void testAddNegativeZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-2, calcolatrice.add(-2, 0));
			}

			@Test
			void testAddMaxValue() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(Integer.MAX_VALUE, calcolatrice.add(Integer.MAX_VALUE, 0));
			}

			@Test
			void testAddMinValue() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(Integer.MIN_VALUE, calcolatrice.add(Integer.MIN_VALUE, 0));
			}

			@Test
			void testAddMaxValueNegative() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(Integer.MAX_VALUE - 1, calcolatrice.add(Integer.MAX_VALUE, -1));
			}

			@Test
			void testAddMinValuePositive() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(Integer.MIN_VALUE + 1, calcolatrice.add(Integer.MIN_VALUE, 1));
			}
		}"
cmpl-A80CP4wh1rVFISy7G2n2e7Jfm0777,\CalcolatriceSourceCode\scenario2\Calcolatrice_1Test.java,7.154873371124268,stop,"// Calcolatrice.java
public class Calcolatrice {

    /**
     * Return the sum of two int input a and b.
     */
    public int add(int a, int b) {
        return a + b;
    }

    /**
     * Return the difference between the two input a and b.
     */
    public int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Return the product of two int input a and b.
     */
    public int multiply(int a, int b) {
        return a * b;
    }

    /**
     * Return the division of double input a and b.
     */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    /**
     * Return the product of all positive integers less than or equal to the input n.
     */
    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_1Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#subtract(int, int)} method.
*/
class Calcolatrice_1Test {","// Calcolatrice_1Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#subtract(int, int)} method.
*/
class Calcolatrice_1Test {
	@Test
			void testSubtractPositiveNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(5, 3);
				assertEquals(2, result);
			}

			@Test
			void testSubtractNegativeNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(-5, -3);
				assertEquals(-2, result);
			}

			@Test
			void testSubtractPositiveAndNegativeNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(5, -3);
				assertEquals(8, result);
			}

			@Test
			void testSubtractNegativeAndPositiveNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(-5, 3);
				assertEquals(-8, result);
			}

			@Test
			void testSubtractZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(5, 0);
				assertEquals(5, result);
			}

			@Test
			void testSubtractPositiveAndZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(0, 3);
				assertEquals(-3, result);
			}

			@Test
			void testSubtractNegativeAndZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(0, -3);
				assertEquals(3, result);
			}

			@Test
			void testSubtractZeroAndZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(0, 0);
				assertEquals(0, result);
			}

			@Test
			void testSubtractMaxValue() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(Integer.MAX_VALUE, 0);
				assertEquals(Integer.MAX_VALUE, result);
			}

			@Test
			void testSubtractMinValue() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.subtract(Integer.MIN_VALUE, 0);
				assertEquals(Integer.MIN_VALUE, result);
			}
}"
cmpl-A80DS6Ph0TjA2FxM5VofMrG3xSJYo,\CalcolatriceSourceCode\scenario2\Calcolatrice_2Test.java,5.809596538543701,stop,"// Calcolatrice.java
public class Calcolatrice {

    /**
     * Return the sum of two int input a and b.
     */
    public int add(int a, int b) {
        return a + b;
    }

    /**
     * Return the difference between the two input a and b.
     */
    public int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Return the product of two int input a and b.
     */
    public int multiply(int a, int b) {
        return a * b;
    }

    /**
     * Return the division of double input a and b.
     */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    /**
     * Return the product of all positive integers less than or equal to the input n.
     */
    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_2Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#multiply(int, int)} method.
*/
class Calcolatrice_2Test {","// Calcolatrice_2Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#multiply(int, int)} method.
*/
class Calcolatrice_2Test {
	@Test
			void testMultiplyPositiveNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(6, calcolatrice.multiply(2, 3));
			}

			@Test
			void testMultiplyNegativeNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(6, calcolatrice.multiply(-2, -3));
			}

			@Test
			void testMultiplyPositiveAndNegativeNumbers() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-6, calcolatrice.multiply(-2, 3));
			}

			@Test
			void testMultiplyZero() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(0, calcolatrice.multiply(0, 3));
			}

			@Test
			void testMultiplyOne() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(3, calcolatrice.multiply(1, 3));
			}

			@Test
			void testMultiplyMaxInt() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(Integer.MAX_VALUE, calcolatrice.multiply(1, Integer.MAX_VALUE));
			}

			@Test
			void testMultiplyMinInt() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(Integer.MIN_VALUE, calcolatrice.multiply(1, Integer.MIN_VALUE));
			}

			@Test
			void testMultiplyMaxIntAndMinInt() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(Integer.MIN_VALUE, calcolatrice.multiply(Integer.MAX_VALUE, Integer.MIN_VALUE));
			}

			@Test
			void testMultiplyMaxIntAndOne() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(Integer.MAX_VALUE, calcolatrice.multiply(Integer.MAX_VALUE, 1));
			}

			@Test
			void testMultiplyMinIntAndOne() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(Integer.MIN_VALUE, calcolatrice.multiply(Integer.MIN_VALUE, 1));
			}
}"
cmpl-A80EVYNVFvqdOMTOXBsETesDMwNP7,\CalcolatriceSourceCode\scenario2\Calcolatrice_3Test.java,8.78440546989441,stop,"// Calcolatrice.java
public class Calcolatrice {

    /**
     * Return the sum of two int input a and b.
     */
    public int add(int a, int b) {
        return a + b;
    }

    /**
     * Return the difference between the two input a and b.
     */
    public int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Return the product of two int input a and b.
     */
    public int multiply(int a, int b) {
        return a * b;
    }

    /**
     * Return the division of double input a and b.
     */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    /**
     * Return the product of all positive integers less than or equal to the input n.
     */
    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_3Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#divide(double, double)} method.
*/
class Calcolatrice_3Test {","// Calcolatrice_3Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#divide(double, double)} method.
*/
class Calcolatrice_3Test {
	// Test case 1: 10 / 2 = 5
			@Test
			void testDivide1() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(10, 2);
				assertEquals(5, result);
			}

			// Test case 2: 0 / 10 = 0
			@Test
			void testDivide2() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(0, 10);
				assertEquals(0, result);
			}

			// Test case 3: 10 / 0 = IllegalArgumentException
			@Test
			void testDivide3() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertThrows(IllegalArgumentException.class, () -> calcolatrice.divide(10, 0));
			}

			// Test case 4: 0 / 0 = IllegalArgumentException
			@Test
			void testDivide4() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertThrows(IllegalArgumentException.class, () -> calcolatrice.divide(0, 0));
			}

			// Test case 5: -10 / 2 = -5
			@Test
			void testDivide5() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(-10, 2);
				assertEquals(-5, result);
			}

			// Test case 6: 10 / -2 = -5
			@Test
			void testDivide6() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(10, -2);
				assertEquals(-5, result);
			}

			// Test case 7: -10 / -2 = 5
			@Test
			void testDivide7() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(-10, -2);
				assertEquals(5, result);
			}

			// Test case 8: 10.5 / 2.5 = 4.2
			@Test
			void testDivide8() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(10.5, 2.5);
				assertEquals(4.2, result);
			}

			// Test case 9: 10.5 / 2 = 5.25
			@Test
			void testDivide9() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(10.5, 2);
				assertEquals(5.25, result);
			}

			// Test case 10: 10 / 2.5 = 4
			@Test
			void testDivide10() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(10, 2.5);
				assertEquals(4, result);
			}
}"
cmpl-A80FYfvR16q8wWoGHFaQL0xnjUNSe,\CalcolatriceSourceCode\scenario2\Calcolatrice_4Test.java,7.591906547546387,stop,"// Calcolatrice.java
public class Calcolatrice {

    /**
     * Return the sum of two int input a and b.
     */
    public int add(int a, int b) {
        return a + b;
    }

    /**
     * Return the difference between the two input a and b.
     */
    public int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Return the product of two int input a and b.
     */
    public int multiply(int a, int b) {
        return a * b;
    }

    /**
     * Return the division of double input a and b.
     */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    /**
     * Return the product of all positive integers less than or equal to the input n.
     */
    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_4Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#factorial(int)} method.
*/
class Calcolatrice_4Test {","// Calcolatrice_4Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#factorial(int)} method.
*/
class Calcolatrice_4Test {
	// Test case 1
			@Test
			void testFactorial1() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.factorial(0);
				assertEquals(1, result);
			}

			// Test case 2
			@Test
			void testFactorial2() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.factorial(1);
				assertEquals(1, result);
			}

			// Test case 3
			@Test
			void testFactorial3() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.factorial(2);
				assertEquals(2, result);
			}

			// Test case 4
			@Test
			void testFactorial4() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.factorial(3);
				assertEquals(6, result);
			}

			// Test case 5
			@Test
			void testFactorial5() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.factorial(4);
				assertEquals(24, result);
			}

			// Test case 6
			@Test
			void testFactorial6() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.factorial(5);
				assertEquals(120, result);
			}

			// Test case 7
			@Test
			void testFactorial7() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.factorial(6);
				assertEquals(720, result);
			}

			// Test case 8
			@Test
			void testFactorial8() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.factorial(7);
				assertEquals(5040, result);
			}

			// Test case 9
			@Test
			void testFactorial9() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.factorial(8);
				assertEquals(40320, result);
			}

			// Test case 10
			@Test
			void testFactorial10() {
				Calcolatrice calcolatrice = new Calcolatrice();
				int result = calcolatrice.factorial(9);
				assertEquals(362880, result);
			}
}"
