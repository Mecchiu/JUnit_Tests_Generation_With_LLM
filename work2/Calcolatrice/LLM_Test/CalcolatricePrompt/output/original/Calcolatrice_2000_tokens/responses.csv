ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-A804YKBmhEulLpOIW5C88OZZeukXo,\CalcolatriceSourceCode\original\Calcolatrice_0Test.java,7.399553298950195,stop,"// Calcolatrice.java
public class Calcolatrice {

    /**
     * Return the sum of two int input a and b.
     *
     * > add(1, 2)
     * ""3""
     * > add(2, 1)
     * ""3""
     * > add(20, -2)
     * ""18""
     * > add(2, -3)
     * ""-1""
     * > add(-2, 3)
     * ""1""
     * > add(-20, 2)
     * ""-18""
     * > add(-1, -2)
     * ""-3""
     * > add(-2, -1)
     * ""-3""
     * > add(1, 0)
     * ""1""
     * > add(0, 1)
     * ""1""
     * > add(0, 0)
     * ""0""
     * > add(1, -1)
     * ""0""
     */
    public int add(int a, int b) {
        return a + b;
    }

    /**
     * Return the difference between the two input a and b.
     *
     * > subtract(5, 3)
     * ""2""
     * > subtract(3, 5)
     * ""-2""
     * > subtract(3, 0)
     * ""3""
     * > subtract(0, 3)
     * ""-3""
     * > subtract(-2, 1)
     * ""-3""
     * > subtract(-1, 2)
     * ""-3""
     * > subtract(2, -1)
     * ""3""
     * > subtract(1, -2)
     * ""3""
     * > subtract(-3, -5)
     * ""2""
     * > subtract(-5, -3)
     * ""-2""
     * > subtract(5, 5)
     * ""0""
     * > subtract(0, 0)
     * ""0""
     */
    public int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Return the product of two int input a and b.
     *
     * > multiply(2, 3)
     * ""6""
     * > multiply(3, 2)
     * ""6""
     * > multiply(2, 0)
     * ""0""
     * > multiply(0, 2)
     * ""0""
     * > multiply(2, -4)
     * ""-8""
     * > multiply(4, -2)
     * ""-8""
     * > multiply(-3, 5)
     * ""-15""
     * > multiply(-5, 3)
     * ""-15""
     * > multiply(-4, -3)
     * ""12""
     * > multiply(-3, -4)
     * ""12""
     * > multiply(0, 0)
     * ""0""
     */
    public int multiply(int a, int b) {
        return a * b;
    }

    /**
     * Return the division of double input a and b.
     *
     * > divide(3, 2)
     * ""1.5""
     * > divide(2, 4)
     * ""0.5""
     * > divide(0, 1)
     * ""0""
     * > divide(1, 0)
     * ""IllegalArgumentException""
     * > divide(-1, 2)
     * ""-0.5""
     * > divide(-2, 1)
     * ""-2.0""
     * > divide(15, -3)
     * ""-5.0""
     * > divide(3, -15)
     * ""-0.2""
     * > divide(-2, -4)
     * ""0.5""
     * > divide(-4, -2)
     * ""2.0""
     * > divide(0, 0)
     * ""IllegalArgumentException""
     */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    /**
     * Return the product of all positive integers less than or equal to the input n.
     *
     * > factorial(5)
     * ""120""
     * > factorial(8)
     * ""40320""
     * > factorial(2)
     * ""2""
     * > factorial(3)
     * ""6""
     * > factorial(1)
     * ""1""
     * > factorial(0)
     * ""1""
     * > factorial(-5)
     * ""IllegalArgumentException""
     * > factorial(-1)
     * ""IllegalArgumentException""
     */
    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_0Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#add(int, int)} method.
*/
class Calcolatrice_0Test {","// Calcolatrice_0Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#add(int, int)} method.
*/
class Calcolatrice_0Test {
	@Test
			void testAdd1() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(3, calcolatrice.add(1, 2));
			}

			@Test
			void testAdd2() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(3, calcolatrice.add(2, 1));
			}

			@Test
			void testAdd3() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(18, calcolatrice.add(20, -2));
			}

			@Test
			void testAdd4() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-1, calcolatrice.add(2, -3));
			}

			@Test
			void testAdd5() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(1, calcolatrice.add(-2, 3));
			}

			@Test
			void testAdd6() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-18, calcolatrice.add(-20, 2));
			}

			@Test
			void testAdd7() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-3, calcolatrice.add(-1, -2));
			}

			@Test
			void testAdd8() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-3, calcolatrice.add(-2, -1));
			}

			@Test
			void testAdd9() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(1, calcolatrice.add(1, 0));
			}

			@Test
			void testAdd10() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(1, calcolatrice.add(0, 1));
			}

			@Test
			void testAdd11() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(0, calcolatrice.add(0, 0));
			}

			@Test
			void testAdd12() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(0, calcolatrice.add(1, -1));
			}
}"
cmpl-A805bx52MOh3k5iYHOIc8YsDeBcxr,\CalcolatriceSourceCode\original\Calcolatrice_1Test.java,6.525505542755127,stop,"// Calcolatrice.java
public class Calcolatrice {

    /**
     * Return the sum of two int input a and b.
     *
     * > add(1, 2)
     * ""3""
     * > add(2, 1)
     * ""3""
     * > add(20, -2)
     * ""18""
     * > add(2, -3)
     * ""-1""
     * > add(-2, 3)
     * ""1""
     * > add(-20, 2)
     * ""-18""
     * > add(-1, -2)
     * ""-3""
     * > add(-2, -1)
     * ""-3""
     * > add(1, 0)
     * ""1""
     * > add(0, 1)
     * ""1""
     * > add(0, 0)
     * ""0""
     * > add(1, -1)
     * ""0""
     */
    public int add(int a, int b) {
        return a + b;
    }

    /**
     * Return the difference between the two input a and b.
     *
     * > subtract(5, 3)
     * ""2""
     * > subtract(3, 5)
     * ""-2""
     * > subtract(3, 0)
     * ""3""
     * > subtract(0, 3)
     * ""-3""
     * > subtract(-2, 1)
     * ""-3""
     * > subtract(-1, 2)
     * ""-3""
     * > subtract(2, -1)
     * ""3""
     * > subtract(1, -2)
     * ""3""
     * > subtract(-3, -5)
     * ""2""
     * > subtract(-5, -3)
     * ""-2""
     * > subtract(5, 5)
     * ""0""
     * > subtract(0, 0)
     * ""0""
     */
    public int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Return the product of two int input a and b.
     *
     * > multiply(2, 3)
     * ""6""
     * > multiply(3, 2)
     * ""6""
     * > multiply(2, 0)
     * ""0""
     * > multiply(0, 2)
     * ""0""
     * > multiply(2, -4)
     * ""-8""
     * > multiply(4, -2)
     * ""-8""
     * > multiply(-3, 5)
     * ""-15""
     * > multiply(-5, 3)
     * ""-15""
     * > multiply(-4, -3)
     * ""12""
     * > multiply(-3, -4)
     * ""12""
     * > multiply(0, 0)
     * ""0""
     */
    public int multiply(int a, int b) {
        return a * b;
    }

    /**
     * Return the division of double input a and b.
     *
     * > divide(3, 2)
     * ""1.5""
     * > divide(2, 4)
     * ""0.5""
     * > divide(0, 1)
     * ""0""
     * > divide(1, 0)
     * ""IllegalArgumentException""
     * > divide(-1, 2)
     * ""-0.5""
     * > divide(-2, 1)
     * ""-2.0""
     * > divide(15, -3)
     * ""-5.0""
     * > divide(3, -15)
     * ""-0.2""
     * > divide(-2, -4)
     * ""0.5""
     * > divide(-4, -2)
     * ""2.0""
     * > divide(0, 0)
     * ""IllegalArgumentException""
     */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    /**
     * Return the product of all positive integers less than or equal to the input n.
     *
     * > factorial(5)
     * ""120""
     * > factorial(8)
     * ""40320""
     * > factorial(2)
     * ""2""
     * > factorial(3)
     * ""6""
     * > factorial(1)
     * ""1""
     * > factorial(0)
     * ""1""
     * > factorial(-5)
     * ""IllegalArgumentException""
     * > factorial(-1)
     * ""IllegalArgumentException""
     */
    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_1Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#subtract(int, int)} method.
*/
class Calcolatrice_1Test {","// Calcolatrice_1Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#subtract(int, int)} method.
*/
class Calcolatrice_1Test {
	@Test
			void testSubtract1() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(2, calcolatrice.subtract(5, 3));
			}

			@Test
			void testSubtract2() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-2, calcolatrice.subtract(3, 5));
			}

			@Test
			void testSubtract3() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(3, calcolatrice.subtract(3, 0));
			}

			@Test
			void testSubtract4() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-3, calcolatrice.subtract(0, 3));
			}

			@Test
			void testSubtract5() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-3, calcolatrice.subtract(-2, 1));
			}

			@Test
			void testSubtract6() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-3, calcolatrice.subtract(-1, 2));
			}

			@Test
			void testSubtract7() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(3, calcolatrice.subtract(2, -1));
			}

			@Test
			void testSubtract8() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(3, calcolatrice.subtract(1, -2));
			}

			@Test
			void testSubtract9() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(2, calcolatrice.subtract(-3, -5));
			}

			@Test
			void testSubtract10() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-2, calcolatrice.subtract(-5, -3));
			}
}
"
cmpl-A806eDIpCj0W7SmcNE4cd7f2J7q4H,\CalcolatriceSourceCode\original\Calcolatrice_2Test.java,6.095171928405762,stop,"// Calcolatrice.java
public class Calcolatrice {

    /**
     * Return the sum of two int input a and b.
     *
     * > add(1, 2)
     * ""3""
     * > add(2, 1)
     * ""3""
     * > add(20, -2)
     * ""18""
     * > add(2, -3)
     * ""-1""
     * > add(-2, 3)
     * ""1""
     * > add(-20, 2)
     * ""-18""
     * > add(-1, -2)
     * ""-3""
     * > add(-2, -1)
     * ""-3""
     * > add(1, 0)
     * ""1""
     * > add(0, 1)
     * ""1""
     * > add(0, 0)
     * ""0""
     * > add(1, -1)
     * ""0""
     */
    public int add(int a, int b) {
        return a + b;
    }

    /**
     * Return the difference between the two input a and b.
     *
     * > subtract(5, 3)
     * ""2""
     * > subtract(3, 5)
     * ""-2""
     * > subtract(3, 0)
     * ""3""
     * > subtract(0, 3)
     * ""-3""
     * > subtract(-2, 1)
     * ""-3""
     * > subtract(-1, 2)
     * ""-3""
     * > subtract(2, -1)
     * ""3""
     * > subtract(1, -2)
     * ""3""
     * > subtract(-3, -5)
     * ""2""
     * > subtract(-5, -3)
     * ""-2""
     * > subtract(5, 5)
     * ""0""
     * > subtract(0, 0)
     * ""0""
     */
    public int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Return the product of two int input a and b.
     *
     * > multiply(2, 3)
     * ""6""
     * > multiply(3, 2)
     * ""6""
     * > multiply(2, 0)
     * ""0""
     * > multiply(0, 2)
     * ""0""
     * > multiply(2, -4)
     * ""-8""
     * > multiply(4, -2)
     * ""-8""
     * > multiply(-3, 5)
     * ""-15""
     * > multiply(-5, 3)
     * ""-15""
     * > multiply(-4, -3)
     * ""12""
     * > multiply(-3, -4)
     * ""12""
     * > multiply(0, 0)
     * ""0""
     */
    public int multiply(int a, int b) {
        return a * b;
    }

    /**
     * Return the division of double input a and b.
     *
     * > divide(3, 2)
     * ""1.5""
     * > divide(2, 4)
     * ""0.5""
     * > divide(0, 1)
     * ""0""
     * > divide(1, 0)
     * ""IllegalArgumentException""
     * > divide(-1, 2)
     * ""-0.5""
     * > divide(-2, 1)
     * ""-2.0""
     * > divide(15, -3)
     * ""-5.0""
     * > divide(3, -15)
     * ""-0.2""
     * > divide(-2, -4)
     * ""0.5""
     * > divide(-4, -2)
     * ""2.0""
     * > divide(0, 0)
     * ""IllegalArgumentException""
     */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    /**
     * Return the product of all positive integers less than or equal to the input n.
     *
     * > factorial(5)
     * ""120""
     * > factorial(8)
     * ""40320""
     * > factorial(2)
     * ""2""
     * > factorial(3)
     * ""6""
     * > factorial(1)
     * ""1""
     * > factorial(0)
     * ""1""
     * > factorial(-5)
     * ""IllegalArgumentException""
     * > factorial(-1)
     * ""IllegalArgumentException""
     */
    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_2Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#multiply(int, int)} method.
*/
class Calcolatrice_2Test {","// Calcolatrice_2Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#multiply(int, int)} method.
*/
class Calcolatrice_2Test {
	@Test
			void testMultiply1() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(6, calcolatrice.multiply(2, 3));
			}

			@Test
			void testMultiply2() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(6, calcolatrice.multiply(3, 2));
			}

			@Test
			void testMultiply3() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(0, calcolatrice.multiply(2, 0));
			}

			@Test
			void testMultiply4() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(0, calcolatrice.multiply(0, 2));
			}

			@Test
			void testMultiply5() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-8, calcolatrice.multiply(2, -4));
			}

			@Test
			void testMultiply6() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-8, calcolatrice.multiply(4, -2));
			}

			@Test
			void testMultiply7() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-15, calcolatrice.multiply(-3, 5));
			}

			@Test
			void testMultiply8() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(-15, calcolatrice.multiply(-5, 3));
			}

			@Test
			void testMultiply9() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(12, calcolatrice.multiply(-4, -3));
			}

			@Test
			void testMultiply10() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(12, calcolatrice.multiply(-3, -4));
			}
}
"
cmpl-A807hzsq4v97Ud3lCharvGTAAa5Cv,\CalcolatriceSourceCode\original\Calcolatrice_3Test.java,6.8343095779418945,stop,"// Calcolatrice.java
public class Calcolatrice {

    /**
     * Return the sum of two int input a and b.
     *
     * > add(1, 2)
     * ""3""
     * > add(2, 1)
     * ""3""
     * > add(20, -2)
     * ""18""
     * > add(2, -3)
     * ""-1""
     * > add(-2, 3)
     * ""1""
     * > add(-20, 2)
     * ""-18""
     * > add(-1, -2)
     * ""-3""
     * > add(-2, -1)
     * ""-3""
     * > add(1, 0)
     * ""1""
     * > add(0, 1)
     * ""1""
     * > add(0, 0)
     * ""0""
     * > add(1, -1)
     * ""0""
     */
    public int add(int a, int b) {
        return a + b;
    }

    /**
     * Return the difference between the two input a and b.
     *
     * > subtract(5, 3)
     * ""2""
     * > subtract(3, 5)
     * ""-2""
     * > subtract(3, 0)
     * ""3""
     * > subtract(0, 3)
     * ""-3""
     * > subtract(-2, 1)
     * ""-3""
     * > subtract(-1, 2)
     * ""-3""
     * > subtract(2, -1)
     * ""3""
     * > subtract(1, -2)
     * ""3""
     * > subtract(-3, -5)
     * ""2""
     * > subtract(-5, -3)
     * ""-2""
     * > subtract(5, 5)
     * ""0""
     * > subtract(0, 0)
     * ""0""
     */
    public int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Return the product of two int input a and b.
     *
     * > multiply(2, 3)
     * ""6""
     * > multiply(3, 2)
     * ""6""
     * > multiply(2, 0)
     * ""0""
     * > multiply(0, 2)
     * ""0""
     * > multiply(2, -4)
     * ""-8""
     * > multiply(4, -2)
     * ""-8""
     * > multiply(-3, 5)
     * ""-15""
     * > multiply(-5, 3)
     * ""-15""
     * > multiply(-4, -3)
     * ""12""
     * > multiply(-3, -4)
     * ""12""
     * > multiply(0, 0)
     * ""0""
     */
    public int multiply(int a, int b) {
        return a * b;
    }

    /**
     * Return the division of double input a and b.
     *
     * > divide(3, 2)
     * ""1.5""
     * > divide(2, 4)
     * ""0.5""
     * > divide(0, 1)
     * ""0""
     * > divide(1, 0)
     * ""IllegalArgumentException""
     * > divide(-1, 2)
     * ""-0.5""
     * > divide(-2, 1)
     * ""-2.0""
     * > divide(15, -3)
     * ""-5.0""
     * > divide(3, -15)
     * ""-0.2""
     * > divide(-2, -4)
     * ""0.5""
     * > divide(-4, -2)
     * ""2.0""
     * > divide(0, 0)
     * ""IllegalArgumentException""
     */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    /**
     * Return the product of all positive integers less than or equal to the input n.
     *
     * > factorial(5)
     * ""120""
     * > factorial(8)
     * ""40320""
     * > factorial(2)
     * ""2""
     * > factorial(3)
     * ""6""
     * > factorial(1)
     * ""1""
     * > factorial(0)
     * ""1""
     * > factorial(-5)
     * ""IllegalArgumentException""
     * > factorial(-1)
     * ""IllegalArgumentException""
     */
    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_3Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#divide(double, double)} method.
*/
class Calcolatrice_3Test {","// Calcolatrice_3Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#divide(double, double)} method.
*/
class Calcolatrice_3Test {
	@Test
			void testDivide1() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(3, 2);
				assertEquals(1.5, result);
			}

			@Test
			void testDivide2() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(2, 4);
				assertEquals(0.5, result);
			}

			@Test
			void testDivide3() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(0, 1);
				assertEquals(0, result);
			}

			@Test
			void testDivide4() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertThrows(IllegalArgumentException.class, () -> calcolatrice.divide(1, 0));
			}

			@Test
			void testDivide5() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(-1, 2);
				assertEquals(-0.5, result);
			}

			@Test
			void testDivide6() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(-2, 1);
				assertEquals(-2.0, result);
			}

			@Test
			void testDivide7() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(15, -3);
				assertEquals(-5.0, result);
			}

			@Test
			void testDivide8() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(3, -15);
				assertEquals(-0.2, result);
			}

			@Test
			void testDivide9() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(-2, -4);
				assertEquals(0.5, result);
			}

			@Test
			void testDivide10() {
				Calcolatrice calcolatrice = new Calcolatrice();
				double result = calcolatrice.divide(-4, -2);
				assertEquals(2.0, result);
			}
}
"
cmpl-A808kxh22j72ZhwcQHqpV7RuRc9VH,\CalcolatriceSourceCode\original\Calcolatrice_4Test.java,2.3218436241149902,stop,"// Calcolatrice.java
public class Calcolatrice {

    /**
     * Return the sum of two int input a and b.
     *
     * > add(1, 2)
     * ""3""
     * > add(2, 1)
     * ""3""
     * > add(20, -2)
     * ""18""
     * > add(2, -3)
     * ""-1""
     * > add(-2, 3)
     * ""1""
     * > add(-20, 2)
     * ""-18""
     * > add(-1, -2)
     * ""-3""
     * > add(-2, -1)
     * ""-3""
     * > add(1, 0)
     * ""1""
     * > add(0, 1)
     * ""1""
     * > add(0, 0)
     * ""0""
     * > add(1, -1)
     * ""0""
     */
    public int add(int a, int b) {
        return a + b;
    }

    /**
     * Return the difference between the two input a and b.
     *
     * > subtract(5, 3)
     * ""2""
     * > subtract(3, 5)
     * ""-2""
     * > subtract(3, 0)
     * ""3""
     * > subtract(0, 3)
     * ""-3""
     * > subtract(-2, 1)
     * ""-3""
     * > subtract(-1, 2)
     * ""-3""
     * > subtract(2, -1)
     * ""3""
     * > subtract(1, -2)
     * ""3""
     * > subtract(-3, -5)
     * ""2""
     * > subtract(-5, -3)
     * ""-2""
     * > subtract(5, 5)
     * ""0""
     * > subtract(0, 0)
     * ""0""
     */
    public int subtract(int a, int b) {
        return a - b;
    }

    /**
     * Return the product of two int input a and b.
     *
     * > multiply(2, 3)
     * ""6""
     * > multiply(3, 2)
     * ""6""
     * > multiply(2, 0)
     * ""0""
     * > multiply(0, 2)
     * ""0""
     * > multiply(2, -4)
     * ""-8""
     * > multiply(4, -2)
     * ""-8""
     * > multiply(-3, 5)
     * ""-15""
     * > multiply(-5, 3)
     * ""-15""
     * > multiply(-4, -3)
     * ""12""
     * > multiply(-3, -4)
     * ""12""
     * > multiply(0, 0)
     * ""0""
     */
    public int multiply(int a, int b) {
        return a * b;
    }

    /**
     * Return the division of double input a and b.
     *
     * > divide(3, 2)
     * ""1.5""
     * > divide(2, 4)
     * ""0.5""
     * > divide(0, 1)
     * ""0""
     * > divide(1, 0)
     * ""IllegalArgumentException""
     * > divide(-1, 2)
     * ""-0.5""
     * > divide(-2, 1)
     * ""-2.0""
     * > divide(15, -3)
     * ""-5.0""
     * > divide(3, -15)
     * ""-0.2""
     * > divide(-2, -4)
     * ""0.5""
     * > divide(-4, -2)
     * ""2.0""
     * > divide(0, 0)
     * ""IllegalArgumentException""
     */
    public double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException(""Division by zero is not allowed"");
        }
        return a / b;
    }

    /**
     * Return the product of all positive integers less than or equal to the input n.
     *
     * > factorial(5)
     * ""120""
     * > factorial(8)
     * ""40320""
     * > factorial(2)
     * ""2""
     * > factorial(3)
     * ""6""
     * > factorial(1)
     * ""1""
     * > factorial(0)
     * ""1""
     * > factorial(-5)
     * ""IllegalArgumentException""
     * > factorial(-1)
     * ""IllegalArgumentException""
     */
    public int factorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Factorial is not defined for negative numbers"");
        }
        if (n == 0 || n == 1) {
            return 1;
        }
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
","// Calcolatrice_4Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#factorial(int)} method.
*/
class Calcolatrice_4Test {","// Calcolatrice_4Test.java



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Calcolatrice}.
* It contains ten unit test cases for the {@link Calcolatrice#factorial(int)} method.
*/
class Calcolatrice_4Test {
	@Test
			void testFactorial() {
				Calcolatrice calcolatrice = new Calcolatrice();
				assertEquals(120, calcolatrice.factorial(5));
				assertEquals(40320, calcolatrice.factorial(8));
				assertEquals(2, calcolatrice.factorial(2));
				assertEquals(6, calcolatrice.factorial(3));
				assertEquals(1, calcolatrice.factorial(1));
				assertEquals(1, calcolatrice.factorial(0));
				assertThrows(IllegalArgumentException.class, () -> calcolatrice.factorial(-5));
				assertThrows(IllegalArgumentException.class, () -> calcolatrice.factorial(-1));
			}
}
"
