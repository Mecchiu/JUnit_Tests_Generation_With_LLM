[
  {
    "numberTests": "ten",
    "original_code": "// Calcolatrice.java\npublic class Calcolatrice {\r\n\r\n    /**\r\n     * Return the sum of two int input a and b.\r\n     *\r\n     * \u003e add(1, 2)\r\n     * \"3\"\r\n     * \u003e add(2, 1)\r\n     * \"3\"\r\n     * \u003e add(20, -2)\r\n     * \"18\"\r\n     * \u003e add(2, -3)\r\n     * \"-1\"\r\n     * \u003e add(-2, 3)\r\n     * \"1\"\r\n     * \u003e add(-20, 2)\r\n     * \"-18\"\r\n     * \u003e add(-1, -2)\r\n     * \"-3\"\r\n     * \u003e add(-2, -1)\r\n     * \"-3\"\r\n     * \u003e add(1, 0)\r\n     * \"1\"\r\n     * \u003e add(0, 1)\r\n     * \"1\"\r\n     * \u003e add(0, 0)\r\n     * \"0\"\r\n     * \u003e add(1, -1)\r\n     * \"0\"\r\n     */\r\n    public int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * Return the difference between the two input a and b.\r\n     *\r\n     * \u003e subtract(5, 3)\r\n     * \"2\"\r\n     * \u003e subtract(3, 5)\r\n     * \"-2\"\r\n     * \u003e subtract(3, 0)\r\n     * \"3\"\r\n     * \u003e subtract(0, 3)\r\n     * \"-3\"\r\n     * \u003e subtract(-2, 1)\r\n     * \"-3\"\r\n     * \u003e subtract(-1, 2)\r\n     * \"-3\"\r\n     * \u003e subtract(2, -1)\r\n     * \"3\"\r\n     * \u003e subtract(1, -2)\r\n     * \"3\"\r\n     * \u003e subtract(-3, -5)\r\n     * \"2\"\r\n     * \u003e subtract(-5, -3)\r\n     * \"-2\"\r\n     * \u003e subtract(5, 5)\r\n     * \"0\"\r\n     * \u003e subtract(0, 0)\r\n     * \"0\"\r\n     */\r\n    public int subtract(int a, int b) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * Return the product of two int input a and b.\r\n     *\r\n     * \u003e multiply(2, 3)\r\n     * \"6\"\r\n     * \u003e multiply(3, 2)\r\n     * \"6\"\r\n     * \u003e multiply(2, 0)\r\n     * \"0\"\r\n     * \u003e multiply(0, 2)\r\n     * \"0\"\r\n     * \u003e multiply(2, -4)\r\n     * \"-8\"\r\n     * \u003e multiply(4, -2)\r\n     * \"-8\"\r\n     * \u003e multiply(-3, 5)\r\n     * \"-15\"\r\n     * \u003e multiply(-5, 3)\r\n     * \"-15\"\r\n     * \u003e multiply(-4, -3)\r\n     * \"12\"\r\n     * \u003e multiply(-3, -4)\r\n     * \"12\"\r\n     * \u003e multiply(0, 0)\r\n     * \"0\"\r\n     */\r\n    public int multiply(int a, int b) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * Return the division of double input a and b.\r\n     *\r\n     * \u003e divide(3, 2)\r\n     * \"1.5\"\r\n     * \u003e divide(2, 4)\r\n     * \"0.5\"\r\n     * \u003e divide(0, 1)\r\n     * \"0\"\r\n     * \u003e divide(1, 0)\r\n     * \"IllegalArgumentException\"\r\n     * \u003e divide(-1, 2)\r\n     * \"-0.5\"\r\n     * \u003e divide(-2, 1)\r\n     * \"-2.0\"\r\n     * \u003e divide(15, -3)\r\n     * \"-5.0\"\r\n     * \u003e divide(3, -15)\r\n     * \"-0.2\"\r\n     * \u003e divide(-2, -4)\r\n     * \"0.5\"\r\n     * \u003e divide(-4, -2)\r\n     * \"2.0\"\r\n     * \u003e divide(0, 0)\r\n     * \"IllegalArgumentException\"\r\n     */\r\n    public double divide(double a, double b) {\r\n        if (b \u003d\u003d 0) {\r\n            throw new IllegalArgumentException(\"Division by zero is not allowed\");\r\n        }\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * Return the product of all positive integers less than or equal to the input n.\r\n     *\r\n     * \u003e factorial(5)\r\n     * \"120\"\r\n     * \u003e factorial(8)\r\n     * \"40320\"\r\n     * \u003e factorial(2)\r\n     * \"2\"\r\n     * \u003e factorial(3)\r\n     * \"6\"\r\n     * \u003e factorial(1)\r\n     * \"1\"\r\n     * \u003e factorial(0)\r\n     * \"1\"\r\n     * \u003e factorial(-5)\r\n     * \"IllegalArgumentException\"\r\n     * \u003e factorial(-1)\r\n     * \"IllegalArgumentException\"\r\n     */\r\n    public int factorial(int n) {\r\n        if (n \u003c 0) {\r\n            throw new IllegalArgumentException(\"Factorial is not defined for negative numbers\");\r\n        }\r\n        if (n \u003d\u003d 0 || n \u003d\u003d 1) {\r\n            return 1;\r\n        }\r\n        int result \u003d 1;\r\n        for (int i \u003d 2; i \u003c\u003d n; i++) {\r\n            result *\u003d i;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "Calcolatrice",
    "id": "\\CalcolatriceSourceCode\\original\\Calcolatrice_0Test.java",
    "test_prompt": "// Calcolatrice_0Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Calcolatrice}.\n* It contains ten unit test cases for the {@link Calcolatrice#add(int, int)} method.\n*/\nclass Calcolatrice_0Test {",
    "method_signature": "add(int, int)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Calcolatrice.java\npublic class Calcolatrice {\r\n\r\n    /**\r\n     * Return the sum of two int input a and b.\r\n     *\r\n     * \u003e add(1, 2)\r\n     * \"3\"\r\n     * \u003e add(2, 1)\r\n     * \"3\"\r\n     * \u003e add(20, -2)\r\n     * \"18\"\r\n     * \u003e add(2, -3)\r\n     * \"-1\"\r\n     * \u003e add(-2, 3)\r\n     * \"1\"\r\n     * \u003e add(-20, 2)\r\n     * \"-18\"\r\n     * \u003e add(-1, -2)\r\n     * \"-3\"\r\n     * \u003e add(-2, -1)\r\n     * \"-3\"\r\n     * \u003e add(1, 0)\r\n     * \"1\"\r\n     * \u003e add(0, 1)\r\n     * \"1\"\r\n     * \u003e add(0, 0)\r\n     * \"0\"\r\n     * \u003e add(1, -1)\r\n     * \"0\"\r\n     */\r\n    public int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * Return the difference between the two input a and b.\r\n     *\r\n     * \u003e subtract(5, 3)\r\n     * \"2\"\r\n     * \u003e subtract(3, 5)\r\n     * \"-2\"\r\n     * \u003e subtract(3, 0)\r\n     * \"3\"\r\n     * \u003e subtract(0, 3)\r\n     * \"-3\"\r\n     * \u003e subtract(-2, 1)\r\n     * \"-3\"\r\n     * \u003e subtract(-1, 2)\r\n     * \"-3\"\r\n     * \u003e subtract(2, -1)\r\n     * \"3\"\r\n     * \u003e subtract(1, -2)\r\n     * \"3\"\r\n     * \u003e subtract(-3, -5)\r\n     * \"2\"\r\n     * \u003e subtract(-5, -3)\r\n     * \"-2\"\r\n     * \u003e subtract(5, 5)\r\n     * \"0\"\r\n     * \u003e subtract(0, 0)\r\n     * \"0\"\r\n     */\r\n    public int subtract(int a, int b) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * Return the product of two int input a and b.\r\n     *\r\n     * \u003e multiply(2, 3)\r\n     * \"6\"\r\n     * \u003e multiply(3, 2)\r\n     * \"6\"\r\n     * \u003e multiply(2, 0)\r\n     * \"0\"\r\n     * \u003e multiply(0, 2)\r\n     * \"0\"\r\n     * \u003e multiply(2, -4)\r\n     * \"-8\"\r\n     * \u003e multiply(4, -2)\r\n     * \"-8\"\r\n     * \u003e multiply(-3, 5)\r\n     * \"-15\"\r\n     * \u003e multiply(-5, 3)\r\n     * \"-15\"\r\n     * \u003e multiply(-4, -3)\r\n     * \"12\"\r\n     * \u003e multiply(-3, -4)\r\n     * \"12\"\r\n     * \u003e multiply(0, 0)\r\n     * \"0\"\r\n     */\r\n    public int multiply(int a, int b) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * Return the division of double input a and b.\r\n     *\r\n     * \u003e divide(3, 2)\r\n     * \"1.5\"\r\n     * \u003e divide(2, 4)\r\n     * \"0.5\"\r\n     * \u003e divide(0, 1)\r\n     * \"0\"\r\n     * \u003e divide(1, 0)\r\n     * \"IllegalArgumentException\"\r\n     * \u003e divide(-1, 2)\r\n     * \"-0.5\"\r\n     * \u003e divide(-2, 1)\r\n     * \"-2.0\"\r\n     * \u003e divide(15, -3)\r\n     * \"-5.0\"\r\n     * \u003e divide(3, -15)\r\n     * \"-0.2\"\r\n     * \u003e divide(-2, -4)\r\n     * \"0.5\"\r\n     * \u003e divide(-4, -2)\r\n     * \"2.0\"\r\n     * \u003e divide(0, 0)\r\n     * \"IllegalArgumentException\"\r\n     */\r\n    public double divide(double a, double b) {\r\n        if (b \u003d\u003d 0) {\r\n            throw new IllegalArgumentException(\"Division by zero is not allowed\");\r\n        }\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * Return the product of all positive integers less than or equal to the input n.\r\n     *\r\n     * \u003e factorial(5)\r\n     * \"120\"\r\n     * \u003e factorial(8)\r\n     * \"40320\"\r\n     * \u003e factorial(2)\r\n     * \"2\"\r\n     * \u003e factorial(3)\r\n     * \"6\"\r\n     * \u003e factorial(1)\r\n     * \"1\"\r\n     * \u003e factorial(0)\r\n     * \"1\"\r\n     * \u003e factorial(-5)\r\n     * \"IllegalArgumentException\"\r\n     * \u003e factorial(-1)\r\n     * \"IllegalArgumentException\"\r\n     */\r\n    public int factorial(int n) {\r\n        if (n \u003c 0) {\r\n            throw new IllegalArgumentException(\"Factorial is not defined for negative numbers\");\r\n        }\r\n        if (n \u003d\u003d 0 || n \u003d\u003d 1) {\r\n            return 1;\r\n        }\r\n        int result \u003d 1;\r\n        for (int i \u003d 2; i \u003c\u003d n; i++) {\r\n            result *\u003d i;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "Calcolatrice",
    "id": "\\CalcolatriceSourceCode\\original\\Calcolatrice_1Test.java",
    "test_prompt": "// Calcolatrice_1Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Calcolatrice}.\n* It contains ten unit test cases for the {@link Calcolatrice#subtract(int, int)} method.\n*/\nclass Calcolatrice_1Test {",
    "method_signature": "subtract(int, int)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Calcolatrice.java\npublic class Calcolatrice {\r\n\r\n    /**\r\n     * Return the sum of two int input a and b.\r\n     *\r\n     * \u003e add(1, 2)\r\n     * \"3\"\r\n     * \u003e add(2, 1)\r\n     * \"3\"\r\n     * \u003e add(20, -2)\r\n     * \"18\"\r\n     * \u003e add(2, -3)\r\n     * \"-1\"\r\n     * \u003e add(-2, 3)\r\n     * \"1\"\r\n     * \u003e add(-20, 2)\r\n     * \"-18\"\r\n     * \u003e add(-1, -2)\r\n     * \"-3\"\r\n     * \u003e add(-2, -1)\r\n     * \"-3\"\r\n     * \u003e add(1, 0)\r\n     * \"1\"\r\n     * \u003e add(0, 1)\r\n     * \"1\"\r\n     * \u003e add(0, 0)\r\n     * \"0\"\r\n     * \u003e add(1, -1)\r\n     * \"0\"\r\n     */\r\n    public int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * Return the difference between the two input a and b.\r\n     *\r\n     * \u003e subtract(5, 3)\r\n     * \"2\"\r\n     * \u003e subtract(3, 5)\r\n     * \"-2\"\r\n     * \u003e subtract(3, 0)\r\n     * \"3\"\r\n     * \u003e subtract(0, 3)\r\n     * \"-3\"\r\n     * \u003e subtract(-2, 1)\r\n     * \"-3\"\r\n     * \u003e subtract(-1, 2)\r\n     * \"-3\"\r\n     * \u003e subtract(2, -1)\r\n     * \"3\"\r\n     * \u003e subtract(1, -2)\r\n     * \"3\"\r\n     * \u003e subtract(-3, -5)\r\n     * \"2\"\r\n     * \u003e subtract(-5, -3)\r\n     * \"-2\"\r\n     * \u003e subtract(5, 5)\r\n     * \"0\"\r\n     * \u003e subtract(0, 0)\r\n     * \"0\"\r\n     */\r\n    public int subtract(int a, int b) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * Return the product of two int input a and b.\r\n     *\r\n     * \u003e multiply(2, 3)\r\n     * \"6\"\r\n     * \u003e multiply(3, 2)\r\n     * \"6\"\r\n     * \u003e multiply(2, 0)\r\n     * \"0\"\r\n     * \u003e multiply(0, 2)\r\n     * \"0\"\r\n     * \u003e multiply(2, -4)\r\n     * \"-8\"\r\n     * \u003e multiply(4, -2)\r\n     * \"-8\"\r\n     * \u003e multiply(-3, 5)\r\n     * \"-15\"\r\n     * \u003e multiply(-5, 3)\r\n     * \"-15\"\r\n     * \u003e multiply(-4, -3)\r\n     * \"12\"\r\n     * \u003e multiply(-3, -4)\r\n     * \"12\"\r\n     * \u003e multiply(0, 0)\r\n     * \"0\"\r\n     */\r\n    public int multiply(int a, int b) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * Return the division of double input a and b.\r\n     *\r\n     * \u003e divide(3, 2)\r\n     * \"1.5\"\r\n     * \u003e divide(2, 4)\r\n     * \"0.5\"\r\n     * \u003e divide(0, 1)\r\n     * \"0\"\r\n     * \u003e divide(1, 0)\r\n     * \"IllegalArgumentException\"\r\n     * \u003e divide(-1, 2)\r\n     * \"-0.5\"\r\n     * \u003e divide(-2, 1)\r\n     * \"-2.0\"\r\n     * \u003e divide(15, -3)\r\n     * \"-5.0\"\r\n     * \u003e divide(3, -15)\r\n     * \"-0.2\"\r\n     * \u003e divide(-2, -4)\r\n     * \"0.5\"\r\n     * \u003e divide(-4, -2)\r\n     * \"2.0\"\r\n     * \u003e divide(0, 0)\r\n     * \"IllegalArgumentException\"\r\n     */\r\n    public double divide(double a, double b) {\r\n        if (b \u003d\u003d 0) {\r\n            throw new IllegalArgumentException(\"Division by zero is not allowed\");\r\n        }\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * Return the product of all positive integers less than or equal to the input n.\r\n     *\r\n     * \u003e factorial(5)\r\n     * \"120\"\r\n     * \u003e factorial(8)\r\n     * \"40320\"\r\n     * \u003e factorial(2)\r\n     * \"2\"\r\n     * \u003e factorial(3)\r\n     * \"6\"\r\n     * \u003e factorial(1)\r\n     * \"1\"\r\n     * \u003e factorial(0)\r\n     * \"1\"\r\n     * \u003e factorial(-5)\r\n     * \"IllegalArgumentException\"\r\n     * \u003e factorial(-1)\r\n     * \"IllegalArgumentException\"\r\n     */\r\n    public int factorial(int n) {\r\n        if (n \u003c 0) {\r\n            throw new IllegalArgumentException(\"Factorial is not defined for negative numbers\");\r\n        }\r\n        if (n \u003d\u003d 0 || n \u003d\u003d 1) {\r\n            return 1;\r\n        }\r\n        int result \u003d 1;\r\n        for (int i \u003d 2; i \u003c\u003d n; i++) {\r\n            result *\u003d i;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "Calcolatrice",
    "id": "\\CalcolatriceSourceCode\\original\\Calcolatrice_2Test.java",
    "test_prompt": "// Calcolatrice_2Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Calcolatrice}.\n* It contains ten unit test cases for the {@link Calcolatrice#multiply(int, int)} method.\n*/\nclass Calcolatrice_2Test {",
    "method_signature": "multiply(int, int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Calcolatrice.java\npublic class Calcolatrice {\r\n\r\n    /**\r\n     * Return the sum of two int input a and b.\r\n     *\r\n     * \u003e add(1, 2)\r\n     * \"3\"\r\n     * \u003e add(2, 1)\r\n     * \"3\"\r\n     * \u003e add(20, -2)\r\n     * \"18\"\r\n     * \u003e add(2, -3)\r\n     * \"-1\"\r\n     * \u003e add(-2, 3)\r\n     * \"1\"\r\n     * \u003e add(-20, 2)\r\n     * \"-18\"\r\n     * \u003e add(-1, -2)\r\n     * \"-3\"\r\n     * \u003e add(-2, -1)\r\n     * \"-3\"\r\n     * \u003e add(1, 0)\r\n     * \"1\"\r\n     * \u003e add(0, 1)\r\n     * \"1\"\r\n     * \u003e add(0, 0)\r\n     * \"0\"\r\n     * \u003e add(1, -1)\r\n     * \"0\"\r\n     */\r\n    public int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * Return the difference between the two input a and b.\r\n     *\r\n     * \u003e subtract(5, 3)\r\n     * \"2\"\r\n     * \u003e subtract(3, 5)\r\n     * \"-2\"\r\n     * \u003e subtract(3, 0)\r\n     * \"3\"\r\n     * \u003e subtract(0, 3)\r\n     * \"-3\"\r\n     * \u003e subtract(-2, 1)\r\n     * \"-3\"\r\n     * \u003e subtract(-1, 2)\r\n     * \"-3\"\r\n     * \u003e subtract(2, -1)\r\n     * \"3\"\r\n     * \u003e subtract(1, -2)\r\n     * \"3\"\r\n     * \u003e subtract(-3, -5)\r\n     * \"2\"\r\n     * \u003e subtract(-5, -3)\r\n     * \"-2\"\r\n     * \u003e subtract(5, 5)\r\n     * \"0\"\r\n     * \u003e subtract(0, 0)\r\n     * \"0\"\r\n     */\r\n    public int subtract(int a, int b) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * Return the product of two int input a and b.\r\n     *\r\n     * \u003e multiply(2, 3)\r\n     * \"6\"\r\n     * \u003e multiply(3, 2)\r\n     * \"6\"\r\n     * \u003e multiply(2, 0)\r\n     * \"0\"\r\n     * \u003e multiply(0, 2)\r\n     * \"0\"\r\n     * \u003e multiply(2, -4)\r\n     * \"-8\"\r\n     * \u003e multiply(4, -2)\r\n     * \"-8\"\r\n     * \u003e multiply(-3, 5)\r\n     * \"-15\"\r\n     * \u003e multiply(-5, 3)\r\n     * \"-15\"\r\n     * \u003e multiply(-4, -3)\r\n     * \"12\"\r\n     * \u003e multiply(-3, -4)\r\n     * \"12\"\r\n     * \u003e multiply(0, 0)\r\n     * \"0\"\r\n     */\r\n    public int multiply(int a, int b) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * Return the division of double input a and b.\r\n     *\r\n     * \u003e divide(3, 2)\r\n     * \"1.5\"\r\n     * \u003e divide(2, 4)\r\n     * \"0.5\"\r\n     * \u003e divide(0, 1)\r\n     * \"0\"\r\n     * \u003e divide(1, 0)\r\n     * \"IllegalArgumentException\"\r\n     * \u003e divide(-1, 2)\r\n     * \"-0.5\"\r\n     * \u003e divide(-2, 1)\r\n     * \"-2.0\"\r\n     * \u003e divide(15, -3)\r\n     * \"-5.0\"\r\n     * \u003e divide(3, -15)\r\n     * \"-0.2\"\r\n     * \u003e divide(-2, -4)\r\n     * \"0.5\"\r\n     * \u003e divide(-4, -2)\r\n     * \"2.0\"\r\n     * \u003e divide(0, 0)\r\n     * \"IllegalArgumentException\"\r\n     */\r\n    public double divide(double a, double b) {\r\n        if (b \u003d\u003d 0) {\r\n            throw new IllegalArgumentException(\"Division by zero is not allowed\");\r\n        }\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * Return the product of all positive integers less than or equal to the input n.\r\n     *\r\n     * \u003e factorial(5)\r\n     * \"120\"\r\n     * \u003e factorial(8)\r\n     * \"40320\"\r\n     * \u003e factorial(2)\r\n     * \"2\"\r\n     * \u003e factorial(3)\r\n     * \"6\"\r\n     * \u003e factorial(1)\r\n     * \"1\"\r\n     * \u003e factorial(0)\r\n     * \"1\"\r\n     * \u003e factorial(-5)\r\n     * \"IllegalArgumentException\"\r\n     * \u003e factorial(-1)\r\n     * \"IllegalArgumentException\"\r\n     */\r\n    public int factorial(int n) {\r\n        if (n \u003c 0) {\r\n            throw new IllegalArgumentException(\"Factorial is not defined for negative numbers\");\r\n        }\r\n        if (n \u003d\u003d 0 || n \u003d\u003d 1) {\r\n            return 1;\r\n        }\r\n        int result \u003d 1;\r\n        for (int i \u003d 2; i \u003c\u003d n; i++) {\r\n            result *\u003d i;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "Calcolatrice",
    "id": "\\CalcolatriceSourceCode\\original\\Calcolatrice_3Test.java",
    "test_prompt": "// Calcolatrice_3Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Calcolatrice}.\n* It contains ten unit test cases for the {@link Calcolatrice#divide(double, double)} method.\n*/\nclass Calcolatrice_3Test {",
    "method_signature": "divide(double, double)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// Calcolatrice.java\npublic class Calcolatrice {\r\n\r\n    /**\r\n     * Return the sum of two int input a and b.\r\n     *\r\n     * \u003e add(1, 2)\r\n     * \"3\"\r\n     * \u003e add(2, 1)\r\n     * \"3\"\r\n     * \u003e add(20, -2)\r\n     * \"18\"\r\n     * \u003e add(2, -3)\r\n     * \"-1\"\r\n     * \u003e add(-2, 3)\r\n     * \"1\"\r\n     * \u003e add(-20, 2)\r\n     * \"-18\"\r\n     * \u003e add(-1, -2)\r\n     * \"-3\"\r\n     * \u003e add(-2, -1)\r\n     * \"-3\"\r\n     * \u003e add(1, 0)\r\n     * \"1\"\r\n     * \u003e add(0, 1)\r\n     * \"1\"\r\n     * \u003e add(0, 0)\r\n     * \"0\"\r\n     * \u003e add(1, -1)\r\n     * \"0\"\r\n     */\r\n    public int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * Return the difference between the two input a and b.\r\n     *\r\n     * \u003e subtract(5, 3)\r\n     * \"2\"\r\n     * \u003e subtract(3, 5)\r\n     * \"-2\"\r\n     * \u003e subtract(3, 0)\r\n     * \"3\"\r\n     * \u003e subtract(0, 3)\r\n     * \"-3\"\r\n     * \u003e subtract(-2, 1)\r\n     * \"-3\"\r\n     * \u003e subtract(-1, 2)\r\n     * \"-3\"\r\n     * \u003e subtract(2, -1)\r\n     * \"3\"\r\n     * \u003e subtract(1, -2)\r\n     * \"3\"\r\n     * \u003e subtract(-3, -5)\r\n     * \"2\"\r\n     * \u003e subtract(-5, -3)\r\n     * \"-2\"\r\n     * \u003e subtract(5, 5)\r\n     * \"0\"\r\n     * \u003e subtract(0, 0)\r\n     * \"0\"\r\n     */\r\n    public int subtract(int a, int b) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * Return the product of two int input a and b.\r\n     *\r\n     * \u003e multiply(2, 3)\r\n     * \"6\"\r\n     * \u003e multiply(3, 2)\r\n     * \"6\"\r\n     * \u003e multiply(2, 0)\r\n     * \"0\"\r\n     * \u003e multiply(0, 2)\r\n     * \"0\"\r\n     * \u003e multiply(2, -4)\r\n     * \"-8\"\r\n     * \u003e multiply(4, -2)\r\n     * \"-8\"\r\n     * \u003e multiply(-3, 5)\r\n     * \"-15\"\r\n     * \u003e multiply(-5, 3)\r\n     * \"-15\"\r\n     * \u003e multiply(-4, -3)\r\n     * \"12\"\r\n     * \u003e multiply(-3, -4)\r\n     * \"12\"\r\n     * \u003e multiply(0, 0)\r\n     * \"0\"\r\n     */\r\n    public int multiply(int a, int b) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * Return the division of double input a and b.\r\n     *\r\n     * \u003e divide(3, 2)\r\n     * \"1.5\"\r\n     * \u003e divide(2, 4)\r\n     * \"0.5\"\r\n     * \u003e divide(0, 1)\r\n     * \"0\"\r\n     * \u003e divide(1, 0)\r\n     * \"IllegalArgumentException\"\r\n     * \u003e divide(-1, 2)\r\n     * \"-0.5\"\r\n     * \u003e divide(-2, 1)\r\n     * \"-2.0\"\r\n     * \u003e divide(15, -3)\r\n     * \"-5.0\"\r\n     * \u003e divide(3, -15)\r\n     * \"-0.2\"\r\n     * \u003e divide(-2, -4)\r\n     * \"0.5\"\r\n     * \u003e divide(-4, -2)\r\n     * \"2.0\"\r\n     * \u003e divide(0, 0)\r\n     * \"IllegalArgumentException\"\r\n     */\r\n    public double divide(double a, double b) {\r\n        if (b \u003d\u003d 0) {\r\n            throw new IllegalArgumentException(\"Division by zero is not allowed\");\r\n        }\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * Return the product of all positive integers less than or equal to the input n.\r\n     *\r\n     * \u003e factorial(5)\r\n     * \"120\"\r\n     * \u003e factorial(8)\r\n     * \"40320\"\r\n     * \u003e factorial(2)\r\n     * \"2\"\r\n     * \u003e factorial(3)\r\n     * \"6\"\r\n     * \u003e factorial(1)\r\n     * \"1\"\r\n     * \u003e factorial(0)\r\n     * \"1\"\r\n     * \u003e factorial(-5)\r\n     * \"IllegalArgumentException\"\r\n     * \u003e factorial(-1)\r\n     * \"IllegalArgumentException\"\r\n     */\r\n    public int factorial(int n) {\r\n        if (n \u003c 0) {\r\n            throw new IllegalArgumentException(\"Factorial is not defined for negative numbers\");\r\n        }\r\n        if (n \u003d\u003d 0 || n \u003d\u003d 1) {\r\n            return 1;\r\n        }\r\n        int result \u003d 1;\r\n        for (int i \u003d 2; i \u003c\u003d n; i++) {\r\n            result *\u003d i;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n",
    "package": "",
    "classname": "Calcolatrice",
    "id": "\\CalcolatriceSourceCode\\original\\Calcolatrice_4Test.java",
    "test_prompt": "// Calcolatrice_4Test.java\n\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Calcolatrice}.\n* It contains ten unit test cases for the {@link Calcolatrice#factorial(int)} method.\n*/\nclass Calcolatrice_4Test {",
    "method_signature": "factorial(int)",
    "suffix": "4"
  }
]